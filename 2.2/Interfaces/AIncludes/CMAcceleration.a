;
;	File:		CMAcceleration.a
;
;	Contains:	ColorSync 2.0 Acceleration Component Interfaces
;
;	Version:	Technology:	ColorSync 2.0
;				Package:	Universal Interfaces 2.2 in “MPW” on ETO #20
;
;	Copyright:	© 1984-1995 by Apple Computer, Inc.
;				All rights reserved.
;
;	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter
;				stack.  Include the file and version information (from above)
;				in the problem description and send to:
;					Internet:	apple.bugs@applelink.apple.com
;					AppleLink:	APPLE.BUGS
;
;

	IF &TYPE('__CMACCELERATION__') = 'UNDEFINED' THEN
__CMACCELERATION__ SET 1


	IF &TYPE('__MEMORY__') = 'UNDEFINED' THEN
	include 'Memory.a'
	ENDIF
;		include 'Types.a'											;
;			include 'ConditionalMacros.a'							;
;		include 'MixedMode.a'										;

	IF &TYPE('__COMPONENTS__') = 'UNDEFINED' THEN
	include 'Components.a'
	ENDIF

	IF &TYPE('__CMAPPLICATION__') = 'UNDEFINED' THEN
	include 'CMApplication.a'
	ENDIF
;		include 'Quickdraw.a'										;
;			include 'QuickdrawText.a'								;
;		include 'Files.a'											;
;			include 'OSUtils.a'									;
;			include 'Finder.a'										;
;		include 'Printing.a'										;
;			include 'Errors.a'										;
;			include 'Dialogs.a'									;
;				include 'Menus.a'									;
;				include 'Controls.a'								;
;				include 'Windows.a'								;
;					include 'Events.a'								;
;				include 'TextEdit.a'								;
;		include 'CMICCProfile.a'									;

cmAccelerationInterfaceVersion	EQU		1

;–––––––––––––––––––––––––––––––––––––– Component Type
cmAccelerationComponentType		EQU		'csac'

;–––––––––––––––––––––––––––––––––––––– Required Component function selectors
cmLoadTables					EQU		0
cmCalculateData					EQU		1

;–––––––––––––––––––––––––––––––––––––– table data for acceleration component
CMAccelerationTableData RECORD	0
inputLutEntryCount		 ds.l   1		; offset: $0 (0)		; count of entries for input lut for one dimension
inputLutWordSize		 ds.l   1		; offset: $4 (4)		; count of bits of each entry ( e.g. 16 for WORD )
inputLut				 ds.l   1		; offset: $8 (8)		; handle to input lut
outputLutEntryCount		 ds.l   1		; offset: $C (12)		; count of entries for output lut for one dimension	
outputLutWordSize		 ds.l   1		; offset: $10 (16)		; count of bits of each entry ( e.g. 8 for BYTE )
outputLut				 ds.l   1		; offset: $14 (20)		; handle to output lut
colorLutInDim			 ds.l   1		; offset: $18 (24)		; input dimension  ( e.g. 3 for LAB ; 4 for CMYK )
colorLutOutDim			 ds.l   1		; offset: $1C (28)		; output dimension ( e.g. 3 for LAB ; 4 for CMYK )
colorLutGridPoints		 ds.l   1		; offset: $20 (32)		; count of gridpoints for color lut ( for one Dimension )	
colorLutWordSize		 ds.l   1		; offset: $24 (36)		; count of bits of each entry ( e.g. 8 for BYTE )
colorLut				 ds.l   1		; offset: $28 (40)		; handle to color lut
inputColorSpace			 ds.l   1		; offset: $2C (44)		; packing info for input
outputColorSpace		 ds.l   1		; offset: $30 (48)		; packing info for output
userData				 ds.l   1		; offset: $34 (52)
reserved1				 ds.l   1		; offset: $38 (56)
reserved2				 ds.l   1		; offset: $3C (60)
reserved3				 ds.l   1		; offset: $40 (64)
reserved4				 ds.l   1		; offset: $44 (68)
reserved5				 ds.l   1		; offset: $48 (72)
sizeof					 EQU *			; size:   $4C (76)
						ENDR

; typedef struct CMAccelerationTableData  CMAccelerationTableData, *CMAccelerationTableDataPtr, **CMAccelerationTableDataHdl
;–––––––––––––––––––––––––––––––––––––– calc data for acceleration component
CMAccelerationCalcData 	RECORD	0
pixelCount				 ds.l   1		; offset: $0 (0)		; count of input pixels
inputData				 ds.l   1		; offset: $4 (4)		; input array
outputData				 ds.l   1		; offset: $8 (8)		; output array
reserved1				 ds.l   1		; offset: $C (12)
reserved2				 ds.l   1		; offset: $10 (16)
sizeof					 EQU *			; size:   $14 (20)
						ENDR

; typedef struct CMAccelerationCalcData  CMAccelerationCalcData, *CMAccelerationCalcDataPtr, **CMAccelerationCalcDataHdl
;————————————————————————————————————————————————————————————————————————————————————————————————
;				A c c e l e r a t i o n   C o m p o n e n t   I n t e r f a c e s
;————————————————————————————————————————————————————————————————————————————————————————————————
;
; pascal CMError CMAccelerationLoadTables(ComponentInstance CMSession, CMAccelerationTableDataPtr tableData)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_CMAccelerationLoadTables
			dc.w 	$2F3C
			dc.w 	$0004
			dc.w 	$0000
			moveq	#0,d0
			dc.w 	$A82A
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	CMAccelerationLoadTables
	ENDIF

;
; pascal CMError CMAccelerationCalculateData(ComponentInstance CMSession, CMAccelerationCalcDataPtr calcData)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_CMAccelerationCalculateData
			dc.w 	$2F3C
			dc.w 	$0004
			dc.w 	$0001
			moveq	#0,d0
			dc.w 	$A82A
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	CMAccelerationCalculateData
	ENDIF

	ENDIF ; __CMACCELERATION__

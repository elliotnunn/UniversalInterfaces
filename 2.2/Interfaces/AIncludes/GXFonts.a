;
;	File:		GXFonts.a
;
;	Contains:	QuickDraw GX font routine interfaces.
;
;	Version:	Technology:	Quickdraw GX 1.1
;				Package:	Universal Interfaces 2.2 in “MPW” on ETO #20
;
;	Copyright:	© 1984-1995 by Apple Computer, Inc.
;				All rights reserved.
;
;	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter
;				stack.  Include the file and version information (from above)
;				in the problem description and send to:
;					Internet:	apple.bugs@applelink.apple.com
;					AppleLink:	APPLE.BUGS
;
;

	IF &TYPE('__GXFONTS__') = 'UNDEFINED' THEN
__GXFONTS__ SET 1


	IF &TYPE('__CONDITIONALMACROS__') = 'UNDEFINED' THEN
	include 'ConditionalMacros.a'
	ENDIF

	IF &TYPE('__GXMATH__') = 'UNDEFINED' THEN
	include 'GXMath.a'
	ENDIF
;		include 'Types.a'											;
;		include 'FixMath.a'										;

	IF &TYPE('__GXTYPES__') = 'UNDEFINED' THEN
	include 'GXTypes.a'
	ENDIF
;		include 'MixedMode.a'										;

	IF &TYPE('__SCALERTYPES__') = 'UNDEFINED' THEN
	include 'ScalerTypes.a'
	ENDIF
;		include 'SFNTTypes.a'										;
	fontRoutinesIncludes: SET 1
;
; gxFont GXNewFont(gxFontStorageTag storage, gxFontStorageReference reference, gxFontAttribute attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewFont
			move.w	#$201,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewFont
	ENDIF

;
; gxFontStorageTag GXGetFont(gxFont fontID, gxFontStorageReference *reference, gxFontAttribute *attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetFont
			move.w	#$202,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetFont
	ENDIF

;
; gxFont GXFindFont(gxFontStorageTag storage, gxFontStorageReference reference, gxFontAttribute *attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXFindFont
			move.w	#$203,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXFindFont
	ENDIF

;
; void GXSetFont(gxFont fontID, gxFontStorageTag storage, gxFontStorageReference reference, gxFontAttribute attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetFont
			move.w	#$204,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetFont
	ENDIF

;
; void GXDisposeFont(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeFont
			move.w	#$205,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeFont
	ENDIF

;
; void GXChangedFont(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXChangedFont
			move.w	#$206,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXChangedFont
	ENDIF

;
; gxFontFormatTag GXGetFontFormat(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetFontFormat
			move.w	#$207,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetFontFormat
	ENDIF

;
; gxFont GXGetDefaultFont(void)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetDefaultFont
			move.w	#$208,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetDefaultFont
	ENDIF

;
; gxFont GXSetDefaultFont(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetDefaultFont
			move.w	#$209,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetDefaultFont
	ENDIF

;
; long GXFindFonts(gxFont familyID, gxFontName name, gxFontPlatform platform, gxFontScript script, gxFontLanguage language, long length, const unsigned char text[], long index, long count, gxFont fonts[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXFindFonts
			move.w	#$20a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXFindFonts
	ENDIF

;
; long GXCountFontGlyphs(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCountFontGlyphs
			move.w	#$20b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCountFontGlyphs
	ENDIF

;
; long GXCountFontTables(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCountFontTables
			move.w	#$20c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCountFontTables
	ENDIF

;
; long GXGetFontTable(gxFont fontID, long index, void *tableData, gxFontTableTag *tableTag)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetFontTable
			move.w	#$20d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetFontTable
	ENDIF

;
; long GXFindFontTable(gxFont fontID, gxFontTableTag tableTag, void *tableData, long *index)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXFindFontTable
			move.w	#$20e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXFindFontTable
	ENDIF

;
; long GXGetFontTableParts(gxFont fontID, long index, long offset, long length, void *tableData, gxFontTableTag *tableTag)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetFontTableParts
			move.w	#$20f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetFontTableParts
	ENDIF

;
; long GXFindFontTableParts(gxFont fontID, gxFontTableTag tableTag, long offset, long length, void *tableData, long *index)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXFindFontTableParts
			move.w	#$210,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXFindFontTableParts
	ENDIF

;
; long GXSetFontTable(gxFont fontID, long index, gxFontTableTag tableTag, long length, const void *tableData)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetFontTable
			move.w	#$211,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetFontTable
	ENDIF

;
; long GXSetFontTableParts(gxFont fontID, long index, gxFontTableTag tableTag, long offset, long oldLength, long newLength, const void *tableData)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetFontTableParts
			move.w	#$212,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetFontTableParts
	ENDIF

;
; long GXDeleteFontTable(gxFont fontID, long index, gxFontTableTag tableTag)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDeleteFontTable
			move.w	#$213,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDeleteFontTable
	ENDIF

;
; long GXCountFontNames(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCountFontNames
			move.w	#$214,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCountFontNames
	ENDIF

;
; long GXGetFontName(gxFont fontID, long index, gxFontName *name, gxFontPlatform *platform, gxFontScript *script, gxFontLanguage *language, unsigned char text[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetFontName
			move.w	#$215,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetFontName
	ENDIF

;
; long GXFindFontName(gxFont fontID, gxFontName name, gxFontPlatform platform, gxFontScript script, gxFontLanguage language, unsigned char text[], long *index)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXFindFontName
			move.w	#$216,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXFindFontName
	ENDIF

;
; long GXSetFontName(gxFont fontID, gxFontName name, gxFontPlatform platform, gxFontScript script, gxFontLanguage language, long length, const unsigned char text[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetFontName
			move.w	#$217,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetFontName
	ENDIF

;
; long GXDeleteFontName(gxFont fontID, long index, gxFontName name, gxFontPlatform platform, gxFontScript script, gxFontLanguage language)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDeleteFontName
			move.w	#$218,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDeleteFontName
	ENDIF

;
; gxFontName GXNewFontNameID(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewFontNameID
			move.w	#$219,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewFontNameID
	ENDIF

;
; long GXCountFontEncodings(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCountFontEncodings
			move.w	#$21a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCountFontEncodings
	ENDIF

;
; gxFontPlatform GXGetFontEncoding(gxFont fontID, long index, gxFontScript *script, gxFontLanguage *language)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetFontEncoding
			move.w	#$21b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetFontEncoding
	ENDIF

;
; long GXFindFontEncoding(gxFont fontID, gxFontPlatform platform, gxFontScript script, gxFontLanguage language)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXFindFontEncoding
			move.w	#$21c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXFindFontEncoding
	ENDIF

;
; long GXApplyFontEncoding(gxFont fontID, long index, long *length, const unsigned char text[], long count, unsigned short glyphs[], char was16Bit[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXApplyFontEncoding
			move.w	#$21d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXApplyFontEncoding
	ENDIF

;
; long GXCountFontVariations(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCountFontVariations
			move.w	#$21e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCountFontVariations
	ENDIF

;
; long GXFindFontVariation(gxFont fontID, gxFontVariationTag variationTag, Fixed *minValue, Fixed *defaultValue, Fixed *maxValue, gxFontName *name)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXFindFontVariation
			move.w	#$21f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXFindFontVariation
	ENDIF

;
; gxFontVariationTag GXGetFontVariation(gxFont fontID, long index, Fixed *minValue, Fixed *defaultValue, Fixed *maxValue, gxFontName *name)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetFontVariation
			move.w	#$220,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetFontVariation
	ENDIF

;
; long GXCountFontInstances(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCountFontInstances
			move.w	#$221,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCountFontInstances
	ENDIF

;
; gxFontName GXGetFontInstance(gxFont fontID, long index, gxFontVariation variation[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetFontInstance
			move.w	#$222,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetFontInstance
	ENDIF

;
; long GXSetFontInstance(gxFont fontID, long index, gxFontName name, const gxFontVariation variation[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetFontInstance
			move.w	#$223,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetFontInstance
	ENDIF

;
; long GXDeleteFontInstance(gxFont fontID, long index, gxFontName name)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDeleteFontInstance
			move.w	#$224,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDeleteFontInstance
	ENDIF

;
; long GXCountFontDescriptors(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCountFontDescriptors
			move.w	#$225,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCountFontDescriptors
	ENDIF

;
; gxFontDescriptorTag GXGetFontDescriptor(gxFont fontID, long index, Fixed *descriptorValue)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetFontDescriptor
			move.w	#$226,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetFontDescriptor
	ENDIF

;
; long GXFindFontDescriptor(gxFont fontID, gxFontDescriptorTag descriptorTag, Fixed *descriptorValue)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXFindFontDescriptor
			move.w	#$227,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXFindFontDescriptor
	ENDIF

;
; long GXSetFontDescriptor(gxFont fontID, long index, gxFontDescriptorTag descriptorTag, Fixed descriptorValue)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetFontDescriptor
			move.w	#$228,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetFontDescriptor
	ENDIF

;
; long GXDeleteFontDescriptor(gxFont fontID, long index, gxFontDescriptorTag descriptorTag)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDeleteFontDescriptor
			move.w	#$229,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDeleteFontDescriptor
	ENDIF

;
; long GXCountFontFeatures(gxFont fontID)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCountFontFeatures
			move.w	#$22a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCountFontFeatures
	ENDIF

;
; gxFontName GXGetFontFeature(gxFont fontID, long index, gxFontFeatureFlag *flags, long *settingCount, gxFontFeatureSetting settings[], gxFontFeature *feature)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetFontFeature
			move.w	#$22b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetFontFeature
	ENDIF

;
; gxFontName GXFindFontFeature(gxFont fontID, gxFontFeature feature, gxFontFeatureFlag *flags, long *settingCount, gxFontFeatureSetting settings[], long *index)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXFindFontFeature
			move.w	#$22c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXFindFontFeature
	ENDIF

;
; long GXGetFontDefaultFeatures(gxFont fontID, gxRunFeature features[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetFontDefaultFeatures
			move.w	#$274,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetFontDefaultFeatures
	ENDIF

;
; void GXFlattenFont(gxFont source, scalerStream *stream, gxSpoolBlock *block)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXFlattenFont
			move.w	#$22d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXFlattenFont
	ENDIF

	ENDIF ; __GXFONTS__

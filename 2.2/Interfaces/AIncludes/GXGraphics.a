;
;	File:		GXGraphics.a
;
;	Contains:	QuickDraw GX graphic routine interfaces.
;
;	Version:	Technology:	Quickdraw GX 1.1
;				Package:	Universal Interfaces 2.2 in “MPW” on ETO #20
;
;	Copyright:	© 1984-1995 by Apple Computer, Inc.
;				All rights reserved.
;
;	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter
;				stack.  Include the file and version information (from above)
;				in the problem description and send to:
;					Internet:	apple.bugs@applelink.apple.com
;					AppleLink:	APPLE.BUGS
;
;

	IF &TYPE('__GXGRAPHICS__') = 'UNDEFINED' THEN
__GXGRAPHICS__ SET 1


	IF &TYPE('__CONDITIONALMACROS__') = 'UNDEFINED' THEN
	include 'ConditionalMacros.a'
	ENDIF

	IF &TYPE('__TYPES__') = 'UNDEFINED' THEN
	include 'Types.a'
	ENDIF

	IF &TYPE('__GXERRORS__') = 'UNDEFINED' THEN
	include 'GXErrors.a'
	ENDIF
;		include 'MixedMode.a'										;
;		include 'GXTypes.a'										;
;			include 'GXMath.a'										;
;				include 'FixMath.a'								;

	IF &TYPE('__GXTYPES__') = 'UNDEFINED' THEN
	include 'GXTypes.a'
	ENDIF
	graphicsRoutinesIncludes: SET 1
;
; gxGraphicsClient GXNewGraphicsClient(void *memoryStart, long memoryLength, gxClientAttribute attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewGraphicsClient
			move.w	#$59,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewGraphicsClient
	ENDIF

;
; gxGraphicsClient GXGetGraphicsClient(void)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetGraphicsClient
			move.w	#$5a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetGraphicsClient
	ENDIF

;
; void GXSetGraphicsClient(gxGraphicsClient client)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetGraphicsClient
			move.w	#$5b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetGraphicsClient
	ENDIF

;
; void GXDisposeGraphicsClient(gxGraphicsClient client)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeGraphicsClient
			move.w	#$5c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeGraphicsClient
	ENDIF

;returns the count 
;
; long GXGetGraphicsClients(long index, long count, gxGraphicsClient clients[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetGraphicsClients
			move.w	#$5e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetGraphicsClients
	ENDIF

;
; void GXEnterGraphics(void)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXEnterGraphics
			move.w	#$5f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXEnterGraphics
	ENDIF

;
; void GXExitGraphics(void)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXExitGraphics
			move.w	#$60,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXExitGraphics
	ENDIF

;
; gxGraphicsError GXGetGraphicsError(gxGraphicsError *stickyError)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetGraphicsError
			move.w	#$61,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetGraphicsError
	ENDIF

;
; gxGraphicsNotice GXGetGraphicsNotice(gxGraphicsNotice *stickyNotice)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetGraphicsNotice
			move.w	#$62,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetGraphicsNotice
	ENDIF

;
; gxGraphicsWarning GXGetGraphicsWarning(gxGraphicsWarning *stickyWarning)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetGraphicsWarning
			move.w	#$63,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetGraphicsWarning
	ENDIF

;
; void GXPostGraphicsError(gxGraphicsError error)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXPostGraphicsError
			move.w	#$64,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXPostGraphicsError
	ENDIF

;
; void GXPostGraphicsWarning(gxGraphicsWarning warning)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXPostGraphicsWarning
			move.w	#$66,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXPostGraphicsWarning
	ENDIF

;
; gxUserErrorFunction GXGetUserGraphicsError(long *reference)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetUserGraphicsError
			move.w	#$67,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetUserGraphicsError
	ENDIF

;
; gxUserNoticeFunction GXGetUserGraphicsNotice(long *reference)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetUserGraphicsNotice
			move.w	#$68,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetUserGraphicsNotice
	ENDIF

;
; gxUserWarningFunction GXGetUserGraphicsWarning(long *reference)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetUserGraphicsWarning
			move.w	#$69,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetUserGraphicsWarning
	ENDIF

;
; void GXSetUserGraphicsError(gxUserErrorFunction userFunction, long reference)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetUserGraphicsError
			move.w	#$6a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetUserGraphicsError
	ENDIF

;
; void GXSetUserGraphicsNotice(gxUserNoticeFunction userFunction, long reference)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetUserGraphicsNotice
			move.w	#$6b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetUserGraphicsNotice
	ENDIF

;
; void GXSetUserGraphicsWarning(gxUserWarningFunction userFunction, long reference)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetUserGraphicsWarning
			move.w	#$6c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetUserGraphicsWarning
	ENDIF

;
; void GXIgnoreGraphicsWarning(gxGraphicsWarning warning)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXIgnoreGraphicsWarning
			move.w	#$6f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXIgnoreGraphicsWarning
	ENDIF

;
; void GXPopGraphicsWarning(void)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXPopGraphicsWarning
			move.w	#$70,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXPopGraphicsWarning
	ENDIF

;
; gxShape GXNewShapeVector(gxShapeType aType, const Fixed vector[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewShapeVector
			move.w	#$71,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewShapeVector
	ENDIF

;
; void GXSetShapeVector(gxShape target, const Fixed vector[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeVector
			move.w	#$72,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeVector
	ENDIF

;
; gxShape GXNewBitmap(const gxBitmap *data, const gxPoint *position)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewBitmap
			move.w	#$73,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewBitmap
	ENDIF

;
; gxShape GXNewCurve(const gxCurve *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewCurve
			move.w	#$74,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewCurve
	ENDIF

;
; gxShape GXNewGlyphs(long charCount, const unsigned char text[], const gxPoint positions[], const long advance[], const gxPoint tangents[], const short styleRuns[], const gxStyle glyphStyles[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewGlyphs
			move.w	#$75,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewGlyphs
	ENDIF

;
; gxShape GXNewLine(const gxLine *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewLine
			move.w	#$76,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewLine
	ENDIF

;
; gxShape GXNewPaths(const gxPaths *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewPaths
			move.w	#$77,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewPaths
	ENDIF

;
; gxShape GXNewPicture(long count, const gxShape shapes[], const gxStyle styles[], const gxInk inks[], const gxTransform transforms[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewPicture
			move.w	#$78,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewPicture
	ENDIF

;
; gxShape GXNewPoint(const gxPoint *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewPoint
			move.w	#$79,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewPoint
	ENDIF

;
; gxShape GXNewPolygons(const gxPolygons *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewPolygons
			move.w	#$7a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewPolygons
	ENDIF

;
; gxShape GXNewRectangle(const gxRectangle *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewRectangle
			move.w	#$7b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewRectangle
	ENDIF

;
; gxShape GXNewText(long charCount, const unsigned char text[], const gxPoint *position)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewText
			move.w	#$7c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewText
	ENDIF

;
; gxBitmap *GXGetBitmap(gxShape source, gxBitmap *data, gxPoint *position)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetBitmap
			move.w	#$7d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetBitmap
	ENDIF

;
; gxCurve *GXGetCurve(gxShape source, gxCurve *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetCurve
			move.w	#$7e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetCurve
	ENDIF

; returns byte length of glyphs 
;
; long GXGetGlyphs(gxShape source, long *charCount, unsigned char text[], gxPoint positions[], long advance[], gxPoint tangents[], long *runCount, short styleRuns[], gxStyle glyphStyles[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetGlyphs
			move.w	#$7f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetGlyphs
	ENDIF

;
; gxLine *GXGetLine(gxShape source, gxLine *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetLine
			move.w	#$80,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetLine
	ENDIF

; returns byte length 
;
; long GXGetPaths(gxShape source, gxPaths *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetPaths
			move.w	#$81,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetPaths
	ENDIF

; returns count 
;
; long GXGetPicture(gxShape source, gxShape shapes[], gxStyle styles[], gxInk inks[], gxTransform transforms[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetPicture
			move.w	#$82,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetPicture
	ENDIF

;
; gxPoint *GXGetPoint(gxShape source, gxPoint *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetPoint
			move.w	#$83,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetPoint
	ENDIF

; returns byte length 
;
; long GXGetPolygons(gxShape source, gxPolygons *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetPolygons
			move.w	#$84,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetPolygons
	ENDIF

;
; gxRectangle *GXGetRectangle(gxShape source, gxRectangle *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetRectangle
			move.w	#$85,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetRectangle
	ENDIF

; returns byte length 
;
; long GXGetText(gxShape source, long *charCount, unsigned char text[], gxPoint *position)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetText
			move.w	#$86,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetText
	ENDIF

;
; void GXSetBitmap(gxShape target, const gxBitmap *data, const gxPoint *position)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetBitmap
			move.w	#$87,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetBitmap
	ENDIF

;
; void GXSetCurve(gxShape target, const gxCurve *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetCurve
			move.w	#$88,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetCurve
	ENDIF

;
; void GXSetGlyphs(gxShape target, long charCount, const unsigned char text[], const gxPoint positions[], const long advance[], const gxPoint tangents[], const short styleRuns[], const gxStyle glyphStyles[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetGlyphs
			move.w	#$89,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetGlyphs
	ENDIF

;
; void GXSetLine(gxShape target, const gxLine *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetLine
			move.w	#$8a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetLine
	ENDIF

;
; void GXSetPaths(gxShape target, const gxPaths *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetPaths
			move.w	#$8b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetPaths
	ENDIF

;
; void GXSetPicture(gxShape target, long count, const gxShape shapes[], const gxStyle styles[], const gxInk inks[], const gxTransform transforms[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetPicture
			move.w	#$8c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetPicture
	ENDIF

;
; void GXSetPoint(gxShape target, const gxPoint *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetPoint
			move.w	#$8d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetPoint
	ENDIF

;
; void GXSetPolygons(gxShape target, const gxPolygons *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetPolygons
			move.w	#$8e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetPolygons
	ENDIF

;
; void GXSetRectangle(gxShape target, const gxRectangle *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetRectangle
			move.w	#$8f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetRectangle
	ENDIF

;
; void GXSetText(gxShape target, long charCount, const unsigned char text[], const gxPoint *position)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetText
			move.w	#$90,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetText
	ENDIF

;
; void GXDrawBitmap(const gxBitmap *data, const gxPoint *position)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDrawBitmap
			move.w	#$91,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDrawBitmap
	ENDIF

;
; void GXDrawCurve(const gxCurve *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDrawCurve
			move.w	#$92,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDrawCurve
	ENDIF

;
; void GXDrawGlyphs(long charCount, const unsigned char text[], const gxPoint positions[], const long advance[], const gxPoint tangents[], const short styleRuns[], const gxStyle glyphStyles[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDrawGlyphs
			move.w	#$93,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDrawGlyphs
	ENDIF

;
; void GXDrawLine(const gxLine *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDrawLine
			move.w	#$94,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDrawLine
	ENDIF

;
; void GXDrawPaths(const gxPaths *data, gxShapeFill fill)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDrawPaths
			move.w	#$95,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDrawPaths
	ENDIF

;
; void GXDrawPicture(long count, const gxShape shapes[], const gxStyle styles[], const gxInk inks[], const gxTransform transforms[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDrawPicture
			move.w	#$96,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDrawPicture
	ENDIF

;
; void GXDrawPoint(const gxPoint *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDrawPoint
			move.w	#$97,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDrawPoint
	ENDIF

;
; void GXDrawPolygons(const gxPolygons *data, gxShapeFill fill)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDrawPolygons
			move.w	#$98,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDrawPolygons
	ENDIF

;
; void GXDrawRectangle(const gxRectangle *data, gxShapeFill fill)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDrawRectangle
			move.w	#$99,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDrawRectangle
	ENDIF

;
; void GXDrawText(long charCount, const unsigned char text[], const gxPoint *position)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDrawText
			move.w	#$9a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDrawText
	ENDIF

;
; gxColorProfile GXNewColorProfile(long size, void *colorProfileData)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewColorProfile
			move.w	#$9b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewColorProfile
	ENDIF

;
; gxColorSet GXNewColorSet(gxColorSpace space, long count, const gxSetColor colors[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewColorSet
			move.w	#$9c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewColorSet
	ENDIF

;
; gxInk GXNewInk(void)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewInk
			move.w	#$9d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewInk
	ENDIF

;
; gxShape GXNewShape(gxShapeType aType)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewShape
			move.w	#$9e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewShape
	ENDIF

;
; gxStyle GXNewStyle(void)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewStyle
			move.w	#$9f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewStyle
	ENDIF

;
; gxTag GXNewTag(long tagType, long length, const void *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewTag
			move.w	#$a0,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewTag
	ENDIF

;
; gxTransform GXNewTransform(void)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewTransform
			move.w	#$a1,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewTransform
	ENDIF

;
; gxViewDevice GXNewViewDevice(gxViewGroup group, gxShape bitmapShape)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewViewDevice
			move.w	#$a2,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewViewDevice
	ENDIF

;
; gxViewGroup GXNewViewGroup(void)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewViewGroup
			move.w	#$a3,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewViewGroup
	ENDIF

;
; gxViewPort GXNewViewPort(gxViewGroup group)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXNewViewPort
			move.w	#$a4,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXNewViewPort
	ENDIF

;
; void GXDisposeColorProfile(gxColorProfile target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeColorProfile
			move.w	#$a5,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeColorProfile
	ENDIF

;
; void GXDisposeColorSet(gxColorSet target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeColorSet
			move.w	#$a6,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeColorSet
	ENDIF

;
; void GXDisposeInk(gxInk target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeInk
			move.w	#$a7,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeInk
	ENDIF

;
; void GXDisposeShape(gxShape target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeShape
			move.w	#$a8,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeShape
	ENDIF

;
; void GXDisposeStyle(gxStyle target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeStyle
			move.w	#$a9,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeStyle
	ENDIF

;
; void GXDisposeTag(gxTag target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeTag
			move.w	#$aa,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeTag
	ENDIF

;
; void GXDisposeTransform(gxTransform target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeTransform
			move.w	#$ab,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeTransform
	ENDIF

;
; void GXDisposeViewDevice(gxViewDevice target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeViewDevice
			move.w	#$ac,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeViewDevice
	ENDIF

;
; void GXDisposeViewGroup(gxViewGroup target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeViewGroup
			move.w	#$ad,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeViewGroup
	ENDIF

;
; void GXDisposeViewPort(gxViewPort target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeViewPort
			move.w	#$ae,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeViewPort
	ENDIF

;
; gxColorProfile GXCloneColorProfile(gxColorProfile source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCloneColorProfile
			move.w	#$af,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCloneColorProfile
	ENDIF

;
; gxColorSet GXCloneColorSet(gxColorSet source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCloneColorSet
			move.w	#$b0,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCloneColorSet
	ENDIF

;
; gxInk GXCloneInk(gxInk source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCloneInk
			move.w	#$b1,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCloneInk
	ENDIF

;
; gxShape GXCloneShape(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCloneShape
			move.w	#$b2,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCloneShape
	ENDIF

;
; gxStyle GXCloneStyle(gxStyle source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCloneStyle
			move.w	#$b3,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCloneStyle
	ENDIF

;
; gxTag GXCloneTag(gxTag source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCloneTag
			move.w	#$b4,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCloneTag
	ENDIF

;
; gxTransform GXCloneTransform(gxTransform source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCloneTransform
			move.w	#$b5,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCloneTransform
	ENDIF

;
; gxColorProfile GXCopyToColorProfile(gxColorProfile target, gxColorProfile source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCopyToColorProfile
			move.w	#$b6,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCopyToColorProfile
	ENDIF

;
; gxColorSet GXCopyToColorSet(gxColorSet target, gxColorSet source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCopyToColorSet
			move.w	#$b7,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCopyToColorSet
	ENDIF

;
; gxInk GXCopyToInk(gxInk target, gxInk source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCopyToInk
			move.w	#$b8,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCopyToInk
	ENDIF

;
; gxShape GXCopyToShape(gxShape target, gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCopyToShape
			move.w	#$b9,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCopyToShape
	ENDIF

;
; gxStyle GXCopyToStyle(gxStyle target, gxStyle source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCopyToStyle
			move.w	#$ba,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCopyToStyle
	ENDIF

;
; gxTag GXCopyToTag(gxTag target, gxTag source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCopyToTag
			move.w	#$bb,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCopyToTag
	ENDIF

;
; gxTransform GXCopyToTransform(gxTransform target, gxTransform source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCopyToTransform
			move.w	#$bc,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCopyToTransform
	ENDIF

;
; gxViewDevice GXCopyToViewDevice(gxViewDevice target, gxViewDevice source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCopyToViewDevice
			move.w	#$bd,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCopyToViewDevice
	ENDIF

;
; gxViewPort GXCopyToViewPort(gxViewPort target, gxViewPort source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCopyToViewPort
			move.w	#$be,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCopyToViewPort
	ENDIF

;
; Boolean GXEqualColorProfile(gxColorProfile one, gxColorProfile two)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXEqualColorProfile
			move.w	#$bf,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXEqualColorProfile
	ENDIF

;
; Boolean GXEqualColorSet(gxColorSet one, gxColorSet two)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXEqualColorSet
			move.w	#$c0,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXEqualColorSet
	ENDIF

;
; Boolean GXEqualInk(gxInk one, gxInk two)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXEqualInk
			move.w	#$c1,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXEqualInk
	ENDIF

;
; Boolean GXEqualShape(gxShape one, gxShape two)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXEqualShape
			move.w	#$c2,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXEqualShape
	ENDIF

;
; Boolean GXEqualStyle(gxStyle one, gxStyle two)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXEqualStyle
			move.w	#$c3,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXEqualStyle
	ENDIF

;
; Boolean GXEqualTag(gxTag one, gxTag two)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXEqualTag
			move.w	#$c4,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXEqualTag
	ENDIF

;
; Boolean GXEqualTransform(gxTransform one, gxTransform two)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXEqualTransform
			move.w	#$c5,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXEqualTransform
	ENDIF

;
; Boolean GXEqualViewDevice(gxViewDevice one, gxViewDevice two)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXEqualViewDevice
			move.w	#$c6,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXEqualViewDevice
	ENDIF

;
; Boolean GXEqualViewPort(gxViewPort one, gxViewPort two)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXEqualViewPort
			move.w	#$c7,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXEqualViewPort
	ENDIF

;
; void GXResetInk(gxInk target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXResetInk
			move.w	#$c8,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXResetInk
	ENDIF

;
; void GXResetShape(gxShape target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXResetShape
			move.w	#$c9,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXResetShape
	ENDIF

;
; void GXResetStyle(gxStyle target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXResetStyle
			move.w	#$ca,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXResetStyle
	ENDIF

;
; void GXResetTransform(gxTransform target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXResetTransform
			move.w	#$cb,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXResetTransform
	ENDIF

;
; void GXLoadColorProfile(gxColorProfile target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXLoadColorProfile
			move.w	#$cc,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXLoadColorProfile
	ENDIF

;
; void GXLoadColorSet(gxColorSet target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXLoadColorSet
			move.w	#$cd,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXLoadColorSet
	ENDIF

;
; void GXLoadInk(gxInk target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXLoadInk
			move.w	#$ce,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXLoadInk
	ENDIF

;
; void GXLoadShape(gxShape target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXLoadShape
			move.w	#$cf,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXLoadShape
	ENDIF

;
; void GXLoadStyle(gxStyle target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXLoadStyle
			move.w	#$d0,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXLoadStyle
	ENDIF

;
; void GXLoadTag(gxTag target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXLoadTag
			move.w	#$d1,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXLoadTag
	ENDIF

;
; void GXLoadTransform(gxTransform target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXLoadTransform
			move.w	#$d2,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXLoadTransform
	ENDIF

;
; void GXUnloadColorProfile(gxColorProfile target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnloadColorProfile
			move.w	#$d3,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnloadColorProfile
	ENDIF

;
; void GXUnloadColorSet(gxColorSet target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnloadColorSet
			move.w	#$d4,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnloadColorSet
	ENDIF

;
; void GXUnloadInk(gxInk target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnloadInk
			move.w	#$d5,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnloadInk
	ENDIF

;
; void GXUnloadShape(gxShape target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnloadShape
			move.w	#$d6,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnloadShape
	ENDIF

;
; void GXUnloadStyle(gxStyle target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnloadStyle
			move.w	#$d7,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnloadStyle
	ENDIF

;
; void GXUnloadTag(gxTag target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnloadTag
			move.w	#$d8,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnloadTag
	ENDIF

;
; void GXUnloadTransform(gxTransform target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnloadTransform
			move.w	#$d9,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnloadTransform
	ENDIF

;
; void GXCacheShape(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCacheShape
			move.w	#$da,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCacheShape
	ENDIF

;
; gxShape GXCopyDeepToShape(gxShape target, gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCopyDeepToShape
			move.w	#$db,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCopyDeepToShape
	ENDIF

;
; void GXDrawShape(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDrawShape
			move.w	#$dc,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDrawShape
	ENDIF

;
; void GXDisposeShapeCache(gxShape target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDisposeShapeCache
			move.w	#$dd,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDisposeShapeCache
	ENDIF

;
; gxColorProfile GXGetDefaultColorProfile(void)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetDefaultColorProfile
			move.w	#$de,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetDefaultColorProfile
	ENDIF

;
; gxShape GXGetDefaultShape(gxShapeType aType)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetDefaultShape
			move.w	#$df,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetDefaultShape
	ENDIF

;
; gxColorSet GXGetDefaultColorSet(long pixelDepth)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetDefaultColorSet
			move.w	#$e0,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetDefaultColorSet
	ENDIF

;
; void GXSetDefaultShape(gxShape target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetDefaultShape
			move.w	#$e1,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetDefaultShape
	ENDIF

;
; void GXSetDefaultColorSet(gxColorSet target, long pixelDepth)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetDefaultColorSet
			move.w	#$e2,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetDefaultColorSet
	ENDIF

;
; long GXGetTag(gxTag source, long *tagType, void *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetTag
			move.w	#$e3,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetTag
	ENDIF

;
; void GXSetTag(gxTag target, long tagType, long length, const void *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetTag
			move.w	#$e4,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetTag
	ENDIF

;
; gxRectangle *GXGetShapeBounds(gxShape source, long index, gxRectangle *bounds)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeBounds
			move.w	#$e5,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeBounds
	ENDIF

;
; gxShapeFill GXGetShapeFill(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeFill
			move.w	#$e6,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeFill
	ENDIF

;
; gxInk GXGetShapeInk(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeInk
			move.w	#$e7,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeInk
	ENDIF

;
; long GXGetShapePixel(gxShape source, long x, long y, gxColor *data, long *index)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapePixel
			move.w	#$e8,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapePixel
	ENDIF

;
; gxStyle GXGetShapeStyle(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeStyle
			move.w	#$e9,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeStyle
	ENDIF

;
; gxTransform GXGetShapeTransform(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeTransform
			move.w	#$ea,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeTransform
	ENDIF

;
; gxShapeType GXGetShapeType(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeType
			move.w	#$eb,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeType
	ENDIF

;
; gxRectangle *GXGetShapeTypographicBounds(gxShape source, gxRectangle *bounds)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeTypographicBounds
			move.w	#$ec,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeTypographicBounds
	ENDIF

;
; gxShape GXGetBitmapParts(gxShape source, const gxLongRectangle *bounds)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetBitmapParts
			move.w	#$ed,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetBitmapParts
	ENDIF

;
; void GXGetStyleFontMetrics(gxStyle sourceStyle, gxPoint *before, gxPoint *after, gxPoint *caretAngle, gxPoint *caretOffset)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleFontMetrics
			move.w	#$ee,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleFontMetrics
	ENDIF

;
; void GXGetShapeFontMetrics(gxShape source, gxPoint *before, gxPoint *after, gxPoint *caretAngle, gxPoint *caretOffset)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeFontMetrics
			move.w	#$ef,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeFontMetrics
	ENDIF

;
; void GXSetShapeBounds(gxShape target, const gxRectangle *newBounds)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeBounds
			move.w	#$f0,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeBounds
	ENDIF

;
; void GXSetShapeFill(gxShape target, gxShapeFill newFill)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeFill
			move.w	#$f1,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeFill
	ENDIF

;
; void GXSetShapeInk(gxShape target, gxInk newInk)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeInk
			move.w	#$f2,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeInk
	ENDIF

;
; void GXSetShapePixel(gxShape target, long x, long y, const gxColor *newColor, long newIndex)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapePixel
			move.w	#$f3,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapePixel
	ENDIF

;
; void GXSetShapeStyle(gxShape target, gxStyle newStyle)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeStyle
			move.w	#$f4,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeStyle
	ENDIF

;
; void GXSetShapeTransform(gxShape target, gxTransform newTransform)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeTransform
			move.w	#$f5,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeTransform
	ENDIF

;
; void GXSetShapeType(gxShape target, gxShapeType newType)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeType
			move.w	#$f6,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeType
	ENDIF

;
; void GXSetBitmapParts(gxShape target, const gxLongRectangle *bounds, gxShape bitmapShape)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetBitmapParts
			move.w	#$f7,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetBitmapParts
	ENDIF

;
; void GXSetShapeGeometry(gxShape target, gxShape geometry)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeGeometry
			move.w	#$f8,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeGeometry
	ENDIF

;
; Fixed GXGetShapeCurveError(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeCurveError
			move.w	#$f9,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeCurveError
	ENDIF

;
; gxDashRecord *GXGetShapeDash(gxShape source, gxDashRecord *dash)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeDash
			move.w	#$fa,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeDash
	ENDIF

;
; gxCapRecord *GXGetShapeCap(gxShape source, gxCapRecord *cap)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeCap
			move.w	#$fb,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeCap
	ENDIF

; returns the number of layers 
;
; long GXGetShapeFace(gxShape source, gxTextFace *face)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeFace
			move.w	#$fc,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeFace
	ENDIF

;
; gxFont GXGetShapeFont(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeFont
			move.w	#$fd,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeFont
	ENDIF

;
; gxJoinRecord *GXGetShapeJoin(gxShape source, gxJoinRecord *join)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeJoin
			move.w	#$fe,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeJoin
	ENDIF

;
; Fract GXGetShapeJustification(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeJustification
			move.w	#$ff,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeJustification
	ENDIF

;
; gxPatternRecord *GXGetShapePattern(gxShape source, gxPatternRecord *pattern)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapePattern
			move.w	#$100,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapePattern
	ENDIF

;
; Fixed GXGetShapePen(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapePen
			move.w	#$101,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapePen
	ENDIF

;
; gxFontPlatform GXGetShapeEncoding(gxShape source, gxFontScript *script, gxFontLanguage *language)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeEncoding
			move.w	#$102,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeEncoding
	ENDIF

;
; Fixed GXGetShapeTextSize(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeTextSize
			move.w	#$103,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeTextSize
	ENDIF

;
; long GXGetShapeFontVariations(gxShape source, gxFontVariation variations[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeFontVariations
			move.w	#$104,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeFontVariations
	ENDIF

;
; long GXGetShapeFontVariationSuite(gxShape source, gxFontVariation variations[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeFontVariationSuite
			move.w	#$105,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeFontVariationSuite
	ENDIF

;
; Fixed GXGetStyleCurveError(gxStyle source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleCurveError
			move.w	#$106,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleCurveError
	ENDIF

;
; gxDashRecord *GXGetStyleDash(gxStyle source, gxDashRecord *dash)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleDash
			move.w	#$107,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleDash
	ENDIF

;
; gxCapRecord *GXGetStyleCap(gxStyle source, gxCapRecord *cap)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleCap
			move.w	#$108,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleCap
	ENDIF

; returns the number of layers 
;
; long GXGetStyleFace(gxStyle source, gxTextFace *face)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleFace
			move.w	#$109,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleFace
	ENDIF

;
; gxFont GXGetStyleFont(gxStyle source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleFont
			move.w	#$10a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleFont
	ENDIF

;
; gxJoinRecord *GXGetStyleJoin(gxStyle source, gxJoinRecord *join)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleJoin
			move.w	#$10b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleJoin
	ENDIF

;
; Fract GXGetStyleJustification(gxStyle source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleJustification
			move.w	#$10c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleJustification
	ENDIF

;
; gxPatternRecord *GXGetStylePattern(gxStyle source, gxPatternRecord *pattern)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStylePattern
			move.w	#$10d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStylePattern
	ENDIF

;
; Fixed GXGetStylePen(gxStyle source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStylePen
			move.w	#$10e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStylePen
	ENDIF

;
; gxFontPlatform GXGetStyleEncoding(gxStyle source, gxFontScript *script, gxFontLanguage *language)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleEncoding
			move.w	#$10f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleEncoding
	ENDIF

;
; Fixed GXGetStyleTextSize(gxStyle source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleTextSize
			move.w	#$110,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleTextSize
	ENDIF

;
; long GXGetStyleFontVariations(gxStyle source, gxFontVariation variations[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleFontVariations
			move.w	#$111,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleFontVariations
	ENDIF

;
; long GXGetStyleFontVariationSuite(gxStyle source, gxFontVariation variations[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleFontVariationSuite
			move.w	#$112,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleFontVariationSuite
	ENDIF

;
; void GXSetShapeCurveError(gxShape target, Fixed error)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeCurveError
			move.w	#$113,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeCurveError
	ENDIF

;
; void GXSetShapeDash(gxShape target, const gxDashRecord *dash)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeDash
			move.w	#$114,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeDash
	ENDIF

;
; void GXSetShapeCap(gxShape target, const gxCapRecord *cap)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeCap
			move.w	#$115,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeCap
	ENDIF

;
; void GXSetShapeFace(gxShape target, const gxTextFace *face)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeFace
			move.w	#$116,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeFace
	ENDIF

;
; void GXSetShapeFont(gxShape target, gxFont aFont)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeFont
			move.w	#$117,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeFont
	ENDIF

;
; void GXSetShapeJoin(gxShape target, const gxJoinRecord *join)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeJoin
			move.w	#$118,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeJoin
	ENDIF

;
; void GXSetShapeJustification(gxShape target, Fract justify)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeJustification
			move.w	#$119,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeJustification
	ENDIF

;
; void GXSetShapePattern(gxShape target, const gxPatternRecord *pattern)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapePattern
			move.w	#$11a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapePattern
	ENDIF

;
; void GXSetShapePen(gxShape target, Fixed pen)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapePen
			move.w	#$11b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapePen
	ENDIF

;
; void GXSetShapeEncoding(gxShape target, gxFontPlatform platform, gxFontScript script, gxFontLanguage language)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeEncoding
			move.w	#$11c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeEncoding
	ENDIF

;
; void GXSetShapeTextSize(gxShape target, Fixed size)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeTextSize
			move.w	#$11d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeTextSize
	ENDIF

;
; void GXSetShapeFontVariations(gxShape target, long count, const gxFontVariation variations[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeFontVariations
			move.w	#$11e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeFontVariations
	ENDIF

;
; void GXSetStyleCurveError(gxStyle target, Fixed error)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleCurveError
			move.w	#$11f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleCurveError
	ENDIF

;
; void GXSetStyleDash(gxStyle target, const gxDashRecord *dash)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleDash
			move.w	#$120,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleDash
	ENDIF

;
; void GXSetStyleCap(gxStyle target, const gxCapRecord *cap)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleCap
			move.w	#$121,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleCap
	ENDIF

;
; void GXSetStyleFace(gxStyle target, const gxTextFace *face)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleFace
			move.w	#$122,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleFace
	ENDIF

;
; void GXSetStyleFont(gxStyle target, gxFont aFont)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleFont
			move.w	#$123,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleFont
	ENDIF

;
; void GXSetStyleJoin(gxStyle target, const gxJoinRecord *join)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleJoin
			move.w	#$124,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleJoin
	ENDIF

;
; void GXSetStyleJustification(gxStyle target, Fract justify)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleJustification
			move.w	#$125,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleJustification
	ENDIF

;
; void GXSetStylePattern(gxStyle target, const gxPatternRecord *pattern)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStylePattern
			move.w	#$126,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStylePattern
	ENDIF

;
; void GXSetStylePen(gxStyle target, Fixed pen)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStylePen
			move.w	#$127,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStylePen
	ENDIF

;
; void GXSetStyleEncoding(gxStyle target, gxFontPlatform platform, gxFontScript script, gxFontLanguage language)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleEncoding
			move.w	#$128,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleEncoding
	ENDIF

;
; void GXSetStyleTextSize(gxStyle target, Fixed size)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleTextSize
			move.w	#$129,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleTextSize
	ENDIF

;
; void GXSetStyleFontVariations(gxStyle target, long count, const gxFontVariation variations[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleFontVariations
			move.w	#$12a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleFontVariations
	ENDIF

;
; gxColor *GXGetShapeColor(gxShape source, gxColor *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeColor
			move.w	#$12b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeColor
	ENDIF

;
; gxTransferMode *GXGetShapeTransfer(gxShape source, gxTransferMode *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeTransfer
			move.w	#$12c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeTransfer
	ENDIF

;
; gxColor *GXGetInkColor(gxInk source, gxColor *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetInkColor
			move.w	#$12d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetInkColor
	ENDIF

;
; gxTransferMode *GXGetInkTransfer(gxInk source, gxTransferMode *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetInkTransfer
			move.w	#$12e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetInkTransfer
	ENDIF

;
; void GXSetShapeColor(gxShape target, const gxColor *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeColor
			move.w	#$12f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeColor
	ENDIF

;
; void GXSetShapeTransfer(gxShape target, const gxTransferMode *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeTransfer
			move.w	#$130,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeTransfer
	ENDIF

;
; void GXSetInkColor(gxInk target, const gxColor *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetInkColor
			move.w	#$131,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetInkColor
	ENDIF

;
; void GXSetInkTransfer(gxInk target, const gxTransferMode *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetInkTransfer
			move.w	#$132,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetInkTransfer
	ENDIF

;
; gxShape GXGetShapeClip(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeClip
			move.w	#$133,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeClip
	ENDIF

;
; gxShapeType GXGetShapeClipType(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeClipType
			move.w	#$276,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeClipType
	ENDIF

;
; gxMapping *GXGetShapeMapping(gxShape source, gxMapping *map)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeMapping
			move.w	#$134,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeMapping
	ENDIF

;
; gxShapePart GXGetShapeHitTest(gxShape source, Fixed *tolerance)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeHitTest
			move.w	#$135,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeHitTest
	ENDIF

;
; long GXGetShapeViewPorts(gxShape source, gxViewPort list[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeViewPorts
			move.w	#$136,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeViewPorts
	ENDIF

;
; gxShape GXGetTransformClip(gxTransform source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetTransformClip
			move.w	#$137,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetTransformClip
	ENDIF

;
; gxShapeType GXGetTransformClipType(gxTransform source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetTransformClipType
			move.w	#$277,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetTransformClipType
	ENDIF

;
; gxMapping *GXGetTransformMapping(gxTransform source, gxMapping *map)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetTransformMapping
			move.w	#$138,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetTransformMapping
	ENDIF

;
; gxShapePart GXGetTransformHitTest(gxTransform source, Fixed *tolerance)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetTransformHitTest
			move.w	#$139,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetTransformHitTest
	ENDIF

;
; long GXGetTransformViewPorts(gxTransform source, gxViewPort list[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetTransformViewPorts
			move.w	#$13a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetTransformViewPorts
	ENDIF

;
; void GXSetShapeClip(gxShape target, gxShape clip)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeClip
			move.w	#$13b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeClip
	ENDIF

;
; void GXSetShapeMapping(gxShape target, const gxMapping *map)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeMapping
			move.w	#$13c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeMapping
	ENDIF

;
; void GXSetShapeHitTest(gxShape target, gxShapePart mask, Fixed tolerance)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeHitTest
			move.w	#$13d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeHitTest
	ENDIF

;
; void GXSetShapeViewPorts(gxShape target, long count, const gxViewPort list[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeViewPorts
			move.w	#$13e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeViewPorts
	ENDIF

;
; void GXSetTransformClip(gxTransform target, gxShape clip)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetTransformClip
			move.w	#$13f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetTransformClip
	ENDIF

;
; void GXSetTransformMapping(gxTransform target, const gxMapping *map)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetTransformMapping
			move.w	#$140,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetTransformMapping
	ENDIF

;
; void GXSetTransformHitTest(gxTransform target, gxShapePart mask, Fixed tolerance)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetTransformHitTest
			move.w	#$141,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetTransformHitTest
	ENDIF

;
; void GXSetTransformViewPorts(gxTransform target, long count, const gxViewPort list[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetTransformViewPorts
			move.w	#$142,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetTransformViewPorts
	ENDIF

;
; long GXGetColorSet(gxColorSet source, gxColorSpace *space, gxSetColor colors[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetColorSet
			move.w	#$143,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetColorSet
	ENDIF

;
; long GXGetColorProfile(gxColorProfile source, void *colorProfileData)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetColorProfile
			move.w	#$144,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetColorProfile
	ENDIF

;
; void GXSetColorSet(gxColorSet target, gxColorSpace space, long count, const gxSetColor colors[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetColorSet
			move.w	#$145,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetColorSet
	ENDIF

;
; void GXSetColorProfile(gxColorProfile target, long size, void *colorProfileData)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetColorProfile
			move.w	#$146,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetColorProfile
	ENDIF

;
; gxShape GXGetViewDeviceBitmap(gxViewDevice source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewDeviceBitmap
			move.w	#$147,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewDeviceBitmap
	ENDIF

;
; gxShape GXGetViewDeviceClip(gxViewDevice source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewDeviceClip
			move.w	#$148,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewDeviceClip
	ENDIF

;
; gxMapping *GXGetViewDeviceMapping(gxViewDevice source, gxMapping *map)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewDeviceMapping
			move.w	#$149,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewDeviceMapping
	ENDIF

;
; gxViewGroup GXGetViewDeviceViewGroup(gxViewDevice source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewDeviceViewGroup
			move.w	#$14a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewDeviceViewGroup
	ENDIF

;
; void GXSetViewDeviceBitmap(gxViewDevice target, gxShape bitmapShape)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewDeviceBitmap
			move.w	#$14b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewDeviceBitmap
	ENDIF

;
; void GXSetViewDeviceClip(gxViewDevice target, gxShape clip)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewDeviceClip
			move.w	#$14c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewDeviceClip
	ENDIF

;
; void GXSetViewDeviceMapping(gxViewDevice target, const gxMapping *map)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewDeviceMapping
			move.w	#$14d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewDeviceMapping
	ENDIF

;
; void GXSetViewDeviceViewGroup(gxViewDevice target, gxViewGroup group)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewDeviceViewGroup
			move.w	#$14e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewDeviceViewGroup
	ENDIF

;
; long GXGetViewPortChildren(gxViewPort source, gxViewPort list[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewPortChildren
			move.w	#$14f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewPortChildren
	ENDIF

;
; gxShape GXGetViewPortClip(gxViewPort source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewPortClip
			move.w	#$150,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewPortClip
	ENDIF

;
; long GXGetViewPortDither(gxViewPort source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewPortDither
			move.w	#$151,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewPortDither
	ENDIF

;
; Boolean GXGetViewPortHalftone(gxViewPort source, gxHalftone *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewPortHalftone
			move.w	#$152,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewPortHalftone
	ENDIF

;
; gxMapping *GXGetViewPortMapping(gxViewPort source, gxMapping *map)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewPortMapping
			move.w	#$153,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewPortMapping
	ENDIF

;
; gxViewPort GXGetViewPortParent(gxViewPort source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewPortParent
			move.w	#$154,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewPortParent
	ENDIF

;
; gxViewGroup GXGetViewPortViewGroup(gxViewPort source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewPortViewGroup
			move.w	#$155,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewPortViewGroup
	ENDIF

;
; long GXGetViewPortHalftoneMatrix(gxViewPort source, gxViewDevice sourceDevice, gxHalftoneMatrix *theMatrix)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewPortHalftoneMatrix
			move.w	#$273,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewPortHalftoneMatrix
	ENDIF

;
; void GXSetViewPortChildren(gxViewPort target, long count, const gxViewPort list[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewPortChildren
			move.w	#$156,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewPortChildren
	ENDIF

;
; void GXSetViewPortClip(gxViewPort target, gxShape clip)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewPortClip
			move.w	#$157,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewPortClip
	ENDIF

;
; void GXSetViewPortDither(gxViewPort target, long level)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewPortDither
			move.w	#$158,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewPortDither
	ENDIF

;
; void GXSetViewPortHalftone(gxViewPort target, const gxHalftone *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewPortHalftone
			move.w	#$159,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewPortHalftone
	ENDIF

;
; void GXSetViewPortMapping(gxViewPort target, const gxMapping *map)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewPortMapping
			move.w	#$15a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewPortMapping
	ENDIF

;
; void GXSetViewPortParent(gxViewPort target, gxViewPort parent)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewPortParent
			move.w	#$15b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewPortParent
	ENDIF

;
; void GXSetViewPortViewGroup(gxViewPort target, gxViewGroup group)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewPortViewGroup
			move.w	#$15c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewPortViewGroup
	ENDIF

;
; long GXGetColorProfileTags(gxColorProfile source, long tagType, long index, long count, gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetColorProfileTags
			move.w	#$15d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetColorProfileTags
	ENDIF

;
; long GXGetColorSetTags(gxColorSet source, long tagType, long index, long count, gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetColorSetTags
			move.w	#$15e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetColorSetTags
	ENDIF

;
; long GXGetInkTags(gxInk source, long tagType, long index, long count, gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetInkTags
			move.w	#$15f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetInkTags
	ENDIF

;
; long GXGetShapeTags(gxShape source, long tagType, long index, long count, gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeTags
			move.w	#$160,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeTags
	ENDIF

;
; long GXGetStyleTags(gxStyle source, long tagType, long index, long count, gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleTags
			move.w	#$161,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleTags
	ENDIF

;
; long GXGetTransformTags(gxTransform source, long tagType, long index, long count, gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetTransformTags
			move.w	#$162,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetTransformTags
	ENDIF

;
; long GXGetViewDeviceTags(gxViewDevice source, long tagType, long index, long count, gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewDeviceTags
			move.w	#$163,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewDeviceTags
	ENDIF

;
; long GXGetViewPortTags(gxViewPort source, long tagType, long index, long count, gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewPortTags
			move.w	#$164,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewPortTags
	ENDIF

;
; void GXSetColorProfileTags(gxColorProfile target, long tagType, long index, long oldCount, long newCount, const gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetColorProfileTags
			move.w	#$165,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetColorProfileTags
	ENDIF

;
; void GXSetColorSetTags(gxColorSet target, long tagType, long index, long oldCount, long newCount, const gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetColorSetTags
			move.w	#$166,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetColorSetTags
	ENDIF

;
; void GXSetInkTags(gxInk target, long tagType, long index, long oldCount, long newCount, const gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetInkTags
			move.w	#$167,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetInkTags
	ENDIF

;
; void GXSetShapeTags(gxShape target, long tagType, long index, long oldCount, long newCount, const gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeTags
			move.w	#$168,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeTags
	ENDIF

;
; void GXSetStyleTags(gxStyle target, long tagType, long index, long oldCount, long newCount, const gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleTags
			move.w	#$169,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleTags
	ENDIF

;
; void GXSetTransformTags(gxTransform target, long tagType, long index, long oldCount, long newCount, const gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetTransformTags
			move.w	#$16a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetTransformTags
	ENDIF

;
; void GXSetViewDeviceTags(gxViewDevice target, long tagType, long index, long oldCount, long newCount, const gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewDeviceTags
			move.w	#$16b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewDeviceTags
	ENDIF

;
; void GXSetViewPortTags(gxViewPort target, long tagType, long index, long oldCount, long newCount, const gxTag items[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewPortTags
			move.w	#$16c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewPortTags
	ENDIF

;
; gxInkAttribute GXGetInkAttributes(gxInk source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetInkAttributes
			move.w	#$16d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetInkAttributes
	ENDIF

;
; gxShapeAttribute GXGetShapeAttributes(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeAttributes
			move.w	#$16e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeAttributes
	ENDIF

;
; gxInkAttribute GXGetShapeInkAttributes(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeInkAttributes
			move.w	#$16f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeInkAttributes
	ENDIF

;
; gxStyleAttribute GXGetShapeStyleAttributes(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeStyleAttributes
			move.w	#$170,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeStyleAttributes
	ENDIF

;
; gxStyleAttribute GXGetStyleAttributes(gxStyle source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleAttributes
			move.w	#$171,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleAttributes
	ENDIF

;
; gxTextAttribute GXGetShapeTextAttributes(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeTextAttributes
			move.w	#$172,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeTextAttributes
	ENDIF

;
; gxTextAttribute GXGetStyleTextAttributes(gxStyle source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleTextAttributes
			move.w	#$173,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleTextAttributes
	ENDIF

;
; gxDeviceAttribute GXGetViewDeviceAttributes(gxViewDevice source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewDeviceAttributes
			move.w	#$174,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewDeviceAttributes
	ENDIF

;
; gxPortAttribute GXGetViewPortAttributes(gxViewPort source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewPortAttributes
			move.w	#$175,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewPortAttributes
	ENDIF

;
; void GXSetInkAttributes(gxInk target, gxInkAttribute attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetInkAttributes
			move.w	#$176,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetInkAttributes
	ENDIF

;
; void GXSetShapeAttributes(gxShape target, gxShapeAttribute attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeAttributes
			move.w	#$177,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeAttributes
	ENDIF

;
; void GXSetShapeInkAttributes(gxShape target, gxInkAttribute attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeInkAttributes
			move.w	#$178,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeInkAttributes
	ENDIF

;
; void GXSetShapeStyleAttributes(gxShape target, gxStyleAttribute attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeStyleAttributes
			move.w	#$179,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeStyleAttributes
	ENDIF

;
; void GXSetStyleAttributes(gxStyle target, gxStyleAttribute attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleAttributes
			move.w	#$17a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleAttributes
	ENDIF

;
; void GXSetShapeTextAttributes(gxShape target, gxTextAttribute attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeTextAttributes
			move.w	#$17b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeTextAttributes
	ENDIF

;
; void GXSetStyleTextAttributes(gxStyle target, gxTextAttribute attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetStyleTextAttributes
			move.w	#$17c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetStyleTextAttributes
	ENDIF

;
; void GXSetViewDeviceAttributes(gxViewDevice target, gxDeviceAttribute attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewDeviceAttributes
			move.w	#$17d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewDeviceAttributes
	ENDIF

;
; void GXSetViewPortAttributes(gxViewPort target, gxPortAttribute attributes)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetViewPortAttributes
			move.w	#$17e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetViewPortAttributes
	ENDIF

;
; long GXGetColorProfileOwners(gxColorProfile source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetColorProfileOwners
			move.w	#$17f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetColorProfileOwners
	ENDIF

;
; long GXGetColorSetOwners(gxColorSet source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetColorSetOwners
			move.w	#$180,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetColorSetOwners
	ENDIF

;
; long GXGetInkOwners(gxInk source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetInkOwners
			move.w	#$181,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetInkOwners
	ENDIF

;
; long GXGetShapeOwners(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeOwners
			move.w	#$182,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeOwners
	ENDIF

;
; long GXGetStyleOwners(gxStyle source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetStyleOwners
			move.w	#$183,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetStyleOwners
	ENDIF

;
; long GXGetTagOwners(gxTag source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetTagOwners
			move.w	#$184,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetTagOwners
	ENDIF

;
; long GXGetTransformOwners(gxTransform source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetTransformOwners
			move.w	#$185,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetTransformOwners
	ENDIF

;
; void GXLockShape(gxShape target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXLockShape
			move.w	#$186,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXLockShape
	ENDIF

;
; void GXLockTag(gxTag target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXLockTag
			move.w	#$187,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXLockTag
	ENDIF

;
; void GXUnlockShape(gxShape target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnlockShape
			move.w	#$188,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnlockShape
	ENDIF

;
; void GXUnlockTag(gxTag target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnlockTag
			move.w	#$189,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnlockTag
	ENDIF

;
; void *GXGetShapeStructure(gxShape source, long *length)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeStructure
			move.w	#$18a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeStructure
	ENDIF

;
; void *GXGetTagStructure(gxTag source, long *length)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetTagStructure
			move.w	#$18b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetTagStructure
	ENDIF

;
; Fixed GXGetColorDistance(const gxColor *target, const gxColor *source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetColorDistance
			move.w	#$18c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetColorDistance
	ENDIF

;
; gxPoint *GXShapeLengthToPoint(gxShape target, long index, Fixed length, gxPoint *location, gxPoint *tangent)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXShapeLengthToPoint
			move.w	#$18d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXShapeLengthToPoint
	ENDIF

;
; wide *GXGetShapeArea(gxShape source, long index, wide *area)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeArea
			move.w	#$18e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeArea
	ENDIF

;
; long GXGetShapeCacheSize(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeCacheSize
			move.w	#$18f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeCacheSize
	ENDIF

;
; gxPoint *GXGetShapeCenter(gxShape source, long index, gxPoint *center)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeCenter
			move.w	#$190,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeCenter
	ENDIF

;
; gxContourDirection GXGetShapeDirection(gxShape source, long contour)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeDirection
			move.w	#$191,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeDirection
	ENDIF

;
; long GXGetShapeIndex(gxShape source, long contour, long vector)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeIndex
			move.w	#$192,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeIndex
	ENDIF

;
; wide *GXGetShapeLength(gxShape source, long index, wide *length)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeLength
			move.w	#$193,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeLength
	ENDIF

;
; long GXGetShapeSize(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeSize
			move.w	#$194,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeSize
	ENDIF

;
; long GXCountShapeContours(gxShape source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCountShapeContours
			move.w	#$195,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCountShapeContours
	ENDIF

;
; long GXCountShapePoints(gxShape source, long contour)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCountShapePoints
			move.w	#$196,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCountShapePoints
	ENDIF

; returns the number of positions 
;
; long GXGetShapeDashPositions(gxShape source, gxMapping dashMappings[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeDashPositions
			move.w	#$197,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeDashPositions
	ENDIF

;
; long GXGetShapeDeviceArea(gxShape source, gxViewPort port, gxViewDevice device)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeDeviceArea
			move.w	#$198,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeDeviceArea
	ENDIF

;
; Boolean GXGetShapeDeviceBounds(gxShape source, gxViewPort port, gxViewDevice device, gxRectangle *bounds)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeDeviceBounds
			move.w	#$199,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeDeviceBounds
	ENDIF

;
; gxColorSet GXGetShapeDeviceColors(gxShape source, gxViewPort port, gxViewDevice device, long *width)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeDeviceColors
			move.w	#$19a,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeDeviceColors
	ENDIF

;
; Boolean GXGetShapeGlobalBounds(gxShape source, gxViewPort port, gxViewGroup group, gxRectangle *bounds)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeGlobalBounds
			move.w	#$19b,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeGlobalBounds
	ENDIF

;
; long GXGetShapeGlobalViewDevices(gxShape source, gxViewPort port, gxViewDevice list[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeGlobalViewDevices
			move.w	#$19c,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeGlobalViewDevices
	ENDIF

;
; long GXGetShapeGlobalViewPorts(gxShape source, gxViewPort list[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeGlobalViewPorts
			move.w	#$19d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeGlobalViewPorts
	ENDIF

;
; gxRectangle *GXGetShapeLocalBounds(gxShape source, gxRectangle *bounds)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeLocalBounds
			move.w	#$19e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeLocalBounds
	ENDIF

; returns the number of positions 
;
; long GXGetShapePatternPositions(gxShape source, gxPoint positions[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapePatternPositions
			move.w	#$19f,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapePatternPositions
	ENDIF

;
; void GXGetShapeLocalFontMetrics(gxShape sourceShape, gxPoint *before, gxPoint *after, gxPoint *caretAngle, gxPoint *caretOffset)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeLocalFontMetrics
			move.w	#$1a0,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeLocalFontMetrics
	ENDIF

;
; void GXGetShapeDeviceFontMetrics(gxShape sourceShape, gxViewPort port, gxViewDevice device, gxPoint *before, gxPoint *after, gxPoint *caretAngle, gxPoint *caretOffset)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeDeviceFontMetrics
			move.w	#$1a1,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeDeviceFontMetrics
	ENDIF

;
; long GXGetViewGroupViewDevices(gxViewGroup source, gxViewDevice list[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewGroupViewDevices
			move.w	#$1a2,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewGroupViewDevices
	ENDIF

;
; long GXGetViewGroupViewPorts(gxViewGroup source, gxViewPort list[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewGroupViewPorts
			move.w	#$1a3,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewGroupViewPorts
	ENDIF

;
; gxMapping *GXGetViewPortGlobalMapping(gxViewPort source, gxMapping *map)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewPortGlobalMapping
			move.w	#$1a4,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewPortGlobalMapping
	ENDIF

;
; long GXGetViewPortViewDevices(gxViewPort source, gxViewDevice list[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetViewPortViewDevices
			move.w	#$1a5,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetViewPortViewDevices
	ENDIF

;
; gxShape GXHitTestPicture(gxShape target, const gxPoint *test, gxHitTestInfo *result, long level, long depth)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXHitTestPicture
			move.w	#$1a6,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXHitTestPicture
	ENDIF

;
; Boolean GXIntersectRectangle(gxRectangle *target, const gxRectangle *source, const gxRectangle *operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXIntersectRectangle
			move.w	#$1a7,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXIntersectRectangle
	ENDIF

;
; gxRectangle *GXUnionRectangle(gxRectangle *target, const gxRectangle *source, const gxRectangle *operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnionRectangle
			move.w	#$1a8,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnionRectangle
	ENDIF

;
; Boolean GXTouchesRectanglePoint(const gxRectangle *target, const gxPoint *test)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXTouchesRectanglePoint
			move.w	#$1a9,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXTouchesRectanglePoint
	ENDIF

;
; Boolean GXTouchesShape(gxShape target, gxShape test)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXTouchesShape
			move.w	#$1aa,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXTouchesShape
	ENDIF

;
; Boolean GXTouchesBoundsShape(const gxRectangle *target, gxShape test)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXTouchesBoundsShape
			move.w	#$1ab,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXTouchesBoundsShape
	ENDIF

;
; Boolean GXContainsRectangle(const gxRectangle *container, const gxRectangle *test)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXContainsRectangle
			move.w	#$1ac,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXContainsRectangle
	ENDIF

;
; Boolean GXContainsShape(gxShape container, gxShape test)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXContainsShape
			move.w	#$1ad,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXContainsShape
	ENDIF

;
; Boolean GXContainsBoundsShape(const gxRectangle *container, gxShape test, long index)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXContainsBoundsShape
			move.w	#$1ae,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXContainsBoundsShape
	ENDIF

;
; gxColor *GXConvertColor(gxColor *target, gxColorSpace space, gxColorSet aSet, gxColorProfile profile)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXConvertColor
			move.w	#$1af,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXConvertColor
	ENDIF

;
; gxColor *GXCombineColor(gxColor *target, gxInk operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCombineColor
			move.w	#$1b0,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCombineColor
	ENDIF

;
; Boolean GXCheckColor(const gxColor *source, gxColorSpace space, gxColorSet aSet, gxColorProfile profile)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCheckColor
			move.w	#$1b1,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCheckColor
	ENDIF

;
; gxShape GXCheckBitmapColor(gxShape source, const gxLongRectangle *area, gxColorSpace space, gxColorSet aSet, gxColorProfile profile)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXCheckBitmapColor
			move.w	#$1b2,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXCheckBitmapColor
	ENDIF

;
; Fixed GXGetHalftoneDeviceAngle(gxViewDevice source, const gxHalftone *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetHalftoneDeviceAngle
			move.w	#$1b3,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetHalftoneDeviceAngle
	ENDIF

;
; long GXGetColorSetParts(gxColorSet source, long index, long count, gxColorSpace *space, gxSetColor data[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetColorSetParts
			move.w	#$1b4,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetColorSetParts
	ENDIF

; returns the glyph count 
;
; long GXGetGlyphParts(gxShape source, long index, long charCount, long *byteLength, unsigned char text[], gxPoint positions[], long advanceBits[], gxPoint tangents[], long *runCount, short styleRuns[], gxStyle styles[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetGlyphParts
			move.w	#$1b5,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetGlyphParts
	ENDIF

;
; long GXGetPathParts(gxShape source, long index, long count, gxPaths *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetPathParts
			move.w	#$1b6,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetPathParts
	ENDIF

;
; long GXGetPictureParts(gxShape source, long index, long count, gxShape shapes[], gxStyle styles[], gxInk inks[], gxTransform transforms[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetPictureParts
			move.w	#$1b7,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetPictureParts
	ENDIF

;
; long GXGetPolygonParts(gxShape source, long index, long count, gxPolygons *data)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetPolygonParts
			move.w	#$1b8,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetPolygonParts
	ENDIF

;
; gxShape GXGetShapeParts(gxShape source, long index, long count, gxShape destination)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapeParts
			move.w	#$1b9,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapeParts
	ENDIF

;
; long GXGetTextParts(gxShape source, long index, long charCount, unsigned char text[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetTextParts
			move.w	#$1ba,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetTextParts
	ENDIF

;
; void GXSetColorSetParts(gxColorSet target, long index, long oldCount, long newCount, const gxSetColor data[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetColorSetParts
			move.w	#$1bb,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetColorSetParts
	ENDIF

;
; void GXSetGlyphParts(gxShape source, long index, long oldCharCount, long newCharCount, const unsigned char text[], const gxPoint positions[], const long advanceBits[], const gxPoint tangents[], const short styleRuns[], const gxStyle styles[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetGlyphParts
			move.w	#$1bc,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetGlyphParts
	ENDIF

;
; void GXSetPathParts(gxShape target, long index, long count, const gxPaths *data, gxEditShapeFlag flags)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetPathParts
			move.w	#$1bd,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetPathParts
	ENDIF

;
; void GXSetPictureParts(gxShape target, long index, long oldCount, long newCount, const gxShape shapes[], const gxStyle styles[], const gxInk inks[], const gxTransform transforms[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetPictureParts
			move.w	#$1be,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetPictureParts
	ENDIF

;
; void GXSetPolygonParts(gxShape target, long index, long count, const gxPolygons *data, gxEditShapeFlag flags)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetPolygonParts
			move.w	#$1bf,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetPolygonParts
	ENDIF

;
; void GXSetShapeParts(gxShape target, long index, long count, gxShape insert, gxEditShapeFlag flags)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapeParts
			move.w	#$1c0,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapeParts
	ENDIF

;
; void GXSetTextParts(gxShape target, long index, long oldCharCount, long newCharCount, const unsigned char text[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetTextParts
			move.w	#$1c1,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetTextParts
	ENDIF

;
; long GXGetShapePoints(gxShape source, long index, long count, gxPoint data[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetShapePoints
			move.w	#$1c2,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetShapePoints
	ENDIF

;
; void GXSetShapePoints(gxShape target, long index, long count, const gxPoint data[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetShapePoints
			move.w	#$1c3,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetShapePoints
	ENDIF

;
; long GXGetGlyphPositions(gxShape source, long index, long charCount, long advance[], gxPoint positions[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetGlyphPositions
			move.w	#$1c4,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetGlyphPositions
	ENDIF

;
; long GXGetGlyphTangents(gxShape source, long index, long charCount, gxPoint tangents[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetGlyphTangents
			move.w	#$1c5,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetGlyphTangents
	ENDIF

;
; void GXSetGlyphPositions(gxShape target, long index, long charCount, const long advance[], const gxPoint positions[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetGlyphPositions
			move.w	#$1c6,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetGlyphPositions
	ENDIF

;
; void GXSetGlyphTangents(gxShape target, long index, long charCount, const gxPoint tangents[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSetGlyphTangents
			move.w	#$1c7,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSetGlyphTangents
	ENDIF

;
; long GXGetGlyphMetrics(gxShape source, gxPoint glyphOrigins[], gxRectangle boundingBoxes[], gxPoint sideBearings[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetGlyphMetrics
			move.w	#$1c8,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetGlyphMetrics
	ENDIF

;
; void GXDifferenceShape(gxShape target, gxShape operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDifferenceShape
			move.w	#$1c9,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDifferenceShape
	ENDIF

;
; void GXExcludeShape(gxShape target, gxShape operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXExcludeShape
			move.w	#$1ca,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXExcludeShape
	ENDIF

;
; void GXIntersectShape(gxShape target, gxShape operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXIntersectShape
			move.w	#$1cb,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXIntersectShape
	ENDIF

;
; void GXMapShape(gxShape target, const gxMapping *map)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXMapShape
			move.w	#$1cc,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXMapShape
	ENDIF

;
; void GXMoveShape(gxShape target, Fixed deltaX, Fixed deltaY)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXMoveShape
			move.w	#$1cd,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXMoveShape
	ENDIF

;
; void GXMoveShapeTo(gxShape target, Fixed x, Fixed y)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXMoveShapeTo
			move.w	#$1ce,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXMoveShapeTo
	ENDIF

;
; void GXReverseDifferenceShape(gxShape target, gxShape operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXReverseDifferenceShape
			move.w	#$1cf,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXReverseDifferenceShape
	ENDIF

;
; void GXRotateShape(gxShape target, Fixed degrees, Fixed xOffset, Fixed yOffset)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXRotateShape
			move.w	#$1d0,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXRotateShape
	ENDIF

;
; void GXScaleShape(gxShape target, Fixed hScale, Fixed vScale, Fixed xOffset, Fixed yOffset)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXScaleShape
			move.w	#$1d1,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXScaleShape
	ENDIF

;
; void GXSkewShape(gxShape target, Fixed xSkew, Fixed ySkew, Fixed xOffset, Fixed yOffset)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSkewShape
			move.w	#$1d2,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSkewShape
	ENDIF

;
; void GXUnionShape(gxShape target, gxShape operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnionShape
			move.w	#$1d3,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnionShape
	ENDIF

;
; void GXDifferenceTransform(gxTransform target, gxShape operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXDifferenceTransform
			move.w	#$1d4,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXDifferenceTransform
	ENDIF

;
; void GXExcludeTransform(gxTransform target, gxShape operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXExcludeTransform
			move.w	#$1d5,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXExcludeTransform
	ENDIF

;
; void GXIntersectTransform(gxTransform target, gxShape operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXIntersectTransform
			move.w	#$1d6,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXIntersectTransform
	ENDIF

;
; void GXMapTransform(gxTransform target, const gxMapping *map)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXMapTransform
			move.w	#$1d7,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXMapTransform
	ENDIF

;
; void GXMoveTransform(gxTransform target, Fixed deltaX, Fixed deltaY)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXMoveTransform
			move.w	#$1d8,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXMoveTransform
	ENDIF

;
; void GXMoveTransformTo(gxTransform target, Fixed x, Fixed y)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXMoveTransformTo
			move.w	#$1d9,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXMoveTransformTo
	ENDIF

;
; void GXReverseDifferenceTransform(gxTransform target, gxShape operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXReverseDifferenceTransform
			move.w	#$1da,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXReverseDifferenceTransform
	ENDIF

;
; void GXRotateTransform(gxTransform target, Fixed degrees, Fixed xOffset, Fixed yOffset)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXRotateTransform
			move.w	#$1db,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXRotateTransform
	ENDIF

;
; void GXScaleTransform(gxTransform target, Fixed hScale, Fixed vScale, Fixed xOffset, Fixed yOffset)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXScaleTransform
			move.w	#$1dc,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXScaleTransform
	ENDIF

;
; void GXSkewTransform(gxTransform target, Fixed xSkew, Fixed ySkew, Fixed xOffset, Fixed yOffset)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSkewTransform
			move.w	#$1dd,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSkewTransform
	ENDIF

;
; void GXUnionTransform(gxTransform target, gxShape operand)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnionTransform
			move.w	#$1de,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnionTransform
	ENDIF

;
; void GXBreakShape(gxShape target, long index)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXBreakShape
			move.w	#$1df,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXBreakShape
	ENDIF

;
; void GXChangedShape(gxShape target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXChangedShape
			move.w	#$1e0,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXChangedShape
	ENDIF

;
; gxShapePart GXHitTestShape(gxShape target, const gxPoint *test, gxHitTestInfo *result)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXHitTestShape
			move.w	#$1e1,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXHitTestShape
	ENDIF

;
; gxShape GXHitTestDevice(gxShape target, gxViewPort port, gxViewDevice device, const gxPoint *test, const gxPoint *tolerance)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXHitTestDevice
			move.w	#$1e2,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXHitTestDevice
	ENDIF

;
; void GXInsetShape(gxShape target, Fixed inset)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXInsetShape
			move.w	#$1e3,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXInsetShape
	ENDIF

;
; void GXInvertShape(gxShape target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXInvertShape
			move.w	#$1e4,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXInvertShape
	ENDIF

;
; void GXPrimitiveShape(gxShape target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXPrimitiveShape
			move.w	#$1e5,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXPrimitiveShape
	ENDIF

;
; void GXReduceShape(gxShape target, long contour)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXReduceShape
			move.w	#$1e6,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXReduceShape
	ENDIF

;
; void GXReverseShape(gxShape target, long contour)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXReverseShape
			move.w	#$1e7,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXReverseShape
	ENDIF

;
; void GXSimplifyShape(gxShape target)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXSimplifyShape
			move.w	#$1e8,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXSimplifyShape
	ENDIF

;
; void GXLockColorProfile(gxColorProfile source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXLockColorProfile
			move.w	#$1e9,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXLockColorProfile
	ENDIF

;
; void GXUnlockColorProfile(gxColorProfile source)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnlockColorProfile
			move.w	#$1ea,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnlockColorProfile
	ENDIF

;
; void *GXGetColorProfileStructure(gxColorProfile source, long *length)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXGetColorProfileStructure
			move.w	#$1eb,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXGetColorProfileStructure
	ENDIF

;
; void GXFlattenShape(gxShape source, gxFlattenFlag flags, gxSpoolBlock *block)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXFlattenShape
			move.w	#$1ec,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXFlattenShape
	ENDIF

;
; gxShape GXUnflattenShape(gxSpoolBlock *block, long count, const gxViewPort portList[])
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXUnflattenShape
			move.w	#$1ed,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXUnflattenShape
	ENDIF

;
; void GXPostGraphicsNotice(gxGraphicsNotice notice)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXPostGraphicsNotice
			move.w	#$65,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXPostGraphicsNotice
	ENDIF

;
; void GXIgnoreGraphicsNotice(gxGraphicsNotice notice)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXIgnoreGraphicsNotice
			move.w	#$6d,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXIgnoreGraphicsNotice
	ENDIF

;
; void GXPopGraphicsNotice(void)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_GXPopGraphicsNotice
			move.w	#$6e,d0
			dc.w 	$A832
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	GXPopGraphicsNotice
	ENDIF

	ENDIF ; __GXGRAPHICS__

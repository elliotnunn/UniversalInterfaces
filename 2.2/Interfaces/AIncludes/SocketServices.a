;
;	File:		SocketServices.a
;
;	Contains:	This file contains constants and data structures that
;				describe the Socket Service interface to Card Services.
;
; 	Version:	Technology: PCMCIA Software 2.0
;				Package:	Universal Interfaces 2.2 in “MPW” on ETO #20
;
;	Copyright:	© 1984-1995 by Apple Computer, Inc.
;				All rights reserved.
;
; 	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter
; 				stack.  Include the file and version information (from above)
; 				in the problem description and send to:
; 					Internet:	apple.bugs@applelink.apple.com
; 					AppleLink:	APPLE.BUGS
;

	IF &TYPE('__SOCKETSERVICES__') = 'UNDEFINED' THEN
__SOCKETSERVICES__ SET 1


	IF &TYPE('__TYPES__') = 'UNDEFINED' THEN
	include 'Types.a'
	ENDIF
;		include 'ConditionalMacros.a'								;

	IF &TYPE('__MIXEDMODE__') = 'UNDEFINED' THEN
	include 'MixedMode.a'
	ENDIF
; typedef Byte 				SS_BYTE
; typedef Byte 				SS_FLAGS8
; typedef Byte 				SS_IRQ
; typedef Byte 				SS_PWRLEVEL
; typedef UInt16 			SS_ADAPTER
; typedef UInt16 			SS_BCD
; typedef UInt16 			SS_COUNT
; typedef UInt16 			SS_EDC
; typedef UInt16 			SS_FLAGS16
; typedef UInt16 			SS_PAGE
; typedef UInt16 			SS_PWRINDEX
; typedef UInt16 			SS_SIGNATURE
; typedef UInt16 			SS_SKTBITS
; typedef UInt16 			SS_SOCKET
; typedef UInt16 			SS_SPEED
; typedef UInt16 			SS_WINDOW
; typedef UInt16 			SS_WORD
; typedef UInt32 			SS_BASE
; typedef UInt32 			SS_FLAGS32
; typedef UInt32 			SS_OFFSET
; typedef UInt32 			SS_SIZE
; typedef Ptr 				SS_PTR
; typedef OSErr 			SS_RETCODE
; typedef struct SS_SCHARTBL  SS_SCHARTBL
SS_SCHARTBL 			RECORD	0
sktCaps					 ds.w   1		; offset: $0 (0)		;	SS_FLAGS16
activeHigh				 ds.l   1		; offset: $2 (2)		;	SS_FLAGS32
activeLow				 ds.l   1		; offset: $6 (6)		;	SS_FLAGS32
sizeof					 EQU *			; size:   $A (10)
						ENDR

; typedef struct SS_SISTRUCT  SS_SISTRUCT
SS_SISTRUCT 			RECORD	0
bufferLength			 ds.w   1		; offset: $0 (0)		;	SS_WORD
dataLength				 ds.w   1		; offset: $2 (2)		;	SS_WORD
charTable				 ds     SS_SCHARTBL ; offset: $4 (4)	;	SS_FLAGS16
sizeof					 EQU *			; size:   $E (14)
						ENDR

	STR_SIZE: SET 24
; typedef struct SS_VISTRUCT  SS_VISTRUCT
SS_VISTRUCT 			RECORD	0
bufferLength			 ds.w   1		; offset: $0 (0)		;	SS_WORD
dataLength				 ds.w   1		; offset: $2 (2)		;	SS_WORD
szImplementor			 ds.b   1		; offset: $4 (4)		;	SS_WORD
padding					 ds.b   1		; offset: $5 (5)		;	
sizeof					 EQU *			; size:   $6 (6)
						ENDR

; typedef struct SS_ACHARTBL  SS_ACHARTBL
SS_ACHARTBL 			RECORD	0
adpCaps					 ds.w   1		; offset: $0 (0)		;	SS_FLAGS16
activeHigh				 ds.l   1		; offset: $2 (2)		;	SS_FLAGS32
activeLow				 ds.l   1		; offset: $6 (6)		;	SS_FLAGS32
sizeof					 EQU *			; size:   $A (10)
						ENDR

; typedef struct SS_PWRENTRY  SS_PWRENTRY
SS_PWRENTRY 			RECORD	0
powerLevel				 ds.b   1		; offset: $0 (0)		;	SS_PWRLEVEL
validSignals			 ds.b   1		; offset: $1 (1)		;	SS_FLAGS8
sizeof					 EQU *			; size:   $2 (2)
						ENDR

; typedef struct SS_AISTRUCT  SS_AISTRUCT
SS_AISTRUCT 			RECORD	0
bufferLength			 ds.w   1		; offset: $0 (0)		;	SS_WORD
dataLength				 ds.w   1		; offset: $2 (2)		;	SS_WORD
charTable				 ds     SS_ACHARTBL ; offset: $4 (4)
numPwrEntries			 ds.w   1		; offset: $E (14)		;	SS_WORD
pwrEntryPtr				 ds.l   1		; offset: $10 (16)
sizeof					 EQU *			; size:   $14 (20)
						ENDR

; typedef struct SS_MEMWINTBL  SS_MEMWINTBL
SS_MEMWINTBL 			RECORD	0
memWndCaps				 ds.w   1		; offset: $0 (0)		;	SS_FLAGS16
firstByte				 ds.l   1		; offset: $2 (2)		;	SS_BASE
lastByte				 ds.l   1		; offset: $6 (6)		;	SS_BASE
minSize					 ds.l   1		; offset: $A (10)		;	SS_SIZE
maxSize					 ds.l   1		; offset: $E (14)		;	SS_SIZE
reqGran					 ds.l   1		; offset: $12 (18)		;	SS_SIZE
reqBase					 ds.l   1		; offset: $16 (22)		;	SS_SIZE
reqOffset				 ds.l   1		; offset: $1A (26)		;	SS_SIZE
slowest					 ds.w   1		; offset: $1E (30)		;	SS_SPEED
fastest					 ds.w   1		; offset: $20 (32)		;	SS_SPEED
sizeof					 EQU *			; size:   $22 (34)
						ENDR

; typedef struct SS_IOWINTBL  SS_IOWINTBL
SS_IOWINTBL 			RECORD	0
ioWndCaps				 ds.w   1		; offset: $0 (0)		;	SS_FLAGS16
firstByte				 ds.l   1		; offset: $2 (2)		;	SS_BASE
lastByte				 ds.l   1		; offset: $6 (6)		;	SS_BASE
minSize					 ds.l   1		; offset: $A (10)		;	SS_SIZE
maxSize					 ds.l   1		; offset: $E (14)		;	SS_SIZE
reqGran					 ds.l   1		; offset: $12 (18)		;	SS_SIZE
addrLines				 ds.w   1		; offset: $16 (22)		;	SS_COUNT
eisaSlot				 ds.b   1		; offset: $18 (24)		;	SS_FLAGS8
padding					 ds.b   1		; offset: $19 (25)		;	
sizeof					 EQU *			; size:   $1A (26)
						ENDR

; typedef struct SS_WISTRUCT  SS_WISTRUCT
SS_WISTRUCT 			RECORD	0
bufferLength			 ds.w   1		; offset: $0 (0)		;	SS_WORD
dataLength				 ds.w   1		; offset: $2 (2)		;	SS_WORD
numTblEntries			 ds.w   1		; offset: $4 (4)		;	SS_WORD
memWinTbl				 ds     SS_MEMWINTBL ; offset: $6 (6)
ioWinTbl				 ds     SS_IOWINTBL ; offset: $28 (40)
sizeof					 EQU *			; size:   $42 (66)
						ENDR

;————————————————————————————————————————————————————————————————————————
;	function selectors passed to Socket Service entry point
;————————————————————————————————————————————————————————————————————————

fnSSGetAdapterCount				EQU		$80
fnSSUnsupported81				EQU		$81
fnSSUnsupported82				EQU		$82
fnSSGetSSInfo					EQU		$83
fnSSInquireAdapter				EQU		$84
fnSSGetAdapter					EQU		$85
fnSSSetAdapter					EQU		$86
fnSSInquireWindow				EQU		$87
fnSSGetWindow					EQU		$88
fnSSSetWindow					EQU		$89
fnSSGetPage						EQU		$8A
fnSSSetPage						EQU		$8B
fnSSInquireSocket				EQU		$8C
fnSSGetSocket					EQU		$8D
fnSSSetSocket					EQU		$8E
fnSSGetStatus					EQU		$8F
fnSSResetSocket					EQU		$90
fnSSUnsupported91				EQU		$91
fnSSUnsupported92				EQU		$92
fnSSUnsupported93				EQU		$93
fnSSUnsupported94				EQU		$94
fnSSInquireEDC					EQU		$95
fnSSGetEDC						EQU		$96
fnSSSetEDC						EQU		$97
fnSSStartEDC					EQU		$98
fnSSPauseEDC					EQU		$99
fnSSResumeEDC					EQU		$9A
fnSSStopEDC						EQU		$9B
fnSSReadEDC						EQU		$9C
fnSSGetVendorInfo				EQU		$9D
fnSSAcknowledgeInterrupt		EQU		$9E
fnSSGetSetPriorHandler			EQU		$9F
fnSSGetSetSSAddr				EQU		$A0
fnSSGetAccessOffsets			EQU		$A1
fnSSUnsupportedA2				EQU		$A2
fnSSUnsupportedA3				EQU		$A3
fnSSUnsupportedA4				EQU		$A4
fnSSUnsupportedA5				EQU		$A5
fnSSUnsupportedA6				EQU		$A6
fnSSUnsupportedA7				EQU		$A7
fnSSUnsupportedA8				EQU		$A8
fnSSUnsupportedA9				EQU		$A9
fnSSUnsupportedAA				EQU		$AA
fnSSUnsupportedAB				EQU		$AB
fnSSUnsupportedAC				EQU		$AC
fnSSUnsupportedAD				EQU		$AD
fnSSVendorSpecific				EQU		$AE

;	SSVendorSpecificPB.function values
fnVSReserved					EQU		$00
fnVSGetSocketLocationIcon		EQU		$01
fnVSGetSocketLocationText		EQU		$02
fnVSDoSocketLocalization		EQU		$03
fnVSAppleSocketCapabilities		EQU		$04
fnVSSleepWakeNotification		EQU		$05

;————————————————————————————————————————————————————————————————————————
;	defines for the Socket Services function codes
;————————————————————————————————————————————————————————————————————————
AC_IND							EQU		1					; adapter characteristics
AC_PWR							EQU		2
AC_DBW							EQU		4

AS_POWERDOWN					EQU		1
AS_MAINTAIN						EQU		2

EC_UNI							EQU		1
EC_BI							EQU		2
EC_REGISTER						EQU		4
EC_MEMORY						EQU		8
EC_PAUSABLE						EQU		16
EC_WRITE						EQU		16

ET_CHECK8						EQU		1
ET_SDLC16						EQU		2

IF_MEMORY						EQU		1
IF_IO							EQU		2

IRQ_HIGH						EQU		64
IRQ_ENABLE						EQU		128

IRQ_MEMORY						EQU		4
IRQ_IO							EQU		4

PS_ATTRIBUTE					EQU		$01
PS_ENABLED						EQU		$02
PS_WP							EQU		$04

PWR_VCC							EQU		128					; Power pins in PwrEntry elements
PWR_VPP1						EQU		64
PWR_VPP2						EQU		32

SBM_WP							EQU		1
SBM_LOCKED						EQU		2
SBM_EJECT						EQU		4
SBM_INSERT						EQU		8
SBM_BVD1						EQU		16
SBM_BVD2						EQU		32
SBM_RDYBSY						EQU		64
SBM_CD							EQU		128

SBM_LOCK						EQU		16
SBM_BATT						EQU		32
SBM_BUSY						EQU		64
SBM_XIP							EQU		128

; Vendor Specific Apple Socket Capabilities 
SBM_SLEEP_PWR					EQU		1

WC_COMMON						EQU		1
WC_IO							EQU		2
WC_ATTRIBUTE					EQU		4
WC_TYPE_MASK					EQU		7
WC_WAIT							EQU		128

WC_BASE							EQU		1
WC_SIZE							EQU		2
WC_WENABLE						EQU		4
WC_8BIT							EQU		8
WC_16BIT						EQU		16
WC_BALIGN						EQU		32
WC_POW2							EQU		64
WC_CALIGN						EQU		128
WC_PAVAIL						EQU		256
WC_PSHARED						EQU		512
WC_PENABLE						EQU		1024
WC_WP							EQU		2048

WC_INPACK						EQU		128
WC_EISA							EQU		256
WC_CENABLE						EQU		512

WS_IO							EQU		1
WS_ENABLED						EQU		2
WS_16BIT						EQU		4

WS_PAGED						EQU		8
WS_EISA							EQU		16
WS_CENABLE						EQU		32
WS_SWAP_LITTLE_TO_BIG_ENDIAN	EQU		64

SS_SIG_VALUE					EQU		$5353				; 'SS'

SS_CMPL_1_00					EQU		$0100				; compliant with rev 1.0 of SS standard
SS_CMPL_1_01					EQU		$0101				; compliant with rev 1.01 of SS standard
SS_CMPL_2_00					EQU		$0200				; compliant with rev 2.0 of SS standard
SS_CMPL_2_10					EQU		$0210				; compliant with rev 2.1 of SS standard

;————————————————————————————————————————————————————————————————————————
;	Universal ProcPtr for Socket Service entry point
;————————————————————————————————————————————————————————————————————————
;————————————————————————————————————————————————————————————————————————
;	Card Services calls used by a Socket Service
;————————————————————————————————————————————————————————————————————————
; typedef struct CSEventEntryPB  CSEventEntryPB
CSEventEntryPB 			RECORD	0
ssHandlerID				 ds.l   1		; offset: $0 (0)
adapter					 ds.w   1		; offset: $4 (4)
socket					 ds.w   1		; offset: $6 (6)
message					 ds.w   1		; offset: $8 (8)
intrpBits				 ds.b   1		; offset: $A (10)
padding					 ds.b   1		; offset: $B (11)
sizeof					 EQU *			; size:   $C (12)
						ENDR

;------------		AddSocketServices		------------							
; typedef struct AddSocketServicesPB  AddSocketServicesPB
AddSocketServicesPB 	RECORD	0
ssEntry					 ds.l   1		; offset: $0 (0)		; -> given to CS for its use
csEntry					 ds.l   1		; offset: $4 (4)		; <- taken from CS so we know where to enter
dataPtr					 ds.l   1		; offset: $8 (8)
attributes				 ds.l   1		; offset: $C (12)
numAdapters				 ds.w   1		; offset: $10 (16)
numSockets				 ds.w   1		; offset: $12 (18)
sizeof					 EQU *			; size:   $14 (20)
						ENDR

;------------ 		ReplaceSocketServices	------------							
; typedef struct ReplaceSocketServicesPB  ReplaceSocketServicesPB
ReplaceSocketServicesPB RECORD	0
ssEntry					 ds.l   1		; offset: $0 (0)
oldSSEntry				 ds.l   1		; offset: $4 (4)
dataPtr					 ds.l   1		; offset: $8 (8)
socket					 ds.w   1		; offset: $C (12)
numSockets				 ds.w   1		; offset: $E (14)
attributes				 ds.w   1		; offset: $10 (16)
sizeof					 EQU *			; size:   $12 (18)
						ENDR

;
; pascal OSErr CSAddSocketServices(AddSocketServicesPB *pb)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_CSAddSocketServices
			moveq	#80,d0
			dc.w 	$AAF0
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	CSAddSocketServices
	ENDIF

;
; pascal OSErr CSReplaceSocketServices(ReplaceSocketServicesPB *pb)
;
	IF ¬ GENERATINGCFM THEN
		Macro
		_CSReplaceSocketServices
			moveq	#81,d0
			dc.w 	$AAF0
		EndM
	ELSE
		IMPORT_CFM_FUNCTION	CSReplaceSocketServices
	ENDIF

;————————————————————————————————————————————————————————————————————————
;	parameter blocks for each Socket Service function
;————————————————————————————————————————————————————————————————————————
; typedef struct SSAcknowledgeInterruptPB  SSAcknowledgeInterruptPB
SSAcknowledgeInterruptPB RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
sockets					 ds.w   1		; offset: $2 (2)		;	SS_SKTBITS
sizeof					 EQU *			; size:   $4 (4)
						ENDR

; typedef struct SSGetAccessOffsetsPB  SSGetAccessOffsetsPB
SSGetAccessOffsetsPB 	RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
mode					 ds.b   1		; offset: $2 (2)		;	SS_BYTE
reserved				 ds.b   1		; offset: $3 (3)		;	padding
count					 ds.w   1		; offset: $4 (4)		;	SS_COUNT
buffer					 ds.l   1		; offset: $6 (6)		;	SS_PTR
numAvail				 ds.w   1		; offset: $A (10)		;	SS_COUNT
sizeof					 EQU *			; size:   $C (12)
						ENDR

; typedef struct SSGetAdapterCountPB  SSGetAdapterCountPB
SSGetAdapterCountPB 	RECORD	0
totalAdapters			 ds.w   1		; offset: $0 (0)		;	SS_COUNT
sig						 ds.w   1		; offset: $2 (2)		;	SS_SIGNATURE
sizeof					 EQU *			; size:   $4 (4)
						ENDR

; typedef struct SSGetSetAdapterPB  SSGetSetAdapterPB
SSGetSetAdapterPB 		RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
state					 ds.b   1		; offset: $2 (2)		;	SS_FLAGS8
irqStatus				 ds.b   1		; offset: $3 (3)		;	SS_IRQ
sizeof					 EQU *			; size:   $4 (4)
						ENDR

; typedef struct SSGetSetEDCPB  SSGetSetEDCPB
SSGetSetEDCPB 			RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
edc						 ds.w   1		; offset: $2 (2)		;	SS_EDC
socket					 ds.w   1		; offset: $4 (4)		;	SS_SOCKET
state					 ds.b   1		; offset: $6 (6)		;	SS_FLAGS8
edcType					 ds.b   1		; offset: $7 (7)		;	SS_FLAGS8
sizeof					 EQU *			; size:   $8 (8)
						ENDR

; typedef struct SSGetSetPagePB  SSGetSetPagePB
SSGetSetPagePB 			RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
window					 ds.w   1		; offset: $2 (2)		;	SS_WINDOW
page					 ds.w   1		; offset: $4 (4)		;	SS_PAGE
state					 ds.b   1		; offset: $6 (6)		;	SS_FLAGS8
reserved				 ds.b   1		; offset: $7 (7)		;	padding
offset					 ds.l   1		; offset: $8 (8)		;	SS_OFFSET
sizeof					 EQU *			; size:   $C (12)
						ENDR

; typedef struct SSGetSetPriorHandlerPB  SSGetSetPriorHandlerPB
SSGetSetPriorHandlerPB 	RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
mode					 ds.b   1		; offset: $2 (2)		;	SS_FLAGS8
reserved				 ds.b   1		; offset: $3 (3)		;	padding
handler					 ds.l   1		; offset: $4 (4)		;	SS_PTR
sizeof					 EQU *			; size:   $8 (8)
						ENDR

; typedef struct SSGetSetSocketPB  SSGetSetSocketPB
SSGetSetSocketPB 		RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
socket					 ds.w   1		; offset: $2 (2)		;	SS_SOCKET
vccIndex				 ds.w   1		; offset: $4 (4)		;	SS_PWRINDEX
vpp1Index				 ds.w   1		; offset: $6 (6)		;	SS_PWRINDEX
vpp2Index				 ds.w   1		; offset: $8 (8)		;	SS_PWRINDEX
scIntMask				 ds.b   1		; offset: $A (10)		;	SS_FLAGS8
state					 ds.b   1		; offset: $B (11)		;	SS_FLAGS8
ctlInd					 ds.b   1		; offset: $C (12)		;	SS_FLAGS8
ireqRouting				 ds.b   1		; offset: $D (13)		;	SS_IRQ
ifType					 ds.b   1		; offset: $E (14)		;	SS_FLAGS8
padding					 ds.b   1		; offset: $F (15)		;	
sizeof					 EQU *			; size:   $10 (16)
						ENDR

; typedef struct SSGetSetSSAddrPB  SSGetSetSSAddrPB
SSGetSetSSAddrPB 		RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
mode					 ds.b   1		; offset: $2 (2)		;	SS_BYTE
subfunc					 ds.b   1		; offset: $3 (3)		;	SS_BYTE
numAddData				 ds.w   1		; offset: $4 (4)		;	SS_COUNT
buffer					 ds.l   1		; offset: $6 (6)		;	SS_PTR
sizeof					 EQU *			; size:   $A (10)
						ENDR

; typedef struct SSGetSetWindowPB  SSGetSetWindowPB
SSGetSetWindowPB 		RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
window					 ds.w   1		; offset: $2 (2)		;	SS_WINDOW
socket					 ds.w   1		; offset: $4 (4)		;	SS_SOCKET
size					 ds.l   1		; offset: $6 (6)		;	SS_SIZE
state					 ds.b   1		; offset: $A (10)		;	SS_FLAGS8
reserved				 ds.b   1		; offset: $B (11)		;	padding
speed					 ds.w   1		; offset: $C (12)		;	SS_SPEED
base					 ds.l   1		; offset: $E (14)		;	SS_BASE
sizeof					 EQU *			; size:   $12 (18)
						ENDR

; typedef struct SSGetSSInfoPB  SSGetSSInfoPB
SSGetSSInfoPB 			RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
compliance				 ds.w   1		; offset: $2 (2)		;	SS_BCD
numAdapters				 ds.w   1		; offset: $4 (4)		;	SS_COUNT
firstAdapter			 ds.w   1		; offset: $6 (6)		;	SS_ADAPTER
sizeof					 EQU *			; size:   $8 (8)
						ENDR

; typedef struct SSGetStatusPB  SSGetStatusPB
SSGetStatusPB 			RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
socket					 ds.w   1		; offset: $2 (2)		;	SS_SOCKET
cardState				 ds.b   1		; offset: $4 (4)		;	SS_FLAGS8
socketState				 ds.b   1		; offset: $5 (5)		;	SS_FLAGS8
ctlInd					 ds.b   1		; offset: $6 (6)		;	SS_FLAGS8
ireqRouting				 ds.b   1		; offset: $7 (7)		;	SS_IRQ
ifType					 ds.b   1		; offset: $8 (8)		;	SS_FLAGS8
padding					 ds.b   1		; offset: $9 (9)		;	
sizeof					 EQU *			; size:   $A (10)
						ENDR

; typedef struct SSGetVendorInfoPB  SSGetVendorInfoPB
SSGetVendorInfoPB 		RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
vendorInfoType			 ds.b   1		; offset: $2 (2)		;	SS_BYTE
reserved				 ds.b   1		; offset: $3 (3)		;	padding
buffer					 ds.l   1		; offset: $4 (4)		;	SS_PTR
release					 ds.w   1		; offset: $8 (8)		;	SS_BCD
sizeof					 EQU *			; size:   $A (10)
						ENDR

; typedef struct SSInquireAdapterPB  SSInquireAdapterPB
SSInquireAdapterPB 		RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
buffer					 ds.l   1		; offset: $2 (2)		;	SS_PTR
numSockets				 ds.w   1		; offset: $6 (6)		;	SS_COUNT
numWindows				 ds.w   1		; offset: $8 (8)		;	SS_COUNT
numEDCs					 ds.w   1		; offset: $A (10)		;	SS_COUNT
sizeof					 EQU *			; size:   $C (12)
						ENDR

; typedef struct SSInquireEDCPB  SSInquireEDCPB
SSInquireEDCPB 			RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
edc						 ds.w   1		; offset: $2 (2)		;	SS_EDC
sockets					 ds.w   1		; offset: $4 (4)		;	SS_SKTBITS
caps					 ds.b   1		; offset: $6 (6)		;	SS_FLAGS8
types					 ds.b   1		; offset: $7 (7)		;	SS_FLAGS8
sizeof					 EQU *			; size:   $8 (8)
						ENDR

; typedef struct SSInquireSocketPB  SSInquireSocketPB
SSInquireSocketPB 		RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
socket					 ds.w   1		; offset: $2 (2)		;	SS_SOCKET
buffer					 ds.l   1		; offset: $4 (4)		;	SS_PTR
scIntCaps				 ds.b   1		; offset: $8 (8)		;	SS_FLAGS8
scRptCaps				 ds.b   1		; offset: $9 (9)		;	SS_FLAGS8
ctlIndCaps				 ds.b   1		; offset: $A (10)		;	SS_FLAGS8
padding					 ds.b   1		; offset: $B (11)		;	
sizeof					 EQU *			; size:   $C (12)
						ENDR

; typedef struct SSInquireWindowPB  SSInquireWindowPB
SSInquireWindowPB 		RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
window					 ds.w   1		; offset: $2 (2)		;	SS_WINDOW
buffer					 ds.l   1		; offset: $4 (4)		;	SS_PTR
wndCaps					 ds.b   1		; offset: $8 (8)		;	SS_FLAGS8
reserved				 ds.b   1		; offset: $9 (9)		;	padding
sockets					 ds.w   1		; offset: $A (10)		;	SS_SKTBITS
sizeof					 EQU *			; size:   $C (12)
						ENDR

; typedef struct SSPauseEDCPB  SSPauseEDCPB
SSPauseEDCPB 			RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
edc						 ds.w   1		; offset: $2 (2)		;	SS_EDC
sizeof					 EQU *			; size:   $4 (4)
						ENDR

; typedef struct SSReadEDCPB  SSReadEDCPB
SSReadEDCPB 			RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
edc						 ds.w   1		; offset: $2 (2)		;	SS_EDC
value					 ds.w   1		; offset: $4 (4)		;	SS_WORD
sizeof					 EQU *			; size:   $6 (6)
						ENDR

; typedef struct SSResetSocketPB  SSResetSocketPB
SSResetSocketPB 		RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
socket					 ds.w   1		; offset: $2 (2)		;	SS_SOCKET
sizeof					 EQU *			; size:   $4 (4)
						ENDR

; typedef struct SSResumeEDCPB  SSResumeEDCPB
SSResumeEDCPB 			RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
edc						 ds.w   1		; offset: $2 (2)		;	SS_EDC
sizeof					 EQU *			; size:   $4 (4)
						ENDR

; typedef struct SSStartEDCPB  SSStartEDCPB
SSStartEDCPB 			RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
edc						 ds.w   1		; offset: $2 (2)		;	SS_EDC
sizeof					 EQU *			; size:   $4 (4)
						ENDR

; typedef struct SSStopEDCPB  SSStopEDCPB
SSStopEDCPB 			RECORD	0
adapter					 ds.w   1		; offset: $0 (0)		;	SS_ADAPTER
edc						 ds.w   1		; offset: $2 (2)		;	SS_EDC
sizeof					 EQU *			; size:   $4 (4)
						ENDR

; typedef struct SSVendorSpecificPB  SSVendorSpecificPB
SSVendorSpecificPB 		RECORD	0
vsFunction				 ds.w   1		; offset: $0 (0)		;	SS_WORD
adapter					 ds.w   1		; offset: $2 (2)		;	SS_ADAPTER
socket					 ds.w   1		; offset: $4 (4)		;	SS_SOCKET
bufferSize				 ds.w   1		; offset: $6 (6)		;	SS_WORD
buffer					 ds.l   1		; offset: $8 (8)		;	SS_PTR
attributes				 ds.l   1		; offset: $C (12)		;	SS_LONG
sizeof					 EQU *			; size:   $10 (16)
						ENDR

;	‘attributes’ constants 

kSSGoingToSleep					EQU		$00000001
kSSWakingFromSleep				EQU		$00000002

;————————————————————————————————————————————————————————————————————————
;	Non-specific Socket Services Functions
;————————————————————————————————————————————————————————————————————————
;
; pascal SS_RETCODE SSGetAdapterCount(SSGetAdapterCountPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSGetAdapterCount
	ENDIF

;————————————————————————————————————————————————————————————————————————
;	Adapter Functions
;————————————————————————————————————————————————————————————————————————
;
; pascal SS_RETCODE SSAcknowledgeInterrupt(SSAcknowledgeInterruptPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSAcknowledgeInterrupt
	ENDIF

;
; pascal SS_RETCODE SSGetSetPriorHandler(SSGetSetPriorHandlerPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSGetSetPriorHandler
	ENDIF

;
; pascal SS_RETCODE SSGetSetSSAddr(SSGetSetSSAddrPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSGetSetSSAddr
	ENDIF

;
; pascal SS_RETCODE SSGetAccessOffsets(SSGetAccessOffsetsPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSGetAccessOffsets
	ENDIF

;
; pascal SS_RETCODE SSGetAdapter(SSGetSetAdapterPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSGetAdapter
	ENDIF

;
; pascal SS_RETCODE SSGetSSInfo(SSGetSSInfoPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSGetSSInfo
	ENDIF

;
; pascal SS_RETCODE SSGetVendorInfo(SSGetVendorInfoPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSGetVendorInfo
	ENDIF

;
; pascal SS_RETCODE SSInquireAdapter(SSInquireAdapterPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSInquireAdapter
	ENDIF

;
; pascal SS_RETCODE SSSetAdapter(SSGetSetAdapterPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSSetAdapter
	ENDIF

;
; pascal SS_RETCODE SSVendorSpecific(SSVendorSpecificPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSVendorSpecific
	ENDIF

;————————————————————————————————————————————————————————————————————————
;	Socket Functions
;————————————————————————————————————————————————————————————————————————
;
; pascal SS_RETCODE SSGetSocket(SSGetSetSocketPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSGetSocket
	ENDIF

;
; pascal SS_RETCODE SSGetStatus(SSGetStatusPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSGetStatus
	ENDIF

;
; pascal SS_RETCODE SSInquireSocket(SSInquireSocketPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSInquireSocket
	ENDIF

;
; pascal SS_RETCODE SSResetSocket(SSResetSocketPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSResetSocket
	ENDIF

;
; pascal SS_RETCODE SSSetSocket(SSGetSetSocketPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSSetSocket
	ENDIF

;————————————————————————————————————————————————————————————————————————
;	Window Functions
;————————————————————————————————————————————————————————————————————————
;
; pascal SS_RETCODE SSGetPage(SSGetSetPagePB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSGetPage
	ENDIF

;
; pascal SS_RETCODE SSGetWindow(SSGetSetWindowPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSGetWindow
	ENDIF

;
; pascal SS_RETCODE SSInquireWindow(SSInquireWindowPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSInquireWindow
	ENDIF

;
; pascal SS_RETCODE SSSetPage(SSGetSetPagePB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSSetPage
	ENDIF

;
; pascal SS_RETCODE SSSetWindow(SSGetSetWindowPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSSetWindow
	ENDIF

;————————————————————————————————————————————————————————————————————————
;	Error Detection Functions
;————————————————————————————————————————————————————————————————————————
;
; pascal SS_RETCODE SSGetEDC(SSGetSetEDCPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSGetEDC
	ENDIF

;
; pascal SS_RETCODE SSInquireEDC(SSInquireEDCPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSInquireEDC
	ENDIF

;
; pascal SS_RETCODE SSPauseEDC(SSPauseEDCPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSPauseEDC
	ENDIF

;
; pascal SS_RETCODE SSReadEDC(SSReadEDCPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSReadEDC
	ENDIF

;
; pascal SS_RETCODE SSResumeEDC(SSResumeEDCPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSResumeEDC
	ENDIF

;
; pascal SS_RETCODE SSSetEDC(SSGetSetEDCPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSSetEDC
	ENDIF

;
; pascal SS_RETCODE SSStartEDC(SSStartEDCPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSStartEDC
	ENDIF

;
; pascal SS_RETCODE SSStopEDC(SSStopEDCPB *pb, Ptr dataPtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	SSStopEDC
	ENDIF

	ENDIF ; __SOCKETSERVICES__

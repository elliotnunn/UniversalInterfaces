;
;	File:		SpeechRecognition.a
;
;	Contains:	Apple Speech Recognition Toolbox Interfaces.
;
;	Version:	Technology:	PlainTalk 1.5
;				Package:	Universal Interfaces 2.1.3
;
;	Copyright:	Â© 1984-1996 by Apple Computer, Inc.
;				All rights reserved.
;
;	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter
;				stack.  Include the file and version information (from above)
;				in the problem description and send to:
;					Internet:	apple.bugs@applelink.apple.com
;					AppleLink:	APPLE.BUGS
;
;
	IF &TYPE('__SPEECHRECOGNITION__') = 'UNDEFINED' THEN
__SPEECHRECOGNITION__ SET 1

	IF &TYPE('__MEMORY__') = 'UNDEFINED' THEN
	include 'Memory.a'
	ENDIF

gestaltSpeechRecognitionVersion	EQU		'srtb'
gestaltSpeechRecognitionAttr	EQU		'srta'

gestaltDesktopSpeechRecognition	EQU		$00000001
gestaltTelephoneSpeechRecognition EQU	$00000002
;  Error Codes [Speech recognition gets -5100 through -5199] 

kSRNotAvailable					EQU		-5100				; the service requested is not avail or applicable 
kSRInternalError				EQU		-5101				; a system internal or hardware error condition 
kSRComponentNotFound			EQU		-5102				; a needed system resource was not located 
kSROutOfMemory					EQU		-5103				; an out of memory error occurred in the toolbox memory space 
kSRNotASpeechObject				EQU		-5104				; the object specified is no longer or never was valid 
kSRBadParameter					EQU		-5105				; an invalid parameter was specified 
kSRParamOutOfRange				EQU		-5106				; when we say 0-100, don't pass in 101. 
kSRBadSelector					EQU		-5107				; an unrecognized selector was specified 
kSRBufferTooSmall				EQU		-5108				; returned from attribute access functions 
kSRNotARecSystem				EQU		-5109				; the object used was not a SRRecognitionSystem 
kSRFeedbackNotAvail				EQU		-5110				; there is no feedback window associated with SRRecognizer 
kSRCantSetProperty				EQU		-5111				; a non-settable property was specified 
kSRCantGetProperty				EQU		-5112				; a non-gettable property was specified 
kSRCantSetDuringRecognition		EQU		-5113				; the property can't be set while recognition is in progress -- do before or between utterances. 
kSRAlreadyListening				EQU		-5114				; in response to SRStartListening 
kSRNotListeningState			EQU		-5115				; in response to SRStopListening 
kSRModelMismatch				EQU		-5116				; no acoustical models are avail to match request 
kSRNoClientLanguageModel		EQU		-5117				; trying to access a non-specified SRLanguageModel 
kSRNoPendingUtterances			EQU		-5118				; nothing to continue search on 
kSRRecognitionCanceled			EQU		-5119				; an abort error occurred during search 
kSRRecognitionDone				EQU		-5120				; search has finished, but nothing was recognized 
kSROtherRecAlreadyModal			EQU		-5121				; another recognizer is modal at the moment, so can't set this recognizer's kSRBlockModally property right now 
kSRHasNoSubItems				EQU		-5122				; SRCountItems or related routine was called on an object without subelements -- e.g. a word -- rather than phrase, path, or LM. 
kSRSubItemNotFound				EQU		-5123				; returned when accessing a non-existent sub item of a container 
kSRLanguageModelTooBig			EQU		-5124				; Cant build language models so big 
kSRAlreadyReleased				EQU		-5125				; this object has already been released before 
kSRAlreadyFinished				EQU		-5126				; the language model can't be finished twice 
kSRWordNotFound					EQU		-5127				; the spelling couldn't be found in lookup(s) 
kSRNotFinishedWithRejection		EQU		-5128				; property not found because the LMObj is not finished with rejection 
kSRExpansionTooDeep				EQU		-5129				; Language model is left recursive or is embedded too many levels 
kSRTooManyElements				EQU		-5130				; Too many elements added to phrase or path or other langauge model object 
kSRCantAdd						EQU		-5131				; Can't add given type of object to the base SRLanguageObject (e.g.in SRAddLanguageObject)	
kSRSndInSourceDisconnected		EQU		-5132				; Sound input source is disconnected 
kSRCantReadLanguageObject		EQU		-5133				; An error while trying to create new Language object from file or pointer -- possibly bad format 
															; non-release debugging error codes are included here 
kSRNotImplementedYet			EQU		-5199				; you'd better wait for this feature in a future release 
;  Type Definitions 


; typedef SRSpeechObject 				SRRecognitionSystem

; typedef SRSpeechObject 				SRRecognizer

; typedef SRSpeechObject 				SRSpeechSource

; typedef SRSpeechSource 				SRRecognitionResult

; typedef SRSpeechObject 				SRLanguageObject

; typedef SRLanguageObject 				SRLanguageModel

; typedef SRLanguageObject 				SRPath

; typedef SRLanguageObject 				SRPhrase

; typedef SRLanguageObject 				SRWord

;  between 0 and 100 
; typedef unsigned short 				SRSpeedSetting

;  between 0 and 100 
; typedef unsigned short 				SRRejectionLevel

;  When an event occurs, the user supplied proc will be called with a pointer	
; 	to the param passed in and a flag to indicate conditions such				
; 	as interrupt time or system background time.								
SRCallBackStruct		RECORD 0
what					 ds.l	1				; offset: $0 (0)		;  one of notification flags 
message					 ds.l	1				; offset: $4 (4)		;  contains SRRecognitionResult id 
instance				 ds.l	1				; offset: $8 (8)		;  ID of recognizer being notified 
status					 ds.w	1				; offset: $C (12)		;  result status of last search 
flags					 ds.w	1				; offset: $E (14)		;  non-zero if occurs during interrupt 
refCon					 ds.l	1				; offset: $10 (16)		;  user defined - set from SRCallBackParam 
sizeof					 EQU *					; size:   $14 (20)
						ENDR
;  Call back procedure definition 
SRCallBackParam			RECORD 0
callBack				 ds.l	1				; offset: $0 (0)
refCon					 ds.l	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $8 (8)
						ENDR
;  Recognition System Types 

kSRDefaultRecognitionSystemID	EQU		0
;  Recognition System Properties 

kSRFeedbackAndListeningModes	EQU		'fbwn'				; short: one of kSRNoFeedbackHasListenModes, kSRHasFeedbackHasListenModes, kSRNoFeedbackNoListenModes 
kSRRejectedWord					EQU		'rejq'				; the SRWord used to represent a rejection 
kSRCleanupOnClientExit			EQU		'clup'				; Boolean: Default is true. The rec system and everything it owns is disposed when the client application quits 

kSRNoFeedbackNoListenModes		EQU		0					; next allocated recognizer has no feedback window and doesn't use listening modes	
kSRHasFeedbackHasListenModes	EQU		1					; next allocated recognizer has feedback window and uses listening modes 			
kSRNoFeedbackHasListenModes		EQU		2					; next allocated recognizer has no feedback window but does use listening modes 	
;  Speech Source Types 

kSRDefaultSpeechSource			EQU		0
kSRLiveDesktopSpeechSource		EQU		'dklv'				; live desktop sound input 
kSRCanned22kHzSpeechSource		EQU		'ca22'				; AIFF file based 16 bit, 22.050 KHz sound input 
;  Notification via Apple Event or Callback 
;  Notification Flags 

kSRNotifyRecognitionBeginning	EQU		$00000001			; recognition can begin. client must now call SRContinueRecognition or SRCancelRecognition 
kSRNotifyRecognitionDone		EQU		$00000002			; recognition has terminated. result (if any) is available. 
;  Apple Event selectors 
;  AppleEvent message class  

kAESpeechSuite					EQU		'sprc'
;  AppleEvent message event ids 

kAESpeechDone					EQU		'srsd'
kAESpeechDetected				EQU		'srbd'
;  AppleEvent Parameter ids 

keySRRecognizer					EQU		'krec'
keySRSpeechResult				EQU		'kspr'
keySRSpeechStatus				EQU		'ksst'
;  AppleEvent Parameter types 

typeSRRecognizer				EQU		'trec'
typeSRSpeechResult				EQU		'tspr'
;  SRRecognizer Properties 

kSRNotificationParam			EQU		'noti'				; see notification flags below 
kSRCallBackParam				EQU		'call'				; type SRCallBackParam 
kSRSearchStatusParam			EQU		'stat'				; see status flags below 
kSRAutoFinishingParam			EQU		'afin'				; automatic finishing applied on LM for search 
kSRForegroundOnly				EQU		'fgon'				; Boolean. Default is true. If true, client recognizer only active when in foreground.	
kSRBlockBackground				EQU		'blbg'				; Boolean. Default is false. If true, when client recognizer in foreground, rest of LMs are inactive.	
kSRBlockModally					EQU		'blmd'				; Boolean. Default is false. When true, this client's LM is only active LM; all other LMs are inactive. Be nice, don't be modal for long periods! 
kSRWantsResultTextDrawn			EQU		'txfb'				; Boolean. Default is true. If true, search results are posted to Feedback window 
kSRWantsAutoFBGestures			EQU		'dfbr'				; Boolean. Default is true. If true, client needn't call SRProcessBegin/End to get default feedback behavior 
kSRSoundInVolume				EQU		'volu'				; short in [0..100] log scaled sound input power. Can't set this property 
kSRReadAudioFSSpec				EQU		'aurd'				; *FSSpec. Specify FSSpec where raw audio is to be read (AIFF format) using kSRCanned22kHzSpeechSource. Reads until EOF 
kSRCancelOnSoundOut				EQU		'caso'				; Boolean: Default is true.  If any sound is played out during utterance, recognition is aborted. 
kSRSpeedVsAccuracyParam			EQU		'sped'				; SRSpeedSetting between 0 and 100 
;  0 means more accurate but slower. 
;  100 means (much) less accurate but faster. 

kSRUseToggleListen				EQU		0					; listen key modes 
kSRUsePushToTalk				EQU		1

kSRListenKeyMode				EQU		'lkmd'				; short: either kSRUseToggleListen or kSRUsePushToTalk 
kSRListenKeyCombo				EQU		'lkey'				; short: Push-To-Talk key combination; high byte is high byte of event->modifiers, the low byte is the keycode from event->message 
kSRListenKeyName				EQU		'lnam'				; Str63: string representing ListenKeyCombo 
kSRKeyWord						EQU		'kwrd'				; Str255: keyword preceding spoken commands in kSRUseToggleListen mode 
kSRKeyExpected					EQU		'kexp'				; Boolean: Must the PTT key be depressed or the key word spoken before recognition can occur? 
;  Operational Status Flags 

kSRIdleRecognizer				EQU		$00000001			; engine is not active 
kSRSearchInProgress				EQU		$00000002			; search is in progress 
kSRSearchWaitForAllClients		EQU		$00000004			; search is suspended waiting on all clients' input 
kSRMustCancelSearch				EQU		$00000008			; something has occurred (sound played, non-speech detected) requiring the search to abort 
kSRPendingSearch				EQU		$00000010			; we're about to start searching 
;  Recognition Result Properties 

kSRTEXTFormat					EQU		'TEXT'				; raw text in user supplied memory 
kSRPhraseFormat					EQU		'lmph'				; SRPhrase containing result words 
kSRPathFormat					EQU		'lmpt'				; SRPath containing result phrases or words 
kSRLanguageModelFormat			EQU		'lmfm'				; top level SRLanguageModel for post parse 
;  SRLanguageObject Family Properties 

kSRSpelling						EQU		'spel'				; spelling of a SRWord or SRPhrase or SRPath, or name of a SRLanguageModel 
kSRLMObjType					EQU		'lmtp'				; Returns one of SRLanguageObject Types listed below 
kSRRefCon						EQU		'refc'				; 4 bytes of user storage 
kSROptional						EQU		'optl'				; Boolean -- true if SRLanguageObject is optional	
kSREnabled						EQU		'enbl'				; Boolean -- true if SRLanguageObject enabled 
kSRRepeatable					EQU		'rptb'				; Boolean -- true if SRLanguageObject is repeatable 
kSRRejectable					EQU		'rjbl'				; Boolean -- true if SRLanguageObject is rejectable (Recognition System's kSRRejectedWord 
															;		object can be returned in place of SRLanguageObject with this property)	
kSRRejectionLevel				EQU		'rjct'				; SRRejectionLevel between 0 and 100 
;  LM Object Types -- returned as kSRLMObjType property of language model objects 

kSRLanguageModelType			EQU		'lmob'				; SRLanguageModel 
kSRPathType						EQU		'path'				; SRPath 
kSRPhraseType					EQU		'phra'				; SRPhrase 
kSRWordType						EQU		'word'				; SRWord 
;  a normal and reasonable rejection level 

kSRDefaultRejectionLevel		EQU		50
; ******************************************************************************
; 						NOTES ON USING THE API									
; 																				
; 		All operations (with the exception of SRGetRecognitionSystem) are		
; 		directed toward an object allocated or begot from New, Get and Read		
; 		type calls.																
; 																				
; 		There is a simple rule in dealing with allocation and disposal:			
; 																				
; 		*	all toolbox allocations are obtained from a SRRecognitionSystem		
; 																				
; 		*	if you obtain an object via New or Get, then you own a reference 	
; 			to that object and it must be released via SRReleaseObject when		
; 			you no longer need it												
; 																				
; 		*	when you receive a SRRecognitionResult object via AppleEvent or		
; 			callback, it has essentially been created on your behalf and so		
; 			you are responsible for releasing it as above						
; 																				
; 		*	when you close a SRRecognitionSystem, all remaining objects which		
; 			were allocated with it will be forcefully released and any			
; 			remaining references to those objects will be invalid.				
; 																				
; 		This translates into a very simple guideline:							
; 			If you allocate it or have it allocated for you, you must release	
; 			it.  If you are only peeking at it, then don't release it.			
; 																				
; ******************************************************************************
;  Opening and Closing of the SRRecognitionSystem 
;
; pascal OSErr SROpenRecognitionSystem(SRRecognitionSystem *system, OSType systemID)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SROpenRecognitionSystem
			move.w              #$0400,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SROpenRecognitionSystem
	ENDIF

;
; pascal OSErr SRCloseRecognitionSystem(SRRecognitionSystem system)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRCloseRecognitionSystem
			move.w              #$0201,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRCloseRecognitionSystem
	ENDIF

;  Accessing Properties of any Speech Object 
;
; pascal OSErr SRSetProperty(SRSpeechObject srObject, OSType selector, const void *property, Size propertyLen)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRSetProperty
			move.w              #$0802,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRSetProperty
	ENDIF

;
; pascal OSErr SRGetProperty(SRSpeechObject srObject, OSType selector, void *property, Size *propertyLen)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRGetProperty
			move.w              #$0803,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRGetProperty
	ENDIF

;  Any object obtained via New or Get type calls must be released 
;
; pascal OSErr SRReleaseObject(SRSpeechObject srObject)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRReleaseObject
			move.w              #$0204,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRReleaseObject
	ENDIF

;
; pascal OSErr SRGetReference(SRSpeechObject srObject, SRSpeechObject *newObjectRef)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRGetReference
			move.w              #$0425,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRGetReference
	ENDIF

;  SRRecognizer Instance Functions 
;
; pascal OSErr SRNewRecognizer(SRRecognitionSystem system, SRRecognizer *recognizer, OSType sourceID)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRNewRecognizer
			move.w              #$060A,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRNewRecognizer
	ENDIF

;
; pascal OSErr SRStartListening(SRRecognizer recognizer)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRStartListening
			move.w              #$020C,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRStartListening
	ENDIF

;
; pascal OSErr SRStopListening(SRRecognizer recognizer)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRStopListening
			move.w              #$020D,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRStopListening
	ENDIF

;
; pascal OSErr SRSetLanguageModel(SRRecognizer recognizer, SRLanguageModel languageModel)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRSetLanguageModel
			move.w              #$040E,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRSetLanguageModel
	ENDIF

;
; pascal OSErr SRGetLanguageModel(SRRecognizer recognizer, SRLanguageModel *languageModel)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRGetLanguageModel
			move.w              #$040F,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRGetLanguageModel
	ENDIF

;
; pascal OSErr SRContinueRecognition(SRRecognizer recognizer)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRContinueRecognition
			move.w              #$0210,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRContinueRecognition
	ENDIF

;
; pascal OSErr SRCancelRecognition(SRRecognizer recognizer)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRCancelRecognition
			move.w              #$0211,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRCancelRecognition
	ENDIF

;
; pascal OSErr SRIdle(void )
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRIdle
			move.w              #$0028,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRIdle
	ENDIF

;  Language Model Building and Manipulation Functions 
;
; pascal OSErr SRNewLanguageModel(SRRecognitionSystem system, SRLanguageModel *model, const void *name, Size nameLength)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRNewLanguageModel
			move.w              #$0812,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRNewLanguageModel
	ENDIF

;
; pascal OSErr SRNewPath(SRRecognitionSystem system, SRPath *path)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRNewPath
			move.w              #$0413,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRNewPath
	ENDIF

;
; pascal OSErr SRNewPhrase(SRRecognitionSystem system, SRPhrase *phrase, const void *text, Size textLength)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRNewPhrase
			move.w              #$0814,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRNewPhrase
	ENDIF

;
; pascal OSErr SRNewWord(SRRecognitionSystem system, SRWord *word, const void *text, Size textLength)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRNewWord
			move.w              #$0815,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRNewWord
	ENDIF

;  Operations on any object of the SRLanguageObject family 
;
; pascal OSErr SRPutLanguageObjectIntoHandle(SRLanguageObject languageObject, Handle lobjHandle)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRPutLanguageObjectIntoHandle
			move.w              #$0416,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRPutLanguageObjectIntoHandle
	ENDIF

;
; pascal OSErr SRPutLanguageObjectIntoDataFile(SRLanguageObject languageObject, short fRefNum)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRPutLanguageObjectIntoDataFile
			move.w              #$0328,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRPutLanguageObjectIntoDataFile
	ENDIF

;
; pascal OSErr SRNewLanguageObjectFromHandle(SRRecognitionSystem system, SRLanguageObject *languageObject, Handle lObjHandle)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRNewLanguageObjectFromHandle
			move.w              #$0417,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRNewLanguageObjectFromHandle
	ENDIF

;
; pascal OSErr SRNewLanguageObjectFromDataFile(SRRecognitionSystem system, SRLanguageObject *languageObject, short fRefNum)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRNewLanguageObjectFromDataFile
			move.w              #$0427,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRNewLanguageObjectFromDataFile
	ENDIF

;
; pascal OSErr SREmptyLanguageObject(SRLanguageObject languageObject)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SREmptyLanguageObject
			move.w              #$0218,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SREmptyLanguageObject
	ENDIF

;
; pascal OSErr SRChangeLanguageObject(SRLanguageObject languageObject, const void *text, Size textLength)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRChangeLanguageObject
			move.w              #$0619,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRChangeLanguageObject
	ENDIF

;
; pascal OSErr SRAddLanguageObject(SRLanguageObject base, SRLanguageObject addon)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRAddLanguageObject
			move.w              #$041A,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRAddLanguageObject
	ENDIF

;
; pascal OSErr SRAddText(SRLanguageObject base, const void *text, Size textLength, long refCon)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRAddText
			move.w              #$081B,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRAddText
	ENDIF

;
; pascal OSErr SRRemoveLanguageObject(SRLanguageObject base, SRLanguageObject toRemove)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRRemoveLanguageObject
			move.w              #$041C,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRRemoveLanguageObject
	ENDIF

;  Traversing SRRecognitionResults or SRLanguageObjects 
;
; pascal OSErr SRCountItems(SRSpeechObject container, long *count)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRCountItems
			move.w              #$0405,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRCountItems
	ENDIF

;
; pascal OSErr SRGetIndexedItem(SRSpeechObject container, SRSpeechObject *item, long index)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRGetIndexedItem
			move.w              #$0606,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRGetIndexedItem
	ENDIF

;
; pascal OSErr SRSetIndexedItem(SRSpeechObject container, SRSpeechObject item, long index)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRSetIndexedItem
			move.w              #$0607,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRSetIndexedItem
	ENDIF

;
; pascal OSErr SRRemoveIndexedItem(SRSpeechObject container, long index)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRRemoveIndexedItem
			move.w              #$0408,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRRemoveIndexedItem
	ENDIF

;  Utilizing the System Feedback Window 
;
; pascal OSErr SRDrawText(SRRecognizer recognizer, const void *dispText, Size dispLength)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRDrawText
			move.w              #$0621,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRDrawText
	ENDIF

;
; pascal OSErr SRDrawRecognizedText(SRRecognizer recognizer, const void *dispText, Size dispLength)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRDrawRecognizedText
			move.w              #$0622,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRDrawRecognizedText
	ENDIF

;
; pascal OSErr SRSpeakText(SRRecognizer recognizer, const void *speakText, Size speakLength)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRSpeakText
			move.w              #$0620,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRSpeakText
	ENDIF

;
; pascal OSErr SRSpeakAndDrawText(SRRecognizer recognizer, const void *text, Size textLength)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRSpeakAndDrawText
			move.w              #$061F,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRSpeakAndDrawText
	ENDIF

;
; pascal OSErr SRStopSpeech(SRRecognizer recognizer)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRStopSpeech
			move.w              #$0223,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRStopSpeech
	ENDIF

;
; pascal Boolean SRSpeechBusy(SRRecognizer recognizer)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRSpeechBusy
			move.w              #$0224,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRSpeechBusy
	ENDIF

;
; pascal OSErr SRProcessBegin(SRRecognizer recognizer, Boolean failed)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRProcessBegin
			move.w              #$031D,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRProcessBegin
	ENDIF

;
; pascal OSErr SRProcessEnd(SRRecognizer recognizer, Boolean failed)
;
	IF Â¬ GENERATINGCFM THEN
		Macro
		_SRProcessEnd
			move.w              #$031E,d0
			dc.w            	$AA56
		EndM
	ELSE
		IMPORT_CFM_FUNCTION SRProcessEnd
	ENDIF

	ENDIF ; __SPEECHRECOGNITION__ 


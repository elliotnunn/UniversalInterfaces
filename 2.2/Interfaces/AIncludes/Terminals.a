;
;	File:		Terminals.a
;
;	Contains:	Communications Toolbox Terminal tool Interfaces.
;
;	Version:	Technology:	System 7.5
;				Package:	Universal Interfaces 2.2 in “MPW” on ETO #20
;
;	Copyright:	© 1984-1995 by Apple Computer, Inc.
;				All rights reserved.
;
;	Bugs?:		If you find a problem with this file, use the Apple Bug Reporter
;				stack.  Include the file and version information (from above)
;				in the problem description and send to:
;					Internet:	apple.bugs@applelink.apple.com
;					AppleLink:	APPLE.BUGS
;
;

	IF &TYPE('__TERMINALS__') = 'UNDEFINED' THEN
__TERMINALS__ SET 1


	IF &TYPE('__DIALOGS__') = 'UNDEFINED' THEN
	include 'Dialogs.a'
	ENDIF
;		include 'Errors.a'											;
;			include 'ConditionalMacros.a'							;
;		include 'Memory.a'											;
;			include 'Types.a'										;
;			include 'MixedMode.a'									;
;		include 'Menus.a'											;
;			include 'Quickdraw.a'									;
;				include 'QuickdrawText.a'							;
;		include 'Controls.a'										;
;		include 'Windows.a'										;
;			include 'Events.a'										;
;				include 'OSUtils.a'								;
;		include 'TextEdit.a'										;

	IF &TYPE('__CTBUTILITIES__') = 'UNDEFINED' THEN
	include 'CTBUtilities.a'
	ENDIF
;		include 'StandardFile.a'									;
;			include 'Files.a'										;
;				include 'Finder.a'									;
;		include 'AppleTalk.a'										;

	IF &TYPE('__CONNECTIONS__') = 'UNDEFINED' THEN
	include 'Connections.a'
	ENDIF

; current Terminal Manager version 	
curTMVersion					EQU		2
; current Terminal Manager Environment Record version 	
curTermEnvRecVers				EQU		0
; error codes    
tmGenericError					EQU		-1
tmNoErr							EQU		0
tmNotSent						EQU		1
tmEnvironsChanged				EQU		2
tmNotSupported					EQU		7
tmNoTools						EQU		8

; typedef OSErr 			TMErr

tmInvisible						EQU		1 << 0
tmSaveBeforeClear				EQU		1 << 1
tmNoMenus						EQU		1 << 2
tmAutoScroll					EQU		1 << 3
tmConfigChanged					EQU		1 << 4

; typedef unsigned long 	TMFlags

selTextNormal					EQU		1 << 0
selTextBoxed					EQU		1 << 1
selGraphicsMarquee				EQU		1 << 2
selGraphicsLasso				EQU		1 << 3
tmSearchNoDiacrit				EQU		1 << 8
tmSearchNoCase					EQU		1 << 9

; typedef unsigned short 	TMSearchTypes
; typedef short 			TMSelTypes

cursorText						EQU		1
cursorGraphics					EQU		2

; typedef unsigned short 	TMCursorTypes

tmTextTerminal					EQU		1 << 0
tmGraphicsTerminal				EQU		1 << 1

; typedef unsigned short 	TMTermTypes
TermDataBlock 			RECORD	0
flags					 ds.w   1		; offset: $0 (0)
theData					 ds.l   1		; offset: $2 (2)
auxData					 ds.l   1		; offset: $6 (6)
reserved				 ds.l   1		; offset: $A (10)
sizeof					 EQU *			; size:   $E (14)
						ENDR

; typedef struct TermDataBlock  TermDataBlock
; typedef TermDataBlock 	*TermDataBlockPtr, **TermDataBlockH, **TermDataBlockHandle
TermEnvironRec 			RECORD	0
version					 ds.w   1		; offset: $0 (0)
termType				 ds.w   1		; offset: $2 (2)
textRows				 ds.w   1		; offset: $4 (4)
textCols				 ds.w   1		; offset: $6 (6)
cellSize				 ds     Point	; offset: $8 (8)
graphicSize				 ds     Rect	; offset: $C (12)
slop					 ds     Point	; offset: $14 (20)
auxSpace				 ds     Rect	; offset: $18 (24)
sizeof					 EQU *			; size:   $20 (32)
						ENDR

; typedef struct TermEnvironRec  TermEnvironRec
; typedef TermEnvironRec 	*TermEnvironPtr
TMSelection 			RECORD	0
selRect					 ds     Rect	; offset: $0 (0)
						 ORG 0
selRgnHandle			 ds.l   1		; offset: $0 (0)
						 ORG 8
sizeof					 EQU *			; size:   $8 (8)
						ENDR

; typedef union TMSelection  TMSelection
; typedef struct TermRecord  TermRecord, *TermPtr, **TermHandle
TermRecord 				RECORD	0
procID					 ds.w   1		; offset: $0 (0)
flags					 ds.l   1		; offset: $2 (2)
errCode					 ds.w   1		; offset: $6 (6)
refCon					 ds.l   1		; offset: $8 (8)
userData				 ds.l   1		; offset: $C (12)
defProc					 ds.l   1		; offset: $10 (16)
config					 ds.l   1		; offset: $14 (20)
oldConfig				 ds.l   1		; offset: $18 (24)
environsProc			 ds.l   1		; offset: $1C (28)
reserved1				 ds.l   1		; offset: $20 (32)
reserved2				 ds.l   1		; offset: $24 (36)
tmPrivate				 ds.l   1		; offset: $28 (40)
sendProc				 ds.l   1		; offset: $2C (44)
breakProc				 ds.l   1		; offset: $30 (48)
cacheProc				 ds.l   1		; offset: $34 (52)
clikLoop				 ds.l   1		; offset: $38 (56)
owner					 ds.l   1		; offset: $3C (60)
termRect				 ds     Rect	; offset: $40 (64)
viewRect				 ds     Rect	; offset: $48 (72)
visRect					 ds     Rect	; offset: $50 (80)
lastIdle				 ds.l   1		; offset: $58 (88)
selection				 ds.l   2		; offset: $5C (92)
selType					 ds.w   1		; offset: $64 (100)
mluField				 ds.l   1		; offset: $66 (102)
sizeof					 EQU *			; size:   $6A (106)
						ENDR

;
; pascal TMErr InitTM(void)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	InitTM
	ENDIF

;
; pascal Handle TMGetVersion(TermHandle hTerm)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetVersion
	ENDIF

;
; pascal short TMGetTMVersion(void)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetTMVersion
	ENDIF

;
; pascal TermHandle TMNew(const Rect *termRect, const Rect *viewRect, TMFlags flags, short procID, WindowPtr owner, TerminalSendUPP sendProc, TerminalCacheUPP cacheProc, TerminalBreakUPP breakProc, TerminalClikLoopUPP clikLoop, TerminalEnvironsUPP environsProc, long refCon, long userData)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMNew
	ENDIF

;
; pascal void TMDispose(TermHandle hTerm)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMDispose
	ENDIF

;
; pascal void TMKey(TermHandle hTerm, const EventRecord *theEvent)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMKey
	ENDIF

;
; pascal void TMUpdate(TermHandle hTerm, RgnHandle visRgn)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMUpdate
	ENDIF

;
; pascal void TMPaint(TermHandle hTerm, const TermDataBlock *theTermData, const Rect *theRect)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMPaint
	ENDIF

;
; pascal void TMActivate(TermHandle hTerm, Boolean activate)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMActivate
	ENDIF

;
; pascal void TMResume(TermHandle hTerm, Boolean resume)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMResume
	ENDIF

;
; pascal void TMClick(TermHandle hTerm, const EventRecord *theEvent)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMClick
	ENDIF

;
; pascal void TMIdle(TermHandle hTerm)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMIdle
	ENDIF

;
; pascal long TMStream(TermHandle hTerm, void *theBuffer, long theLength, CMFlags flags)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMStream
	ENDIF

;
; pascal Boolean TMMenu(TermHandle hTerm, short menuID, short item)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMMenu
	ENDIF

;
; pascal void TMReset(TermHandle hTerm)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMReset
	ENDIF

;
; pascal void TMClear(TermHandle hTerm)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMClear
	ENDIF

;
; pascal void TMResize(TermHandle hTerm, const Rect *newViewRect)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMResize
	ENDIF

;
; pascal long TMGetSelect(TermHandle hTerm, Handle theData, ResType *theType)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetSelect
	ENDIF

;
; pascal void TMGetLine(TermHandle hTerm, short lineNo, TermDataBlock *theTermData)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetLine
	ENDIF

;
; pascal void TMSetSelection(TermHandle hTerm, const TMSelection *theSelection, TMSelTypes selType)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMSetSelection
	ENDIF

;
; pascal void TMScroll(TermHandle hTerm, short dh, short dv)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMScroll
	ENDIF

;
; pascal Boolean TMValidate(TermHandle hTerm)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMValidate
	ENDIF

;
; pascal void TMDefault(Ptr *theConfig, short procID, Boolean allocate)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMDefault
	ENDIF

;
; pascal Handle TMSetupPreflight(short procID, long *magicCookie)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMSetupPreflight
	ENDIF

;
; pascal void TMSetupSetup(short procID, const void *theConfig, short count, DialogPtr theDialog, long *magicCookie)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMSetupSetup
	ENDIF

;
; pascal Boolean TMSetupFilter(short procID, const void *theConfig, short count, DialogPtr theDialog, EventRecord *theEvent, short *theItem, long *magicCookie)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMSetupFilter
	ENDIF

;
; pascal void TMSetupItem(short procID, const void *theConfig, short count, DialogPtr theDialog, short *theItem, long *magicCookie)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMSetupItem
	ENDIF

;
; pascal void TMSetupXCleanup(short procID, const void *theConfig, short count, DialogPtr theDialog, Boolean OKed, long *magicCookie)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMSetupXCleanup
	ENDIF

;
; pascal void TMSetupPostflight(short procID)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMSetupPostflight
	ENDIF

;
; pascal Ptr TMGetConfig(TermHandle hTerm)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetConfig
	ENDIF

;
; pascal short TMSetConfig(TermHandle hTerm, const void *thePtr)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMSetConfig
	ENDIF

;
; pascal OSErr TMIntlToEnglish(TermHandle hTerm, const void *inputPtr, Ptr *outputPtr, short language)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMIntlToEnglish
	ENDIF

;
; pascal OSErr TMEnglishToIntl(TermHandle hTerm, const void *inputPtr, Ptr *outputPtr, short language)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMEnglishToIntl
	ENDIF

;
; pascal void TMGetToolName(short id, Str255 name)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetToolName
	ENDIF

;
; pascal short TMGetProcID(ConstStr255Param name)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetProcID
	ENDIF

;
; pascal void TMSetRefCon(TermHandle hTerm, long refCon)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMSetRefCon
	ENDIF

;
; pascal long TMGetRefCon(TermHandle hTerm)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetRefCon
	ENDIF

;
; pascal void TMSetUserData(TermHandle hTerm, long userData)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMSetUserData
	ENDIF

;
; pascal long TMGetUserData(TermHandle hTerm)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetUserData
	ENDIF

;
; pascal short TMAddSearch(TermHandle hTerm, ConstStr255Param theString, const Rect *where, TMSearchTypes searchType, TerminalSearchCallBackUPP callBack)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMAddSearch
	ENDIF

;
; pascal void TMRemoveSearch(TermHandle hTerm, short refnum)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMRemoveSearch
	ENDIF

;
; pascal void TMClearSearch(TermHandle hTerm)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMClearSearch
	ENDIF

;
; pascal Point TMGetCursor(TermHandle hTerm, TMCursorTypes cursType)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetCursor
	ENDIF

;
; pascal TMErr TMGetTermEnvirons(TermHandle hTerm, TermEnvironRec *theEnvirons)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetTermEnvirons
	ENDIF

;
; pascal short TMChoose(TermHandle *hTerm, Point where, TerminalChooseIdleUPP idleProc)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMChoose
	ENDIF

;
; pascal void TMEvent(TermHandle hTerm, const EventRecord *theEvent)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMEvent
	ENDIF

;
; pascal Boolean TMDoTermKey(TermHandle hTerm, ConstStr255Param theKey)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMDoTermKey
	ENDIF

;
; pascal short TMCountTermKeys(TermHandle hTerm)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMCountTermKeys
	ENDIF

;
; pascal void TMGetIndTermKey(TermHandle hTerm, short id, Str255 theKey)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetIndTermKey
	ENDIF

;
; pascal void TMGetErrorString(TermHandle hTerm, short id, Str255 errMsg)
;
	IF GENERATINGCFM THEN
		IMPORT_CFM_FUNCTION	TMGetErrorString
	ENDIF

	ENDIF ; __TERMINALS__

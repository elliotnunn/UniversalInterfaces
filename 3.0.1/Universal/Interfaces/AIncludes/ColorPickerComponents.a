;
;	File:		ColorPickerComponents.a
;
;	Contains:	Color Picker Component Interfaces.
;
;	Version:	Technology:	System 7.5
;				Release:	Universal Interfaces 3.0.1
;
;	Copyright:	© 1994-1997 by Apple Computer, Inc., all rights reserved.
;
;	Bugs?:		Please include the the file and version information (from above) with
;				the problem description.  Developers belonging to one of the Apple
;				developer programs can submit bug reports to:
;
;					devsupport@apple.com
;
;
	IF &TYPE('__COLORPICKERCOMPONENTS__') = 'UNDEFINED' THEN
__COLORPICKERCOMPONENTS__ SET 1

	IF &TYPE('__COLORPICKER__') = 'UNDEFINED' THEN
	include 'ColorPicker.a'
	ENDIF
	IF &TYPE('__COMPONENTS__') = 'UNDEFINED' THEN
	include 'Components.a'
	ENDIF
	IF &TYPE('__MIXEDMODE__') = 'UNDEFINED' THEN
	include 'MixedMode.a'
	ENDIF
	IF &TYPE('__BALLOONS__') = 'UNDEFINED' THEN
	include 'Balloons.a'
	ENDIF


kPickerComponentType			EQU		'cpkr'


kPickerInit						EQU		0
kPickerTestGraphicsWorld		EQU		1
kPickerGetDialog				EQU		2
kPickerGetItemList				EQU		3
kPickerGetColor					EQU		4
kPickerSetColor					EQU		5
kPickerEvent					EQU		6
kPickerEdit						EQU		7
kPickerSetVisibility			EQU		8
kPickerDisplay					EQU		9
kPickerItemHit					EQU		10
kPickerSetBaseItem				EQU		11
kPickerGetProfile				EQU		12
kPickerSetProfile				EQU		13
kPickerGetPrompt				EQU		14
kPickerSetPrompt				EQU		15
kPickerGetIconData				EQU		16
kPickerGetEditMenuState			EQU		17
kPickerSetOrigin				EQU		18
kPickerExtractHelpItem			EQU		19
kPickerSetColorChangedProc		EQU		20
kNPickerGetColor				EQU		21
kNPickerSetColor				EQU		22
kNPickerGetProfile				EQU		23
kNPickerSetProfile				EQU		24
kNPickerSetColorChangedProc		EQU		25
	IF OLDROUTINENAMES THEN

kInitPicker						EQU		0
kTestGraphicsWorld				EQU		1
kGetDialog						EQU		2
kGetItemList					EQU		3
kGetColor						EQU		4
kSetColor						EQU		5
kEvent							EQU		6
kEdit							EQU		7
kSetVisibility					EQU		8
kDrawPicker						EQU		9
kItemHit						EQU		10
kSetBaseItem					EQU		11
kGetProfile						EQU		12
kSetProfile						EQU		13
kGetPrompt						EQU		14
kSetPrompt						EQU		15
kGetIconData					EQU		16
kGetEditMenuState				EQU		17
kSetOrigin						EQU		18
kExtractHelpItem				EQU		19
	ENDIF	; OLDROUTINENAMES
;  These structs were moved here from the ColorPicker header.


kDidNothing						EQU		0
kColorChanged					EQU		1
kOkHit							EQU		2
kCancelHit						EQU		3
kNewPickerChosen				EQU		4
kApplItemHit					EQU		5
; typedef short 						PickerAction


kOriginalColor					EQU		0
kNewColor						EQU		1
; typedef short 						ColorType


kCut							EQU		0
kCopy							EQU		1
kPaste							EQU		2
kClear							EQU		3
kUndo							EQU		4
; typedef short 						EditOperation


kMouseDown						EQU		0
kKeyDown						EQU		1
kFieldEntered					EQU		2
kFieldLeft						EQU		3
kCutOp							EQU		4
kCopyOp							EQU		5
kPasteOp						EQU		6
kClearOp						EQU		7
kUndoOp							EQU		8
; typedef short 						ItemModifier

;  These are for the flags field in the picker's 'thng' resource. 

CanDoColor						EQU		1
CanDoBlackWhite					EQU		2
AlwaysModifiesPalette			EQU		4
MayModifyPalette				EQU		8
PickerIsColorSyncAware			EQU		16
CanDoSystemDialog				EQU		32
CanDoApplDialog					EQU		64
HasOwnDialog					EQU		128
CanDetach						EQU		256
PickerIsColorSync2Aware			EQU		512


kNoForcast						EQU		0
kMenuChoice						EQU		1
kDialogAccept					EQU		2
kDialogCancel					EQU		3
kLeaveFocus						EQU		4
kPickerSwitch					EQU		5
kNormalKeyDown					EQU		6
kNormalMouseDown				EQU		7
; typedef short 						EventForcaster

PickerIconData			RECORD 0
scriptCode				 ds.w	1				; offset: $0 (0)
iconSuiteID				 ds.w	1				; offset: $2 (2)
helpResType				 ds.l	1				; offset: $4 (4)
helpResID				 ds.w	1				; offset: $8 (8)
sizeof					 EQU *					; size:   $A (10)
						ENDR

PickerInitData			RECORD 0
pickerDialog			 ds.l	1				; offset: $0 (0)
choicesDialog			 ds.l	1				; offset: $4 (4)
flags					 ds.l	1				; offset: $8 (8)
yourself				 ds.l	1				; offset: $C (12)
sizeof					 EQU *					; size:   $10 (16)
						ENDR

PickerMenuState			RECORD 0
cutEnabled				 ds.b	1				; offset: $0 (0)
copyEnabled				 ds.b	1				; offset: $1 (1)
pasteEnabled			 ds.b	1				; offset: $2 (2)
clearEnabled			 ds.b	1				; offset: $3 (3)
undoEnabled				 ds.b	1				; offset: $4 (4)
filler					 ds.b	1				; offset: $5 (5)
undoString				 ds		Str255			; offset: $6 (6)
sizeof					 EQU *					; size:   $106 (262)
						ENDR
SystemDialogInfo		RECORD 0
flags					 ds.l	1				; offset: $0 (0)
pickerType				 ds.l	1				; offset: $4 (4)
placeWhere				 ds.w	1				; offset: $8 (8)
dialogOrigin			 ds		Point			; offset: $A (10)
mInfo					 ds		PickerMenuItemInfo ; offset: $E (14)
sizeof					 EQU *					; size:   $1A (26)
						ENDR

PickerDialogInfo		RECORD 0
flags					 ds.l	1				; offset: $0 (0)
pickerType				 ds.l	1				; offset: $4 (4)
dialogOrigin			 ds.l	1				; offset: $8 (8)
mInfo					 ds		PickerMenuItemInfo ; offset: $C (12)
sizeof					 EQU *					; size:   $18 (24)
						ENDR

ApplicationDialogInfo	RECORD 0
flags					 ds.l	1				; offset: $0 (0)
pickerType				 ds.l	1				; offset: $4 (4)
theDialog				 ds.l	1				; offset: $8 (8)
pickerOrigin			 ds		Point			; offset: $C (12)
mInfo					 ds		PickerMenuItemInfo ; offset: $10 (16)
sizeof					 EQU *					; size:   $1C (28)
						ENDR

EventData				RECORD 0
event					 ds.l	1				; offset: $0 (0)
action					 ds.w	1				; offset: $4 (4)
itemHit					 ds.w	1				; offset: $6 (6)
handled					 ds.b	1				; offset: $8 (8)
filler					 ds.b	1				; offset: $9 (9)
colorProc				 ds.l	1				; offset: $A (10)
colorProcData			 ds.l	1				; offset: $E (14)
forcast					 ds.w	1				; offset: $12 (18)
sizeof					 EQU *					; size:   $14 (20)
						ENDR

EditData				RECORD 0
theEdit					 ds.w	1				; offset: $0 (0)
action					 ds.w	1				; offset: $2 (2)
handled					 ds.b	1				; offset: $4 (4)
filler					 ds.b	1				; offset: $5 (5)
sizeof					 EQU *					; size:   $6 (6)
						ENDR

ItemHitData				RECORD 0
itemHit					 ds.w	1				; offset: $0 (0)
iMod					 ds.w	1				; offset: $2 (2)
action					 ds.w	1				; offset: $4 (4)
colorProc				 ds.l	1				; offset: $6 (6)
colorProcData			 ds.l	1				; offset: $A (10)
where					 ds		Point			; offset: $E (14)
sizeof					 EQU *					; size:   $12 (18)
						ENDR
HelpItemInfo			RECORD 0
options					 ds.l	1				; offset: $0 (0)
tip						 ds		Point			; offset: $4 (4)
altRect					 ds		Rect			; offset: $8 (8)
theProc					 ds.w	1				; offset: $10 (16)
helpVariant				 ds.w	1				; offset: $12 (18)
helpMessage				 ds		HMMessageRecord ; offset: $14 (20)
sizeof					 EQU *					; size:   $116 (278)
						ENDR

;
; pascal ComponentResult PickerInit(long storage, PickerInitData *data)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerInit
			move.l              #$00040000,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerInit
	ENDIF

;
; pascal ComponentResult PickerTestGraphicsWorld(long storage, PickerInitData *data)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerTestGraphicsWorld
			move.l              #$00040001,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerTestGraphicsWorld
	ENDIF

;
; pascal ComponentResult PickerGetDialog(long storage)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerGetDialog
			move.l              #$00000002,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerGetDialog
	ENDIF

;
; pascal ComponentResult PickerGetItemList(long storage)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerGetItemList
			move.l              #$00000003,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerGetItemList
	ENDIF

;
; pascal ComponentResult PickerGetColor(long storage, ColorType whichColor, PMColorPtr color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerGetColor
			move.l              #$00060004,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerGetColor
	ENDIF

;
; pascal ComponentResult PickerSetColor(long storage, ColorType whichColor, PMColorPtr color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerSetColor
			move.l              #$00060005,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerSetColor
	ENDIF

;
; pascal ComponentResult PickerEvent(long storage, EventData *data)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerEvent
			move.l              #$00040006,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerEvent
	ENDIF

;
; pascal ComponentResult PickerEdit(long storage, EditData *data)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerEdit
			move.l              #$00040007,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerEdit
	ENDIF

;
; pascal ComponentResult PickerSetVisibility(long storage, Boolean visible)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerSetVisibility
			move.l              #$00020008,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerSetVisibility
	ENDIF

;
; pascal ComponentResult PickerDisplay(long storage)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerDisplay
			move.l              #$00000009,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerDisplay
	ENDIF

;
; pascal ComponentResult PickerItemHit(long storage, ItemHitData *data)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerItemHit
			move.l              #$0004000A,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerItemHit
	ENDIF

;
; pascal ComponentResult PickerSetBaseItem(long storage, short baseItem)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerSetBaseItem
			move.l              #$0002000B,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerSetBaseItem
	ENDIF

;
; pascal ComponentResult PickerGetProfile(long storage)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerGetProfile
			move.l              #$0000000C,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerGetProfile
	ENDIF

;
; pascal ComponentResult PickerSetProfile(long storage, CMProfileHandle profile)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerSetProfile
			move.l              #$0004000D,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerSetProfile
	ENDIF

;
; pascal ComponentResult PickerGetPrompt(long storage, Str255 prompt)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerGetPrompt
			move.l              #$0004000E,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerGetPrompt
	ENDIF

;
; pascal ComponentResult PickerSetPrompt(long storage, ConstStr255Param prompt)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerSetPrompt
			move.l              #$0004000F,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerSetPrompt
	ENDIF

;
; pascal ComponentResult PickerGetIconData(long storage, PickerIconData *data)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerGetIconData
			move.l              #$00040010,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerGetIconData
	ENDIF

;
; pascal ComponentResult PickerGetEditMenuState(long storage, PickerMenuState *mState)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerGetEditMenuState
			move.l              #$00040011,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerGetEditMenuState
	ENDIF

;
; pascal ComponentResult PickerSetOrigin(long storage, Point where)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerSetOrigin
			move.l              #$00040012,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerSetOrigin
	ENDIF

; 	Below are the ColorPicker 2.1 routines.


;
; pascal ComponentResult PickerSetColorChangedProc(long storage, ColorChangedUPP colorProc, long colorProcData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerSetColorChangedProc
			move.l              #$00080014,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerSetColorChangedProc
	ENDIF

;  New Color Picker 2.1 messages.  If you don't wish to support these you should already be... 
;  returning a paramErr in your main entry routine.  They have new selectors
;
; pascal ComponentResult NPickerGetColor(long storage, ColorType whichColor, NPMColor *color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_NPickerGetColor
			move.l              #$00060015,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NPickerGetColor
	ENDIF

;
; pascal ComponentResult NPickerSetColor(long storage, ColorType whichColor, NPMColor *color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_NPickerSetColor
			move.l              #$00060016,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NPickerSetColor
	ENDIF

;
; pascal ComponentResult NPickerGetProfile(long storage, CMProfileRef *profile)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_NPickerGetProfile
			move.l              #$00040017,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NPickerGetProfile
	ENDIF

;
; pascal ComponentResult NPickerSetProfile(long storage, CMProfileRef profile)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_NPickerSetProfile
			move.l              #$00040018,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NPickerSetProfile
	ENDIF

;
; pascal ComponentResult NPickerSetColorChangedProc(long storage, NColorChangedUPP colorProc, long colorProcData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_NPickerSetColorChangedProc
			move.l              #$00080019,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NPickerSetColorChangedProc
	ENDIF

;
; pascal ComponentResult PickerExtractHelpItem(long storage, short itemNo, short whichMsg, HelpItemInfo *helpInfo)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PickerExtractHelpItem
			move.l              #$00080013,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PickerExtractHelpItem
	ENDIF

	ENDIF ; __COLORPICKERCOMPONENTS__ 


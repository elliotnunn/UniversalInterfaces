;
;	File:		Dialogs.a
;
;	Contains:	Dialog Manager interfaces.
;
;	Version:	Technology:	System 7.5
;				Release:	Universal Interfaces 3.0.1
;
;	Copyright:	© 1985-1997 by Apple Computer, Inc., all rights reserved
;
;	Bugs?:		Please include the the file and version information (from above) with
;				the problem description.  Developers belonging to one of the Apple
;				developer programs can submit bug reports to:
;
;					devsupport@apple.com
;
;
	IF &TYPE('__DIALOGS__') = 'UNDEFINED' THEN
__DIALOGS__ SET 1

	IF &TYPE('__TYPES__') = 'UNDEFINED' THEN
	include 'Types.a'
	ENDIF
	IF &TYPE('__MIXEDMODE__') = 'UNDEFINED' THEN
	include 'MixedMode.a'
	ENDIF
	IF &TYPE('__EVENTS__') = 'UNDEFINED' THEN
	include 'Events.a'
	ENDIF
	IF &TYPE('__MACWINDOWS__') = 'UNDEFINED' THEN
	include 'MacWindows.a'
	ENDIF
	IF &TYPE('__TEXTEDIT__') = 'UNDEFINED' THEN
	include 'TextEdit.a'
	ENDIF


															; new, more standard names for dialog item types
kControlDialogItem				EQU		4
kButtonDialogItem				EQU		4
kCheckBoxDialogItem				EQU		5
kRadioButtonDialogItem			EQU		6
kResourceControlDialogItem		EQU		7
kStaticTextDialogItem			EQU		8
kEditTextDialogItem				EQU		16
kIconDialogItem					EQU		32
kPictureDialogItem				EQU		64
kUserDialogItem					EQU		0
kItemDisableBit					EQU		128

															; old names for dialog item types
ctrlItem						EQU		4
btnCtrl							EQU		0
chkCtrl							EQU		1
radCtrl							EQU		2
resCtrl							EQU		3
statText						EQU		8
editText						EQU		16
iconItem						EQU		32
picItem							EQU		64
userItem						EQU		0
itemDisable						EQU		128

															; standard dialog item numbers
kStdOkItemIndex					EQU		1
kStdCancelItemIndex				EQU		2					; old names
ok								EQU		1
cancel							EQU		2

															; standard icon resource id's 	
kStopIcon						EQU		0
kNoteIcon						EQU		1
kCautionIcon					EQU		2					; old names
stopIcon						EQU		0
noteIcon						EQU		1
cautionIcon						EQU		2


	IF OLDROUTINENAMES THEN

;   These constants lived briefly on ETO 16.  They suggest
;   that there is only one index you can use for the OK 
;   item, which is not true.  You can put the ok item 
;   anywhere you want in the DITL.



kOkItemIndex					EQU		1
kCancelItemIndex				EQU		2
	ENDIF	; OLDROUTINENAMES
; 	Dialog Item List Manipulation Constants	
; typedef SInt16 						DITLMethod


overlayDITL						EQU		0
appendDITLRight					EQU		1
appendDITLBottom				EQU		2
; typedef SInt16 						StageList

;  DialogRef is obsolete. Use DialogPtr instead.
; typedef DialogPtr 					DialogRef

DialogRecord			RECORD 0
window					 ds		WindowRecord	; offset: $0 (0)
items					 ds.l	1				; offset: $9C (156)
textH					 ds.l	1				; offset: $A0 (160)
editField				 ds.w	1				; offset: $A4 (164)
editOpen				 ds.w	1				; offset: $A6 (166)
aDefItem				 ds.w	1				; offset: $A8 (168)
sizeof					 EQU *					; size:   $AA (170)
						ENDR
; typedef struct DialogRecord *			DialogPeek

DialogTemplate			RECORD 0
boundsRect				 ds		Rect			; offset: $0 (0)
procID					 ds.w	1				; offset: $8 (8)
visible					 ds.b	1				; offset: $A (10)
filler1					 ds.b	1				; offset: $B (11)
goAwayFlag				 ds.b	1				; offset: $C (12)
filler2					 ds.b	1				; offset: $D (13)
refCon					 ds.l	1				; offset: $E (14)
itemsID					 ds.w	1				; offset: $12 (18)
title					 ds		Str255			; offset: $14 (20)
sizeof					 EQU *					; size:   $114 (276)
						ENDR
; typedef struct DialogTemplate *		DialogTPtr

; typedef DialogTPtr *					DialogTHndl

AlertTemplate			RECORD 0
boundsRect				 ds		Rect			; offset: $0 (0)
itemsID					 ds.w	1				; offset: $8 (8)
stages					 ds.w	1				; offset: $A (10)
sizeof					 EQU *					; size:   $C (12)
						ENDR
; typedef struct AlertTemplate *		AlertTPtr

; typedef AlertTPtr *					AlertTHndl

;  new type abstractions for the dialog manager 
; typedef SInt16 						DialogItemIndexZeroBased

; typedef SInt16 						DialogItemIndex

; typedef SInt16 						DialogItemType

;  dialog manager callbacks 

; 
;	NOTE: Code running under MultiFinder or System 7.0 or newer
;	should always pass NULL to InitDialogs.
;

;
; pascal void InitDialogs(void *ignored)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InitDialogs:	OPWORD	$A97B
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InitDialogs
	ENDIF

;
; pascal void ErrorSound(SoundUPP soundProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ErrorSound:	OPWORD	$A98C
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ErrorSound
	ENDIF

;
; pascal DialogPtr NewDialog(void *dStorage, const Rect *boundsRect, ConstStr255Param title, Boolean visible, SInt16 procID, WindowPtr behind, Boolean goAwayFlag, SInt32 refCon, Handle items)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_NewDialog:	OPWORD	$A97D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NewDialog
	ENDIF

;
; pascal DialogPtr GetNewDialog(SInt16 dialogID, void *dStorage, WindowPtr behind)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetNewDialog:	OPWORD	$A97C
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetNewDialog
	ENDIF

;
; pascal DialogPtr NewColorDialog(void *dStorage, const Rect *boundsRect, ConstStr255Param title, Boolean visible, SInt16 procID, WindowPtr behind, Boolean goAwayFlag, SInt32 refCon, Handle items)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_NewColorDialog:	OPWORD	$AA4B
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NewColorDialog
	ENDIF

;
; pascal void CloseDialog(DialogPtr theDialog)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CloseDialog:	OPWORD	$A982
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CloseDialog
	ENDIF

;
; pascal void DisposeDialog(DialogPtr theDialog)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DisposeDialog:	OPWORD	$A983
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DisposeDialog
	ENDIF

;
; pascal void ModalDialog(ModalFilterUPP modalFilter, DialogItemIndex *itemHit)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ModalDialog:	OPWORD	$A991
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ModalDialog
	ENDIF

;
; pascal Boolean IsDialogEvent(const EventRecord *theEvent)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_IsDialogEvent:	OPWORD	$A97F
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsDialogEvent
	ENDIF

;
; pascal Boolean DialogSelect(const EventRecord *theEvent, DialogPtr *theDialog, DialogItemIndex *itemHit)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DialogSelect:	OPWORD	$A980
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DialogSelect
	ENDIF

;
; pascal void DrawDialog(DialogPtr theDialog)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DrawDialog:	OPWORD	$A981
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DrawDialog
	ENDIF

;
; pascal void UpdateDialog(DialogPtr theDialog, RgnHandle updateRgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_UpdateDialog:	OPWORD	$A978
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UpdateDialog
	ENDIF

;
; pascal void HideDialogItem(DialogPtr theDialog, DialogItemIndex itemNo)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_HideDialogItem:	OPWORD	$A827
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HideDialogItem
	ENDIF

;
; pascal void ShowDialogItem(DialogPtr theDialog, DialogItemIndex itemNo)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ShowDialogItem:	OPWORD	$A828
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ShowDialogItem
	ENDIF

;
; pascal DialogItemIndexZeroBased FindDialogItem(DialogPtr theDialog, Point thePt)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FindDialogItem:	OPWORD	$A984
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FindDialogItem
	ENDIF

;
; pascal DialogItemIndex Alert(SInt16 alertID, ModalFilterUPP modalFilter)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_Alert:	OPWORD	$A985
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Alert
	ENDIF

;
; pascal DialogItemIndex StopAlert(SInt16 alertID, ModalFilterUPP modalFilter)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StopAlert:	OPWORD	$A986
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StopAlert
	ENDIF

;
; pascal DialogItemIndex NoteAlert(SInt16 alertID, ModalFilterUPP modalFilter)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_NoteAlert:	OPWORD	$A987
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NoteAlert
	ENDIF

;
; pascal DialogItemIndex CautionAlert(SInt16 alertID, ModalFilterUPP modalFilter)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CautionAlert:	OPWORD	$A988
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CautionAlert
	ENDIF

;
; pascal void GetDialogItem(DialogPtr theDialog, DialogItemIndex itemNo, DialogItemType *itemType, Handle *item, Rect *box)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetDialogItem:	OPWORD	$A98D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDialogItem
	ENDIF

;
; pascal void SetDialogItem(DialogPtr theDialog, DialogItemIndex itemNo, DialogItemType itemType, Handle item, const Rect *box)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetDialogItem:	OPWORD	$A98E
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDialogItem
	ENDIF

;
; pascal void ParamText(ConstStr255Param param0, ConstStr255Param param1, ConstStr255Param param2, ConstStr255Param param3)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ParamText:	OPWORD	$A98B
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ParamText
	ENDIF

;
; pascal void SelectDialogItemText(DialogPtr theDialog, DialogItemIndex itemNo, SInt16 strtSel, SInt16 endSel)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SelectDialogItemText:	OPWORD	$A97E
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SelectDialogItemText
	ENDIF

;
; pascal void GetDialogItemText(Handle item, Str255 text)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetDialogItemText:	OPWORD	$A990
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDialogItemText
	ENDIF

;
; pascal void SetDialogItemText(Handle item, ConstStr255Param text)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetDialogItemText:	OPWORD	$A98F
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDialogItemText
	ENDIF

;
; pascal SInt16 GetAlertStage(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetAlertStage        &dest=(sp)
			move.w            $0A9A,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetAlertStage
	ENDIF

;
; pascal void SetDialogFont(SInt16 value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetDialogFont        &src=(sp)+
			move.w            &src,$0AFA
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDialogFont
	ENDIF

;
; pascal void ResetAlertStage(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ResetAlertStage
			clr.w               $0A9A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ResetAlertStage
	ENDIF


;
; pascal void AppendDITL(DialogPtr theDialog, Handle theHandle, DITLMethod method)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AppendDITL
	ENDIF

;
; pascal DialogItemIndex CountDITL(DialogPtr theDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CountDITL
	ENDIF

;
; pascal void ShortenDITL(DialogPtr theDialog, DialogItemIndex numberItems)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ShortenDITL
	ENDIF

;
; pascal OSErr GetStdFilterProc(ModalFilterUPP *theProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetStdFilterProc
			move.w              #$0203,D0
			dc.w            	$AA68
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetStdFilterProc
	ENDIF

;
; pascal OSErr SetDialogDefaultItem(DialogPtr theDialog, DialogItemIndex newItem)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetDialogDefaultItem
			move.w              #$0304,D0
			dc.w            	$AA68
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDialogDefaultItem
	ENDIF

;
; pascal OSErr SetDialogCancelItem(DialogPtr theDialog, DialogItemIndex newItem)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetDialogCancelItem
			move.w              #$0305,D0
			dc.w            	$AA68
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDialogCancelItem
	ENDIF

;
; pascal OSErr SetDialogTracksCursor(DialogPtr theDialog, Boolean tracks)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetDialogTracksCursor
			move.w              #$0306,D0
			dc.w            	$AA68
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDialogTracksCursor
	ENDIF

	IF OLDROUTINENAMES THEN
	ENDIF	; OLDROUTINENAMES
; 
;	*****************************************************************************
;	*                                                                           *
;	* The conditional STRICT_DIALOGS has been removed from this interface file. *
;	* The accessor macros to a DialogRecord are no longer necessary.            *
;	*                                                                           *
;	* All ≈Ref Types have reverted to their original Handle and Ptr Types.      *
;	*                                                                           *
;	*****************************************************************************
;
;	Details:
;	The original purpose of the STRICT_ conditionals and accessor macros was to
;	help ease the transition to Copland.  Shared data structures are difficult
;	to coordinate in a preemptive multitasking OS.  By hiding the fields in a
;	WindowRecord and other data structures, we would begin the migration to the
;	discipline wherein system data structures are completely hidden from
;	applications.
;	
;	After many design reviews, we finally concluded that with this sort of
;	migration, the system could never tell when an application was no longer
;	peeking at a WindowRecord, and thus the data structure might never become
;	system owned.  Additionally, there were many other limitations in the
;	classic toolbox that were begging to be addressed.  The final decision was
;	to leave the traditional toolbox as a compatibility mode.
;	
;	We also decided to use the Handle and Ptr based types in the function
;	declarations.  For example, NewWindow now returns a WindowPtr rather than a
;	WindowRef.  The Ref types are still defined in the header files, so all
;	existing code will still compile exactly as it did before.  There are
;	several reasons why we chose to do this:
;	
;	- The importance of backwards compatibility makes it unfeasible for us to
;	enforce real opaque references in the implementation anytime in the
;	foreseeable future.  Therefore, any opaque data types (e.g. WindowRef,
;	ControlRef, etc.) in the documentation and header files would always be a
;	fake veneer of opacity.
;	
;	- There exists a significant base of books and sample code that neophyte
;	Macintosh developers use to learn how to program the Macintosh.  These
;	books and sample code all use direct data access.  Introducing opaque data
;	types at this point would confuse neophyte programmers more than it would
;	help them.
;	
;	- Direct data structure access is used by nearly all Macintosh developers. 
;	Changing the interfaces to reflect a false opacity would not provide any
;	benefit to these developers.
;	
;	- Accessor functions are useful in and of themselves as convenience
;	functions, without being tied to opaque data types.  We will complete and
;	document the Windows and Dialogs accessor functions in an upcoming release
;	of the interfaces.
;



;
; pascal void CouldDialog(SInt16 dialogID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CouldDialog:	OPWORD	$A979
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CouldDialog
	ENDIF

;
; pascal void FreeDialog(SInt16 dialogID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FreeDialog:	OPWORD	$A97A
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FreeDialog
	ENDIF

;
; pascal void CouldAlert(SInt16 alertID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CouldAlert:	OPWORD	$A989
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CouldAlert
	ENDIF

;
; pascal void FreeAlert(SInt16 alertID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FreeAlert:	OPWORD	$A98A
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FreeAlert
	ENDIF








	ENDIF ; __DIALOGS__ 


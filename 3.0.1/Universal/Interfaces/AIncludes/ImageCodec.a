;
;	File:		ImageCodec.a
;
;	Contains:	QuickTime Interfaces.
;
;	Version:	Technology:	QuickTime 2.5
;				Release:	Universal Interfaces 3.0.1
;
;	Copyright:	© 1990-1997 by Apple Computer, Inc., all rights reserved
;
;	Bugs?:		Please include the the file and version information (from above) with
;				the problem description.  Developers belonging to one of the Apple
;				developer programs can submit bug reports to:
;
;					devsupport@apple.com
;
;
	IF &TYPE('__IMAGECODEC__') = 'UNDEFINED' THEN
__IMAGECODEC__ SET 1

	IF &TYPE('__TYPES__') = 'UNDEFINED' THEN
	include 'Types.a'
	ENDIF
	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN
	include 'Quickdraw.a'
	ENDIF
	IF &TYPE('__IMAGECOMPRESSION__') = 'UNDEFINED' THEN
	include 'ImageCompression.a'
	ENDIF
	IF &TYPE('__COMPONENTS__') = 'UNDEFINED' THEN
	include 'Components.a'
	ENDIF

; 	codec capabilities flags	

codecCanScale					EQU		$00000001
codecCanMask					EQU		$00000002
codecCanMatte					EQU		$00000004
codecCanTransform				EQU		$00000008
codecCanTransferMode			EQU		$00000010
codecCanCopyPrev				EQU		$00000020
codecCanSpool					EQU		$00000040
codecCanClipVertical			EQU		$00000080
codecCanClipRectangular			EQU		$00000100
codecCanRemapColor				EQU		$00000200
codecCanFastDither				EQU		$00000400
codecCanSrcExtract				EQU		$00000800
codecCanCopyPrevComp			EQU		$00001000
codecCanAsync					EQU		$00002000
codecCanMakeMask				EQU		$00004000
codecCanShift					EQU		$00008000
codecCanAsyncWhen				EQU		$00010000
codecCanShieldCursor			EQU		$00020000
codecCanManagePrevBuffer		EQU		$00040000
codecHasVolatileBuffer			EQU		$00080000
codecWantsRegionMask			EQU		$00100000
codecImageBufferIsOnScreen		EQU		$00200000
codecWantsDestinationPixels		EQU		$00400000

CodecCapabilities		RECORD 0
flags					 ds.l	1				; offset: $0 (0)
wantedPixelSize			 ds.w	1				; offset: $4 (4)
extendWidth				 ds.w	1				; offset: $6 (6)
extendHeight			 ds.w	1				; offset: $8 (8)
bandMin					 ds.w	1				; offset: $A (10)
bandInc					 ds.w	1				; offset: $C (12)
pad						 ds.w	1				; offset: $E (14)
time					 ds.l	1				; offset: $10 (16)
sizeof					 EQU *					; size:   $14 (20)
						ENDR
; 	codec condition flags	

codecConditionFirstBand			EQU		$00000001
codecConditionLastBand			EQU		$00000002
codecConditionFirstFrame		EQU		$00000004
codecConditionNewDepth			EQU		$00000008
codecConditionNewTransform		EQU		$00000010
codecConditionNewSrcRect		EQU		$00000020
codecConditionNewMask			EQU		$00000040
codecConditionNewMatte			EQU		$00000080
codecConditionNewTransferMode	EQU		$00000100
codecConditionNewClut			EQU		$00000200
codecConditionNewAccuracy		EQU		$00000400
codecConditionNewDestination	EQU		$00000800
codecConditionFirstScreen		EQU		$00001000
codecConditionDoCursor			EQU		$00002000
codecConditionCatchUpDiff		EQU		$00004000
codecConditionMaskMayBeChanged	EQU		$00008000
codecConditionToBuffer			EQU		$00010000
codecConditionCodecChangedMask	EQU		$80000000


codecInfoResourceType			EQU		'cdci'				; codec info resource type 
codecInterfaceVersion			EQU		2					; high word returned in component GetVersion 
CDSequenceDataSource	RECORD 0
recordSize				 ds.l	1				; offset: $0 (0)
next					 ds.l	1				; offset: $4 (4)
seqID					 ds.l	1				; offset: $8 (8)
sourceID				 ds.l	1				; offset: $C (12)
sourceType				 ds.l	1				; offset: $10 (16)
sourceInputNumber		 ds.l	1				; offset: $14 (20)
dataPtr					 ds.l	1				; offset: $18 (24)
dataDescription			 ds.l	1				; offset: $1C (28)
changeSeed				 ds.l	1				; offset: $20 (32)
transferProc			 ds.l	1				; offset: $24 (36)
transferRefcon			 ds.l	1				; offset: $28 (40)
;  The following fields only exist for QuickTime 2.5 and greater 
dataSize				 ds.l	1				; offset: $2C (44)
sizeof					 EQU *					; size:   $30 (48)
						ENDR
; typedef struct CDSequenceDataSource *	CDSequenceDataSourcePtr

CodecCompressParams		RECORD 0
sequenceID				 ds.l	1				; offset: $0 (0)		;  precompress,bandcompress 
imageDescription		 ds.l	1				; offset: $4 (4)		;  precompress,bandcompress 
data					 ds.l	1				; offset: $8 (8)
bufferSize				 ds.l	1				; offset: $C (12)
frameNumber				 ds.l	1				; offset: $10 (16)
startLine				 ds.l	1				; offset: $14 (20)
stopLine				 ds.l	1				; offset: $18 (24)
conditionFlags			 ds.l	1				; offset: $1C (28)
callerFlags				 ds.w	1				; offset: $20 (32)
capabilities			 ds.l	1				; offset: $22 (34)		;  precompress,bandcompress 
progressProcRecord		 ds		ICMProgressProcRecord ; offset: $26 (38)
completionProcRecord	 ds		ICMCompletionProcRecord ; offset: $2E (46)
flushProcRecord			 ds		ICMFlushProcRecord ; offset: $36 (54)
srcPixMap				 ds		PixMap			; offset: $3E (62)		;  precompress,bandcompress 
prevPixMap				 ds		PixMap			; offset: $70 (112)
spatialQuality			 ds.l	1				; offset: $A2 (162)
temporalQuality			 ds.l	1				; offset: $A6 (166)
similarity				 ds.l	1				; offset: $AA (170)
dataRateParams			 ds.l	1				; offset: $AE (174)
reserved				 ds.l	1				; offset: $B2 (178)
;  The following fields only exist for QuickTime 2.1 and greater 
majorSourceChangeSeed	 ds.w	1				; offset: $B6 (182)
minorSourceChangeSeed	 ds.w	1				; offset: $B8 (184)
sourceData				 ds.l	1				; offset: $BA (186)
;  The following fields only exit for QuickTime 2.5 and greater 
preferredPacketSizeInBytes  ds.l 1				; offset: $BE (190)
sizeof					 EQU *					; size:   $C2 (194)
						ENDR
CodecDecompressParams	RECORD 0
sequenceID				 ds.l	1				; offset: $0 (0)		;  predecompress,banddecompress 
imageDescription		 ds.l	1				; offset: $4 (4)		;  predecompress,banddecompress 
data					 ds.l	1				; offset: $8 (8)
bufferSize				 ds.l	1				; offset: $C (12)
frameNumber				 ds.l	1				; offset: $10 (16)
startLine				 ds.l	1				; offset: $14 (20)
stopLine				 ds.l	1				; offset: $18 (24)
conditionFlags			 ds.l	1				; offset: $1C (28)
callerFlags				 ds.w	1				; offset: $20 (32)
capabilities			 ds.l	1				; offset: $22 (34)		;  predecompress,banddecompress 
progressProcRecord		 ds		ICMProgressProcRecord ; offset: $26 (38)
completionProcRecord	 ds		ICMCompletionProcRecord ; offset: $2E (46)
dataProcRecord			 ds		ICMDataProcRecord ; offset: $36 (54)
port					 ds.l	1				; offset: $3E (62)		;  predecompress,banddecompress 
dstPixMap				 ds		PixMap			; offset: $42 (66)		;  predecompress,banddecompress 
maskBits				 ds.l	1				; offset: $74 (116)
mattePixMap				 ds.l	1				; offset: $78 (120)
srcRect					 ds		Rect			; offset: $7C (124)		;  predecompress,banddecompress 
matrix					 ds.l	1				; offset: $84 (132)		;  predecompress,banddecompress 
accuracy				 ds.l	1				; offset: $88 (136)		;  predecompress,banddecompress 
transferMode			 ds.w	1				; offset: $8C (140)		;  predecompress,banddecompress 
frameTime				 ds.l	1				; offset: $8E (142)		;  banddecompress 
reserved				 ds.l	1				; offset: $92 (146) <-- really an array of length one
;  The following fields only exist for QuickTime 2.0 and greater 
matrixFlags				 ds.b	1				; offset: $96 (150)		;  high bit set if 2x resize 
matrixType				 ds.b	1				; offset: $97 (151)
dstRect					 ds		Rect			; offset: $98 (152)		;  only valid for simple transforms 
;  The following fields only exist for QuickTime 2.1 and greater 
majorSourceChangeSeed	 ds.w	1				; offset: $A0 (160)
minorSourceChangeSeed	 ds.w	1				; offset: $A2 (162)
sourceData				 ds.l	1				; offset: $A4 (164)
maskRegion				 ds.l	1				; offset: $A8 (168)
;  The following fields only exist for QuickTime 2.5 and greater 
wantedDestinationPixelTypes  ds.l 1				; offset: $AC (172)		;  Handle to 0-terminated list of OSTypes 
screenFloodMethod		 ds.l	1				; offset: $B0 (176)
screenFloodValue		 ds.l	1				; offset: $B4 (180)
preferredOffscreenPixelSize  ds.w 1				; offset: $B8 (184)
sizeof					 EQU *					; size:   $BA (186)
						ENDR

matrixFlagScale2x				EQU		$00000080
matrixFlagScale1x				EQU		$00000040
matrixFlagScaleHalf				EQU		$00000020

kScreenFloodMethodNone			EQU		0
kScreenFloodMethodKeyColor		EQU		1
kScreenFloodMethodAlpha			EQU		2
; 	codec selectors 0-127 are reserved by Apple 
; 	codec selectors 128-191 are subtype specific 
; 	codec selectors 192-255 are vendor specific 
; 	codec selectors 256-32767 are available for general use 
; 	negative selectors are reserved by the Component Manager 
;
; pascal ComponentResult ImageCodecGetCodecInfo(ComponentInstance ci, CodecInfo *info)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecGetCodecInfo
			move.l              #$00040000,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecGetCodecInfo
	ENDIF

;
; pascal ComponentResult ImageCodecGetCompressionTime(ComponentInstance ci, PixMapHandle src, const Rect *srcRect, short depth, CodecQ *spatialQuality, CodecQ *temporalQuality, unsigned long *time)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecGetCompressionTime
			move.l              #$00160001,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecGetCompressionTime
	ENDIF

;
; pascal ComponentResult ImageCodecGetMaxCompressionSize(ComponentInstance ci, PixMapHandle src, const Rect *srcRect, short depth, CodecQ quality, long *size)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecGetMaxCompressionSize
			move.l              #$00120002,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecGetMaxCompressionSize
	ENDIF

;
; pascal ComponentResult ImageCodecPreCompress(ComponentInstance ci, CodecCompressParams *params)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecPreCompress
			move.l              #$00040003,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecPreCompress
	ENDIF

;
; pascal ComponentResult ImageCodecBandCompress(ComponentInstance ci, CodecCompressParams *params)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecBandCompress
			move.l              #$00040004,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecBandCompress
	ENDIF

;
; pascal ComponentResult ImageCodecPreDecompress(ComponentInstance ci, CodecDecompressParams *params)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecPreDecompress
			move.l              #$00040005,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecPreDecompress
	ENDIF

;
; pascal ComponentResult ImageCodecBandDecompress(ComponentInstance ci, CodecDecompressParams *params)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecBandDecompress
			move.l              #$00040006,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecBandDecompress
	ENDIF

;
; pascal ComponentResult ImageCodecBusy(ComponentInstance ci, ImageSequence seq)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecBusy
			move.l              #$00040007,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecBusy
	ENDIF

;
; pascal ComponentResult ImageCodecGetCompressedImageSize(ComponentInstance ci, ImageDescriptionHandle desc, Ptr data, long bufferSize, ICMDataProcRecordPtr dataProc, long *dataSize)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecGetCompressedImageSize
			move.l              #$00140008,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecGetCompressedImageSize
	ENDIF

;
; pascal ComponentResult ImageCodecGetSimilarity(ComponentInstance ci, PixMapHandle src, const Rect *srcRect, ImageDescriptionHandle desc, Ptr data, Fixed *similarity)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecGetSimilarity
			move.l              #$00140009,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecGetSimilarity
	ENDIF

;
; pascal ComponentResult ImageCodecTrimImage(ComponentInstance ci, ImageDescriptionHandle Desc, Ptr inData, long inBufferSize, ICMDataProcRecordPtr dataProc, Ptr outData, long outBufferSize, ICMFlushProcRecordPtr flushProc, Rect *trimRect, ICMProgressProcRecordPtr progressProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecTrimImage
			move.l              #$0024000A,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecTrimImage
	ENDIF

;
; pascal ComponentResult ImageCodecRequestSettings(ComponentInstance ci, Handle settings, Rect *rp, ModalFilterUPP filterProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecRequestSettings
			move.l              #$000C000B,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecRequestSettings
	ENDIF

;
; pascal ComponentResult ImageCodecGetSettings(ComponentInstance ci, Handle settings)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecGetSettings
			move.l              #$0004000C,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecGetSettings
	ENDIF

;
; pascal ComponentResult ImageCodecSetSettings(ComponentInstance ci, Handle settings)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecSetSettings
			move.l              #$0004000D,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecSetSettings
	ENDIF

;
; pascal ComponentResult ImageCodecFlush(ComponentInstance ci)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecFlush
			move.l              #$0000000E,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecFlush
	ENDIF

;
; pascal ComponentResult ImageCodecSetTimeCode(ComponentInstance ci, void *timeCodeFormat, void *timeCodeTime)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecSetTimeCode
			move.l              #$0008000F,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecSetTimeCode
	ENDIF

;
; pascal ComponentResult ImageCodecIsImageDescriptionEquivalent(ComponentInstance ci, ImageDescriptionHandle newDesc, Boolean *equivalent)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecIsImageDescriptionEquivalent
			move.l              #$00080010,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecIsImageDescriptionEquivalent
	ENDIF

;
; pascal ComponentResult ImageCodecNewMemory(ComponentInstance ci, Ptr *data, Size dataSize, long dataUse, ICMMemoryDisposedUPP memoryGoneProc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecNewMemory
			move.l              #$00140011,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecNewMemory
	ENDIF

;
; pascal ComponentResult ImageCodecDisposeMemory(ComponentInstance ci, Ptr data)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecDisposeMemory
			move.l              #$00040012,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecDisposeMemory
	ENDIF

;
; pascal ComponentResult ImageCodecHitTestData(ComponentInstance ci, ImageDescriptionHandle desc, void *data, Size dataSize, Point where, Boolean *hit)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecHitTestData
			move.l              #$00140013,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecHitTestData
	ENDIF

;
; pascal ComponentResult ImageCodecNewImageBufferMemory(ComponentInstance ci, CodecDecompressParams *params, long flags, ICMMemoryDisposedUPP memoryGoneProc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecNewImageBufferMemory
			move.l              #$00100014,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecNewImageBufferMemory
	ENDIF

;
; pascal ComponentResult ImageCodecExtractAndCombineFields(ComponentInstance ci, long fieldFlags, void *data1, long dataSize1, ImageDescriptionHandle desc1, void *data2, long dataSize2, ImageDescriptionHandle desc2, void *outputData, long *outDataSize, ImageDescriptionHandle descOut)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecExtractAndCombineFields
			move.l              #$00280015,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecExtractAndCombineFields
	ENDIF

;
; pascal ComponentResult ImageCodecGetMaxCompressionSizeWithSources(ComponentInstance ci, PixMapHandle src, const Rect *srcRect, short depth, CodecQ quality, CDSequenceDataSourcePtr sourceData, long *size)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ImageCodecGetMaxCompressionSizeWithSources
			move.l              #$00160016,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ImageCodecGetMaxCompressionSizeWithSources
	ENDIF




kMotionJPEGTag					EQU		'mjpg'
MotionJPEGApp1Marker	RECORD 0
unused					 ds.l	1				; offset: $0 (0)
tag						 ds.l	1				; offset: $4 (4)
fieldSize				 ds.l	1				; offset: $8 (8)
paddedFieldSize			 ds.l	1				; offset: $C (12)
offsetToNextField		 ds.l	1				; offset: $10 (16)
qTableOffset			 ds.l	1				; offset: $14 (20)
huffmanTableOffset		 ds.l	1				; offset: $18 (24)
sofOffset				 ds.l	1				; offset: $1C (28)
sosOffset				 ds.l	1				; offset: $20 (32)
soiOffset				 ds.l	1				; offset: $24 (36)
sizeof					 EQU *					; size:   $28 (40)
						ENDR

;
; pascal ComponentResult QTPhotoSetSampling(ComponentInstance codec, short yH, short yV, short cbH, short cbV, short crH, short crV)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_QTPhotoSetSampling
			move.l              #$000C0100,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QTPhotoSetSampling
	ENDIF

;
; pascal ComponentResult QTPhotoSetRestartInterval(ComponentInstance codec, unsigned short restartInterval)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_QTPhotoSetRestartInterval
			move.l              #$00020101,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QTPhotoSetRestartInterval
	ENDIF

;
; pascal ComponentResult QTPhotoDefineHuffmanTable(ComponentInstance codec, short componentNumber, Boolean isDC, unsigned char *lengthCounts, unsigned char *values)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_QTPhotoDefineHuffmanTable
			move.l              #$000C0102,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QTPhotoDefineHuffmanTable
	ENDIF

;
; pascal ComponentResult QTPhotoDefineQuantizationTable(ComponentInstance codec, short componentNumber, unsigned char *table)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_QTPhotoDefineQuantizationTable
			move.l              #$00060103,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QTPhotoDefineQuantizationTable
	ENDIF


;  UPP call backs 

	ENDIF ; __IMAGECODEC__ 


;
;	File:		Processes.a
;
;	Contains:	Process Manager Interfaces.
;
;	Version:	Technology:	System 7.5
;				Release:	Universal Interfaces 3.0.1
;
;	Copyright:	© 1989-1997 by Apple Computer, Inc., all rights reserved
;
;	Bugs?:		Please include the the file and version information (from above) with
;				the problem description.  Developers belonging to one of the Apple
;				developer programs can submit bug reports to:
;
;					devsupport@apple.com
;
;
	IF &TYPE('__PROCESSES__') = 'UNDEFINED' THEN
__PROCESSES__ SET 1

	IF &TYPE('__TYPES__') = 'UNDEFINED' THEN
	include 'Types.a'
	ENDIF
	IF &TYPE('__EVENTS__') = 'UNDEFINED' THEN
	include 'Events.a'
	ENDIF
	IF &TYPE('__FILES__') = 'UNDEFINED' THEN
	include 'Files.a'
	ENDIF

;  type for unique process identifier 
ProcessSerialNumber		RECORD 0
highLongOfPSN			 ds.l	1				; offset: $0 (0)
lowLongOfPSN			 ds.l	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $8 (8)
						ENDR
; typedef struct ProcessSerialNumber *	ProcessSerialNumberPtr


															; Process identifier - Various reserved process serial numbers 
kNoProcess						EQU		0
kSystemProcess					EQU		1
kCurrentProcess					EQU		2
;  Definition of the parameter block passed to _Launch 
;  Typedef and flags for launchControlFlags field
; typedef unsigned short 				LaunchFlags


launchContinue					EQU		$4000
launchNoFileFlags				EQU		$0800
launchUseMinimum				EQU		$0400
launchDontSwitch				EQU		$0200
launchAllow24Bit				EQU		$0100
launchInhibitDaemon				EQU		$0080
;  Format for first AppleEvent to pass to new process.  The size of the overall
;  buffer variable: the message body immediately follows the messageLength 
AppParameters			RECORD 0
theMsgEvent				 ds		EventRecord		; offset: $0 (0)
eventRefCon				 ds.l	1				; offset: $10 (16)
messageLength			 ds.l	1				; offset: $14 (20)
sizeof					 EQU *					; size:   $18 (24)
						ENDR
; typedef struct AppParameters *		AppParametersPtr

;  Parameter block to _Launch 
LaunchParamBlockRec		RECORD 0
reserved1				 ds.l	1				; offset: $0 (0)
reserved2				 ds.w	1				; offset: $4 (4)
launchBlockID			 ds.w	1				; offset: $6 (6)
launchEPBLength			 ds.l	1				; offset: $8 (8)
launchFileFlags			 ds.w	1				; offset: $C (12)
launchControlFlags		 ds.w	1				; offset: $E (14)
launchAppSpec			 ds.l	1				; offset: $10 (16)
launchProcessSN			 ds		ProcessSerialNumber ; offset: $14 (20)
launchPreferredSize		 ds.l	1				; offset: $1C (28)
launchMinimumSize		 ds.l	1				; offset: $20 (32)
launchAvailableSize		 ds.l	1				; offset: $24 (36)
launchAppParameters		 ds.l	1				; offset: $28 (40)
sizeof					 EQU *					; size:   $2C (44)
						ENDR
; typedef struct LaunchParamBlockRec *	LaunchPBPtr

;  Set launchBlockID to extendedBlock to specify that extensions exist.
; Set launchEPBLength to extendedBlockLen for compatibility.

extendedBlock					EQU		$4C43				; 'LC' 
extendedBlockLen				EQU		32

															; Definition of the information block returned by GetProcessInformation 
modeLaunchDontSwitch			EQU		$00040000
modeDeskAccessory				EQU		$00020000
modeMultiLaunch					EQU		$00010000
modeNeedSuspendResume			EQU		$00004000
modeCanBackground				EQU		$00001000
modeDoesActivateOnFGSwitch		EQU		$00000800
modeOnlyBackground				EQU		$00000400
modeGetFrontClicks				EQU		$00000200
modeGetAppDiedMsg				EQU		$00000100
mode32BitCompatible				EQU		$00000080
modeHighLevelEventAware			EQU		$00000040
modeLocalAndRemoteHLEvents		EQU		$00000020
modeStationeryAware				EQU		$00000010
modeUseTextEditServices			EQU		$00000008
modeDisplayManagerAware			EQU		$00000004
;  Record returned by GetProcessInformation 
ProcessInfoRec			RECORD 0
processInfoLength		 ds.l	1				; offset: $0 (0)
processName				 ds.l	1				; offset: $4 (4)
processNumber			 ds		ProcessSerialNumber ; offset: $8 (8)
processType				 ds.l	1				; offset: $10 (16)
processSignature		 ds.l	1				; offset: $14 (20)
processMode				 ds.l	1				; offset: $18 (24)
processLocation			 ds.l	1				; offset: $1C (28)
processSize				 ds.l	1				; offset: $20 (32)
processFreeMem			 ds.l	1				; offset: $24 (36)
processLauncher			 ds		ProcessSerialNumber ; offset: $28 (40)
processLaunchDate		 ds.l	1				; offset: $30 (48)
processActiveTime		 ds.l	1				; offset: $34 (52)
processAppSpec			 ds.l	1				; offset: $38 (56)
sizeof					 EQU *					; size:   $3C (60)
						ENDR
; typedef struct ProcessInfoRec *		ProcessInfoRecPtr

;
; pascal OSErr LaunchApplication(LaunchPBPtr LaunchParams)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	LaunchParams    => A0
		; returns:
		;	OSErr           <= D0
		_LaunchApplication:	OPWORD	$A9F2
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LaunchApplication
	ENDIF

;
; pascal OSErr LaunchDeskAccessory(const FSSpec *pFileSpec, ConstStr255Param pDAName)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LaunchDeskAccessory
			move.w              #$0036,-(sp)
			dc.w            	$A88F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LaunchDeskAccessory
	ENDIF

;
; pascal OSErr GetCurrentProcess(ProcessSerialNumber *PSN)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetCurrentProcess
			move.w              #$0037,-(sp)
			dc.w            	$A88F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCurrentProcess
	ENDIF

;
; pascal OSErr GetFrontProcess(ProcessSerialNumber *PSN)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetFrontProcess
			moveq           	#-1,D0
			move.l              D0,-(sp)
			move.w              #$0039,-(sp)
			dc.w            	$A88F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetFrontProcess
	ENDIF

;
; pascal OSErr GetNextProcess(ProcessSerialNumber *PSN)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetNextProcess
			move.w              #$0038,-(sp)
			dc.w            	$A88F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetNextProcess
	ENDIF

;
; pascal OSErr GetProcessInformation(const ProcessSerialNumber *PSN, ProcessInfoRec *info)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetProcessInformation
			move.w              #$003A,-(sp)
			dc.w            	$A88F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetProcessInformation
	ENDIF

;
; pascal OSErr SetFrontProcess(const ProcessSerialNumber *PSN)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetFrontProcess
			move.w              #$003B,-(sp)
			dc.w            	$A88F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetFrontProcess
	ENDIF

;
; pascal OSErr WakeUpProcess(const ProcessSerialNumber *PSN)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_WakeUpProcess
			move.w              #$003C,-(sp)
			dc.w            	$A88F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION WakeUpProcess
	ENDIF

;
; pascal OSErr SameProcess(const ProcessSerialNumber *PSN1, const ProcessSerialNumber *PSN2, Boolean *result)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SameProcess
			move.w              #$003D,-(sp)
			dc.w            	$A88F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SameProcess
	ENDIF

	IF ¬ OLDROUTINELOCATIONS THEN
; 
;	ExitToShell was previously in SegLoad.h
;

;
; pascal void ExitToShell(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ExitToShell:	OPWORD	$A9F4
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ExitToShell
	ENDIF

	ENDIF

	ENDIF ; __PROCESSES__ 


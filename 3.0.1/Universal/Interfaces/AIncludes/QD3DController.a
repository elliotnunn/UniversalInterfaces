;
;	File:		QD3DController.a
;
;	Contains:	Q3Controller methods	
;
;	Version:	Technology:	Quickdraw 3D 1.5.1
;				Release:	Universal Interfaces 3.0.1
;
;	Copyright:	Â© 1995-1997 by Apple Computer, Inc., all rights reserved.
;
;	Bugs?:		Please include the the file and version information (from above) with
;				the problem description.  Developers belonging to one of the Apple
;				developer programs can submit bug reports to:
;
;					devsupport@apple.com
;
;
	IF &TYPE('__QD3DCONTROLLER__') = 'UNDEFINED' THEN
__QD3DCONTROLLER__ SET 1

	IF &TYPE('__QD3D__') = 'UNDEFINED' THEN
	include 'QD3D.a'
	ENDIF

; ******************************************************************************
; **																			 **
; **								Type Definitions							 **
; **																			 **
; ****************************************************************************

TQ3ControllerData		RECORD 0
signature				 ds.l	1				; offset: $0 (0)
valueCount				 ds.l	1				; offset: $4 (4)
channelCount			 ds.l	1				; offset: $8 (8)
channelGetMethod		 ds.l	1				; offset: $C (12)
channelSetMethod		 ds.l	1				; offset: $10 (16)
sizeof					 EQU *					; size:   $14 (20)
						ENDR
; ******************************************************************************
; **																			 **
; **									 Routines								 **
; **																			 **
; ****************************************************************************

;
; extern TQ3Status Q3Controller_GetListChanged(TQ3Boolean *listChanged, unsigned long *serialNumber)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_GetListChanged
	ENDIF

;
; extern TQ3Status Q3Controller_Next(TQ3ControllerRef controllerRef, TQ3ControllerRef *nextControllerRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_Next
	ENDIF

;
; extern TQ3ControllerRef Q3Controller_New(const TQ3ControllerData *controllerData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_New
	ENDIF

;
; extern TQ3Status Q3Controller_Decommission(TQ3ControllerRef controllerRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_Decommission
	ENDIF

;
; extern TQ3Status Q3Controller_SetActivation(TQ3ControllerRef controllerRef, TQ3Boolean active)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_SetActivation
	ENDIF

;
; extern TQ3Status Q3Controller_GetActivation(TQ3ControllerRef controllerRef, TQ3Boolean *active)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_GetActivation
	ENDIF

;
; extern TQ3Status Q3Controller_GetSignature(TQ3ControllerRef controllerRef, char *signature, unsigned long numChars)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_GetSignature
	ENDIF

;
; extern TQ3Status Q3Controller_SetChannel(TQ3ControllerRef controllerRef, unsigned long channel, const void *data, unsigned long dataSize)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_SetChannel
	ENDIF

;
; extern TQ3Status Q3Controller_GetChannel(TQ3ControllerRef controllerRef, unsigned long channel, void *data, unsigned long *dataSize)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_GetChannel
	ENDIF

;
; extern TQ3Status Q3Controller_GetValueCount(TQ3ControllerRef controllerRef, unsigned long *valueCount)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_GetValueCount
	ENDIF

;
; extern TQ3Status Q3Controller_SetTracker(TQ3ControllerRef controllerRef, TQ3TrackerObject tracker)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_SetTracker
	ENDIF

;
; extern TQ3Status Q3Controller_HasTracker(TQ3ControllerRef controllerRef, TQ3Boolean *hasTracker)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_HasTracker
	ENDIF

;
; extern TQ3Status Q3Controller_Track2DCursor(TQ3ControllerRef controllerRef, TQ3Boolean *track2DCursor)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_Track2DCursor
	ENDIF

;
; extern TQ3Status Q3Controller_Track3DCursor(TQ3ControllerRef controllerRef, TQ3Boolean *track3DCursor)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_Track3DCursor
	ENDIF

;
; extern TQ3Status Q3Controller_GetButtons(TQ3ControllerRef controllerRef, unsigned long *buttons)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_GetButtons
	ENDIF

;
; extern TQ3Status Q3Controller_SetButtons(TQ3ControllerRef controllerRef, unsigned long buttons)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_SetButtons
	ENDIF

;
; extern TQ3Status Q3Controller_GetTrackerPosition(TQ3ControllerRef controllerRef, TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_GetTrackerPosition
	ENDIF

;
; extern TQ3Status Q3Controller_SetTrackerPosition(TQ3ControllerRef controllerRef, const TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_SetTrackerPosition
	ENDIF

;
; extern TQ3Status Q3Controller_MoveTrackerPosition(TQ3ControllerRef controllerRef, const TQ3Vector3D *delta)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_MoveTrackerPosition
	ENDIF

;
; extern TQ3Status Q3Controller_GetTrackerOrientation(TQ3ControllerRef controllerRef, TQ3Quaternion *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_GetTrackerOrientation
	ENDIF

;
; extern TQ3Status Q3Controller_SetTrackerOrientation(TQ3ControllerRef controllerRef, const TQ3Quaternion *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_SetTrackerOrientation
	ENDIF

;
; extern TQ3Status Q3Controller_MoveTrackerOrientation(TQ3ControllerRef controllerRef, const TQ3Quaternion *delta)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_MoveTrackerOrientation
	ENDIF

;
; extern TQ3Status Q3Controller_GetValues(TQ3ControllerRef controllerRef, unsigned long valueCount, float *values, TQ3Boolean *changed, unsigned long *serialNumber)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_GetValues
	ENDIF

;
; extern TQ3Status Q3Controller_SetValues(TQ3ControllerRef controllerRef, const float *values, unsigned long valueCount)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Controller_SetValues
	ENDIF


; ******************************************************************************
; **																			 **
; **									 Routines								 **
; **																			 **
; ****************************************************************************

;
; extern TQ3ControllerStateObject Q3ControllerState_New(TQ3ControllerRef controllerRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3ControllerState_New
	ENDIF

;
; extern TQ3Status Q3ControllerState_SaveAndReset(TQ3ControllerStateObject controllerStateObject)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3ControllerState_SaveAndReset
	ENDIF

;
; extern TQ3Status Q3ControllerState_Restore(TQ3ControllerStateObject controllerStateObject)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3ControllerState_Restore
	ENDIF


; ******************************************************************************
; **																			 **
; **								Type Definitions							 **
; **																			 **
; ****************************************************************************

; ******************************************************************************
; **																			 **
; **									 Routines								 **
; **																			 **
; ****************************************************************************

;
; extern TQ3TrackerObject Q3Tracker_New(TQ3TrackerNotifyFunc notifyFunc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_New
	ENDIF

;
; extern TQ3Status Q3Tracker_SetNotifyThresholds(TQ3TrackerObject trackerObject, float positionThresh, float orientationThresh)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_SetNotifyThresholds
	ENDIF

;
; extern TQ3Status Q3Tracker_GetNotifyThresholds(TQ3TrackerObject trackerObject, float *positionThresh, float *orientationThresh)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_GetNotifyThresholds
	ENDIF

;
; extern TQ3Status Q3Tracker_SetActivation(TQ3TrackerObject trackerObject, TQ3Boolean active)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_SetActivation
	ENDIF

;
; extern TQ3Status Q3Tracker_GetActivation(TQ3TrackerObject trackerObject, TQ3Boolean *active)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_GetActivation
	ENDIF

;
; extern TQ3Status Q3Tracker_GetButtons(TQ3TrackerObject trackerObject, unsigned long *buttons)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_GetButtons
	ENDIF

;
; extern TQ3Status Q3Tracker_ChangeButtons(TQ3TrackerObject trackerObject, TQ3ControllerRef controllerRef, unsigned long buttons, unsigned long buttonMask)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_ChangeButtons
	ENDIF

;
; extern TQ3Status Q3Tracker_GetPosition(TQ3TrackerObject trackerObject, TQ3Point3D *position, TQ3Vector3D *delta, TQ3Boolean *changed, unsigned long *serialNumber)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_GetPosition
	ENDIF

;
; extern TQ3Status Q3Tracker_SetPosition(TQ3TrackerObject trackerObject, TQ3ControllerRef controllerRef, const TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_SetPosition
	ENDIF

;
; extern TQ3Status Q3Tracker_MovePosition(TQ3TrackerObject trackerObject, TQ3ControllerRef controllerRef, const TQ3Vector3D *delta)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_MovePosition
	ENDIF

;
; extern TQ3Status Q3Tracker_GetOrientation(TQ3TrackerObject trackerObject, TQ3Quaternion *orientation, TQ3Quaternion *delta, TQ3Boolean *changed, unsigned long *serialNumber)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_GetOrientation
	ENDIF

;
; extern TQ3Status Q3Tracker_SetOrientation(TQ3TrackerObject trackerObject, TQ3ControllerRef controllerRef, const TQ3Quaternion *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_SetOrientation
	ENDIF

;
; extern TQ3Status Q3Tracker_MoveOrientation(TQ3TrackerObject trackerObject, TQ3ControllerRef controllerRef, const TQ3Quaternion *delta)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_MoveOrientation
	ENDIF

;
; extern TQ3Status Q3Tracker_SetEventCoordinates(TQ3TrackerObject trackerObject, unsigned long timeStamp, unsigned long buttons, const TQ3Point3D *position, const TQ3Quaternion *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_SetEventCoordinates
	ENDIF

;
; extern TQ3Status Q3Tracker_GetEventCoordinates(TQ3TrackerObject trackerObject, unsigned long timeStamp, unsigned long *buttons, TQ3Point3D *position, TQ3Quaternion *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Tracker_GetEventCoordinates
	ENDIF

; ******************************************************************************
; **																			 **
; **								 Types										 **
; **																			 **
; ****************************************************************************

; ******************************************************************************
; **																			 **
; **								 Routines									 **
; **																			 **
; ****************************************************************************

;
; extern TQ3Status Q3CursorTracker_PrepareTracking(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3CursorTracker_PrepareTracking
	ENDIF

;
; extern TQ3Status Q3CursorTracker_SetTrackDeltas(TQ3Boolean trackDeltas)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3CursorTracker_SetTrackDeltas
	ENDIF

;
; extern TQ3Status Q3CursorTracker_GetAndClearDeltas(float *depth, TQ3Quaternion *orientation, TQ3Boolean *hasOrientation, TQ3Boolean *changed, unsigned long *serialNumber)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3CursorTracker_GetAndClearDeltas
	ENDIF

;
; extern TQ3Status Q3CursorTracker_SetNotifyFunc(TQ3CursorTrackerNotifyFunc notifyFunc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3CursorTracker_SetNotifyFunc
	ENDIF

;
; extern TQ3Status Q3CursorTracker_GetNotifyFunc(TQ3CursorTrackerNotifyFunc *notifyFunc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3CursorTracker_GetNotifyFunc
	ENDIF





	ENDIF ; __QD3DCONTROLLER__ 


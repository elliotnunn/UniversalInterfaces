;
;	File:		Start.a
;
;	Contains:	Start Manager Interfaces.
;
;	Version:	Technology:	System 7.5
;				Release:	Universal Interfaces 3.0.1
;
;	Copyright:	© 1987-1993, 1996-1997 by Apple Computer, Inc., all rights reserved
;
;	Bugs?:		Please include the the file and version information (from above) with
;				the problem description.  Developers belonging to one of the Apple
;				developer programs can submit bug reports to:
;
;					devsupport@apple.com
;
;
	IF &TYPE('__START__') = 'UNDEFINED' THEN
__START__ SET 1

	IF &TYPE('__TYPES__') = 'UNDEFINED' THEN
	include 'Types.a'
	ENDIF


DefStartRec				RECORD 0
sdExtDevID				 ds.b	1				; offset: $0 (0)
sdPartition				 ds.b	1				; offset: $1 (1)
sdSlotNum				 ds.b	1				; offset: $2 (2)
sdSRsrcID				 ds.b	1				; offset: $3 (3)
						 ORG 0
sdReserved1				 ds.b	1				; offset: $0 (0)
sdReserved2				 ds.b	1				; offset: $1 (1)
sdRefNum				 ds.w	1				; offset: $2 (2)
sizeof					 EQU *					; size:   $4 (4)
						ENDR
; typedef union DefStartRec *			DefStartPtr

DefVideoRec				RECORD 0
sdSlot					 ds.b	1				; offset: $0 (0)
sdsResource				 ds.b	1				; offset: $1 (1)
sizeof					 EQU *					; size:   $2 (2)
						ENDR
; typedef struct DefVideoRec *			DefVideoPtr

DefOSRec				RECORD 0
sdReserved				 ds.b	1				; offset: $0 (0)
sdOSType				 ds.b	1				; offset: $1 (1)
sizeof					 EQU *					; size:   $2 (2)
						ENDR
; typedef struct DefOSRec *				DefOSPtr

;
; pascal void GetDefaultStartup(DefStartPtr paramBlock)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	paramBlock      => A0
		_GetDefaultStartup:	OPWORD	$A07D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDefaultStartup
	ENDIF

;
; pascal void SetDefaultStartup(DefStartPtr paramBlock)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	paramBlock      => A0
		_SetDefaultStartup:	OPWORD	$A07E
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDefaultStartup
	ENDIF

;
; pascal void GetVideoDefault(DefVideoPtr paramBlock)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	paramBlock      => A0
		_GetVideoDefault:	OPWORD	$A080
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetVideoDefault
	ENDIF

;
; pascal void SetVideoDefault(DefVideoPtr paramBlock)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	paramBlock      => A0
		_SetVideoDefault:	OPWORD	$A081
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetVideoDefault
	ENDIF

;
; pascal void GetOSDefault(DefOSPtr paramBlock)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	paramBlock      => A0
		_GetOSDefault:	OPWORD	$A084
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetOSDefault
	ENDIF

;
; pascal void SetOSDefault(DefOSPtr paramBlock)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	paramBlock      => A0
		_SetOSDefault:	OPWORD	$A083
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetOSDefault
	ENDIF

;
; pascal void SetTimeout(short count)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetTimeout
			move.w              #$0001,A0
			dc.w            	$A07F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetTimeout
	ENDIF

;
; pascal void GetTimeout(short *count)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetTimeout
			sub.l               A0,A0
			dc.w            	$A07F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetTimeout
	ENDIF

	ENDIF ; __START__ 


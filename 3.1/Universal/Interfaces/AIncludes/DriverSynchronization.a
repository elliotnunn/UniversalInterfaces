;
;	File:		DriverSynchronization.a
;
;	Contains:	Driver Synchronization Interfaces.
;
;	Version:	Technology:	MacOS
;				Release:	Universal Interfaces 3.1
;
;	Copyright:	© 1985-1998 by Apple Computer, Inc., all rights reserved
;
;	Bugs?:		Please include the the file and version information (from above) with
;				the problem description.  Developers belonging to one of the Apple
;				developer programs can submit bug reports to:
;
;					devsupport@apple.com
;
;
	IF &TYPE('__DRIVERSYNCHRONIZATION__') = 'UNDEFINED' THEN
__DRIVERSYNCHRONIZATION__ SET 1

	IF &TYPE('__CONDITIONALMACROS__') = 'UNDEFINED' THEN
	include 'ConditionalMacros.a'
	ENDIF
	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF

;
; extern void SynchronizeIO(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SynchronizeIO:	OPWORD	$4E71
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SynchronizeIO
	ENDIF

;
; extern Boolean CompareAndSwap(UInt32 oldVvalue, UInt32 newValue, UInt32 *OldValueAdr)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CompareAndSwap
	ENDIF

;
; extern Boolean TestAndClear(UInt32 bit, UInt8 *startAddress)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TestAndClear
	ENDIF

;
; extern Boolean TestAndSet(UInt32 bit, UInt8 *startAddress)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TestAndSet
	ENDIF

;
; extern SInt8 IncrementAtomic8(SInt8 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IncrementAtomic8
	ENDIF

;
; extern SInt8 DecrementAtomic8(SInt8 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DecrementAtomic8
	ENDIF

;
; extern SInt8 AddAtomic8(SInt32 amount, SInt8 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddAtomic8
	ENDIF

;
; extern UInt8 BitAndAtomic8(UInt32 mask, UInt8 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitAndAtomic8
	ENDIF

;
; extern UInt8 BitOrAtomic8(UInt32 mask, UInt8 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitOrAtomic8
	ENDIF

;
; extern UInt8 BitXorAtomic8(UInt32 mask, UInt8 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitXorAtomic8
	ENDIF

;
; extern SInt16 IncrementAtomic16(SInt16 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IncrementAtomic16
	ENDIF

;
; extern SInt16 DecrementAtomic16(SInt16 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DecrementAtomic16
	ENDIF

;
; extern SInt16 AddAtomic16(SInt32 amount, SInt16 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddAtomic16
	ENDIF

;
; extern UInt16 BitAndAtomic16(UInt32 mask, UInt16 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitAndAtomic16
	ENDIF

;
; extern UInt16 BitOrAtomic16(UInt32 mask, UInt16 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitOrAtomic16
	ENDIF

;
; extern UInt16 BitXorAtomic16(UInt32 mask, UInt16 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitXorAtomic16
	ENDIF

;
; extern SInt32 IncrementAtomic(SInt32 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IncrementAtomic
	ENDIF

;
; extern SInt32 DecrementAtomic(SInt32 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DecrementAtomic
	ENDIF

;
; extern SInt32 AddAtomic(SInt32 amount, SInt32 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddAtomic
	ENDIF

;
; extern UInt32 BitAndAtomic(UInt32 mask, UInt32 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitAndAtomic
	ENDIF

;
; extern UInt32 BitOrAtomic(UInt32 mask, UInt32 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitOrAtomic
	ENDIF

;
; extern UInt32 BitXorAtomic(UInt32 mask, UInt32 *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitXorAtomic
	ENDIF


	ENDIF ; __DRIVERSYNCHRONIZATION__ 


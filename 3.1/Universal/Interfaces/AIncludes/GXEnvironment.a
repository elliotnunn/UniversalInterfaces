;
;	File:		GXEnvironment.a
;
;	Contains:	QuickDraw GX environment constants and interfaces
;
;	Version:	Technology:	Quickdraw GX 1.1
;				Release:	Universal Interfaces 3.1
;
;	Copyright:	© 1994-1998 by Apple Computer, Inc., all rights reserved.
;
;	Bugs?:		Please include the the file and version information (from above) with
;				the problem description.  Developers belonging to one of the Apple
;				developer programs can submit bug reports to:
;
;					devsupport@apple.com
;
;
	IF &TYPE('__GXENVIRONMENT__') = 'UNDEFINED' THEN
__GXENVIRONMENT__ SET 1

	IF &TYPE('__CONDITIONALMACROS__') = 'UNDEFINED' THEN
	include 'ConditionalMacros.a'
	ENDIF
	IF &TYPE('__MIXEDMODE__') = 'UNDEFINED' THEN
	include 'MixedMode.a'
	ENDIF
	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN
	include 'Quickdraw.a'
	ENDIF
	IF &TYPE('__GXTYPES__') = 'UNDEFINED' THEN
	include 'GXTypes.a'
	ENDIF
	IF &TYPE('__CMAPPLICATION__') = 'UNDEFINED' THEN
	include 'CMApplication.a'
	ENDIF


defaultPollingHandlerFlags		EQU		$00
okToSwitchDuringPollFlag		EQU		$00
dontSwitchDuringPollFlag		EQU		$01
; typedef long 							gxPollingHandlerFlags

;
; extern gxPollingHandlerUPP GXGetGraphicsPollingHandler(long *reference)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetGraphicsPollingHandler
			move.w              #$0245,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetGraphicsPollingHandler
	ENDIF

;
; extern void GXSetGraphicsPollingHandler(gxPollingHandlerUPP handler, long reference)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXSetGraphicsPollingHandler
			move.w              #$0246,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXSetGraphicsPollingHandler
	ENDIF


;  QD to QD GX Translator typedefs 

gxDefaultOptionsTranslation		EQU		$0000
gxOptimizedTranslation			EQU		$0001
gxReplaceLineWidthTranslation	EQU		$0002
gxSimpleScalingTranslation		EQU		$0004
gxSimpleGeometryTranslation		EQU		$0008				; implies simple scaling 
gxSimpleLinesTranslation		EQU		$000C				; implies simple geometry & scaling 
gxLayoutTextTranslation			EQU		$0010				; turn on gxLine layout (normally off) 
gxRasterTargetTranslation		EQU		$0020
gxPostScriptTargetTranslation	EQU		$0040
gxVectorTargetTranslation		EQU		$0080
gxPDDTargetTranslation			EQU		$0100
gxDontConvertPatternsTranslation EQU	$1000
gxDontSplitBitmapsTranslation	EQU		$2000
; typedef long 							gxTranslationOption


gxContainsFormsBegin			EQU		$0001
gxContainsFormsEnd				EQU		$0002
gxContainsPostScript			EQU		$0004
gxContainsEmptyPostScript		EQU		$0008
; typedef long 							gxTranslationStatistic


gxQuickDrawPictTag				EQU		'pict'
gxQuickDrawPict			RECORD 0
;  translator inputs 
options					 ds.l	1				; offset: $0 (0)
srcRect					 ds		Rect			; offset: $4 (4)
styleStretch			 ds		Point			; offset: $C (12)
;  size of quickdraw picture data 
dataLength				 ds.l	1				; offset: $10 (16)
;  file alias 
alias					 ds		gxBitmapDataSourceAlias ; offset: $14 (20)
sizeof					 EQU *					; size:   $1E (30)
						ENDR
;  WindowRecord utilities 
;
; extern gxViewPort GXNewWindowViewPort(WindowPtr qdWindow)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXNewWindowViewPort
			move.w              #$0236,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXNewWindowViewPort
	ENDIF

;
; extern gxViewPort GXGetWindowViewPort(WindowPtr qdWindow)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetWindowViewPort
			move.w              #$0237,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetWindowViewPort
	ENDIF

;
; extern WindowPtr GXGetViewPortWindow(gxViewPort portOrder)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetViewPortWindow
			move.w              #$0238,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetViewPortWindow
	ENDIF

;  GDevice utilities 
;
; extern GDHandle GXGetViewDeviceGDevice(gxViewDevice theDevice)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetViewDeviceGDevice
			move.w              #$0239,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetViewDeviceGDevice
	ENDIF

;
; extern gxViewDevice GXGetGDeviceViewDevice(GDHandle qdGDevice)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetGDeviceViewDevice
			move.w              #$023A,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetGDeviceViewDevice
	ENDIF

;  gxPoint utilities 
;
; extern void GXConvertQDPoint(const Point *shortPt, gxViewPort portOrder, gxPoint *fixedPt)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXConvertQDPoint
			move.w              #$023B,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXConvertQDPoint
	ENDIF

;  printing utilities typedef 
; typedef gxShapeSpoolProcPtr 			gxShapeSpoolFunction

; typedef gxUserViewPortFilterProcPtr 	gxUserViewPortFilter

; typedef gxConvertQDFontProcPtr 		gxConvertQDFontFunction

;  mouse utilities 
;  return mouse location in fixed-gxPoint global space 
;
; extern void GXGetGlobalMouse(gxPoint *globalPt)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetGlobalMouse
			move.w              #$023C,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetGlobalMouse
	ENDIF

;  return fixed-gxPoint local mouse (gxViewPort == 0 --> default) 
;
; extern void GXGetViewPortMouse(gxViewPort portOrder, gxPoint *localPt)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetViewPortMouse
			move.w              #$023D,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetViewPortMouse
	ENDIF

;  printing utilities 
;
; extern gxUserViewPortFilterUPP GXGetViewPortFilter(gxViewPort portOrder, long *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetViewPortFilter
			move.w              #$025E,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetViewPortFilter
	ENDIF

;
; extern void GXSetViewPortFilter(gxViewPort portOrder, gxUserViewPortFilterUPP filter, long refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXSetViewPortFilter
			move.w              #$023E,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXSetViewPortFilter
	ENDIF

;  QD to QD GX Translator functions 
;
; extern void GXInstallQDTranslator(GrafPtr port, gxTranslationOption options, const Rect *srcRect, const Rect *dstRect, Point styleStrech, gxShapeSpoolUPP userFunction, void *reference)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXInstallQDTranslator
			move.w              #$023F,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXInstallQDTranslator
	ENDIF

;
; extern gxTranslationStatistic GXRemoveQDTranslator(GrafPtr port, gxTranslationStatistic *statistic)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXRemoveQDTranslator
			move.w              #$0240,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXRemoveQDTranslator
	ENDIF

;
; extern gxShape GXConvertPICTToShape(PicHandle pict, gxTranslationOption options, const Rect *srcRect, const Rect *dstRect, Point styleStretch, gxShape destination, gxTranslationStatistic *stats)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXConvertPICTToShape
			move.w              #$0241,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXConvertPICTToShape
	ENDIF

;  Find the best GX style given a QD font and face. Called by the QD->GX translator 
;
; extern long GXConvertQDFont(gxStyle theStyle, long txFont, long txFace)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXConvertQDFont
			move.w              #$0242,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXConvertQDFont
	ENDIF

;
; extern gxConvertQDFontUPP GXGetConvertQDFont(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetConvertQDFont
			move.w              #$0243,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetConvertQDFont
	ENDIF

;
; extern void GXSetConvertQDFont(gxConvertQDFontUPP userFunction)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXSetConvertQDFont
			move.w              #$0244,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXSetConvertQDFont
	ENDIF

; typedef unsigned long 				gxProfilePoolAttributes

gxFlatProfileListItem	RECORD 0
attributes				 ds.l	1				; offset: $0 (0)		;  information about this particular profile's source
profileRef				 ds.l	1				; offset: $4 (4)		;  reference to profile, only valid before shape is disposed
identifier				 ds		CMProfileIdentifier ; offset: $8 (8)	;  information on how to find the profile upon unflattening
sizeof					 EQU *					; size:   $9A (154)
						ENDR

	ENDIF ; __GXENVIRONMENT__ 


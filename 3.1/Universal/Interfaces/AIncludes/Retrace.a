;
;	File:		Retrace.a
;
;	Contains:	Vertical Retrace Interfaces.
;
;	Version:	Technology:	System 7.5
;				Release:	Universal Interfaces 3.1
;
;	Copyright:	© 1985-1993, 1995-1998 by Apple Computer, Inc., all rights reserved
;
;	Bugs?:		Please include the the file and version information (from above) with
;				the problem description.  Developers belonging to one of the Apple
;				developer programs can submit bug reports to:
;
;					devsupport@apple.com
;
;
	IF &TYPE('__RETRACE__') = 'UNDEFINED' THEN
__RETRACE__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__OSUTILS__') = 'UNDEFINED' THEN
	include 'OSUtils.a'
	ENDIF



; typedef VBLTask *						VBLTaskPtr

VBLTask					RECORD 0
qLink					 ds.l	1				; offset: $0 (0)
qType					 ds.w	1				; offset: $4 (4)
vblAddr					 ds.l	1				; offset: $6 (6)
vblCount				 ds.w	1				; offset: $A (10)
vblPhase				 ds.w	1				; offset: $C (12)
sizeof					 EQU *					; size:   $E (14)
						ENDR
;
; pascal QHdrPtr GetVBLQHdr(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetVBLQHdr           &dest=(sp)
			move.l            #$00000160,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetVBLQHdr
	ENDIF

;
; pascal OSErr SlotVInstall(QElemPtr vblBlockPtr, short theSlot)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	vblBlockPtr     => A0
		;	theSlot         => D0
		; returns:
		;	OSErr           <= D0
		_SlotVInstall:	OPWORD	$A06F
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SlotVInstall
	ENDIF

;
; pascal OSErr SlotVRemove(QElemPtr vblBlockPtr, short theSlot)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	vblBlockPtr     => A0
		;	theSlot         => D0
		; returns:
		;	OSErr           <= D0
		_SlotVRemove:	OPWORD	$A070
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SlotVRemove
	ENDIF

;
; pascal OSErr AttachVBL(short theSlot)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	theSlot         => D0
		; returns:
		;	OSErr           <= D0
		_AttachVBL:	OPWORD	$A071
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AttachVBL
	ENDIF

;
; pascal OSErr DoVBLTask(short theSlot)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	theSlot         => D0
		; returns:
		;	OSErr           <= D0
		_DoVBLTask:	OPWORD	$A072
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DoVBLTask
	ENDIF

;
; pascal OSErr VInstall(QElemPtr vblTaskPtr)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	vblTaskPtr      => A0
		; returns:
		;	OSErr           <= D0
		_VInstall:	OPWORD	$A033
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION VInstall
	ENDIF

;
; pascal OSErr VRemove(QElemPtr vblTaskPtr)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; parameters:
		;	vblTaskPtr      => A0
		; returns:
		;	OSErr           <= D0
		_VRemove:	OPWORD	$A034
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION VRemove
	ENDIF



	ENDIF ; __RETRACE__ 


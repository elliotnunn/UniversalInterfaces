;
;	File:		QD3DTransform.a
;
;	Contains:	Q3Transform routines 												
;
;	Version:	Technology:	Quickdraw 3D 1.5.4
;				Release:	Universal Interfaces 3.2
;
;	Copyright:	Â© 1995-1998 by Apple Computer, Inc., all rights reserved.
;
;	Bugs?:		For bug reports, consult the following page on
;				the World Wide Web:
;
;					http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__QD3DTRANSFORM__') = 'UNDEFINED' THEN
__QD3DTRANSFORM__ SET 1

	IF &TYPE('__QD3D__') = 'UNDEFINED' THEN
	include 'QD3D.a'
	ENDIF

; ******************************************************************************
; **																			 **
; **							Transform Routines							     **
; **																			 **
; ****************************************************************************

;
; extern TQ3ObjectType Q3Transform_GetType(TQ3TransformObject transform)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Transform_GetType
	ENDIF

;
; extern TQ3Matrix4x4 *Q3Transform_GetMatrix(TQ3TransformObject transform, TQ3Matrix4x4 *matrix)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Transform_GetMatrix
	ENDIF

;
; extern TQ3Status Q3Transform_Submit(TQ3TransformObject transform, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Transform_Submit
	ENDIF


; ******************************************************************************
; **																			 **
; **							MatrixTransform Routines					     **
; **																			 **
; ****************************************************************************

;
; extern TQ3TransformObject Q3MatrixTransform_New(const TQ3Matrix4x4 *matrix)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3MatrixTransform_New
	ENDIF

;
; extern TQ3Status Q3MatrixTransform_Submit(const TQ3Matrix4x4 *matrix, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3MatrixTransform_Submit
	ENDIF

;
; extern TQ3Status Q3MatrixTransform_Set(TQ3TransformObject transform, const TQ3Matrix4x4 *matrix)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3MatrixTransform_Set
	ENDIF

;
; extern TQ3Status Q3MatrixTransform_Get(TQ3TransformObject transform, TQ3Matrix4x4 *matrix)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3MatrixTransform_Get
	ENDIF


; ******************************************************************************
; **																			 **
; **							RotateTransform Data						     **
; **																			 **
; ****************************************************************************

TQ3RotateTransformData	RECORD 0
axis					 ds.l	1				; offset: $0 (0)
radians					 ds		Float32			; offset: $4 (4)
sizeof					 EQU *					; size:   $8 (8)
						ENDR
; ******************************************************************************
; **																			 **
; **							RotateTransform Routines					     **
; **																			 **
; ****************************************************************************

;
; extern TQ3TransformObject Q3RotateTransform_New(const TQ3RotateTransformData *data)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateTransform_New
	ENDIF


;
; extern TQ3Status Q3RotateTransform_Submit(const TQ3RotateTransformData *data, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateTransform_Submit
	ENDIF

;
; extern TQ3Status Q3RotateTransform_SetData(TQ3TransformObject transform, const TQ3RotateTransformData *data)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateTransform_SetData
	ENDIF

;
; extern TQ3Status Q3RotateTransform_GetData(TQ3TransformObject transform, TQ3RotateTransformData *data)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateTransform_GetData
	ENDIF

;
; extern TQ3Status Q3RotateTransform_SetAxis(TQ3TransformObject transform, TQ3Axis axis)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateTransform_SetAxis
	ENDIF

;
; extern TQ3Status Q3RotateTransform_SetAngle(TQ3TransformObject transform, float radians)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateTransform_SetAngle
	ENDIF

;
; extern TQ3Status Q3RotateTransform_GetAxis(TQ3TransformObject renderable, TQ3Axis *axis)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateTransform_GetAxis
	ENDIF

;
; extern TQ3Status Q3RotateTransform_GetAngle(TQ3TransformObject transform, float *radians)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateTransform_GetAngle
	ENDIF


; ******************************************************************************
; **																			 **
; **					RotateAboutPointTransform Data							 **
; **																			 **
; ****************************************************************************

TQ3RotateAboutPointTransformData RECORD 0
axis					 ds.l	1				; offset: $0 (0)
radians					 ds		Float32			; offset: $4 (4)
about					 ds		TQ3Point3D		; offset: $8 (8)
sizeof					 EQU *					; size:   $14 (20)
						ENDR
; ******************************************************************************
; **																			 **
; **					RotateAboutPointTransform Routines						 **
; **																			 **
; ****************************************************************************

;
; extern TQ3TransformObject Q3RotateAboutPointTransform_New(const TQ3RotateAboutPointTransformData *data)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutPointTransform_New
	ENDIF

;
; extern TQ3Status Q3RotateAboutPointTransform_Submit(const TQ3RotateAboutPointTransformData *data, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutPointTransform_Submit
	ENDIF

;
; extern TQ3Status Q3RotateAboutPointTransform_SetData(TQ3TransformObject transform, const TQ3RotateAboutPointTransformData *data)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutPointTransform_SetData
	ENDIF

;
; extern TQ3Status Q3RotateAboutPointTransform_GetData(TQ3TransformObject transform, TQ3RotateAboutPointTransformData *data)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutPointTransform_GetData
	ENDIF

;
; extern TQ3Status Q3RotateAboutPointTransform_SetAxis(TQ3TransformObject transform, TQ3Axis axis)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutPointTransform_SetAxis
	ENDIF

;
; extern TQ3Status Q3RotateAboutPointTransform_GetAxis(TQ3TransformObject transform, TQ3Axis *axis)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutPointTransform_GetAxis
	ENDIF


;
; extern TQ3Status Q3RotateAboutPointTransform_SetAngle(TQ3TransformObject transform, float radians)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutPointTransform_SetAngle
	ENDIF

;
; extern TQ3Status Q3RotateAboutPointTransform_GetAngle(TQ3TransformObject transform, float *radians)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutPointTransform_GetAngle
	ENDIF


;
; extern TQ3Status Q3RotateAboutPointTransform_SetAboutPoint(TQ3TransformObject transform, const TQ3Point3D *about)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutPointTransform_SetAboutPoint
	ENDIF

;
; extern TQ3Status Q3RotateAboutPointTransform_GetAboutPoint(TQ3TransformObject transform, TQ3Point3D *about)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutPointTransform_GetAboutPoint
	ENDIF


; ******************************************************************************
; **																			 **
; **					RotateAboutAxisTransform Data							 **
; **																			 **
; ****************************************************************************

TQ3RotateAboutAxisTransformData RECORD 0
origin					 ds		TQ3Point3D		; offset: $0 (0)
orientation				 ds		TQ3Vector3D		; offset: $C (12)
radians					 ds		Float32			; offset: $18 (24)
sizeof					 EQU *					; size:   $1C (28)
						ENDR
; ******************************************************************************
; **																			 **
; **					RotateAboutAxisTransform Routines						 **
; **																			 **
; ****************************************************************************

;
; extern TQ3TransformObject Q3RotateAboutAxisTransform_New(const TQ3RotateAboutAxisTransformData *data)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutAxisTransform_New
	ENDIF

;
; extern TQ3Status Q3RotateAboutAxisTransform_Submit(const TQ3RotateAboutAxisTransformData *data, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutAxisTransform_Submit
	ENDIF

;
; extern TQ3Status Q3RotateAboutAxisTransform_SetData(TQ3TransformObject transform, const TQ3RotateAboutAxisTransformData *data)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutAxisTransform_SetData
	ENDIF

;
; extern TQ3Status Q3RotateAboutAxisTransform_GetData(TQ3TransformObject transform, TQ3RotateAboutAxisTransformData *data)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutAxisTransform_GetData
	ENDIF


;
; extern TQ3Status Q3RotateAboutAxisTransform_SetOrientation(TQ3TransformObject transform, const TQ3Vector3D *axis)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutAxisTransform_SetOrientation
	ENDIF

;
; extern TQ3Status Q3RotateAboutAxisTransform_GetOrientation(TQ3TransformObject transform, TQ3Vector3D *axis)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutAxisTransform_GetOrientation
	ENDIF


;
; extern TQ3Status Q3RotateAboutAxisTransform_SetAngle(TQ3TransformObject transform, float radians)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutAxisTransform_SetAngle
	ENDIF

;
; extern TQ3Status Q3RotateAboutAxisTransform_GetAngle(TQ3TransformObject transform, float *radians)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutAxisTransform_GetAngle
	ENDIF


;
; extern TQ3Status Q3RotateAboutAxisTransform_SetOrigin(TQ3TransformObject transform, const TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutAxisTransform_SetOrigin
	ENDIF

;
; extern TQ3Status Q3RotateAboutAxisTransform_GetOrigin(TQ3TransformObject transform, TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3RotateAboutAxisTransform_GetOrigin
	ENDIF


; ******************************************************************************
; **																			 **
; **							ScaleTransform Routines						     **
; **																			 **
; ****************************************************************************

;
; extern TQ3TransformObject Q3ScaleTransform_New(const TQ3Vector3D *scale)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3ScaleTransform_New
	ENDIF

;
; extern TQ3Status Q3ScaleTransform_Submit(const TQ3Vector3D *scale, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3ScaleTransform_Submit
	ENDIF

;
; extern TQ3Status Q3ScaleTransform_Set(TQ3TransformObject transform, const TQ3Vector3D *scale)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3ScaleTransform_Set
	ENDIF

;
; extern TQ3Status Q3ScaleTransform_Get(TQ3TransformObject transform, TQ3Vector3D *scale)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3ScaleTransform_Get
	ENDIF


; ******************************************************************************
; **																			 **
; **							TranslateTransform Routines					     **
; **																			 **
; ****************************************************************************

;
; extern TQ3TransformObject Q3TranslateTransform_New(const TQ3Vector3D *translate)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TranslateTransform_New
	ENDIF

;
; extern TQ3Status Q3TranslateTransform_Submit(const TQ3Vector3D *translate, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TranslateTransform_Submit
	ENDIF

;
; extern TQ3Status Q3TranslateTransform_Set(TQ3TransformObject transform, const TQ3Vector3D *translate)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TranslateTransform_Set
	ENDIF

;
; extern TQ3Status Q3TranslateTransform_Get(TQ3TransformObject transform, TQ3Vector3D *translate)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TranslateTransform_Get
	ENDIF

; ******************************************************************************
; **																			 **
; **							QuaternionTransform Routines				     **
; **																			 **
; ****************************************************************************

;
; extern TQ3TransformObject Q3QuaternionTransform_New(const TQ3Quaternion *quaternion)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3QuaternionTransform_New
	ENDIF

;
; extern TQ3Status Q3QuaternionTransform_Submit(const TQ3Quaternion *quaternion, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3QuaternionTransform_Submit
	ENDIF

;
; extern TQ3Status Q3QuaternionTransform_Set(TQ3TransformObject transform, const TQ3Quaternion *quaternion)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3QuaternionTransform_Set
	ENDIF

;
; extern TQ3Status Q3QuaternionTransform_Get(TQ3TransformObject transform, TQ3Quaternion *quaternion)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3QuaternionTransform_Get
	ENDIF


; ******************************************************************************
; **																			 **
; **							ResetTransform Routines						     **
; **																			 **
; ****************************************************************************

;
; extern TQ3TransformObject Q3ResetTransform_New(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3ResetTransform_New
	ENDIF

;
; extern TQ3Status Q3ResetTransform_Submit(TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3ResetTransform_Submit
	ENDIF




	ENDIF ; __QD3DTRANSFORM__ 


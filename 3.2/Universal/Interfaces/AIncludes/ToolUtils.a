;
;	File:		ToolUtils.a
;
;	Contains:	Toolbox Utilities Interfaces.
;
;	Version:	Technology:	System 7.5
;				Release:	Universal Interfaces 3.2
;
;	Copyright:	© 1990-1998 by Apple Computer, Inc., all rights reserved
;
;	Bugs?:		For bug reports, consult the following page on
;				the World Wide Web:
;
;					http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__TOOLUTILS__') = 'UNDEFINED' THEN
__TOOLUTILS__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__OSUTILS__') = 'UNDEFINED' THEN
	include 'OSUtils.a'
	ENDIF

	IF OLDROUTINELOCATIONS THEN
	IF &TYPE('__FIXMATH__') = 'UNDEFINED' THEN
	include 'FixMath.a'
	ENDIF
	IF &TYPE('__ICONS__') = 'UNDEFINED' THEN
	include 'Icons.a'
	ENDIF
	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN
	include 'Quickdraw.a'
	ENDIF
	IF &TYPE('__TEXTUTILS__') = 'UNDEFINED' THEN
	include 'TextUtils.a'
	ENDIF
	ENDIF	; OLDROUTINELOCATIONS

; 
;————————————————————————————————————————————————————————————————————————————————————
;	Note: 
;	
;	The following routines that used to be in this header file, have moved to
;	more appropriate headers.  If OLDROUTINELOCATIONS is 0, then you will have
;	to include the headers below to use the following functions.
;	
;		FixMath.h:		FixMul
;						FixRatio
;						FixRound
;		
;		Icons.h: 	 	GetIcon
;						PlotIcon
;						
;		Quickdraw.h:	AngleFromSlope
;						DeltaPoint
;						GetCursor
;						GetIndPattern
;						GetPattern
;						GetPicture
;						PackBits
;						ScreenRes
;						ShieldCursor
;						SlopeFromAngle
;						UnpackBits
;						
;		TextUtils.h:	Munger
;						GetIndString
;						GetString
;						NewString
;						SetString
;————————————————————————————————————————————————————————————————————————————————————
;



;
; pascal Boolean BitTst(const void *bytePtr, long bitNum)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_BitTst:	OPWORD	$A85D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitTst
	ENDIF

;
; pascal void BitSet(void *bytePtr, long bitNum)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_BitSet:	OPWORD	$A85E
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitSet
	ENDIF

;
; pascal void BitClr(void *bytePtr, long bitNum)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_BitClr:	OPWORD	$A85F
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitClr
	ENDIF

;
; pascal long BitAnd(long value1, long value2)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_BitAnd:	OPWORD	$A858
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitAnd
	ENDIF

;
; pascal long BitOr(long value1, long value2)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_BitOr:	OPWORD	$A85B
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitOr
	ENDIF

;
; pascal long BitXor(long value1, long value2)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_BitXor:	OPWORD	$A859
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitXor
	ENDIF

;
; pascal long BitNot(long value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_BitNot:	OPWORD	$A85A
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitNot
	ENDIF

;
; pascal long BitShift(long value, short count)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_BitShift:	OPWORD	$A85C
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitShift
	ENDIF

	IF TARGET_CPU_68K THEN
Int64Bit				RECORD 0
hiLong					 ds.l	1				; offset: $0 (0)
loLong					 ds.l	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $8 (8)
						ENDR
;
; pascal void LongMul(long a, long b, Int64Bit *result)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_LongMul:	OPWORD	$A867
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LongMul
	ENDIF

	ENDIF	; TARGET_CPU_68K

	ENDIF ; __TOOLUTILS__ 


{
 	File:		LowMem.p
 
 	Contains:	Low Memory Accessor Interfaces.
 
 	Version:	Technology:	Mac OS 8.1
 				Release:	Universal Interfaces 3.2
 
 	Copyright:	Â© 1993-1998 by Apple Computer, Inc., all rights reserved
 
 	Bugs?:		For bug reports, consult the following page on
 				the World Wide Web:
 
 					http://developer.apple.com/bugreporter/
 
}
{$IFC UNDEFINED UsingIncludes}
{$SETC UsingIncludes := 0}
{$ENDC}

{$IFC NOT UsingIncludes}
 UNIT LowMem;
 INTERFACE
{$ENDC}

{$IFC UNDEFINED __LOWMEM__}
{$SETC __LOWMEM__ := 1}

{$I+}
{$SETC LowMemIncludes := UsingIncludes}
{$SETC UsingIncludes := 1}

{$IFC UNDEFINED __MACTYPES__}
{$I MacTypes.p}
{$ENDC}
{$IFC UNDEFINED __CONTROLS__}
{$I Controls.p}
{$ENDC}
{$IFC UNDEFINED __EVENTS__}
{$I Events.p}
{$ENDC}
{$IFC UNDEFINED __FILES__}
{$I Files.p}
{$ENDC}
{$IFC UNDEFINED __FONTS__}
{$I Fonts.p}
{$ENDC}
{$IFC UNDEFINED __MACMEMORY__}
{$I MacMemory.p}
{$ENDC}
{$IFC UNDEFINED __MENUS__}
{$I Menus.p}
{$ENDC}
{$IFC UNDEFINED __OSUTILS__}
{$I OSUtils.p}
{$ENDC}
{$IFC UNDEFINED __QUICKDRAW__}
{$I Quickdraw.p}
{$ENDC}
{$IFC UNDEFINED __RESOURCES__}
{$I Resources.p}
{$ENDC}

{$IFC UNDEFINED __MACWINDOWS__}
{$I MacWindows.p}
{$ENDC}

{$PUSH}
{$ALIGN MAC68K}
{$LibExport+}

{*************************************************************************************

	SIMPLE LOWMEM ACCESSORS

*************************************************************************************}
FUNCTION LMGetScrVRes: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0102;
	{$ENDC}
PROCEDURE LMSetScrVRes(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0102;
	{$ENDC}

FUNCTION LMGetScrHRes: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0104;
	{$ENDC}
PROCEDURE LMSetScrHRes(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0104;
	{$ENDC}

FUNCTION LMGetMemTop: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0108;
	{$ENDC}
PROCEDURE LMSetMemTop(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0108;
	{$ENDC}

FUNCTION LMGetBufPtr: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $010C;
	{$ENDC}
PROCEDURE LMSetBufPtr(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $010C;
	{$ENDC}

FUNCTION LMGetHeapEnd: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0114;
	{$ENDC}
PROCEDURE LMSetHeapEnd(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0114;
	{$ENDC}

FUNCTION LMGetTheZone: THz;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0118;
	{$ENDC}
PROCEDURE LMSetTheZone(value: THz);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0118;
	{$ENDC}

FUNCTION LMGetUTableBase: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $011C;
	{$ENDC}
PROCEDURE LMSetUTableBase(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $011C;
	{$ENDC}

FUNCTION LMGetCPUFlag: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $012F;
	{$ENDC}
PROCEDURE LMSetCPUFlag(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $012F;
	{$ENDC}

FUNCTION LMGetApplLimit: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0130;
	{$ENDC}
PROCEDURE LMSetApplLimit(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0130;
	{$ENDC}

FUNCTION LMGetSysEvtMask: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0144;
	{$ENDC}
PROCEDURE LMSetSysEvtMask(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0144;
	{$ENDC}

FUNCTION LMGetRndSeed: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0156;
	{$ENDC}
PROCEDURE LMSetRndSeed(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0156;
	{$ENDC}

FUNCTION LMGetSEvtEnb: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $015C;
	{$ENDC}
PROCEDURE LMSetSEvtEnb(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $015C;
	{$ENDC}

FUNCTION LMGetTicks: UInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $016A;
	{$ENDC}
PROCEDURE LMSetTicks(value: UInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $016A;
	{$ENDC}

FUNCTION LMGetKeyThresh: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $018E;
	{$ENDC}
PROCEDURE LMSetKeyThresh(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $018E;
	{$ENDC}

FUNCTION LMGetKeyRepThresh: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0190;
	{$ENDC}
PROCEDURE LMSetKeyRepThresh(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0190;
	{$ENDC}

FUNCTION LMGetVIA: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $01D4;
	{$ENDC}
PROCEDURE LMSetVIA(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $01D4;
	{$ENDC}

FUNCTION LMGetSCCRd: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $01D8;
	{$ENDC}
PROCEDURE LMSetSCCRd(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $01D8;
	{$ENDC}

FUNCTION LMGetSCCWr: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $01DC;
	{$ENDC}
PROCEDURE LMSetSCCWr(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $01DC;
	{$ENDC}

FUNCTION LMGetSPValid: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $01F8;
	{$ENDC}
PROCEDURE LMSetSPValid(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $01F8;
	{$ENDC}

FUNCTION LMGetSPATalkA: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $01F9;
	{$ENDC}
PROCEDURE LMSetSPATalkA(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $01F9;
	{$ENDC}

FUNCTION LMGetSPATalkB: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $01FA;
	{$ENDC}
PROCEDURE LMSetSPATalkB(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $01FA;
	{$ENDC}

FUNCTION LMGetSPConfig: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $01FB;
	{$ENDC}
PROCEDURE LMSetSPConfig(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $01FB;
	{$ENDC}

FUNCTION LMGetSPPortA: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $01FC;
	{$ENDC}
PROCEDURE LMSetSPPortA(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $01FC;
	{$ENDC}

FUNCTION LMGetSPPortB: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $01FE;
	{$ENDC}
PROCEDURE LMSetSPPortB(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $01FE;
	{$ENDC}

FUNCTION LMGetSPAlarm: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0200;
	{$ENDC}
PROCEDURE LMSetSPAlarm(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0200;
	{$ENDC}

FUNCTION LMGetSPFont: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0204;
	{$ENDC}
PROCEDURE LMSetSPFont(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0204;
	{$ENDC}

FUNCTION LMGetSPKbd: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0206;
	{$ENDC}
PROCEDURE LMSetSPKbd(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0206;
	{$ENDC}

FUNCTION LMGetSPPrint: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0207;
	{$ENDC}
PROCEDURE LMSetSPPrint(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0207;
	{$ENDC}

FUNCTION LMGetSPVolCtl: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0208;
	{$ENDC}
PROCEDURE LMSetSPVolCtl(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0208;
	{$ENDC}

FUNCTION LMGetSPClikCaret: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0209;
	{$ENDC}
PROCEDURE LMSetSPClikCaret(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0209;
	{$ENDC}

FUNCTION LMGetSPMisc2: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $020B;
	{$ENDC}
PROCEDURE LMSetSPMisc2(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $020B;
	{$ENDC}

FUNCTION LMGetTime: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $020C;
	{$ENDC}
PROCEDURE LMSetTime(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $020C;
	{$ENDC}

FUNCTION LMGetBootDrive: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0210;
	{$ENDC}
PROCEDURE LMSetBootDrive(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0210;
	{$ENDC}

FUNCTION LMGetSFSaveDisk: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0214;
	{$ENDC}
PROCEDURE LMSetSFSaveDisk(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0214;
	{$ENDC}

FUNCTION LMGetKbdLast: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0218;
	{$ENDC}
PROCEDURE LMSetKbdLast(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0218;
	{$ENDC}

FUNCTION LMGetKbdType: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $021E;
	{$ENDC}
PROCEDURE LMSetKbdType(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $021E;
	{$ENDC}

FUNCTION LMGetMemErr: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0220;
	{$ENDC}
PROCEDURE LMSetMemErr(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0220;
	{$ENDC}

FUNCTION LMGetSdVolume: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0260;
	{$ENDC}
PROCEDURE LMSetSdVolume(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0260;
	{$ENDC}

FUNCTION LMGetSoundPtr: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0262;
	{$ENDC}
PROCEDURE LMSetSoundPtr(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0262;
	{$ENDC}

FUNCTION LMGetSoundBase: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0266;
	{$ENDC}
PROCEDURE LMSetSoundBase(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0266;
	{$ENDC}

FUNCTION LMGetSoundLevel: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $027F;
	{$ENDC}
PROCEDURE LMSetSoundLevel(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $027F;
	{$ENDC}

FUNCTION LMGetCurPitch: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0280;
	{$ENDC}
PROCEDURE LMSetCurPitch(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0280;
	{$ENDC}

FUNCTION LMGetROM85: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $028E;
	{$ENDC}
PROCEDURE LMSetROM85(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $028E;
	{$ENDC}

FUNCTION LMGetPortBUse: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0291;
	{$ENDC}
PROCEDURE LMSetPortBUse(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0291;
	{$ENDC}

FUNCTION LMGetGNEFilter: GetNextEventFilterUPP;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $029A;
	{$ENDC}
PROCEDURE LMSetGNEFilter(value: GetNextEventFilterUPP);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $029A;
	{$ENDC}

FUNCTION LMGetSysZone: THz;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $02A6;
	{$ENDC}
PROCEDURE LMSetSysZone(value: THz);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $02A6;
	{$ENDC}

FUNCTION LMGetApplZone: THz;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $02AA;
	{$ENDC}
PROCEDURE LMSetApplZone(value: THz);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $02AA;
	{$ENDC}

FUNCTION LMGetROMBase: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $02AE;
	{$ENDC}
PROCEDURE LMSetROMBase(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $02AE;
	{$ENDC}

FUNCTION LMGetRAMBase: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $02B2;
	{$ENDC}
PROCEDURE LMSetRAMBase(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $02B2;
	{$ENDC}

FUNCTION LMGetDSAlertTab: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $02BA;
	{$ENDC}
PROCEDURE LMSetDSAlertTab(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $02BA;
	{$ENDC}


{
	NOTE:	LMGetABusVars and LMSetABusVars have been removed.
			Their implememtation in InterfaceLib was inconsistent
			with their prototypes here.  In InterfaceLib LMSetABusVars 
			would copy eight bytes and LMGetABusVars would return the
			value 0x02D8 instead of the long at that location.
			
			Use LMGetABusGlobals/LMSetABusGlobals to get/set the
			long at location 0x02D8 which is a pointer to the AppleTalk
			globals.  Use LMGetABusDCE/LMSetABusDCE to get/set the
			long at location 0x02DC which is the .MPP driver
			Device Control Entry. 
			
}
FUNCTION LMGetABusGlobals: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $02D8;
	{$ENDC}
PROCEDURE LMSetABusGlobals(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $02D8;
	{$ENDC}
FUNCTION LMGetABusDCE: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $02DC;
	{$ENDC}
PROCEDURE LMSetABusDCE(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $02DC;
	{$ENDC}


FUNCTION LMGetDoubleTime: UInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $02F0;
	{$ENDC}
PROCEDURE LMSetDoubleTime(value: UInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $02F0;
	{$ENDC}

FUNCTION LMGetCaretTime: UInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $02F4;
	{$ENDC}
PROCEDURE LMSetCaretTime(value: UInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $02F4;
	{$ENDC}

FUNCTION LMGetScrDmpEnb: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $02F8;
	{$ENDC}
PROCEDURE LMSetScrDmpEnb(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $02F8;
	{$ENDC}

FUNCTION LMGetBufTgFNum: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $02FC;
	{$ENDC}
PROCEDURE LMSetBufTgFNum(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $02FC;
	{$ENDC}

FUNCTION LMGetBufTgFFlg: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0300;
	{$ENDC}
PROCEDURE LMSetBufTgFFlg(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0300;
	{$ENDC}

FUNCTION LMGetBufTgFBkNum: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0302;
	{$ENDC}
PROCEDURE LMSetBufTgFBkNum(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0302;
	{$ENDC}

FUNCTION LMGetBufTgDate: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0304;
	{$ENDC}
PROCEDURE LMSetBufTgDate(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0304;
	{$ENDC}

FUNCTION LMGetLo3Bytes: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $031A;
	{$ENDC}
PROCEDURE LMSetLo3Bytes(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $031A;
	{$ENDC}

FUNCTION LMGetMinStack: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $031E;
	{$ENDC}
PROCEDURE LMSetMinStack(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $031E;
	{$ENDC}

FUNCTION LMGetDefltStack: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0322;
	{$ENDC}
PROCEDURE LMSetDefltStack(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0322;
	{$ENDC}

FUNCTION LMGetGZRootHnd: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0328;
	{$ENDC}
PROCEDURE LMSetGZRootHnd(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0328;
	{$ENDC}

FUNCTION LMGetGZMoveHnd: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0330;
	{$ENDC}
PROCEDURE LMSetGZMoveHnd(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0330;
	{$ENDC}

FUNCTION LMGetFCBSPtr: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $034E;
	{$ENDC}
PROCEDURE LMSetFCBSPtr(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $034E;
	{$ENDC}

FUNCTION LMGetDefVCBPtr: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0352;
	{$ENDC}
PROCEDURE LMSetDefVCBPtr(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0352;
	{$ENDC}

FUNCTION LMGetCurDirStore: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0398;
	{$ENDC}
PROCEDURE LMSetCurDirStore(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0398;
	{$ENDC}

FUNCTION LMGetToExtFS: UniversalProcPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $03F2;
	{$ENDC}
PROCEDURE LMSetToExtFS(value: UniversalProcPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $03F2;
	{$ENDC}

FUNCTION LMGetFSFCBLen: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $03F6;
	{$ENDC}
PROCEDURE LMSetFSFCBLen(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $03F6;
	{$ENDC}

FUNCTION LMGetScrnBase: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0824;
	{$ENDC}
PROCEDURE LMSetScrnBase(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0824;
	{$ENDC}

FUNCTION LMGetMainDevice: GDHandle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $08A4;
	{$ENDC}
PROCEDURE LMSetMainDevice(value: GDHandle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $08A4;
	{$ENDC}

FUNCTION LMGetDeviceList: GDHandle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $08A8;
	{$ENDC}
PROCEDURE LMSetDeviceList(value: GDHandle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $08A8;
	{$ENDC}

FUNCTION LMGetQDColors: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $08B0;
	{$ENDC}
PROCEDURE LMSetQDColors(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $08B0;
	{$ENDC}

FUNCTION LMGetCrsrBusy: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $08CD;
	{$ENDC}
PROCEDURE LMSetCrsrBusy(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $08CD;
	{$ENDC}

FUNCTION LMGetWidthListHand: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $08E4;
	{$ENDC}
PROCEDURE LMSetWidthListHand(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $08E4;
	{$ENDC}

FUNCTION LMGetJournalRef: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $08E8;
	{$ENDC}
PROCEDURE LMSetJournalRef(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $08E8;
	{$ENDC}

FUNCTION LMGetCrsrThresh: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $08EC;
	{$ENDC}
PROCEDURE LMSetCrsrThresh(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $08EC;
	{$ENDC}

FUNCTION LMGetJFetch: UniversalProcPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $08F4;
	{$ENDC}
PROCEDURE LMSetJFetch(value: UniversalProcPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $08F4;
	{$ENDC}

FUNCTION LMGetJStash: UniversalProcPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $08F8;
	{$ENDC}
PROCEDURE LMSetJStash(value: UniversalProcPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $08F8;
	{$ENDC}

FUNCTION LMGetJIODone: UniversalProcPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $08FC;
	{$ENDC}
PROCEDURE LMSetJIODone(value: UniversalProcPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $08FC;
	{$ENDC}

FUNCTION LMGetCurApRefNum: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0900;
	{$ENDC}
PROCEDURE LMSetCurApRefNum(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0900;
	{$ENDC}

FUNCTION LMGetCurrentA5: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0904;
	{$ENDC}
PROCEDURE LMSetCurrentA5(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0904;
	{$ENDC}

FUNCTION LMGetCurStackBase: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0908;
	{$ENDC}
PROCEDURE LMSetCurStackBase(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0908;
	{$ENDC}

FUNCTION LMGetCurJTOffset: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0934;
	{$ENDC}
PROCEDURE LMSetCurJTOffset(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0934;
	{$ENDC}

FUNCTION LMGetCurPageOption: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0936;
	{$ENDC}
PROCEDURE LMSetCurPageOption(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0936;
	{$ENDC}

FUNCTION LMGetHiliteMode: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0938;
	{$ENDC}
PROCEDURE LMSetHiliteMode(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0938;
	{$ENDC}

FUNCTION LMGetPrintErr: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0944;
	{$ENDC}
PROCEDURE LMSetPrintErr(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0944;
	{$ENDC}

FUNCTION LMGetScrapSize: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0960;
	{$ENDC}
PROCEDURE LMSetScrapSize(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0960;
	{$ENDC}

FUNCTION LMGetScrapHandle: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0964;
	{$ENDC}
PROCEDURE LMSetScrapHandle(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0964;
	{$ENDC}

FUNCTION LMGetScrapCount: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0968;
	{$ENDC}
PROCEDURE LMSetScrapCount(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0968;
	{$ENDC}

FUNCTION LMGetScrapState: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $096A;
	{$ENDC}
PROCEDURE LMSetScrapState(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $096A;
	{$ENDC}

FUNCTION LMGetScrapName: StringPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $096C;
	{$ENDC}
PROCEDURE LMSetScrapName(value: StringPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $096C;
	{$ENDC}

FUNCTION LMGetROMFont0: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0980;
	{$ENDC}
PROCEDURE LMSetROMFont0(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0980;
	{$ENDC}

FUNCTION LMGetApFontID: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0984;
	{$ENDC}
PROCEDURE LMSetApFontID(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0984;
	{$ENDC}


FUNCTION LMGetWindowList: WindowPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $09D6;
	{$ENDC}

FUNCTION LMGetSaveUpdate: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $09DA;
	{$ENDC}
PROCEDURE LMSetSaveUpdate(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $09DA;
	{$ENDC}

FUNCTION LMGetPaintWhite: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $09DC;
	{$ENDC}
PROCEDURE LMSetPaintWhite(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $09DC;
	{$ENDC}

FUNCTION LMGetWMgrPort: GrafPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $09DE;
	{$ENDC}
PROCEDURE LMSetWMgrPort(value: GrafPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $09DE;
	{$ENDC}

FUNCTION LMGetGrayRgn: RgnHandle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $09EE;
	{$ENDC}

FUNCTION LMGetDragHook: DragGrayRgnUPP;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $09F6;
	{$ENDC}
PROCEDURE LMSetDragHook(value: DragGrayRgnUPP);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $09F6;
	{$ENDC}

{
 There is no reason to set the window list directly.
 Use BringToFront and SendBehind.

 If you need to do floating windows, avoid using GhostWindow 
 and especially avoid patching the window manager.

 See Dean Yu's article in Develop 15 about how to implement floating
 windows using low-level window manager calls.  The next generation
 Macintosh Window Manager will have built-in support for floating
 and modal windows.
}
PROCEDURE LMSetWindowList(value: WindowPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $09D6;
	{$ENDC}
FUNCTION LMGetGhostWindow: WindowPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A84;
	{$ENDC}
PROCEDURE LMSetGhostWindow(value: WindowPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A84;
	{$ENDC}

FUNCTION LMGetAuxWinHead: AuxWinHandle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0CD0;
	{$ENDC}
PROCEDURE LMSetAuxWinHead(value: AuxWinHandle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0CD0;
	{$ENDC}
FUNCTION LMGetCurActivate: WindowPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A64;
	{$ENDC}
PROCEDURE LMSetCurActivate(value: WindowPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A64;
	{$ENDC}
FUNCTION LMGetCurDeactive: WindowPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A68;
	{$ENDC}
PROCEDURE LMSetCurDeactive(value: WindowPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A68;
	{$ENDC}

FUNCTION LMGetOldStructure: RgnHandle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $09E6;
	{$ENDC}
PROCEDURE LMSetOldStructure(value: RgnHandle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $09E6;
	{$ENDC}
FUNCTION LMGetOldContent: RgnHandle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $09EA;
	{$ENDC}
PROCEDURE LMSetOldContent(value: RgnHandle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $09EA;
	{$ENDC}

{
 Please don't mess with the gray region.  There has
 to be a better way.  If not, please manipulate the
 existing region, don't change the value of the lowmem.
}
PROCEDURE LMSetGrayRgn(value: RgnHandle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $09EE;
	{$ENDC}


FUNCTION LMGetSaveVisRgn: RgnHandle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $09F2;
	{$ENDC}
PROCEDURE LMSetSaveVisRgn(value: RgnHandle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $09F2;
	{$ENDC}



FUNCTION LMGetOneOne: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A02;
	{$ENDC}
PROCEDURE LMSetOneOne(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A02;
	{$ENDC}

FUNCTION LMGetMinusOne: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A06;
	{$ENDC}
PROCEDURE LMSetMinusOne(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A06;
	{$ENDC}

FUNCTION LMGetTopMenuItem: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0A0A;
	{$ENDC}
PROCEDURE LMSetTopMenuItem(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0A0A;
	{$ENDC}

FUNCTION LMGetAtMenuBottom: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0A0C;
	{$ENDC}
PROCEDURE LMSetAtMenuBottom(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0A0C;
	{$ENDC}

FUNCTION LMGetMenuList: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A1C;
	{$ENDC}
PROCEDURE LMSetMenuList(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A1C;
	{$ENDC}

FUNCTION LMGetMBarEnable: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0A20;
	{$ENDC}
PROCEDURE LMSetMBarEnable(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0A20;
	{$ENDC}

FUNCTION LMGetMenuFlash: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0A24;
	{$ENDC}
PROCEDURE LMSetMenuFlash(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0A24;
	{$ENDC}

FUNCTION LMGetTheMenu: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0A26;
	{$ENDC}
PROCEDURE LMSetTheMenu(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0A26;
	{$ENDC}

FUNCTION LMGetMBarHook: MBarHookUPP;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A2C;
	{$ENDC}
PROCEDURE LMSetMBarHook(value: MBarHookUPP);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A2C;
	{$ENDC}

FUNCTION LMGetMenuHook: MenuHookUPP;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A30;
	{$ENDC}
PROCEDURE LMSetMenuHook(value: MenuHookUPP);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A30;
	{$ENDC}

FUNCTION LMGetTopMapHndl: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A50;
	{$ENDC}
PROCEDURE LMSetTopMapHndl(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A50;
	{$ENDC}

FUNCTION LMGetSysMapHndl: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A54;
	{$ENDC}
PROCEDURE LMSetSysMapHndl(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A54;
	{$ENDC}

FUNCTION LMGetSysMap: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0A58;
	{$ENDC}
PROCEDURE LMSetSysMap(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0A58;
	{$ENDC}

FUNCTION LMGetCurMap: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0A5A;
	{$ENDC}
PROCEDURE LMSetCurMap(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0A5A;
	{$ENDC}

FUNCTION LMGetResLoad: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0A5E;
	{$ENDC}
PROCEDURE LMSetResLoad(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0A5E;
	{$ENDC}

FUNCTION LMGetResErr: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0A60;
	{$ENDC}
PROCEDURE LMSetResErr(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0A60;
	{$ENDC}

FUNCTION LMGetFScaleDisable: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0A63;
	{$ENDC}
PROCEDURE LMSetFScaleDisable(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0A63;
	{$ENDC}

FUNCTION LMGetDeskHook: UniversalProcPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A6C;
	{$ENDC}
PROCEDURE LMSetDeskHook(value: UniversalProcPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A6C;
	{$ENDC}

FUNCTION LMGetTEDoText: UniversalProcPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A70;
	{$ENDC}
PROCEDURE LMSetTEDoText(value: UniversalProcPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A70;
	{$ENDC}

FUNCTION LMGetTERecal: UniversalProcPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A74;
	{$ENDC}
PROCEDURE LMSetTERecal(value: UniversalProcPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A74;
	{$ENDC}

FUNCTION LMGetResumeProc: UniversalProcPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A8C;
	{$ENDC}
PROCEDURE LMSetResumeProc(value: UniversalProcPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A8C;
	{$ENDC}

FUNCTION LMGetANumber: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0A98;
	{$ENDC}
PROCEDURE LMSetANumber(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0A98;
	{$ENDC}

FUNCTION LMGetACount: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0A9A;
	{$ENDC}
PROCEDURE LMSetACount(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0A9A;
	{$ENDC}

FUNCTION LMGetDABeeper: UniversalProcPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0A9C;
	{$ENDC}
PROCEDURE LMSetDABeeper(value: UniversalProcPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0A9C;
	{$ENDC}

FUNCTION LMGetTEScrpLength: UInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0AB0;
	{$ENDC}
PROCEDURE LMSetTEScrpLength(value: UInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0AB0;
	{$ENDC}

FUNCTION LMGetTEScrpHandle: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0AB4;
	{$ENDC}
PROCEDURE LMSetTEScrpHandle(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0AB4;
	{$ENDC}

FUNCTION LMGetAppParmHandle: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0AEC;
	{$ENDC}
PROCEDURE LMSetAppParmHandle(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0AEC;
	{$ENDC}

FUNCTION LMGetDSErrCode: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0AF0;
	{$ENDC}
PROCEDURE LMSetDSErrCode(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0AF0;
	{$ENDC}

FUNCTION LMGetResErrProc: ResErrUPP;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0AF2;
	{$ENDC}
PROCEDURE LMSetResErrProc(value: ResErrUPP);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0AF2;
	{$ENDC}

FUNCTION LMGetDlgFont: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0AFA;
	{$ENDC}
PROCEDURE LMSetDlgFont(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0AFA;
	{$ENDC}

FUNCTION LMGetWidthPtr: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0B10;
	{$ENDC}
PROCEDURE LMSetWidthPtr(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0B10;
	{$ENDC}

FUNCTION LMGetATalkHk2: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0B18;
	{$ENDC}
PROCEDURE LMSetATalkHk2(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0B18;
	{$ENDC}

FUNCTION LMGetHWCfgFlags: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0B22;
	{$ENDC}
PROCEDURE LMSetHWCfgFlags(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0B22;
	{$ENDC}

FUNCTION LMGetWidthTabHandle: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0B2A;
	{$ENDC}
PROCEDURE LMSetWidthTabHandle(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0B2A;
	{$ENDC}

FUNCTION LMGetLastSPExtra: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0B4C;
	{$ENDC}
PROCEDURE LMSetLastSPExtra(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0B4C;
	{$ENDC}

FUNCTION LMGetMenuDisable: SInt32;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0B54;
	{$ENDC}
PROCEDURE LMSetMenuDisable(value: SInt32);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0B54;
	{$ENDC}

FUNCTION LMGetROMMapInsert: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0B9E;
	{$ENDC}
PROCEDURE LMSetROMMapInsert(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0B9E;
	{$ENDC}

FUNCTION LMGetTmpResLoad: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0B9F;
	{$ENDC}
PROCEDURE LMSetTmpResLoad(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0B9F;
	{$ENDC}

FUNCTION LMGetIntlSpec: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0BA0;
	{$ENDC}
PROCEDURE LMSetIntlSpec(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0BA0;
	{$ENDC}

FUNCTION LMGetWordRedraw: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0BA5;
	{$ENDC}
PROCEDURE LMSetWordRedraw(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0BA5;
	{$ENDC}

FUNCTION LMGetSysFontFam: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0BA6;
	{$ENDC}
PROCEDURE LMSetSysFontFam(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0BA6;
	{$ENDC}

FUNCTION LMGetSysFontSize: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0BA8;
	{$ENDC}
PROCEDURE LMSetSysFontSize(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0BA8;
	{$ENDC}

FUNCTION LMGetMBarHeight: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0BAA;
	{$ENDC}
PROCEDURE LMSetMBarHeight(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0BAA;
	{$ENDC}

FUNCTION LMGetTESysJust: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0BAC;
	{$ENDC}
PROCEDURE LMSetTESysJust(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0BAC;
	{$ENDC}

FUNCTION LMGetLastFOND: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0BC2;
	{$ENDC}
PROCEDURE LMSetLastFOND(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0BC2;
	{$ENDC}

FUNCTION LMGetFractEnable: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0BF4;
	{$ENDC}
PROCEDURE LMSetFractEnable(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0BF4;
	{$ENDC}

FUNCTION LMGetMMU32Bit: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0CB2;
	{$ENDC}
PROCEDURE LMSetMMU32Bit(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0CB2;
	{$ENDC}

FUNCTION LMGetTheGDevice: GDHandle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0CC8;
	{$ENDC}
PROCEDURE LMSetTheGDevice(value: GDHandle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0CC8;
	{$ENDC}

FUNCTION LMGetDeskCPat: PixPatHandle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0CD8;
	{$ENDC}
PROCEDURE LMSetDeskCPat(value: PixPatHandle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0CD8;
	{$ENDC}

FUNCTION LMGetTimeDBRA: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0D00;
	{$ENDC}
PROCEDURE LMSetTimeDBRA(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0D00;
	{$ENDC}

FUNCTION LMGetTimeSCCDB: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0D02;
	{$ENDC}
PROCEDURE LMSetTimeSCCDB(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0D02;
	{$ENDC}

FUNCTION LMGetJVBLTask: UniversalProcPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0D28;
	{$ENDC}
PROCEDURE LMSetJVBLTask(value: UniversalProcPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0D28;
	{$ENDC}

FUNCTION LMGetSynListHandle: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0D32;
	{$ENDC}
PROCEDURE LMSetSynListHandle(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0D32;
	{$ENDC}

FUNCTION LMGetMenuCInfo: MCTableHandle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0D50;
	{$ENDC}
PROCEDURE LMSetMenuCInfo(value: MCTableHandle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0D50;
	{$ENDC}

FUNCTION LMGetJDTInstall: UniversalProcPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0D9C;
	{$ENDC}
PROCEDURE LMSetJDTInstall(value: UniversalProcPtr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0D9C;
	{$ENDC}

FUNCTION LMGetTimeSCSIDB: SInt16;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $0B24;
	{$ENDC}
PROCEDURE LMSetTimeSCSIDB(value: SInt16);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $0B24;
	{$ENDC}


{*************************************************************************************

	MORE COMPLEX LOWMEM ACCESSORS

*************************************************************************************}
{$IFC TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM }
{*************************************************************************************
	"BIG DATA"
	
		These lowmem accessors access big (> 4 bytes) values.
*************************************************************************************}
PROCEDURE LMGetDeskPattern(VAR deskPatternValue: Pattern);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $225F, $41F8, $0A3C, $22D8, $22D8;
	{$ENDC}
PROCEDURE LMSetDeskPattern({CONST}VAR deskPatternValue: Pattern);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $205F, $43F8, $0A3C, $22D8, $22D8;
	{$ENDC}
PROCEDURE LMGetHiliteRGB(VAR hiliteRGBValue: RGBColor);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $225F, $41F8, $0DA0, $22D8, $32D8;
	{$ENDC}
PROCEDURE LMSetHiliteRGB({CONST}VAR hiliteRGBValue: RGBColor);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $205F, $43F8, $0DA0, $22D8, $32D8;
	{$ENDC}
{*************************************************************************************
	"BLOCKMOVE ACCESSORS"
	
		These lowmem accessors use the BlockMove to set
*************************************************************************************}
FUNCTION LMGetCurApName: StringPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $41F8, $0910, $2E88;
	{$ENDC}
FUNCTION LMGetSysResName: StringPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $41F8, $0AD8, $2E88;
	{$ENDC}
FUNCTION LMGetFinderName: StringPtr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $41F8, $02E0, $2E88;
	{$ENDC}
{*************************************************************************************
	"INDEXED ACCESSORS"
	
		These lowmem accessors take an index parameter to get/set an indexed
		lowmem global.
*************************************************************************************}
FUNCTION LMGetDAStrings(whichString: INTEGER): StringHandle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $301F, $E548, $41F8, $0AA0, $2EB0, $0000;
	{$ENDC}
PROCEDURE LMSetDAStrings(stringsValue: StringHandle; whichString: INTEGER);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $301F, $E548, $41F8, $0AA0, $219F, $0000;
	{$ENDC}
{$ELSEC}
{*************************************************************************************
	"BIG DATA"
	
		These lowmem accessors access big (> 4 bytes) values.
*************************************************************************************}
PROCEDURE LMGetDSAlertRect(VAR dsAlertRectValue: Rect);
PROCEDURE LMSetDSAlertRect({CONST}VAR dsAlertRectValue: Rect);
PROCEDURE LMGetDragPattern(VAR dragPatternValue: Pattern);
PROCEDURE LMSetDragPattern({CONST}VAR dragPatternValue: Pattern);
PROCEDURE LMGetDeskPattern(VAR deskPatternValue: Pattern);
PROCEDURE LMSetDeskPattern({CONST}VAR deskPatternValue: Pattern);
PROCEDURE LMGetHiliteRGB(VAR hiliteRGBValue: RGBColor);
PROCEDURE LMSetHiliteRGB({CONST}VAR hiliteRGBValue: RGBColor);
FUNCTION LMGetEventQueue: QHdrPtr;
PROCEDURE LMSetEventQueue(eventQueueValue: QHdrPtr);
FUNCTION LMGetVBLQueue: QHdrPtr;
PROCEDURE LMSetVBLQueue(vblQueueValue: QHdrPtr);
FUNCTION LMGetDrvQHdr: QHdrPtr;
PROCEDURE LMSetDrvQHdr(drvQHdrValue: QHdrPtr);
FUNCTION LMGetVCBQHdr: QHdrPtr;
PROCEDURE LMSetVCBQHdr(vcbQHdrValue: QHdrPtr);
FUNCTION LMGetDTQueue: QHdrPtr;
PROCEDURE LMSetDTQueue(dtQueueValue: QHdrPtr);
FUNCTION LMGetFSQHdr: QHdrPtr;
{*************************************************************************************
	"BLOCKMOVE ACCESSORS"
	
		These lowmem accessors use the BlockMove to set
*************************************************************************************}
FUNCTION LMGetCurApName: StringPtr;
PROCEDURE LMSetCurApName(curApNameValue: Str31);
FUNCTION LMGetSysResName: StringPtr;
PROCEDURE LMSetSysResName(sysResNameValue: Str15);
FUNCTION LMGetFinderName: StringPtr;
PROCEDURE LMSetFinderName(finderNameValue: Str15);
FUNCTION LMGetScratch20: Ptr;
PROCEDURE LMSetScratch20(scratch20Value: UNIV Ptr);
FUNCTION LMGetToolScratch: Ptr;
PROCEDURE LMSetToolScratch(toolScratchValue: UNIV Ptr);
FUNCTION LMGetApplScratch: Ptr;
PROCEDURE LMSetApplScratch(applScratchValue: UNIV Ptr);

{*************************************************************************************
	"INDEXED ACCESSORS"
	
		These lowmem accessors take an index parameter to get/set an indexed
		lowmem global.
*************************************************************************************}
FUNCTION LMGetDAStrings(whichString: INTEGER): StringHandle;
PROCEDURE LMSetDAStrings(stringsValue: StringHandle; whichString: INTEGER);
FUNCTION LMGetLvl2DT(vectorNumber: INTEGER): UniversalProcPtr;
PROCEDURE LMSetLvl2DT(Lvl2DTValue: UniversalProcPtr; vectorNumber: INTEGER);
FUNCTION LMGetExtStsDT(vectorNumber: INTEGER): UniversalProcPtr;
PROCEDURE LMSetExtStsDT(ExtStsDTValue: UniversalProcPtr; vectorNumber: INTEGER);
{$ENDC}

{*************************************************************************************
	"Missing Accessors"
	
		These lowmem accessors are not in InterfaceLib and were missing from
		previous versions of LowMem.h.  Because they are not in InterfaceLib,
		C macros were added to directly inline the accessors.
	
*************************************************************************************}
{  accesses "CrsrNew" }
FUNCTION LMGetCursorNew: BOOLEAN;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $08CE;
	{$ENDC}
PROCEDURE LMSetCursorNew(value: BOOLEAN);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $08CE;
	{$ENDC}

{  accesses "MBState" }
FUNCTION LMGetMouseButtonState: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0172;
	{$ENDC}
PROCEDURE LMSetMouseButtonState(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0172;
	{$ENDC}

{  accesses "MTemp" }
FUNCTION LMGetMouseTemp: Point;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0828;
	{$ENDC}
PROCEDURE LMSetMouseTemp(value: Point);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0828;
	{$ENDC}

{  accesses "RawMouse" }
FUNCTION LMGetRawMouseLocation: Point;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $082C;
	{$ENDC}
PROCEDURE LMSetRawMouseLocation(value: Point);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $082C;
	{$ENDC}

{  accesses "Mouse" }
FUNCTION LMGetMouseLocation: Point;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0830;
	{$ENDC}
PROCEDURE LMSetMouseLocation(value: Point);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0830;
	{$ENDC}

{  accesses "TheCrsr" }
PROCEDURE LMGetTheCursor(VAR currentCursor: Cursor); C;
PROCEDURE LMSetTheCursor({CONST}VAR newCursor: Cursor); C;
{  accesses "HiHeapMark" }
FUNCTION LMGetHighHeapMark: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0BAE;
	{$ENDC}
PROCEDURE LMSetHighHeapMark(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0BAE;
	{$ENDC}

{  accesses "StkLowPt" }
FUNCTION LMGetStackLowPoint: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0110;
	{$ENDC}
PROCEDURE LMSetStackLowPoint(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0110;
	{$ENDC}

{  accesses "ROMMapHndl" }
FUNCTION LMGetROMMapHandle: Handle;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0B06;
	{$ENDC}
PROCEDURE LMSetROMMapHandle(value: Handle);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0B06;
	{$ENDC}

{  accesses "UnitNtryCnt" }
FUNCTION LMGetUnitTableEntryCount: INTEGER;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $3EB8, $01D2;
	{$ENDC}
PROCEDURE LMSetUnitTableEntryCount(value: INTEGER);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $31DF, $01D2;
	{$ENDC}

{  accesses "FmtDefaults" }
FUNCTION LMGetDiskFormatingHFSDefaults: Ptr;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $039E;
	{$ENDC}
PROCEDURE LMSetDiskFormatingHFSDefaults(value: Ptr);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $039E;
	{$ENDC}

{  accesses "PortAUse" }
FUNCTION LMGetPortAInfo: ByteParameter;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $1EB8, $0290;
	{$ENDC}
PROCEDURE LMSetPortAInfo(value: ByteParameter);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $11DF, $0290;
	{$ENDC}


{  These are in InterfaceLib as of Allegro }

FUNCTION LMGetMBTicks: LONGINT;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $016E;
	{$ENDC}
PROCEDURE LMSetMBTicks(value: LONGINT);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $016E;
	{$ENDC}

FUNCTION LMGetKeyTime: LONGINT;
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $2EB8, $0186;
	{$ENDC}
PROCEDURE LMSetKeyTime(value: LONGINT);
	{$IFC TARGET_OS_MAC AND TARGET_CPU_68K AND NOT TARGET_RT_MAC_CFM}
	INLINE $21DF, $0186;
	{$ENDC}


{$ALIGN RESET}
{$POP}

{$SETC UsingIncludes := LowMemIncludes}

{$ENDC} {__LOWMEM__}

{$IFC NOT UsingIncludes}
 END.
{$ENDC}

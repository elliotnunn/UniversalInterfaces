;
;    File:       CFArray.a
;
;    Contains:   CoreFoundation array collection
;
;    Version:    Technology: Mac OS X
;                Release:    Universal Interfaces 3.3.2
;
;    Copyright:  Â© 1999-2000 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CFARRAY__') = 'UNDEFINED' THEN
__CFARRAY__ SET 1

	IF &TYPE('__CFBASE__') = 'UNDEFINED' THEN
	include 'CFBase.a'
	ENDIF

CFArrayCallBacks		RECORD 0
version					 ds.l	1				; offset: $0 (0)
retain					 ds.l	1				; offset: $4 (4)
release					 ds.l	1				; offset: $8 (8)
copyDescription			 ds.l	1				; offset: $C (12)
equal					 ds.l	1				; offset: $10 (16)
sizeof					 EQU *					; size:   $14 (20)
						ENDR




;
; extern CFTypeID CFArrayGetTypeID(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayGetTypeID
	ENDIF

;
; extern CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayCreate
	ENDIF

;
; extern CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef srcArray)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayCreateCopy
	ENDIF

;
; extern CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayCreateMutable
	ENDIF

;
; extern CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef srcArray)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayCreateMutableCopy
	ENDIF

;
; extern CFIndex CFArrayGetCount(CFArrayRef theArray)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayGetCount
	ENDIF

;
; extern CFIndex CFArrayGetCountOfValue(CFArrayRef theArray, CFRange range, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayGetCountOfValue
	ENDIF

;
; extern Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayContainsValue
	ENDIF

;
; extern const void *CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayGetValueAtIndex
	ENDIF

;
; extern void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayGetValues
	ENDIF

;
; extern void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayApplyFunction
	ENDIF

;
; extern CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayGetFirstIndexOfValue
	ENDIF

;
; extern CFIndex CFArrayGetLastIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayGetLastIndexOfValue
	ENDIF

;
; extern CFIndex CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void *value, CFComparatorFunction comparator, void *context)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayBSearchValues
	ENDIF

;
; extern void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayAppendValue
	ENDIF

;
; extern void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayInsertValueAtIndex
	ENDIF

;
; extern void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArraySetValueAtIndex
	ENDIF

;
; extern void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayRemoveValueAtIndex
	ENDIF

;
; extern void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayRemoveAllValues
	ENDIF

;
; extern void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayReplaceValues
	ENDIF

;
; extern void CFArrayExchangeValuesAtIndices(CFMutableArrayRef theArray, CFIndex idx1, CFIndex idx2)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArrayExchangeValuesAtIndices
	ENDIF

;
; extern void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFArraySortValues
	ENDIF

	ENDIF ; __CFARRAY__ 


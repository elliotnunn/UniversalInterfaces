;
;    File:       CFURLAccess.a
;
;    Contains:   CoreFoundation url access
;
;    Version:    Technology: Mac OS X
;                Release:    Universal Interfaces 3.3.2
;
;    Copyright:  Â© 1999-2000 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CFURLACCESS__') = 'UNDEFINED' THEN
__CFURLACCESS__ SET 1

	IF &TYPE('__CFURL__') = 'UNDEFINED' THEN
	include 'CFURL.a'
	ENDIF
	IF &TYPE('__CFARRAY__') = 'UNDEFINED' THEN
	include 'CFArray.a'
	ENDIF
	IF &TYPE('__CFDATA__') = 'UNDEFINED' THEN
	include 'CFData.a'
	ENDIF
	IF &TYPE('__CFDICTIONARY__') = 'UNDEFINED' THEN
	include 'CFDictionary.a'
	ENDIF
	IF &TYPE('__CFSTRING__') = 'UNDEFINED' THEN
	include 'CFString.a'
	ENDIF

;  Fills buffer with the file system's native representation of url's 
;  path. No more than bufLen bytes are written to buffer.  If resolveAgainstBase 
;  is true, the url's relative portion is resolved against its base before 
;  the path is computed.  usedBufLen is set to the number of bytes actually 
;  written; returns success or failure. 
;
; extern Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, char *buffer, CFIndex bufLen)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLGetFileSystemRepresentation
	ENDIF

;
; extern CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const char *buffer, CFIndex bufLen, Boolean isDirectory)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateFromFileSystemRepresentation
	ENDIF

;  Attempts to read the data and properties for the given URL. 
;  If only interested in one of the resourceData and properties, pass 
;  NULL for the other.  If properties is non-NULL and desiredProperties 
;  is NULL, then all properties are fetched.  Returns success or failure; 
;  note that as much work as possible is done even if FALSE is returned. 
;  So for instance if one property is not available, the others are fetched 
;  anyway. errorCode is set to 0 on success, and some other value on failure. 
;  If non-NULL, it is the caller 's responsibility to release resourceData 
;  and properties. 
;  Apple reserves for its use all negative error code values; these values 
;  represent errors common to any scheme.  Scheme-specific error codes 
;  should be positive, non-zero, and should be used only if one of the 
;  predefined Apple error codes does not apply.  Error codes should be 
;  publicized and documented with the scheme-specific properties. 
;
; extern Boolean CFURLCreateDataAndPropertiesFromResource(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateDataAndPropertiesFromResource
	ENDIF

;  Attempts to write the given data and properties to the given URL. 
;  If dataToWrite is NULL, only properties are written out (use 
;  CFURLDestroyResource() to delete a resource).  Properties not present 
;  in propertiesToWrite are left unchanged, hence if propertiesToWrite 
;  is NULL or empty, the URL's properties are not changed at all. 
;  Returns success or failure; errorCode is set as for 
;  CFURLCreateDataAndPropertiesFromResource(), above. 
;
; extern Boolean CFURLWriteDataAndPropertiesToResource(CFURLRef url, CFDataRef dataToWrite, CFDictionaryRef propertiesToWrite, SInt32 *errorCode)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLWriteDataAndPropertiesToResource
	ENDIF

;  Destroys the resource indicated by url. 
;  Returns success or failure; errorCode set as above. 
;
; extern Boolean CFURLDestroyResource(CFURLRef url, SInt32 *errorCode)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLDestroyResource
	ENDIF

;  Convenience method which calls through to CFURLCreateDataAndPropertiesFromResource(). 
;  Returns NULL on error and sets errorCode accordingly. 
;
; extern CFTypeRef CFURLCreatePropertyFromResource(CFAllocatorRef alloc, CFURLRef url, CFStringRef property, SInt32 *errorCode)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreatePropertyFromResource
	ENDIF

;  Common error codes; this list is expected to grow 

; typedef long							CFURLError
kCFURLUnknownError				EQU		-10
kCFURLUnknownSchemeError		EQU		-11
kCFURLResourceNotFoundError		EQU		-12
kCFURLResourceAccessViolationError EQU	-13
kCFURLRemoteHostUnavailableError EQU	-14
kCFURLImproperArgumentsError	EQU		-15
kCFURLUnknownPropertyKeyError	EQU		-16
kCFURLPropertyKeyUnavailableError EQU	-17
kCFURLTimeoutError				EQU		-18
;  Properties and error codes for the file: scheme.  These are ad hoc and expected to change 

;  kCFFileURLExists is set to kCFFileURLExists if the file exists; any other value if not 
;  kCFFileURLPOSIXMode encompasses permissions and file type; use the POSIX masks in stat.h 
;  to get specifics.  Value is a CFData wrapped around a mode_t 
;  kCFFileURLDirectoryContents value is a CFArray with containing URLs for the directory's contents. 
;  Empty array means the directory exists, but is empty. 
;  NULL value (but no failure) means the URL exists but is not a directory. 
;  Not settable 
;  kCFHTTPURLStatusCode and kCFHTTPURLStatusLine are properties for the http: scheme. 
;  Except for the common error 
;  codes, above, errorCode will be set to the HTTP response status 
;  code upon failure.  The status code is a CFNumber, the status line is a CFString.  
	ENDIF ; __CFURLACCESS__ 


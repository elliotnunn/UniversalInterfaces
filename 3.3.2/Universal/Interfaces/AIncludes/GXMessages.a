;
;    File:       GXMessages.a
;
;    Contains:   This file contains all of the public data structures,
;
;    Version:    Technology: Quickdraw GX 1.1
;                Release:    Universal Interfaces 3.3.2
;
;    Copyright:  © 1994-2000 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__GXMESSAGES__') = 'UNDEFINED' THEN
__GXMESSAGES__ SET 1

	IF &TYPE('__CONDITIONALMACROS__') = 'UNDEFINED' THEN
	include 'ConditionalMacros.a'
	ENDIF
	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__MIXEDMODE__') = 'UNDEFINED' THEN
	include 'MixedMode.a'
	ENDIF


; 
;
;    >>>>>> CONSTANTS <<<<<<
;
;

;  Message Manager Trap 

messageManagerTrap				EQU		$ABFB

;  Message Manager Error Result Codes 

messageStopLoopingErr			EQU		-5775
cantDeleteRunningHandlerErr		EQU		-5776
noMessageTableErr				EQU		-5777
dupSignatureErr					EQU		-5778
messageNotReceivedErr			EQU		-5799

; 
;    DATA TYPES
;

	IF CALL_NOT_IN_CARBON THEN
	ENDIF	; CALL_NOT_IN_CARBON
	IF CALL_NOT_IN_CARBON THEN
	ENDIF	; CALL_NOT_IN_CARBON
	IF OLDROUTINENAMES THEN
; typedef MessageHandlerOverrideProcPtr  MessageHandlerOverrideProc

; typedef MessageGlobalsInitProcPtr 	MessageGlobalsInitProc

	ENDIF	; OLDROUTINENAMES




; 
;
;    PUBLIC INTERFACES
;
;    Message Handler API Routines
;

	IF CALL_NOT_IN_CARBON THEN
;
; extern long CountMessageHandlerInstances(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CountMessageHandlerInstances
			moveq           	#40,D0
			dc.w            	$ABFB
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CountMessageHandlerInstances
	ENDIF

;
; extern void *GetMessageHandlerClassContext(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetMessageHandlerClassContext
			moveq           	#41,D0
			dc.w            	$ABFB
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetMessageHandlerClassContext
	ENDIF

;
; extern void *SetMessageHandlerClassContext(void *anyValue)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetMessageHandlerClassContext
			moveq           	#42,D0
			dc.w            	$ABFB
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetMessageHandlerClassContext
	ENDIF

;
; extern void *GetMessageHandlerInstanceContext(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetMessageHandlerInstanceContext
			moveq           	#43,D0
			dc.w            	$ABFB
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetMessageHandlerInstanceContext
	ENDIF

;
; extern void *SetMessageHandlerInstanceContext(void *anyValue)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetMessageHandlerInstanceContext
			moveq           	#44,D0
			dc.w            	$ABFB
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetMessageHandlerInstanceContext
	ENDIF

;
; extern OSErr NewMessageGlobals(long messageGlobalsSize, MessageGlobalsInitUPP initProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_NewMessageGlobals
			moveq           	#45,D0
			dc.w            	$ABFB
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NewMessageGlobals
	ENDIF

;
; extern void DisposeMessageGlobals(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_DisposeMessageGlobals
			moveq           	#46,D0
			dc.w            	$ABFB
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DisposeMessageGlobals
	ENDIF


; 
;    Message Sending API Routines
;

	ENDIF	; CALL_NOT_IN_CARBON
	IF CALL_NOT_IN_CARBON THEN
;
; extern OSErr SendObjectMessage(MessageObject msgObject, long messageSelector, ...)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SendObjectMessage
			dc.w            	$205F
			dc.w            	$221F
			dc.w            	$702F
			dc.w            	$ABFB
			dc.w            	$518F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SendObjectMessage
	ENDIF

;
; extern OSErr SendObjectMessageTo(MessageObject msgObject, long messageSelector, MessageHandler msgHandler, ...)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SendObjectMessageTo
			dc.w            	$205F
			dc.w            	$221F
			dc.w            	$241F
			dc.w            	$7030
			dc.w            	$ABFB
			dc.w            	$9EFC
			dc.w            	$000C
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SendObjectMessageTo
	ENDIF

;
; extern OSErr SendObjectMessageFor(MessageObject msgObject, long messageSelector, MessageHandler msgHandler, ...)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SendObjectMessageFor
			dc.w            	$205F
			dc.w            	$221F
			dc.w            	$241F
			dc.w            	$7037
			dc.w            	$ABFB
			dc.w            	$9EFC
			dc.w            	$000C
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SendObjectMessageFor
	ENDIF

;
; extern OSErr StartObjectMessageAt(MessageObject msgObject, long messageSelector, MessageHandler msgHandler, ...)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_StartObjectMessageAt
			dc.w            	$205F
			dc.w            	$221F
			dc.w            	$241F
			dc.w            	$7031
			dc.w            	$ABFB
			dc.w            	$9EFC
			dc.w            	$000C
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StartObjectMessageAt
	ENDIF

;
; extern OSErr SendMessage(long messageSelector, ...)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SendMessage
			move.l              (sp)+,D1
			moveq           	#50,D0
			dc.w            	$ABFB
			dc.w            	$598F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SendMessage
	ENDIF

;
; extern OSErr SendMessageTo(long messageSelector, MessageHandler msgHandler, ...)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SendMessageTo
			move.l              (sp)+,D1
			dc.w            	$241F
			dc.w            	$7033
			dc.w            	$ABFB
			dc.w            	$518F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SendMessageTo
	ENDIF

;
; extern OSErr StartMessageAt(long messageSelector, MessageHandler msgHandler, ...)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_StartMessageAt
			move.l              (sp)+,D1
			dc.w            	$241F
			dc.w            	$7034
			dc.w            	$ABFB
			dc.w            	$518F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StartMessageAt
	ENDIF

;
; extern OSErr ForwardMessage(long messageSelector, ...)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ForwardMessage
			move.l              (sp)+,D1
			moveq           	#53,D0
			dc.w            	$ABFB
			dc.w            	$598F
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ForwardMessage
	ENDIF

;
; extern OSErr ForwardThisMessage(void *parameter1, ...)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ForwardThisMessage
			moveq           	#54,D0
			dc.w            	$ABFB
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ForwardThisMessage
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON


	ENDIF ; __GXMESSAGES__ 


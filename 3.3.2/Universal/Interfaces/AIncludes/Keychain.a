;
;    File:       Keychain.a
;
;    Contains:   Keychain Interfaces.
;
;    Version:    Technology: Keychain 2.0
;                Release:    Universal Interfaces 3.3.2
;
;    Copyright:  Â© 1997-2000 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__KEYCHAIN__') = 'UNDEFINED' THEN
__KEYCHAIN__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__FILES__') = 'UNDEFINED' THEN
	include 'Files.a'
	ENDIF
	IF &TYPE('__PROCESSES__') = 'UNDEFINED' THEN
	include 'Processes.a'
	ENDIF
	IF &TYPE('__ALIASES__') = 'UNDEFINED' THEN
	include 'Aliases.a'
	ENDIF
	IF &TYPE('__CODEFRAGMENTS__') = 'UNDEFINED' THEN
	include 'CodeFragments.a'
	ENDIF
	IF &TYPE('__MACERRORS__') = 'UNDEFINED' THEN
	include 'MacErrors.a'
	ENDIF
	IF &TYPE('__DATETIMEUTILS__') = 'UNDEFINED' THEN
	include 'DateTimeUtils.a'
	ENDIF
	IF &TYPE('__CFSTRING__') = 'UNDEFINED' THEN
	include 'CFString.a'
	ENDIF
	IF &TYPE('__CFARRAY__') = 'UNDEFINED' THEN
	include 'CFArray.a'
	ENDIF
	IF &TYPE('__CFDATE__') = 'UNDEFINED' THEN
	include 'CFDate.a'
	ENDIF

;  Data structures and types 






; typedef CFDataRef 					SecOIDRef


kIdleKCEvent					EQU		0					; null event 
kLockKCEvent					EQU		1					; a keychain was locked 
kUnlockKCEvent					EQU		2					; a keychain was unlocked 
kAddKCEvent						EQU		3					; an item was added to a keychain 
kDeleteKCEvent					EQU		4					; an item was deleted from a keychain 
kUpdateKCEvent					EQU		5					; an item was updated 
kChangeIdentityKCEvent			EQU		6					; the keychain identity was changed 
kFindKCEvent					EQU		7					; an item was found 
kSystemKCEvent					EQU		8					; the keychain client can process events 
kDefaultChangedKCEvent			EQU		9					; the default keychain was changed 
kDataAccessKCEvent				EQU		10					; a process has accessed a keychain item's data 
; typedef UInt16 						KCEvent


kIdleKCEventMask				EQU		$01
kLockKCEventMask				EQU		$02
kUnlockKCEventMask				EQU		$04
kAddKCEventMask					EQU		$08
kDeleteKCEventMask				EQU		$10
kUpdateKCEventMask				EQU		$20
kChangeIdentityKCEventMask		EQU		$40
kFindKCEventMask				EQU		$80
kSystemEventKCEventMask			EQU		$0100
kDefaultChangedKCEventMask		EQU		$0200
kDataAccessKCEventMask			EQU		$0400
kEveryKCEventMask				EQU		$FFFF				; all of the above
; typedef UInt16 						KCEventMask

AFPServerSignature		RECORD 0
elements				 ds.b	16
sizeof					 EQU *					; size:   $10 (16)
						ENDR


KCPublicKeyHash			RECORD 0
elements				 ds.b	20
sizeof					 EQU *					; size:   $14 (20)
						ENDR


; typedef OSType 						KCAttrType

KCCallbackInfo			RECORD 0
version					 ds.l	1				; offset: $0 (0)
item					 ds.l	1				; offset: $4 (4)
processID				 ds		ProcessSerialNumber ; offset: $8 (8)
event					 ds		EventRecord		; offset: $10 (16)
keychain				 ds.l	1				; offset: $20 (32)
sizeof					 EQU *					; size:   $24 (36)
						ENDR

kUnlockStateKCStatus			EQU		1
kRdPermKCStatus					EQU		2
kWrPermKCStatus					EQU		4
; typedef UInt32 						KCStatus


kCertificateKCItemClass			EQU		'cert'				; Certificate 
kAppleSharePasswordKCItemClass	EQU		'ashp'				; Appleshare password 
kInternetPasswordKCItemClass	EQU		'inet'				; Internet password 
kGenericPasswordKCItemClass		EQU		'genp'				; Generic password 
; typedef FourCharCode 					KCItemClass


															; Common attributes 
kClassKCItemAttr				EQU		'clas'				; Item class (KCItemClass) 
kCreationDateKCItemAttr			EQU		'cdat'				; Date the item was created (UInt32) 
kModDateKCItemAttr				EQU		'mdat'				; Last time the item was updated (UInt32) 
kDescriptionKCItemAttr			EQU		'desc'				; User-visible description string (string) 
kCommentKCItemAttr				EQU		'icmt'				; User's comment about the item (string) 
kCreatorKCItemAttr				EQU		'crtr'				; Item's creator (OSType) 
kTypeKCItemAttr					EQU		'type'				; Item's type (OSType) 
kScriptCodeKCItemAttr			EQU		'scrp'				; Script code for all strings (ScriptCode) 
kLabelKCItemAttr				EQU		'labl'				; Item label (string) 
kInvisibleKCItemAttr			EQU		'invi'				; Invisible (boolean) 
kNegativeKCItemAttr				EQU		'nega'				; Negative (boolean) 
kCustomIconKCItemAttr			EQU		'cusi'				; Custom icon (boolean) 
															; Unique Generic password attributes 
kAccountKCItemAttr				EQU		'acct'				; User account (Str63) - also applies to Appleshare and Generic 
kServiceKCItemAttr				EQU		'svce'				; Service (Str63) 
kGenericKCItemAttr				EQU		'gena'				; User-defined attribute (untyped bytes) 
															; Unique Internet password attributes 
kSecurityDomainKCItemAttr		EQU		'sdmn'				; Security domain (Str63) 
kServerKCItemAttr				EQU		'srvr'				; Server's domain name or IP address (string) 
kAuthTypeKCItemAttr				EQU		'atyp'				; Authentication Type (KCAuthType) 
kPortKCItemAttr					EQU		'port'				; Port (UInt16) 
kPathKCItemAttr					EQU		'path'				; Path (Str255) 
															; Unique Appleshare password attributes 
kVolumeKCItemAttr				EQU		'vlme'				; Volume (Str63) 
kAddressKCItemAttr				EQU		'addr'				; Server address (IP or domain name) or zone name (string) 
kSignatureKCItemAttr			EQU		'ssig'				; Server signature block (AFPServerSignature) 
															; Unique AppleShare and Internet attributes 
kProtocolKCItemAttr				EQU		'ptcl'				; Protocol (KCProtocolType) 
															; Certificate attributes 
kSubjectKCItemAttr				EQU		'subj'				; Subject distinguished name (DER-encoded data) 
kCommonNameKCItemAttr			EQU		'cn  '				; Common Name (UTF8-encoded string) 
kIssuerKCItemAttr				EQU		'issu'				; Issuer distinguished name (DER-encoded data) 
kSerialNumberKCItemAttr			EQU		'snbr'				; Certificate serial number (DER-encoded data) 
kEMailKCItemAttr				EQU		'mail'				; E-mail address (ASCII-encoded string) 
kPublicKeyHashKCItemAttr		EQU		'hpky'				; Hash of public key (KCPublicKeyHash), 20 bytes max. 
kIssuerURLKCItemAttr			EQU		'iurl'				; URL of the certificate issuer (ASCII-encoded string) 
															; Shared by keys and certificates 
kEncryptKCItemAttr				EQU		'encr'				; Encrypt (Boolean) 
kDecryptKCItemAttr				EQU		'decr'				; Decrypt (Boolean) 
kSignKCItemAttr					EQU		'sign'				; Sign (Boolean) 
kVerifyKCItemAttr				EQU		'veri'				; Verify (Boolean) 
kWrapKCItemAttr					EQU		'wrap'				; Wrap (Boolean) 
kUnwrapKCItemAttr				EQU		'unwr'				; Unwrap (Boolean) 
kStartDateKCItemAttr			EQU		'sdat'				; Start Date (UInt32) 
kEndDateKCItemAttr				EQU		'edat'				; End Date (UInt32) 
; typedef FourCharCode 					KCItemAttr

KCAttribute				RECORD 0
tag						 ds.l	1				; offset: $0 (0)		;  4-byte attribute tag 
length					 ds.l	1				; offset: $4 (4)		;  Length of attribute data 
data					 ds.l	1				; offset: $8 (8)		;  Pointer to attribute data 
sizeof					 EQU *					; size:   $C (12)
						ENDR
; typedef struct KCAttribute *			KCAttributePtr

KCAttributeList			RECORD 0
count					 ds.l	1				; offset: $0 (0)		;  How many attributes in the array 
attr					 ds.l	1				; offset: $4 (4)		;  Pointer to first attribute in array 
sizeof					 EQU *					; size:   $8 (8)
						ENDR

kKCAuthTypeNTLM					EQU		'ntlm'
kKCAuthTypeMSN					EQU		'msna'
kKCAuthTypeDPA					EQU		'dpaa'
kKCAuthTypeRPA					EQU		'rpaa'
kKCAuthTypeHTTPDigest			EQU		'httd'
kKCAuthTypeDefault				EQU		'dflt'
; typedef FourCharCode 					KCAuthType


kKCProtocolTypeFTP				EQU		'ftp '
kKCProtocolTypeFTPAccount		EQU		'ftpa'
kKCProtocolTypeHTTP				EQU		'http'
kKCProtocolTypeIRC				EQU		'irc '
kKCProtocolTypeNNTP				EQU		'nntp'
kKCProtocolTypePOP3				EQU		'pop3'
kKCProtocolTypeSMTP				EQU		'smtp'
kKCProtocolTypeSOCKS			EQU		'sox '
kKCProtocolTypeIMAP				EQU		'imap'
kKCProtocolTypeLDAP				EQU		'ldap'
kKCProtocolTypeAppleTalk		EQU		'atlk'
kKCProtocolTypeAFP				EQU		'afp '
kKCProtocolTypeTelnet			EQU		'teln'
; typedef FourCharCode 					KCProtocolType


kSecOptionReserved				EQU		$000000FF			; First byte reserved for SecOptions flags 
kCertUsageShift					EQU		8					; start at bit 8 
kCertUsageSigningAdd			EQU		$0100
kCertUsageSigningAskAndAdd		EQU		$0200
kCertUsageVerifyAdd				EQU		$0400
kCertUsageVerifyAskAndAdd		EQU		$0800
kCertUsageEncryptAdd			EQU		$1000
kCertUsageEncryptAskAndAdd		EQU		$2000
kCertUsageDecryptAdd			EQU		$4000
kCertUsageDecryptAskAndAdd		EQU		$8000
kCertUsageKeyExchAdd			EQU		$00010000
kCertUsageKeyExchAskAndAdd		EQU		$00020000
kCertUsageRootAdd				EQU		$00040000
kCertUsageRootAskAndAdd			EQU		$00080000
kCertUsageSSLAdd				EQU		$00100000
kCertUsageSSLAskAndAdd			EQU		$00200000
kCertUsageAllAdd				EQU		$7FFFFF00
; typedef UInt32 						KCCertAddOptions


kPolicyKCStopOn					EQU		0
kNoneKCStopOn					EQU		1
kFirstPassKCStopOn				EQU		2
kFirstFailKCStopOn				EQU		3
; typedef UInt16 						KCVerifyStopOn


kCertSearchShift				EQU		0					; start at bit 0 
kCertSearchSigningIgnored		EQU		0
kCertSearchSigningAllowed		EQU		$01
kCertSearchSigningDisallowed	EQU		$02
kCertSearchSigningMask			EQU		$03
kCertSearchVerifyIgnored		EQU		0
kCertSearchVerifyAllowed		EQU		$04
kCertSearchVerifyDisallowed		EQU		$08
kCertSearchVerifyMask			EQU		$0C
kCertSearchEncryptIgnored		EQU		0
kCertSearchEncryptAllowed		EQU		$10
kCertSearchEncryptDisallowed	EQU		$20
kCertSearchEncryptMask			EQU		$30
kCertSearchDecryptIgnored		EQU		0
kCertSearchDecryptAllowed		EQU		$40
kCertSearchDecryptDisallowed	EQU		$80
kCertSearchDecryptMask			EQU		$C0
kCertSearchWrapIgnored			EQU		0
kCertSearchWrapAllowed			EQU		$0100
kCertSearchWrapDisallowed		EQU		$0200
kCertSearchWrapMask				EQU		$0300
kCertSearchUnwrapIgnored		EQU		0
kCertSearchUnwrapAllowed		EQU		$0400
kCertSearchUnwrapDisallowed		EQU		$0800
kCertSearchUnwrapMask			EQU		$0C00
kCertSearchPrivKeyRequired		EQU		$1000
kCertSearchAny					EQU		0
; typedef UInt32 						KCCertSearchOptions

;  Other constants 


; 
;    Keychain is not in CarbonLib 1.0.2.  But, it is possible to still use 
;    keychain on OS 8/9 in a CarbonLib based application, by setting  
;    CALL_IN_KEYCHAIN_BUT_NOT_IN_CARBON to 1 on the command line or in a prefix
;    file, weaklinking with KeychainLib, and testing for its existance 
;    at runtime.
;

	IF &TYPE('CALL_IN_KEYCHAIN_BUT_NOT_IN_CARBON') = 'UNDEFINED' THEN
	CALL_IN_KEYCHAIN_BUT_NOT_IN_CARBON: SET CALL_NOT_IN_CARBON
	ENDIF	; CALL_IN_KEYCHAIN_BUT_NOT_IN_CARBON


;  Opening and getting information about the Keychain Manager 
;
; pascal OSStatus KCGetKeychainManagerVersion(UInt32 *returnVers)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCGetKeychainManagerVersion
	ENDIF

	IF TARGET_RT_MAC_CFM THEN
; 
;        KeychainManagerAvailable() is a macro/inline available only in C/C++.  
;        To get the same functionality from pascal or assembly, you need
;        to test if KCGetKeychainManagerVersion function is not NULL.  For instance:
;        
;            gKeychainManagerAvailable = FALSE;
;            IF @KCGetKeychainManagerVersion <> kUnresolvedCFragSymbolAddress THEN
;                gKeychainManagerAvailable = TRUE;
;            END
;    
;    

	ELSEIF TARGET_RT_MAC_MACHO THEN
	ELSE
	IF CALL_IN_KEYCHAIN_BUT_NOT_IN_CARBON THEN
;
; pascal Boolean KeychainManagerAvailable(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KeychainManagerAvailable
	ENDIF

	ENDIF	; CALL_IN_KEYCHAIN_BUT_NOT_IN_CARBON
	ENDIF	; 
;  Creating references to keychains 
	IF CALL_IN_KEYCHAIN_BUT_NOT_IN_CARBON THEN
;
; pascal OSStatus KCMakeKCRefFromFSSpec(FSSpec *keychainFSSpec, KCRef *keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCMakeKCRefFromFSSpec
	ENDIF

;
; pascal OSStatus KCMakeKCRefFromAlias(AliasHandle keychainAlias, KCRef *keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCMakeKCRefFromAlias
	ENDIF

;
; pascal OSStatus KCMakeAliasFromKCRef(KCRef keychain, AliasHandle *keychainAlias)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCMakeAliasFromKCRef
	ENDIF

;
; pascal OSStatus KCReleaseKeychain(KCRef *keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCReleaseKeychain
	ENDIF

;  Locking and unlocking a keychain 
;
; pascal OSStatus KCUnlock(KCRef keychain, StringPtr password)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCUnlock
	ENDIF

;
; pascal OSStatus KCLock(KCRef keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCLock
	ENDIF

;  Specifying the default keychain 
;
; pascal OSStatus KCGetDefaultKeychain(KCRef *keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCGetDefaultKeychain
	ENDIF

;
; pascal OSStatus KCSetDefaultKeychain(KCRef keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCSetDefaultKeychain
	ENDIF

;  Creating a new keychain 
;
; pascal OSStatus KCCreateKeychain(StringPtr password, KCRef *keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCCreateKeychain
	ENDIF

;  Getting information about a keychain 
;
; pascal OSStatus KCGetStatus(KCRef keychain, UInt32 *keychainStatus)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCGetStatus
	ENDIF

;
; pascal OSStatus KCGetKeychain(KCItemRef item, KCRef *keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCGetKeychain
	ENDIF

;
; pascal OSStatus KCGetKeychainName(KCRef keychain, StringPtr keychainName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCGetKeychainName
	ENDIF

;
; pascal OSStatus KCChangeSettings(KCRef keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCChangeSettings
	ENDIF

;  Enumerating available keychains 
;
; pascal UInt16 KCCountKeychains(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCCountKeychains
	ENDIF

;
; pascal OSStatus KCGetIndKeychain(UInt16 index, KCRef *keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCGetIndKeychain
	ENDIF

	ENDIF	; CALL_IN_KEYCHAIN_BUT_NOT_IN_CARBON
	IF CALL_IN_KEYCHAIN_BUT_NOT_IN_CARBON THEN
	ENDIF	; CALL_IN_KEYCHAIN_BUT_NOT_IN_CARBON
;  Keychain Manager callbacks 
	IF CALL_IN_KEYCHAIN_BUT_NOT_IN_CARBON THEN
;
; pascal OSStatus KCAddCallback(KCCallbackUPP callbackProc, KCEventMask eventMask, void *userContext)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCAddCallback
	ENDIF

;
; pascal OSStatus KCRemoveCallback(KCCallbackUPP callbackProc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCRemoveCallback
	ENDIF

;  Managing the Human Interface 
;
; pascal OSStatus KCSetInteractionAllowed(Boolean state)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCSetInteractionAllowed
	ENDIF

;
; pascal Boolean KCIsInteractionAllowed(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCIsInteractionAllowed
	ENDIF

;  Storing and retrieving AppleShare passwords 
;
; pascal OSStatus KCAddAppleSharePassword(AFPServerSignature *serverSignature, StringPtr serverAddress, StringPtr serverName, StringPtr volumeName, StringPtr accountName, UInt32 passwordLength, const void *passwordData, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCAddAppleSharePassword
	ENDIF

;
; pascal OSStatus KCFindAppleSharePassword(AFPServerSignature *serverSignature, StringPtr serverAddress, StringPtr serverName, StringPtr volumeName, StringPtr accountName, UInt32 maxLength, void *passwordData, UInt32 *actualLength, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCFindAppleSharePassword
	ENDIF

;  Storing and retrieving Internet passwords 
;
; pascal OSStatus KCAddInternetPassword(StringPtr serverName, StringPtr securityDomain, StringPtr accountName, UInt16 port, OSType protocol, OSType authType, UInt32 passwordLength, const void *passwordData, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCAddInternetPassword
	ENDIF

;
; pascal OSStatus KCAddInternetPasswordWithPath(StringPtr serverName, StringPtr securityDomain, StringPtr accountName, StringPtr path, UInt16 port, OSType protocol, OSType authType, UInt32 passwordLength, const void *passwordData, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCAddInternetPasswordWithPath
	ENDIF

;
; pascal OSStatus KCFindInternetPassword(StringPtr serverName, StringPtr securityDomain, StringPtr accountName, UInt16 port, OSType protocol, OSType authType, UInt32 maxLength, void *passwordData, UInt32 *actualLength, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCFindInternetPassword
	ENDIF

;
; pascal OSStatus KCFindInternetPasswordWithPath(StringPtr serverName, StringPtr securityDomain, StringPtr accountName, StringPtr path, UInt16 port, OSType protocol, OSType authType, UInt32 maxLength, void *passwordData, UInt32 *actualLength, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCFindInternetPasswordWithPath
	ENDIF

;  Storing and retrieving other types of passwords 
;
; pascal OSStatus KCAddGenericPassword(StringPtr serviceName, StringPtr accountName, UInt32 passwordLength, const void *passwordData, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCAddGenericPassword
	ENDIF

;
; pascal OSStatus KCFindGenericPassword(StringPtr serviceName, StringPtr accountName, UInt32 maxLength, void *passwordData, UInt32 *actualLength, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCFindGenericPassword
	ENDIF

;  Creating and editing a keychain item 
;
; pascal OSStatus KCNewItem(KCItemClass itemClass, OSType itemCreator, UInt32 length, const void *data, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCNewItem
	ENDIF

;
; pascal OSStatus KCSetAttribute(KCItemRef item, KCAttribute *attr)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCSetAttribute
	ENDIF

;
; pascal OSStatus KCGetAttribute(KCItemRef item, KCAttribute *attr, UInt32 *actualLength)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCGetAttribute
	ENDIF

;
; pascal OSStatus KCSetData(KCItemRef item, UInt32 length, const void *data)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCSetData
	ENDIF

;
; pascal OSStatus KCGetData(KCItemRef item, UInt32 maxLength, void *data, UInt32 *actualLength)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCGetData
	ENDIF

;  Managing keychain items 
;
; pascal OSStatus KCAddItem(KCItemRef item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCAddItem
	ENDIF

;
; pascal OSStatus KCDeleteItem(KCItemRef item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCDeleteItem
	ENDIF

;
; pascal OSStatus KCUpdateItem(KCItemRef item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCUpdateItem
	ENDIF

;
; pascal OSStatus KCReleaseItem(KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCReleaseItem
	ENDIF

;
; pascal OSStatus KCCopyItem(KCItemRef item, KCRef destKeychain, KCItemRef *copy)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCCopyItem
	ENDIF

;  Searching and enumerating keychain items 
;
; pascal OSStatus KCFindFirstItem(KCRef keychain, const KCAttributeList *attrList, KCSearchRef *search, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCFindFirstItem
	ENDIF

;
; pascal OSStatus KCFindNextItem(KCSearchRef search, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCFindNextItem
	ENDIF

;
; pascal OSStatus KCReleaseSearch(KCSearchRef *search)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCReleaseSearch
	ENDIF

;  Working with certificates 
;
; pascal OSStatus KCFindX509Certificates(KCRef keychain, CFStringRef name, CFStringRef emailAddress, KCCertSearchOptions options, CFMutableArrayRef *certificateItems)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCFindX509Certificates
	ENDIF

;
; pascal OSStatus KCChooseCertificate(CFArrayRef items, KCItemRef *certificate, CFArrayRef policyOIDs, KCVerifyStopOn stopOn)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCChooseCertificate
	ENDIF


	ENDIF	; CALL_IN_KEYCHAIN_BUT_NOT_IN_CARBON
	ENDIF ; __KEYCHAIN__ 


;
;	File:		CMMComponent.a
;
;	Contains:	ColorSync CMM Component API
;
;	Version:	Technology:	ColorSync 2.6
;				Release:	Universal Interfaces 3.3a1
;
;	Copyright:	© 1994-1999 by Apple Computer, Inc., all rights reserved.
;
;	Bugs?:		For bug reports, consult the following page on
;				the World Wide Web:
;
;					http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CMMCOMPONENT__') = 'UNDEFINED' THEN
__CMMCOMPONENT__ SET 1

	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN
	include 'Quickdraw.a'
	ENDIF
	IF &TYPE('__COMPONENTS__') = 'UNDEFINED' THEN
	include 'Components.a'
	ENDIF
	IF &TYPE('__CMAPPLICATION__') = 'UNDEFINED' THEN
	include 'CMApplication.a'
	ENDIF


CMMInterfaceVersion				EQU		1

;  Component function selectors 

															; Required 
kNCMMInit						EQU		6
kCMMMatchColors					EQU		1
kCMMCheckColors					EQU		2					;
															;
															; Optional 
kCMMValidateProfile				EQU		8
kCMMMatchBitmap					EQU		9
kCMMCheckBitmap					EQU		10
kCMMMatchPixMap					EQU		3
kCMMCheckPixMap					EQU		4
kCMMConcatenateProfiles			EQU		5
kCMMConcatInit					EQU		7
kCMMNewLinkProfile				EQU		16
kNCMMConcatInit					EQU		18
kNCMMNewLinkProfile				EQU		19
kCMMGetPS2ColorSpace			EQU		11
kCMMGetPS2ColorRenderingIntent	EQU		12
kCMMGetPS2ColorRendering		EQU		13
kCMMGetPS2ColorRenderingVMSize	EQU		17					;
															;
															; obsolete with ColorSync 2.5 
kCMMFlattenProfile				EQU		14
kCMMUnflattenProfile			EQU		15					;
															;
															; obsolete with ColorSync 2.6 
kCMMInit						EQU		0
kCMMGetNamedColorInfo			EQU		70
kCMMGetNamedColorValue			EQU		71
kCMMGetIndNamedColorValue		EQU		72
kCMMGetNamedColorIndex			EQU		73
kCMMGetNamedColorName			EQU		74
	IF TARGET_API_MAC_OS8 THEN
; typedef ComponentInstance 			CMMComponentInst

	IF CALL_NOT_IN_CARBON THEN
;
; pascal CMError NCMMInit(CMMComponentInst cmm, CMProfileRef srcProfile, CMProfileRef dstProfile)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_NCMMInit
			move.l              #$00080006,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NCMMInit
	ENDIF

;
; pascal CMError CMMInit(CMMComponentInst cmm, CMProfileHandle srcProfile, CMProfileHandle dstProfile)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMInit
			move.l              #$00080000,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMInit
	ENDIF

;
; pascal CMError CMMMatchColors(CMMComponentInst cmm, CMColor *colors, UInt32 count)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMMatchColors
			move.l              #$00080001,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMMatchColors
	ENDIF

;
; pascal CMError CMMCheckColors(CMMComponentInst cmm, CMColor *colors, UInt32 count, UInt32 *result)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMCheckColors
			move.l              #$000C0002,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMCheckColors
	ENDIF

;
; pascal CMError CMMValidateProfile(CMMComponentInst cmm, CMProfileRef prof, Boolean *valid)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMValidateProfile
			move.l              #$00080008,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMValidateProfile
	ENDIF

;
; pascal CMError CMMFlattenProfile(CMMComponentInst cmm, CMProfileRef prof, UInt32 flags, CMFlattenUPP proc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMFlattenProfile
			move.l              #$0010000E,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMFlattenProfile
	ENDIF

;
; pascal CMError CMMUnflattenProfile(CMMComponentInst cmm, FSSpec *resultFileSpec, CMFlattenUPP proc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMUnflattenProfile
			move.l              #$000C000F,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMUnflattenProfile
	ENDIF

;
; pascal CMError CMMMatchBitmap(CMMComponentInst cmm, CMBitmap *bitmap, CMBitmapCallBackUPP progressProc, void *refCon, CMBitmap *matchedBitmap)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMMatchBitmap
			move.l              #$00100009,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMMatchBitmap
	ENDIF

;
; pascal CMError CMMCheckBitmap(CMMComponentInst cmm, const CMBitmap *bitmap, CMBitmapCallBackUPP progressProc, void *refCon, CMBitmap *resultBitmap)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMCheckBitmap
			move.l              #$0010000A,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMCheckBitmap
	ENDIF

;
; pascal CMError CMMMatchPixMap(CMMComponentInst cmm, PixMap *pixMap, CMBitmapCallBackUPP progressProc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMMatchPixMap
			move.l              #$000C0003,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMMatchPixMap
	ENDIF

;
; pascal CMError CMMCheckPixMap(CMMComponentInst cmm, const PixMap *pixMap, CMBitmapCallBackUPP progressProc, BitMap *bitMap, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMCheckPixMap
			move.l              #$00100004,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMCheckPixMap
	ENDIF

;
; pascal CMError CMMConcatInit(CMMComponentInst cmm, CMConcatProfileSet *profileSet)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMConcatInit
			move.l              #$00040007,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMConcatInit
	ENDIF

;
; pascal CMError NCMMConcatInit(CMMComponentInst cmm, NCMConcatProfileSet *profileSet, CMConcatCallBackUPP proc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_NCMMConcatInit
			move.l              #$000C0012,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NCMMConcatInit
	ENDIF

;
; pascal CMError CMMNewLinkProfile(CMMComponentInst cmm, CMProfileRef *prof, const CMProfileLocation *targetLocation, CMConcatProfileSet *profileSet)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMNewLinkProfile
			move.l              #$000C0010,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMNewLinkProfile
	ENDIF

;
; pascal CMError NCMMNewLinkProfile(CMMComponentInst cmm, CMProfileRef prof, NCMConcatProfileSet *profileSet, CMConcatCallBackUPP proc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_NCMMNewLinkProfile
			move.l              #$00100013,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NCMMNewLinkProfile
	ENDIF

;
; pascal CMError CMMGetPS2ColorSpace(CMMComponentInst cmm, CMProfileRef srcProf, UInt32 flags, CMFlattenUPP proc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMGetPS2ColorSpace
			move.l              #$0010000B,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetPS2ColorSpace
	ENDIF

;
; pascal CMError CMMGetPS2ColorRenderingIntent(CMMComponentInst cmm, CMProfileRef srcProf, UInt32 flags, CMFlattenUPP proc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMGetPS2ColorRenderingIntent
			move.l              #$0010000C,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetPS2ColorRenderingIntent
	ENDIF

;
; pascal CMError CMMGetPS2ColorRendering(CMMComponentInst cmm, CMProfileRef srcProf, CMProfileRef dstProf, UInt32 flags, CMFlattenUPP proc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMGetPS2ColorRendering
			move.l              #$0014000D,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetPS2ColorRendering
	ENDIF

;
; pascal CMError CMMGetPS2ColorRenderingVMSize(CMMComponentInst cmm, CMProfileRef srcProf, CMProfileRef dstProf, UInt32 *vmSize)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMGetPS2ColorRenderingVMSize
			move.l              #$000C0011,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetPS2ColorRenderingVMSize
	ENDIF

;
; pascal CMError CMMConcatenateProfiles(CMMComponentInst cmm, CMProfileHandle thru, CMProfileHandle dst, CMProfileHandle *newDst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMConcatenateProfiles
			move.l              #$000C0005,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMConcatenateProfiles
	ENDIF

;
; pascal CMError CMMGetNamedColorInfo(CMMComponentInst cmm, CMProfileRef srcProf, UInt32 *deviceChannels, OSType *deviceColorSpace, OSType *PCSColorSpace, UInt32 *count, StringPtr prefix, StringPtr suffix)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMGetNamedColorInfo
			move.l              #$001C0046,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetNamedColorInfo
	ENDIF

;
; pascal CMError CMMGetNamedColorValue(CMMComponentInst cmm, CMProfileRef prof, StringPtr name, CMColor *deviceColor, CMColor *PCSColor)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMGetNamedColorValue
			move.l              #$00100047,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetNamedColorValue
	ENDIF

;
; pascal CMError CMMGetIndNamedColorValue(CMMComponentInst cmm, CMProfileRef prof, UInt32 index, CMColor *deviceColor, CMColor *PCSColor)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMGetIndNamedColorValue
			move.l              #$00100048,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetIndNamedColorValue
	ENDIF

;
; pascal CMError CMMGetNamedColorIndex(CMMComponentInst cmm, CMProfileRef prof, StringPtr name, UInt32 *index)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMGetNamedColorIndex
			move.l              #$000C0049,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetNamedColorIndex
	ENDIF

;
; pascal CMError CMMGetNamedColorName(CMMComponentInst cmm, CMProfileRef prof, UInt32 index, StringPtr name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CMMGetNamedColorName
			move.l              #$000C004A,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetNamedColorName
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON
	IF OLDROUTINENAMES THEN
	ENDIF	; OLDROUTINENAMES
	ELSE
	IF CALL_NOT_IN_CARBON THEN
;
; pascal CMError CMMOpen(UInt32 *cmmStorage, void *hInstance)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMOpen
	ENDIF

;
; pascal CMError CMMClose(UInt32 *cmmStorage)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMClose
	ENDIF

;
; pascal CMError CMMGetCMMInfo(UInt32 *cmmStorage, CMMInfo *info)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetCMMInfo
	ENDIF

;
; pascal CMError NCMMInit(UInt32 *cmmStorage, CMProfileRef srcProfile, CMProfileRef dstProfile)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NCMMInit
	ENDIF

;
; pascal CMError CMMMatchColors(UInt32 *cmmStorage, CMColor *colors, UInt32 count)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMMatchColors
	ENDIF

;
; pascal CMError CMMCheckColors(UInt32 *cmmStorage, CMColor *colors, UInt32 count, UInt32 *result)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMCheckColors
	ENDIF

;
; pascal CMError CMMValidateProfile(UInt32 *cmmStorage, CMProfileRef prof, Boolean *valid)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMValidateProfile
	ENDIF

;
; pascal CMError CMMMatchBitmap(UInt32 *cmmStorage, CMBitmap *bitmap, CMBitmapCallBackUPP progressProc, void *refCon, CMBitmap *matchedBitmap)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMMatchBitmap
	ENDIF

;
; pascal CMError CMMCheckBitmap(UInt32 *cmmStorage, const CMBitmap *bitmap, CMBitmapCallBackUPP progressProc, void *refCon, CMBitmap *resultBitmap)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMCheckBitmap
	ENDIF

;
; pascal CMError CMMMatchPixMap(UInt32 *cmmStorage, PixMap *pixMap, CMBitmapCallBackUPP progressProc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMMatchPixMap
	ENDIF

;
; pascal CMError CMMCheckPixMap(UInt32 *cmmStorage, const PixMap *pixMap, CMBitmapCallBackUPP progressProc, BitMap *bitMap, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMCheckPixMap
	ENDIF

;
; pascal CMError CMMConcatInit(UInt32 *cmmStorage, CMConcatProfileSet *profileSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMConcatInit
	ENDIF

;
; pascal CMError NCMMConcatInit(UInt32 *cmmStorage, NCMConcatProfileSet *profileSet, CMConcatCallBackUPP proc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NCMMConcatInit
	ENDIF

;
; pascal CMError CMMNewLinkProfile(UInt32 *cmmStorage, CMProfileRef *prof, const CMProfileLocation *targetLocation, CMConcatProfileSet *profileSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMNewLinkProfile
	ENDIF

;
; pascal CMError NCMMNewLinkProfile(UInt32 *cmmStorage, CMProfileRef prof, NCMConcatProfileSet *profileSet, CMConcatCallBackUPP proc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NCMMNewLinkProfile
	ENDIF

;
; pascal CMError CMMGetPS2ColorSpace(UInt32 *cmmStorage, CMProfileRef srcProf, UInt32 flags, CMFlattenUPP proc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetPS2ColorSpace
	ENDIF

;
; pascal CMError CMMGetPS2ColorRenderingIntent(UInt32 *cmmStorage, CMProfileRef srcProf, UInt32 flags, CMFlattenUPP proc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetPS2ColorRenderingIntent
	ENDIF

;
; pascal CMError CMMGetPS2ColorRendering(UInt32 *cmmStorage, CMProfileRef srcProf, CMProfileRef dstProf, UInt32 flags, CMFlattenUPP proc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetPS2ColorRendering
	ENDIF

;
; pascal CMError CMMGetPS2ColorRenderingVMSize(UInt32 *cmmStorage, CMProfileRef srcProf, CMProfileRef dstProf, UInt32 *vmSize)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CMMGetPS2ColorRenderingVMSize
	ENDIF


	ENDIF	; CALL_NOT_IN_CARBON
	ENDIF	; TARGET_API_MAC_OS8
	ENDIF ; __CMMCOMPONENT__ 


;
;	File:		CFBag.a
;
;	Contains:	CoreFoundation bag collection
;
;	Version:	Technology:	Mac OS X
;				Release:	Universal Interfaces 3.3a1
;
;	Copyright:	Â© 1999 by Apple Computer, Inc., all rights reserved
;
;	Bugs?:		For bug reports, consult the following page on
;				the World Wide Web:
;
;					http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__COREFOUNDATION_CFBAG__') = 'UNDEFINED' THEN
__COREFOUNDATION_CFBAG__ SET 1

	IF &TYPE('___COREFOUNDATION_CFBASE__') = 'UNDEFINED' THEN
	include ':CoreFoundation:CFBase.a'
	ENDIF


CFBagCallBacks			RECORD 0
version					 ds.l	1				; offset: $0 (0)
retain					 ds.l	1				; offset: $4 (4)
release					 ds.l	1				; offset: $8 (8)
copyDescription			 ds.l	1				; offset: $C (12)
equal					 ds.l	1				; offset: $10 (16)
hash					 ds.l	1				; offset: $14 (20)
sizeof					 EQU *					; size:   $18 (24)
						ENDR




;
; extern CFTypeID CFBagGetTypeID(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagGetTypeID
	ENDIF


;
; extern CFBagRef CFBagCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFBagCallBacks *callBacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagCreate
	ENDIF

;
; extern CFBagRef CFBagCreateCopy(CFAllocatorRef allocator, CFBagRef bag)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagCreateCopy
	ENDIF

;
; extern CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagCreateMutable
	ENDIF

;
; extern CFMutableBagRef CFBagCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFBagRef bag)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagCreateMutableCopy
	ENDIF


;
; extern CFIndex CFBagGetCount(CFBagRef bag)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagGetCount
	ENDIF

;
; extern CFIndex CFBagGetCountOfValue(CFBagRef bag, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagGetCountOfValue
	ENDIF

;
; extern Boolean CFBagContainsValue(CFBagRef bag, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagContainsValue
	ENDIF

;
; extern const void *CFBagGetValue(CFBagRef bag, const void *candidate)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagGetValue
	ENDIF

;
; extern Boolean CFBagGetValueIfPresent(CFBagRef bag, const void *candidate, const void **value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagGetValueIfPresent
	ENDIF

;
; extern void CFBagGetValues(CFBagRef bag, const void **values)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagGetValues
	ENDIF

;
; extern void CFBagApplyFunction(CFBagRef bag, CFBagApplierFunction applier, void *context)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagApplyFunction
	ENDIF


;
; extern void CFBagAddValue(CFMutableBagRef bag, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagAddValue
	ENDIF

;
; extern void CFBagReplaceValue(CFMutableBagRef bag, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagReplaceValue
	ENDIF

;
; extern void CFBagSetValue(CFMutableBagRef bag, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagSetValue
	ENDIF

;
; extern void CFBagRemoveValue(CFMutableBagRef bag, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagRemoveValue
	ENDIF

;
; extern void CFBagRemoveAllValues(CFMutableBagRef bag)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBagRemoveAllValues
	ENDIF

	ENDIF ; __COREFOUNDATION_CFBAG__ 


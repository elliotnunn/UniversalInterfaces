;
;	File:		CFSet.a
;
;	Contains:	CoreFoundation set collection
;
;	Version:	Technology:	Mac OS X
;				Release:	Universal Interfaces 3.3a1
;
;	Copyright:	Â© 1999 by Apple Computer, Inc., all rights reserved
;
;	Bugs?:		For bug reports, consult the following page on
;				the World Wide Web:
;
;					http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__COREFOUNDATION_CFSET__') = 'UNDEFINED' THEN
__COREFOUNDATION_CFSET__ SET 1

	IF &TYPE('___COREFOUNDATION_CFBASE__') = 'UNDEFINED' THEN
	include ':CoreFoundation:CFBase.a'
	ENDIF


CFSetCallBacks			RECORD 0
version					 ds.l	1				; offset: $0 (0)
retain					 ds.l	1				; offset: $4 (4)
release					 ds.l	1				; offset: $8 (8)
copyDescription			 ds.l	1				; offset: $C (12)
equal					 ds.l	1				; offset: $10 (16)
hash					 ds.l	1				; offset: $14 (20)
sizeof					 EQU *					; size:   $18 (24)
						ENDR





;
; extern CFTypeID CFSetGetTypeID(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetGetTypeID
	ENDIF


;
; extern CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetCreate
	ENDIF

;
; extern CFSetRef CFSetCreateCopy(CFAllocatorRef allocator, CFSetRef theSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetCreateCopy
	ENDIF

;
; extern CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetCreateMutable
	ENDIF

;
; extern CFMutableSetRef CFSetCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFSetRef theSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetCreateMutableCopy
	ENDIF


;
; extern CFIndex CFSetGetCount(CFSetRef theSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetGetCount
	ENDIF

;
; extern CFIndex CFSetGetCountOfValue(CFSetRef theSet, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetGetCountOfValue
	ENDIF

;
; extern Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetContainsValue
	ENDIF

;
; extern const void *CFSetGetValue(CFSetRef theSet, const void *candidate)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetGetValue
	ENDIF

;
; extern Boolean CFSetGetValueIfPresent(CFSetRef theSet, const void *candidate, const void **value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetGetValueIfPresent
	ENDIF

;
; extern void CFSetGetValues(CFSetRef theSet, const void **values)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetGetValues
	ENDIF

;
; extern void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetApplyFunction
	ENDIF


;
; extern void CFSetAddValue(CFMutableSetRef theSet, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetAddValue
	ENDIF

;
; extern void CFSetReplaceValue(CFMutableSetRef theSet, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetReplaceValue
	ENDIF

;
; extern void CFSetSetValue(CFMutableSetRef theSet, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetSetValue
	ENDIF

;
; extern void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetRemoveValue
	ENDIF

;
; extern void CFSetRemoveAllValues(CFMutableSetRef theSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFSetRemoveAllValues
	ENDIF

	ENDIF ; __COREFOUNDATION_CFSET__ 


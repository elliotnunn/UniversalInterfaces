;
;    File:       AEInteraction.a
;
;    Contains:   AppleEvent functions that deal with Events and interacting with user
;
;    Version:    Technology: Mac OS 9
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 2000-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__AEINTERACTION__') = 'UNDEFINED' THEN
__AEINTERACTION__ SET 1

	IF &TYPE('__AEDATAMODEL__') = 'UNDEFINED' THEN
	include 'AEDataModel.a'
	ENDIF
	IF &TYPE('__NOTIFICATION__') = 'UNDEFINED' THEN
	include 'Notification.a'
	ENDIF
	IF &TYPE('__EVENTS__') = 'UNDEFINED' THEN
	include 'Events.a'
	ENDIF

; **************************************************************************
;  AppleEvent callbacks. 
;*************************************************************************


; **************************************************************************
;  The next couple of calls are basic routines used to create, send,
;  and process AppleEvents. 
;*************************************************************************


; *  AESend()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AESend(const AppleEvent *theAppleEvent, AppleEvent *reply, AESendMode sendMode, AESendPriority sendPriority, long timeOutInTicks, AEIdleUPP idleProc, AEFilterUPP filterProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AESend
			move.w              #$0D17,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AESend
	ENDIF


; *  AEProcessAppleEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AEProcessAppleEvent(const EventRecord *theEventRecord)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AEProcessAppleEvent
			move.w              #$021B,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AEProcessAppleEvent
	ENDIF


;  
; Note: during event processing, an event handler may realize that it is likely
; to exceed the client's timeout limit. Passing the reply to this
; routine causes a wait event to be generated that asks the client
; for more time. 
;


; *  AEResetTimer()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AEResetTimer(const AppleEvent *reply)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AEResetTimer
			move.w              #$0219,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AEResetTimer
	ENDIF


; **************************************************************************
;  The following three calls are used to allow applications to behave
;  courteously when a user interaction such as a dialog box is needed. 
;*************************************************************************



; typedef SInt8							AEInteractAllowed
kAEInteractWithSelf				EQU		0
kAEInteractWithLocal			EQU		1
kAEInteractWithAll				EQU		2

; *  AEGetInteractionAllowed()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AEGetInteractionAllowed(AEInteractAllowed *level)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AEGetInteractionAllowed
			move.w              #$021D,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AEGetInteractionAllowed
	ENDIF


; *  AESetInteractionAllowed()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AESetInteractionAllowed(AEInteractAllowed level)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AESetInteractionAllowed
			move.w              #$011E,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AESetInteractionAllowed
	ENDIF


; *  AEInteractWithUser()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AEInteractWithUser(long timeOutInTicks, NMRecPtr nmReqPtr, AEIdleUPP idleProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AEInteractWithUser
			move.w              #$061C,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AEInteractWithUser
	ENDIF


; **************************************************************************
; The following four calls are available for applications which need more
; sophisticated control over when and how events are processed. Applications
; which implement multi-session servers or which implement their own
; internal event queueing will probably be the major clients of these
; routines. They can be called from within a handler to prevent the AEM from
; disposing of the AppleEvent when the handler returns. They can be used to
; asynchronously process the event (as MacApp does).
;*************************************************************************


; *  AESuspendTheCurrentEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AESuspendTheCurrentEvent(const AppleEvent *theAppleEvent)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AESuspendTheCurrentEvent
			move.w              #$022B,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AESuspendTheCurrentEvent
	ENDIF

;  
; Note: The following routine tells the AppleEvent manager that processing
; is either about to resume or has been completed on a previously suspended
; event. The procPtr passed in as the dispatcher parameter will be called to
; attempt to redispatch the event. Several constants for the dispatcher
; parameter allow special behavior. They are:
;    - kAEUseStandardDispatch means redispatch as if the event was just
;      received, using the standard AppleEvent dispatch mechanism.
;    - kAENoDispatch means ignore the parameter.
;      Use this in the case where the event has been handled and no
;      redispatch is needed.
;    - non nil means call the routine which the dispatcher points to.
;

;  Constants for Refcon in AEResumeTheCurrentEvent with kAEUseStandardDispatch 

kAEDoNotIgnoreHandler			EQU		$00000000
kAEIgnoreAppPhacHandler			EQU		$00000001			; available only in vers 1.0.1 and greater 
kAEIgnoreAppEventHandler		EQU		$00000002			; available only in vers 1.0.1 and greater 
kAEIgnoreSysPhacHandler			EQU		$00000004			; available only in vers 1.0.1 and greater 
kAEIgnoreSysEventHandler		EQU		$00000008			; available only in vers 1.0.1 and greater 
kAEIngoreBuiltInEventHandler	EQU		$00000010			; available only in vers 1.0.1 and greater 
kAEDontDisposeOnResume			EQU		$80000000			; available only in vers 1.0.1 and greater 
;  Constants for AEResumeTheCurrentEvent 

kAENoDispatch					EQU		0					; dispatch parameter to AEResumeTheCurrentEvent takes a pointer to a dispatch 
kAEUseStandardDispatch			EQU		$FFFFFFFF			; table, or one of these two constants 

; *  AEResumeTheCurrentEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AEResumeTheCurrentEvent(const AppleEvent *theAppleEvent, const AppleEvent *reply, AEEventHandlerUPP dispatcher, long handlerRefcon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AEResumeTheCurrentEvent
			move.w              #$0818,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AEResumeTheCurrentEvent
	ENDIF


; *  AEGetTheCurrentEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AEGetTheCurrentEvent(AppleEvent *theAppleEvent)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AEGetTheCurrentEvent
			move.w              #$021A,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AEGetTheCurrentEvent
	ENDIF


; *  AESetTheCurrentEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AESetTheCurrentEvent(const AppleEvent *theAppleEvent)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AESetTheCurrentEvent
			move.w              #$022C,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AESetTheCurrentEvent
	ENDIF


; **************************************************************************
;  AppleEvent callbacks. 
;*************************************************************************


; *  NewAEIdleUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewAEFilterUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeAEIdleUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeAEFilterUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeAEIdleUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeAEFilterUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 




	ENDIF ; __AEINTERACTION__ 


;
;    File:       AppleEvents.a
;
;    Contains:   AppleEvent Package Interfaces.
;
;    Version:    Technology: System 7.5
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 1989-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__APPLEEVENTS__') = 'UNDEFINED' THEN
__APPLEEVENTS__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__MIXEDMODE__') = 'UNDEFINED' THEN
	include 'MixedMode.a'
	ENDIF
; 
;    Note:   The functions and types for the building and parsing AppleEvent  
;            messages has moved to AEDataModel.h
;

	IF &TYPE('__AEDATAMODEL__') = 'UNDEFINED' THEN
	include 'AEDataModel.a'
	ENDIF

; 
;    Note:   The functions for interacting with events has moved to AEInteraction.h
;

	IF &TYPE('__AEINTERACTION__') = 'UNDEFINED' THEN
	include 'AEInteraction.a'
	ENDIF

															; Keywords for Apple event parameters 
keyDirectObject					EQU		'----'
keyErrorNumber					EQU		'errn'
keyErrorString					EQU		'errs'
keyProcessSerialNumber			EQU		'psn '				; Keywords for special handlers 
keyPreDispatch					EQU		'phac'				; preHandler accessor call 
keySelectProc					EQU		'selh'				; more selector call 
															; Keyword for recording 
keyAERecorderCount				EQU		'recr'				; available only in vers 1.0.1 and greater 
															; Keyword for version information 
keyAEVersion					EQU		'vers'				; available only in vers 1.0.1 and greater 
;  Event Class 

kCoreEventClass					EQU		'aevt'
;  Event ID’s 

kAEOpenApplication				EQU		'oapp'
kAEOpenDocuments				EQU		'odoc'
kAEPrintDocuments				EQU		'pdoc'
kAEQuitApplication				EQU		'quit'
kAEAnswer						EQU		'ansr'
kAEApplicationDied				EQU		'obit'
kAEShowPreferences				EQU		'pref'				; sent by Mac OS X when the user chooses the Preferences item 
;  Constants for recording 

kAEStartRecording				EQU		'reca'				; available only in vers 1.0.1 and greater 
kAEStopRecording				EQU		'recc'				; available only in vers 1.0.1 and greater 
kAENotifyStartRecording			EQU		'rec1'				; available only in vers 1.0.1 and greater 
kAENotifyStopRecording			EQU		'rec0'				; available only in vers 1.0.1 and greater 
kAENotifyRecording				EQU		'recr'				; available only in vers 1.0.1 and greater 




; 
; * AEEventSource is defined as an SInt8 for compatability with pascal.
; * Important note: keyEventSourceAttr is returned by AttributePtr as a typeShortInteger.
; * Be sure to pass at least two bytes of storage to AEGetAttributePtr - the result can be
; * compared directly against the following enums.
; 


; typedef SInt8							AEEventSource
kAEUnknownSource				EQU		0
kAEDirectCall					EQU		1
kAESameProcess					EQU		2
kAELocalProcess					EQU		3
kAERemoteProcess				EQU		4
; **************************************************************************
;  These calls are used to set up and modify the event dispatch table.
;*************************************************************************


; *  AEInstallEventHandler()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AEInstallEventHandler(AEEventClass theAEEventClass, AEEventID theAEEventID, AEEventHandlerUPP handler, long handlerRefcon, Boolean isSysHandler)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AEInstallEventHandler
			move.w              #$091F,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AEInstallEventHandler
	ENDIF


; *  AERemoveEventHandler()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AERemoveEventHandler(AEEventClass theAEEventClass, AEEventID theAEEventID, AEEventHandlerUPP handler, Boolean isSysHandler)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AERemoveEventHandler
			move.w              #$0720,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AERemoveEventHandler
	ENDIF


; *  AEGetEventHandler()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AEGetEventHandler(AEEventClass theAEEventClass, AEEventID theAEEventID, AEEventHandlerUPP *handler, long *handlerRefcon, Boolean isSysHandler)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AEGetEventHandler
			move.w              #$0921,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AEGetEventHandler
	ENDIF



; **************************************************************************
;  These calls are used to set up and modify special hooks into the
;  AppleEvent manager.
;*************************************************************************


; *  AEInstallSpecialHandler()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AEInstallSpecialHandler(AEKeyword functionClass, AEEventHandlerUPP handler, Boolean isSysHandler)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AEInstallSpecialHandler
			move.w              #$0500,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AEInstallSpecialHandler
	ENDIF


; *  AERemoveSpecialHandler()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AERemoveSpecialHandler(AEKeyword functionClass, AEEventHandlerUPP handler, Boolean isSysHandler)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AERemoveSpecialHandler
			move.w              #$0501,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AERemoveSpecialHandler
	ENDIF


; *  AEGetSpecialHandler()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AEGetSpecialHandler(AEKeyword functionClass, AEEventHandlerUPP *handler, Boolean isSysHandler)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AEGetSpecialHandler
			move.w              #$052D,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AEGetSpecialHandler
	ENDIF


; **************************************************************************
;  This call was added in version 1.0.1. If called with the keyword
;  keyAERecorderCount ('recr'), the number of recorders that are
;  currently active is returned in 'result'
;  (available only in vers 1.0.1 and greater).
;*************************************************************************


; *  AEManagerInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AEManagerInfo(AEKeyword keyWord, long *result)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AEManagerInfo
			move.w              #$0441,D0
			dc.w            	$A816
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AEManagerInfo
	ENDIF





	ENDIF ; __APPLEEVENTS__ 


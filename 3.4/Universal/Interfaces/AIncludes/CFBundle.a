;
;    File:       CFBundle.a
;
;    Contains:   CoreFoundation bundle
;
;    Version:    Technology: Mac OS X
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1999-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CFBUNDLE__') = 'UNDEFINED' THEN
__CFBUNDLE__ SET 1

	IF &TYPE('__CFBASE__') = 'UNDEFINED' THEN
	include 'CFBase.a'
	ENDIF
	IF &TYPE('__CFARRAY__') = 'UNDEFINED' THEN
	include 'CFArray.a'
	ENDIF
	IF &TYPE('__CFDICTIONARY__') = 'UNDEFINED' THEN
	include 'CFDictionary.a'
	ENDIF
	IF &TYPE('__CFSTRING__') = 'UNDEFINED' THEN
	include 'CFString.a'
	ENDIF
	IF &TYPE('__CFURL__') = 'UNDEFINED' THEN
	include 'CFURL.a'
	ENDIF





;  ===================== Standard Info.plist keys ===================== 

; *  kCFBundleInfoDictionaryVersionKey
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;  The version of the Info.plist format 

; *  kCFBundleExecutableKey
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;  The name of the executable in this bundle (if any) 

; *  kCFBundleIdentifierKey
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;  The bundle identifier (for CFBundleGetBundleWithIdentifier()) 

; *  kCFBundleVersionKey
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;  The version number of the bundle.  Clients should use CFBundleGetVersionNumber() instead of accessing this key directly
;    since that function will properly convert a version number in string format into its interger representation. 

; *  kCFBundleDevelopmentRegionKey
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;  The name of the development language of the bundle. 

; *  kCFBundleNameKey
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;  The human-readable name of the bundle.  This key is often found in the InfoPlist.strings since it is usually localized. 
;  ===================== Finding Bundles ===================== 

; *  CFBundleGetMainBundle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFBundleRef CFBundleGetMainBundle(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetMainBundle
	ENDIF


; *  CFBundleGetBundleWithIdentifier()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetBundleWithIdentifier
	ENDIF

;  A bundle can name itself by providing a key in the info dictionary. 
;  This facility is meant to allow bundle-writers to get hold of their 
;  bundle from their code without having to know where it was on the disk. 
;  This is meant to be a replacement mechanism for +bundleForClass: users. 

; *  CFBundleGetAllBundles()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFArrayRef CFBundleGetAllBundles(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetAllBundles
	ENDIF

;  This is potentially expensive.  Use with care. 
;  ===================== Creating Bundles ===================== 

; *  CFBundleGetTypeID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern UInt32 CFBundleGetTypeID(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetTypeID
	ENDIF


; *  CFBundleCreate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCreate
	ENDIF

;  Might return an existing instance with the ref-count bumped. 

; *  CFBundleCreateBundlesFromDirectory()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFArrayRef CFBundleCreateBundlesFromDirectory(CFAllocatorRef allocator, CFURLRef directoryURL, CFStringRef bundleType)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCreateBundlesFromDirectory
	ENDIF

;  Create instances for all bundles in the given directory matching the given 
;  type (or all of them if bundleType is NULL) 
;  ==================== Basic Bundle Info ==================== 

; *  CFBundleCopyBundleURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyBundleURL
	ENDIF


; *  CFBundleGetValueForInfoDictionaryKey()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetValueForInfoDictionaryKey
	ENDIF

;  Returns a localized value if available, otherwise the global value. 

; *  CFBundleGetInfoDictionary()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetInfoDictionary
	ENDIF

;  This is the global info dictionary.  Note that CFBundle may add 
;  extra keys to the dictionary for its own use. 

; *  CFBundleGetLocalInfoDictionary()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFDictionaryRef CFBundleGetLocalInfoDictionary(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetLocalInfoDictionary
	ENDIF

;  This is the localized info dictionary. 

; *  CFBundleGetPackageInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFBundleGetPackageInfo(CFBundleRef bundle, UInt32 *packageType, UInt32 *packageCreator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetPackageInfo
	ENDIF


; *  CFBundleGetIdentifier()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetIdentifier
	ENDIF


; *  CFBundleGetVersionNumber()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern UInt32 CFBundleGetVersionNumber(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetVersionNumber
	ENDIF


; *  CFBundleGetDevelopmentRegion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFBundleGetDevelopmentRegion(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetDevelopmentRegion
	ENDIF


; *  CFBundleCopySupportFilesDirectoryURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFBundleCopySupportFilesDirectoryURL(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopySupportFilesDirectoryURL
	ENDIF


; *  CFBundleCopyResourcesDirectoryURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyResourcesDirectoryURL
	ENDIF


; *  CFBundleCopyPrivateFrameworksURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFBundleCopyPrivateFrameworksURL(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyPrivateFrameworksURL
	ENDIF


; *  CFBundleCopySharedFrameworksURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFBundleCopySharedFrameworksURL(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopySharedFrameworksURL
	ENDIF


; *  CFBundleCopySharedSupportURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFBundleCopySharedSupportURL(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopySharedSupportURL
	ENDIF


; *  CFBundleCopyBuiltInPlugInsURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFBundleCopyBuiltInPlugInsURL(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyBuiltInPlugInsURL
	ENDIF

;  ------------- Basic Bundle Info without a CFBundle instance ------------- 
;  This API is provided to enable developers to retrieve basic information 
;  about a bundle without having to create an instance of CFBundle. 

; *  CFBundleCopyInfoDictionaryInDirectory()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFDictionaryRef CFBundleCopyInfoDictionaryInDirectory(CFURLRef bundleURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyInfoDictionaryInDirectory
	ENDIF


; *  CFBundleGetPackageInfoInDirectory()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFBundleGetPackageInfoInDirectory(CFURLRef url, UInt32 *packageType, UInt32 *packageCreator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetPackageInfoInDirectory
	ENDIF

;  ==================== Resource Handling API ==================== 

; *  CFBundleCopyResourceURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyResourceURL
	ENDIF


; *  CFBundleCopyResourceURLsOfType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFArrayRef CFBundleCopyResourceURLsOfType(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyResourceURLsOfType
	ENDIF


; *  CFBundleCopyLocalizedString()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyLocalizedString
	ENDIF

;  ------------- Resource Handling without a CFBundle instance ------------- 
;  This API is provided to enable developers to use the CFBundle resource 
;  searching policy without having to create an instance of CFBundle. 
;  Because of caching behavior when a CFBundle instance exists, it will be faster 
;  to actually create a CFBundle if you need to access several resources. 

; *  CFBundleCopyResourceURLInDirectory()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFBundleCopyResourceURLInDirectory(CFURLRef bundleURL, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyResourceURLInDirectory
	ENDIF


; *  CFBundleCopyResourceURLsOfTypeInDirectory()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(CFURLRef bundleURL, CFStringRef resourceType, CFStringRef subDirName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyResourceURLsOfTypeInDirectory
	ENDIF

;  =========== Localization-specific Resource Handling API =========== 
;  This API allows finer-grained control over specific localizations,  
;  as distinguished from the above API, which always uses the user's   
;  preferred localizations.  

; *  CFBundleCopyBundleLocalizations()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyBundleLocalizations
	ENDIF

;  Lists the localizations that a bundle contains.  

; *  CFBundleCopyPreferredLocalizationsFromArray()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFArrayRef CFBundleCopyPreferredLocalizationsFromArray(CFArrayRef locArray)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyPreferredLocalizationsFromArray
	ENDIF

;  Given an array of possible localizations, returns the one or more 
;  that CFBundle would use in the current context. To find out which 
;  localizations are in use for a particular bundle, apply this to   
;  the result of CFBundleCopyBundleLocalizations.  

; *  CFBundleCopyResourceURLForLocalization()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyResourceURLForLocalization
	ENDIF


; *  CFBundleCopyResourceURLsOfTypeForLocalization()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyResourceURLsOfTypeForLocalization
	ENDIF

;  ==================== Primitive Code Loading API ==================== 
;  This API abstracts the various different executable formats supported on 
;  various platforms.  It can load DYLD, CFM, or DLL shared libraries (on their 
;  appropriate platforms) and gives a uniform API for looking up functions. 
;  Note that Cocoa-based bundles containing Objective-C or Java code must 
;  be loaded with NSBundle, not CFBundle.  Once they are loaded, however, 
;  either CFBundle or NSBundle can be used. 

; *  CFBundleCopyExecutableURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFBundleCopyExecutableURL(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyExecutableURL
	ENDIF


; *  CFBundleIsExecutableLoaded()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFBundleIsExecutableLoaded(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleIsExecutableLoaded
	ENDIF


; *  CFBundleLoadExecutable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFBundleLoadExecutable(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleLoadExecutable
	ENDIF


; *  CFBundleUnloadExecutable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFBundleUnloadExecutable(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleUnloadExecutable
	ENDIF


; *  CFBundleGetFunctionPointerForName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void *CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetFunctionPointerForName
	ENDIF


; *  CFBundleGetFunctionPointersForNames()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFBundleGetFunctionPointersForNames(CFBundleRef bundle, CFArrayRef functionNames, void *ftbl[])
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetFunctionPointersForNames
	ENDIF


; *  CFBundleGetDataPointerForName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void *CFBundleGetDataPointerForName(CFBundleRef bundle, CFStringRef symbolName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetDataPointerForName
	ENDIF


; *  CFBundleGetDataPointersForNames()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFBundleGetDataPointersForNames(CFBundleRef bundle, CFArrayRef symbolNames, void *stbl[])
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetDataPointersForNames
	ENDIF


; *  CFBundleCopyAuxiliaryExecutableURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFBundleCopyAuxiliaryExecutableURL(CFBundleRef bundle, CFStringRef executableName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCopyAuxiliaryExecutableURL
	ENDIF

;  This function can be used to find executables other than your main 
;  executable.  This is useful, for instance, for applications that have 
;  some command line tool that is packaged with and used by the application. 
;  The tool can be packaged in the various platform executable directories 
;  in the bundle and can be located with this function.  This allows an 
;  app to ship versions of the tool for each platform as it does for the 
;  main app executable. 
;  ==================== Getting a bundle's plugIn ==================== 

; *  CFBundleGetPlugIn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFPlugInRef CFBundleGetPlugIn(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleGetPlugIn
	ENDIF

;  ==================== Resource Manager-Related API ==================== 

; *  CFBundleOpenBundleResourceMap()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern short CFBundleOpenBundleResourceMap(CFBundleRef bundle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleOpenBundleResourceMap
	ENDIF

;  This function opens the non-localized and the localized resource files 
;  (if any) for the bundle, creates and makes current a single read-only 
;  resource map combining both, and returns a reference number for it. 
;  If it is called multiple times, it opens the files multiple times, 
;  and returns distinct reference numbers.  

; *  CFBundleOpenBundleResourceFiles()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern SInt32 CFBundleOpenBundleResourceFiles(CFBundleRef bundle, short *refNum, short *localizedRefNum)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleOpenBundleResourceFiles
	ENDIF

;  Similar to CFBundleOpenBundleResourceMap, except that it creates two 
;  separate resource maps and returns reference numbers for both. 

; *  CFBundleCloseBundleResourceMap()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFBundleCloseBundleResourceMap(CFBundleRef bundle, short refNum)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBundleCloseBundleResourceMap
	ENDIF

	ENDIF ; __CFBUNDLE__ 


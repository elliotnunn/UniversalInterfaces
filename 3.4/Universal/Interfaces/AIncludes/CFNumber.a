;
;    File:       CFNumber.a
;
;    Contains:   CoreFoundation numbers
;
;    Version:    Technology: Mac OS X
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1999-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CFNUMBER__') = 'UNDEFINED' THEN
__CFNUMBER__ SET 1

	IF &TYPE('__CFBASE__') = 'UNDEFINED' THEN
	include 'CFBase.a'
	ENDIF





; *  kCFBooleanTrue
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  kCFBooleanFalse
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  CFBooleanGetTypeID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFTypeID CFBooleanGetTypeID(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBooleanGetTypeID
	ENDIF


; *  CFBooleanGetValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFBooleanGetValue(CFBooleanRef boolean)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFBooleanGetValue
	ENDIF


; typedef long							CFNumberType
															; Types from MacTypes.h 
kCFNumberSInt8Type				EQU		1
kCFNumberSInt16Type				EQU		2
kCFNumberSInt32Type				EQU		3
kCFNumberSInt64Type				EQU		4
kCFNumberFloat32Type			EQU		5
kCFNumberFloat64Type			EQU		6					; 64-bit IEEE 754 
															; Basic C types 
kCFNumberCharType				EQU		7
kCFNumberShortType				EQU		8
kCFNumberIntType				EQU		9
kCFNumberLongType				EQU		10
kCFNumberLongLongType			EQU		11
kCFNumberFloatType				EQU		12
kCFNumberDoubleType				EQU		13					; Other 
kCFNumberCFIndexType			EQU		14
kCFNumberMaxType				EQU		14



; *  kCFNumberPositiveInfinity
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  kCFNumberNegativeInfinity
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  kCFNumberNaN
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  CFNumberGetTypeID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFTypeID CFNumberGetTypeID(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFNumberGetTypeID
	ENDIF

; 
;    Creates a CFNumber with the given value. The type of number pointed
;    to by the valuePtr is specified by type. If type is a floating point
;    type and the value represents one of the infinities or NaN, the
;    well-defined CFNumber for that value is returned. If either of
;    valuePtr or type is an invalid value, the result is undefined.
;


; *  CFNumberCreate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFNumberCreate
	ENDIF

; 
;    Returns the storage format of the CFNumber's value.  Note that
;    this is not necessarily the type provided in CFNumberCreate().
;


; *  CFNumberGetType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFNumberType CFNumberGetType(CFNumberRef number)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFNumberGetType
	ENDIF

; 
;    Returns the size in bytes of the type of the number.
;


; *  CFNumberGetByteSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFIndex CFNumberGetByteSize(CFNumberRef number)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFNumberGetByteSize
	ENDIF

; 
;    Returns TRUE if the type of the CFNumber's value is one of
;    the defined floating point types.
;


; *  CFNumberIsFloatType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFNumberIsFloatType(CFNumberRef number)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFNumberIsFloatType
	ENDIF

; 
;    Copies the CFNumber's value into the space pointed to by
;    valuePtr, as the specified type. If conversion needs to take
;    place, the conversion rules follow human expectation and not
;    C's promotion and truncation rules. If the conversion is
;    lossy, or the value is out of range, FALSE is returned. Best
;    attempt at conversion will still be in *valuePtr.
;


; *  CFNumberGetValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFNumberGetValue
	ENDIF

; 
;    Compares the two CFNumber instances. If conversion of the
;    types of the values is needed, the conversion and comparison
;    follow human expectations and not C's promotion and comparison
;    rules. Negative zero compares less than positive zero.
;    Positive infinity compares greater than everything except
;    itself, to which it compares equal. Negative infinity compares
;    less than everything except itself, to which it compares equal.
;    Unlike standard practice, if both numbers are NaN, then they
;    compare equal; if only one of the numbers is NaN, then the NaN
;    compares greater than the other number if it is negative, and
;    smaller than the other number if it is positive. (Note that in
;    CFEqual() with two CFNumbers, if either or both of the numbers
;    is NaN, FALSE is returned.)
;


; *  CFNumberCompare()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFNumberCompare
	ENDIF

	ENDIF ; __CFNUMBER__ 


;
;    File:       CFPlugIn.a
;
;    Contains:   CoreFoundation plugins
;
;    Version:    Technology: Mac OS X
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1999-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CFPLUGIN__') = 'UNDEFINED' THEN
__CFPLUGIN__ SET 1

	IF &TYPE('__CFBASE__') = 'UNDEFINED' THEN
	include 'CFBase.a'
	ENDIF
	IF &TYPE('__CFARRAY__') = 'UNDEFINED' THEN
	include 'CFArray.a'
	ENDIF
	IF &TYPE('__CFBUNDLE__') = 'UNDEFINED' THEN
	include 'CFBundle.a'
	ENDIF
	IF &TYPE('__CFSTRING__') = 'UNDEFINED' THEN
	include 'CFString.a'
	ENDIF
	IF &TYPE('__CFURL__') = 'UNDEFINED' THEN
	include 'CFURL.a'
	ENDIF
	IF &TYPE('__CFUUID__') = 'UNDEFINED' THEN
	include 'CFUUID.a'
	ENDIF

;  ================ Standard Info.plist keys for plugIns ================ 

; *  kCFPlugInDynamicRegistrationKey
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  kCFPlugInDynamicRegisterFunctionKey
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  kCFPlugInUnloadFunctionKey
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  kCFPlugInFactoriesKey
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  kCFPlugInTypesKey
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;  ================= Function prototypes for various callbacks ================= 
;  Function types that plugIn authors can implement for various purposes. 
;  ================= Creating PlugIns ================= 

; *  CFPlugInGetTypeID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern UInt32 CFPlugInGetTypeID(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInGetTypeID
	ENDIF


; *  CFPlugInCreate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFPlugInRef CFPlugInCreate(CFAllocatorRef allocator, CFURLRef plugInURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInCreate
	ENDIF

;  Might return an existing instance with the ref-count bumped. 

; *  CFPlugInGetBundle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFBundleRef CFPlugInGetBundle(CFPlugInRef plugIn)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInGetBundle
	ENDIF

;  ================= Controlling load on demand ================= 
;  For plugIns. 
;  PlugIns that do static registration are load on demand by default. 
;  PlugIns that do dynamic registration are not load on demand by default. 
;  A dynamic registration function can call CFPlugInSetLoadOnDemand(). 

; *  CFPlugInSetLoadOnDemand()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFPlugInSetLoadOnDemand(CFPlugInRef plugIn, Boolean flag)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInSetLoadOnDemand
	ENDIF


; *  CFPlugInIsLoadOnDemand()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFPlugInIsLoadOnDemand(CFPlugInRef plugIn)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInIsLoadOnDemand
	ENDIF

;  ================= Finding factories and creating instances ================= 
;  For plugIn hosts. 
;  Functions for finding factories to create specific types and actually creating instances of a type. 

; *  CFPlugInFindFactoriesForPlugInType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFArrayRef CFPlugInFindFactoriesForPlugInType(CFUUIDRef typeUUID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInFindFactoriesForPlugInType
	ENDIF

;  This function finds all the factories from any plugin for the given type.  

; *  CFPlugInFindFactoriesForPlugInTypeInPlugIn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn(CFUUIDRef typeUUID, CFPlugInRef plugIn)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInFindFactoriesForPlugInTypeInPlugIn
	ENDIF

;  This function restricts the result to factories from the given plug-in that can create the given type 

; *  CFPlugInInstanceCreate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void *CFPlugInInstanceCreate(CFAllocatorRef allocator, CFUUIDRef factoryUUID, CFUUIDRef typeUUID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInInstanceCreate
	ENDIF

;  This function returns the IUnknown interface for the new instance. 
;  ================= Registering factories and types ================= 
;  For plugIn writers who must dynamically register things. 
;  Functions to register factory functions and to associate factories with types. 

; *  CFPlugInRegisterFactoryFunction()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFPlugInRegisterFactoryFunction(CFUUIDRef factoryUUID, CFPlugInFactoryFunction func)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInRegisterFactoryFunction
	ENDIF


; *  CFPlugInRegisterFactoryFunctionByName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFPlugInRegisterFactoryFunctionByName(CFUUIDRef factoryUUID, CFPlugInRef plugIn, CFStringRef functionName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInRegisterFactoryFunctionByName
	ENDIF


; *  CFPlugInUnregisterFactory()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFPlugInUnregisterFactory(CFUUIDRef factoryUUID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInUnregisterFactory
	ENDIF


; *  CFPlugInRegisterPlugInType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFPlugInRegisterPlugInType(CFUUIDRef factoryUUID, CFUUIDRef typeUUID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInRegisterPlugInType
	ENDIF


; *  CFPlugInUnregisterPlugInType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFPlugInUnregisterPlugInType(CFUUIDRef factoryUUID, CFUUIDRef typeUUID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInUnregisterPlugInType
	ENDIF

;  ================= Registering instances ================= 
;  When a new instance of a type is created, the instance is responsible for registering itself with the factory that created it and unregistering when it deallocates. 
;  This means that an instance must keep track of the CFUUIDRef of the factory that created it so it can unregister when it goes away. 

; *  CFPlugInAddInstanceForFactory()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFPlugInAddInstanceForFactory(CFUUIDRef factoryID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInAddInstanceForFactory
	ENDIF


; *  CFPlugInRemoveInstanceForFactory()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFPlugInRemoveInstanceForFactory(CFUUIDRef factoryID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInRemoveInstanceForFactory
	ENDIF


;  Obsolete API 



; *  CFPlugInInstanceGetInterfaceFunctionTable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFPlugInInstanceGetInterfaceFunctionTable(CFPlugInInstanceRef instance, CFStringRef interfaceName, void **ftbl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInInstanceGetInterfaceFunctionTable
	ENDIF


; *  CFPlugInInstanceGetFactoryName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFPlugInInstanceGetFactoryName(CFPlugInInstanceRef instance)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInInstanceGetFactoryName
	ENDIF


; *  CFPlugInInstanceGetInstanceData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void *CFPlugInInstanceGetInstanceData(CFPlugInInstanceRef instance)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInInstanceGetInstanceData
	ENDIF


; *  CFPlugInInstanceGetTypeID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern UInt32 CFPlugInInstanceGetTypeID(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInInstanceGetTypeID
	ENDIF


; *  CFPlugInInstanceCreateWithInstanceDataSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFPlugInInstanceRef CFPlugInInstanceCreateWithInstanceDataSize(CFAllocatorRef allocator, CFIndex instanceDataSize, CFPlugInInstanceDeallocateInstanceDataFunction deallocateInstanceFunction, CFStringRef factoryName, CFPlugInInstanceGetInterfaceFunction getInterfaceFunction)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFPlugInInstanceCreateWithInstanceDataSize
	ENDIF

	ENDIF ; __CFPLUGIN__ 


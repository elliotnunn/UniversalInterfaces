;
;    File:       CFTree.a
;
;    Contains:   CoreFoundation tree collection
;
;    Version:    Technology: Mac OS X
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1999-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CFTREE__') = 'UNDEFINED' THEN
__CFTREE__ SET 1

	IF &TYPE('__CFBASE__') = 'UNDEFINED' THEN
	include 'CFBase.a'
	ENDIF

CFTreeContext			RECORD 0
version					 ds.l	1				; offset: $0 (0)
info					 ds.l	1				; offset: $4 (4)
retain					 ds.l	1				; offset: $8 (8)
release					 ds.l	1				; offset: $C (12)
copyDescription			 ds.l	1				; offset: $10 (16)
sizeof					 EQU *					; size:   $14 (20)
						ENDR



; *  CFTreeGetTypeID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFTypeID CFTreeGetTypeID(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeGetTypeID
	ENDIF


; *  CFTreeCreate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFTreeRef CFTreeCreate(CFAllocatorRef allocator, const CFTreeContext *context)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeCreate
	ENDIF


; *  CFTreeGetParent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFTreeRef CFTreeGetParent(CFTreeRef tree)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeGetParent
	ENDIF


; *  CFTreeGetNextSibling()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFTreeRef CFTreeGetNextSibling(CFTreeRef tree)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeGetNextSibling
	ENDIF


; *  CFTreeGetFirstChild()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFTreeRef CFTreeGetFirstChild(CFTreeRef tree)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeGetFirstChild
	ENDIF


; *  CFTreeGetContext()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFTreeGetContext(CFTreeRef tree, CFTreeContext *context)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeGetContext
	ENDIF


; *  CFTreeGetChildCount()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFIndex CFTreeGetChildCount(CFTreeRef tree)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeGetChildCount
	ENDIF


; *  CFTreeGetChildAtIndex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFTreeRef CFTreeGetChildAtIndex(CFTreeRef tree, CFIndex idx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeGetChildAtIndex
	ENDIF


; *  CFTreeGetChildren()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFTreeGetChildren(CFTreeRef tree, CFTreeRef *children)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeGetChildren
	ENDIF


; *  CFTreeApplyFunctionToChildren()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFTreeApplyFunctionToChildren(CFTreeRef tree, CFTreeApplierFunction applier, void *context)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeApplyFunctionToChildren
	ENDIF


; *  CFTreeFindRoot()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFTreeRef CFTreeFindRoot(CFTreeRef tree)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeFindRoot
	ENDIF


; *  CFTreeSetContext()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFTreeSetContext(CFTreeRef tree, const CFTreeContext *context)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeSetContext
	ENDIF

;  adds newChild as tree's first child 

; *  CFTreePrependChild()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFTreePrependChild(CFTreeRef tree, CFTreeRef newChild)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreePrependChild
	ENDIF

;  adds newChild as tree's last child 

; *  CFTreeAppendChild()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFTreeAppendChild(CFTreeRef tree, CFTreeRef newChild)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeAppendChild
	ENDIF

;  Inserts newSibling after tree.  tree and newSibling will have the same parent 

; *  CFTreeInsertSibling()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFTreeInsertSibling(CFTreeRef tree, CFTreeRef newSibling)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeInsertSibling
	ENDIF

;  Removes tree from its parent 

; *  CFTreeRemove()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFTreeRemove(CFTreeRef tree)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeRemove
	ENDIF

;  Removes all the children of tree 

; *  CFTreeRemoveAllChildren()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFTreeRemoveAllChildren(CFTreeRef tree)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeRemoveAllChildren
	ENDIF


; *  CFTreeSortChildren()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CFTreeSortChildren(CFTreeRef tree, CFComparatorFunction comparator, void *context)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFTreeSortChildren
	ENDIF

	ENDIF ; __CFTREE__ 


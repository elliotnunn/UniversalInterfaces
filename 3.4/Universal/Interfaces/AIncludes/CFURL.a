;
;    File:       CFURL.a
;
;    Contains:   CoreFoundation urls
;
;    Version:    Technology: Mac OS X
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1999-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CFURL__') = 'UNDEFINED' THEN
__CFURL__ SET 1

	IF &TYPE('__CFBASE__') = 'UNDEFINED' THEN
	include 'CFBase.a'
	ENDIF
	IF &TYPE('__CFDATA__') = 'UNDEFINED' THEN
	include 'CFData.a'
	ENDIF
	IF &TYPE('__CFSTRING__') = 'UNDEFINED' THEN
	include 'CFString.a'
	ENDIF
	IF &TYPE('__FILES__') = 'UNDEFINED' THEN
	include 'Files.a'
	ENDIF



; typedef long							CFURLPathStyle
kCFURLPOSIXPathStyle			EQU		0
kCFURLHFSPathStyle				EQU		1
kCFURLWindowsPathStyle			EQU		2


;  CFURLs are composed of two fundamental pieces - their string, and a 
;  (possibly NULL) base URL.  A relative URL is one in which the string 
;  by itself does not fully specify the URL (for instance "myDir/image.tiff"); 
;  an absolute URL is one in which the string does fully specify the URL 
;  ("file://localhost/myDir/image.tiff").  Absolute URLs always have NULL 
;  base URLs; however, it is possible for a URL to have a NULL base, and still 
;  not be absolute.  Such a URL has only a relative string, and cannot be 
;  resolved.  Two CFURLs are considered equal if and only if their strings 
;  are equal and their bases are equal.  In other words, 
;  "file://localhost/myDir/image.tiff" is NOT equal to the URL with relative 
;  string "myDir/image.tiff" and base URL "file://localhost/".  Clients that 
;  need these less strict form of equality should convert all URLs to their 
;  absolute form via CFURLCopyAbsoluteURL(), then compare the absolute forms. 

; *  CFURLGetTypeID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFTypeID CFURLGetTypeID(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLGetTypeID
	ENDIF

;  encoding will be used both to interpret the bytes of URLBytes, and to 
;  interpret any percent-escapes within the bytes. 

; *  CFURLCreateWithBytes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateWithBytes
	ENDIF

;  Escapes any character that is not 7-bit ASCII with the byte-code 
;  for the given encoding.  If escapeWhitespace is true, whitespace 
;  characters (' ', '\t', '\r', '\n') will be escaped also (desirable 
;  if embedding the URL into a larger text stream like HTML) 

; *  CFURLCreateData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFDataRef CFURLCreateData(CFAllocatorRef allocator, CFURLRef url, CFStringEncoding encoding, Boolean escapeWhitespace)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateData
	ENDIF

;  Any escape sequences in URLString will be interpreted via UTF-8. 

; *  CFURLCreateWithString()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateWithString
	ENDIF

;  filePath should be the URL's path expressed as a path of the type 
;  fsType.  If filePath is not absolute, the resulting URL will be 
;  considered relative to the current working directory (evaluated 
;  at creation time).  isDirectory determines whether filePath is 
;  treated as a directory path when resolving against relative path 
;  components 

; *  CFURLCreateWithFileSystemPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateWithFileSystemPath
	ENDIF


; *  CFURLCreateFromFileSystemRepresentation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateFromFileSystemRepresentation
	ENDIF


; *  CFURLCreateWithFileSystemPathRelativeToBase()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateWithFileSystemPathRelativeToBase
	ENDIF


; *  CFURLCreateFromFileSystemRepresentationRelativeToBase()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateFromFileSystemRepresentationRelativeToBase
	ENDIF

;  Fills buffer with the file system's native representation of 
;  url's path. No more than maxBufLen bytes are written to buffer. 
;  The buffer should be at least the maximum path length for 
;  the file system in question to avoid failures for insufficiently 
;  large buffers.  If resolveAgainstBase is true, the url's relative 
;  portion is resolved against its base before the path is computed. 
;  Returns success or failure. 

; *  CFURLGetFileSystemRepresentation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLGetFileSystemRepresentation
	ENDIF

;  Creates a new URL by resolving the relative portion of relativeURL against its base. 

; *  CFURLCopyAbsoluteURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyAbsoluteURL
	ENDIF

;  Returns the URL's string. 

; *  CFURLGetString()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLGetString(CFURLRef anURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLGetString
	ENDIF

;  Returns the base URL if it exists 

; *  CFURLGetBaseURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLGetBaseURL(CFURLRef anURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLGetBaseURL
	ENDIF

; 
;All URLs can be broken into two pieces - the scheme (preceding the
;first colon) and the resource specifier (following the first colon).
;Most URLs are also "standard" URLs conforming to RFC 1808 (available
;from www.w3c.org).  This category includes URLs of the file, http,
;https, and ftp schemes, to name a few.  Standard URLs start the
;resource specifier with two slashes ("//"), and can be broken into
;four distinct pieces - the scheme, the net location, the path, and
;further resource specifiers (typically an optional parameter, query,
;and/or fragment).  The net location appears immediately following
;the two slashes and goes up to the next slash; it's format is
;scheme-specific, but is usually composed of some or all of a username,
;password, host name, and port.  The path is a series of path components
;separated by slashes; if the net location is present, the path always
;begins with a slash.  Standard URLs can be relative to another URL,
;in which case at least the scheme and possibly other pieces as well
;come from the base URL (see RFC 1808 for precise details when resolving
;a relative URL against its base).  The full URL is therefore
;
;<scheme> "://" <net location> <path, always starting with slash> <add'l resource specifiers>
;
;If a given CFURL can be decomposed (that is, conforms to RFC 1808), you
;can ask for each of the four basic pieces (scheme, net location, path,
;and resource specifer) separately, as well as for its base URL.  The
;basic pieces are returned with any percent escape sequences still in
;place (although note that the scheme may not legally include any
;percent escapes); this is to allow the caller to distinguish between
;percent sequences that may have syntactic meaning if replaced by the
;character being escaped (for instance, a '/' in a path component).
;Since only the individual schemes know which characters are
;syntactically significant, CFURL cannot safely replace any percent
;escape sequences.  However, you can use
;CFURLCreateStringByReplacingPercentEscapes() to create a new string with
;the percent escapes removed; see below.
;
;If a given CFURL can not be decomposed, you can ask for its scheme and its
;resource specifier; asking it for its net location or path will return NULL.
;
;To get more refined information about the components of a decomposable
;CFURL, you may ask for more specific pieces of the URL, expressed with
;the percent escapes removed.  The available functions are CFURLCopyHostName(),
;CFURLGetPortNumber() (returns an Int32), CFURLCopyUserName(),
;CFURLCopyPassword(), CFURLCopyQuery(), CFURLCopyParameters(), and
;CFURLCopyFragment().  Because the parameters, query, and fragment of an
;URL may contain scheme-specific syntaxes, these methods take a second
;argument, giving a list of characters which should NOT be replaced if
;percent escaped.  For instance, the ftp parameter syntax gives simple
;key-value pairs as "<key>=<value>;"  Clearly if a key or value includes
;either '=' or ';', it must be escaped to avoid corrupting the meaning of
;the parameters, so the caller may request the parameter string as
;
;CFStringRef myParams = CFURLCopyParameters(ftpURL, CFSTR("=;%"));
;
;requesting that all percent escape sequences be replaced by the represented
;characters, except for escaped '=', '%' or ';' characters.  Pass the empty
;string (CFSTR("")) to request that all percent escapes be replaced, or NULL
;to request that none be.
;

;  Returns TRUE if anURL conforms to RFC 1808 

; *  CFURLCanBeDecomposed()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFURLCanBeDecomposed(CFURLRef anURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCanBeDecomposed
	ENDIF

;  The next several methods leave any percent escape sequences intact 

; *  CFURLCopyScheme()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyScheme(CFURLRef anURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyScheme
	ENDIF

;  NULL if CFURLCanBeDecomposed(anURL) is FALSE 

; *  CFURLCopyNetLocation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyNetLocation(CFURLRef anURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyNetLocation
	ENDIF

;  NULL if CFURLCanBeDecomposed(anURL) is FALSE; also does not resolve the URL 
;  against its base.  See also CFURLCopyAbsoluteURL().  Note that, strictly 
;  speaking, any leading '/' is not considered part of the URL's path, although 
;  its presence or absence determines whether the path is absolute. 
;  CFURLCopyPath()'s return value includes any leading slash (giving the path 
;  the normal POSIX appearance); CFURLCopyStrictPath()'s return value omits any 
;  leading slash, and uses isAbsolute to report whether the URL's path is absolute. 
;  CFURLCopyFileSystemPath() returns the URL's path as a file system path for the 
;  given path style.  All percent escape sequences are replaced.  The URL is not 
;  resolved against its base before computing the path. 

; *  CFURLCopyPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyPath(CFURLRef anURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyPath
	ENDIF


; *  CFURLCopyStrictPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyStrictPath(CFURLRef anURL, Boolean *isAbsolute)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyStrictPath
	ENDIF


; *  CFURLCopyFileSystemPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyFileSystemPath
	ENDIF

;  Returns whether anURL's path represents a directory 
;  (TRUE returned) or a simple file (FALSE returned) 

; *  CFURLHasDirectoryPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFURLHasDirectoryPath(CFURLRef anURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLHasDirectoryPath
	ENDIF

;  Any additional resource specifiers after the path.  For URLs 
;  that cannot be decomposed, this is everything except the scheme itself. 

; *  CFURLCopyResourceSpecifier()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyResourceSpecifier(CFURLRef anURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyResourceSpecifier
	ENDIF


; *  CFURLCopyHostName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyHostName(CFURLRef anURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyHostName
	ENDIF


; *  CFURLGetPortNumber()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern SInt32 CFURLGetPortNumber(CFURLRef anURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLGetPortNumber
	ENDIF

;  Returns -1 if no port number is specified 

; *  CFURLCopyUserName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyUserName(CFURLRef anURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyUserName
	ENDIF


; *  CFURLCopyPassword()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyPassword(CFURLRef anURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyPassword
	ENDIF

;  These remove all percent escape sequences except those for 
;  characters in charactersToLeaveEscaped.  If charactersToLeaveEscaped 
;  is empty (""), all percent escape sequences are replaced by their 
;  corresponding characters.  If charactersToLeaveEscaped is NULL, 
;  then no escape sequences are removed at all 

; *  CFURLCopyParameterString()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyParameterString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyParameterString
	ENDIF


; *  CFURLCopyQueryString()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyQueryString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyQueryString
	ENDIF


; *  CFURLCopyFragment()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyFragment(CFURLRef anURL, CFStringRef charactersToLeaveEscaped)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyFragment
	ENDIF


; *  CFURLCopyLastPathComponent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyLastPathComponent
	ENDIF


; *  CFURLCopyPathExtension()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCopyPathExtension(CFURLRef url)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCopyPathExtension
	ENDIF

;  These functions all treat the base URL of the supplied url as 
;  invariant.  In other words, the URL returned will always have 
;  the same base as the URL supplied as an argument. 

; *  CFURLCreateCopyAppendingPathComponent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateCopyAppendingPathComponent
	ENDIF


; *  CFURLCreateCopyDeletingLastPathComponent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateCopyDeletingLastPathComponent
	ENDIF


; *  CFURLCreateCopyAppendingPathExtension()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLCreateCopyAppendingPathExtension(CFAllocatorRef allocator, CFURLRef url, CFStringRef extension)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateCopyAppendingPathExtension
	ENDIF


; *  CFURLCreateCopyDeletingPathExtension()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator, CFURLRef url)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateCopyDeletingPathExtension
	ENDIF

;  Returns a string with any percent escape sequences that do NOT 
;  correspond to characters in charactersToLeaveEscaped with their 
;  equivalent.  Returns NULL on failure (if an invalid percent sequence 
;  is encountered), or the original string (retained) if no characters 
;  need to be replaced. Pass NULL to request that no percent escapes be 
;  replaced, or the empty string (CFSTR("")) to request that all percent 
;  escapes be replaced. Uses UTF8 to interpret percent escapes. 

; *  CFURLCreateStringByReplacingPercentEscapes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateStringByReplacingPercentEscapes
	ENDIF


; *  CFURLCreateStringByAddingPercentEscapes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveUnescaped, CFStringRef legalURLCharactersToBeEscaped, CFStringEncoding encoding)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateStringByAddingPercentEscapes
	ENDIF


; *  CFURLCreateFromFSRef()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFURLRef CFURLCreateFromFSRef(CFAllocatorRef allocator, const FSRef *fsRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLCreateFromFSRef
	ENDIF


; *  CFURLGetFSRef()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean CFURLGetFSRef(CFURLRef url, FSRef *fsRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFURLGetFSRef
	ENDIF

	ENDIF ; __CFURL__ 


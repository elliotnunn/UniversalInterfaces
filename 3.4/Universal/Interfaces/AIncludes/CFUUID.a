;
;    File:       CFUUID.a
;
;    Contains:   CoreFoundation UUIDs
;
;    Version:    Technology: Mac OS X
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1999-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CFUUID__') = 'UNDEFINED' THEN
__CFUUID__ SET 1

	IF &TYPE('__CFBASE__') = 'UNDEFINED' THEN
	include 'CFBase.a'
	ENDIF
	IF &TYPE('__CFSTRING__') = 'UNDEFINED' THEN
	include 'CFString.a'
	ENDIF



CFUUIDBytes				RECORD 0
byte0					 ds.b	1				; offset: $0 (0)
byte1					 ds.b	1				; offset: $1 (1)
byte2					 ds.b	1				; offset: $2 (2)
byte3					 ds.b	1				; offset: $3 (3)
byte4					 ds.b	1				; offset: $4 (4)
byte5					 ds.b	1				; offset: $5 (5)
byte6					 ds.b	1				; offset: $6 (6)
byte7					 ds.b	1				; offset: $7 (7)
byte8					 ds.b	1				; offset: $8 (8)
byte9					 ds.b	1				; offset: $9 (9)
byte10					 ds.b	1				; offset: $A (10)
byte11					 ds.b	1				; offset: $B (11)
byte12					 ds.b	1				; offset: $C (12)
byte13					 ds.b	1				; offset: $D (13)
byte14					 ds.b	1				; offset: $E (14)
byte15					 ds.b	1				; offset: $F (15)
sizeof					 EQU *					; size:   $10 (16)
						ENDR
;  The CFUUIDBytes struct is a 128-bit struct that contains the
;raw UUID.  A CFUUIDRef can provide such a struct from the
;CFUUIDGetUUIDBytes() function.  This struct is suitable for
;passing to APIs that expect a raw UUID.
;


; *  CFUUIDGetTypeID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFTypeID CFUUIDGetTypeID(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFUUIDGetTypeID
	ENDIF


; *  CFUUIDCreate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFUUIDCreate
	ENDIF

;  Create and return a brand new unique identifier 

; *  CFUUIDCreateWithBytes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFUUIDRef CFUUIDCreateWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFUUIDCreateWithBytes
	ENDIF

;  Create and return an identifier with the given contents.  This may return an existing instance with its ref count bumped because of uniquing. 

; *  CFUUIDCreateFromString()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFUUIDCreateFromString
	ENDIF

;  Converts from a string representation to the UUID.  This may return an existing instance with its ref count bumped because of uniquing. 

; *  CFUUIDCreateString()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFUUIDCreateString
	ENDIF

;  Converts from a UUID to its string representation. 

; *  CFUUIDGetConstantUUIDWithBytes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFUUIDRef CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFUUIDGetConstantUUIDWithBytes
	ENDIF

;  This returns an immortal CFUUIDRef that should not be released.  It can be used in headers to declare UUID constants with #define. 

; *  CFUUIDGetUUIDBytes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFUUIDGetUUIDBytes
	ENDIF


; *  CFUUIDCreateFromUUIDBytes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CFUUIDCreateFromUUIDBytes
	ENDIF

	ENDIF ; __CFUUID__ 


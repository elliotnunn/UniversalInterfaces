;
;    File:       CGAffineTransform.a
;
;    Contains:   xxx put contents here xxx
;
;    Version:    Technology: from CoreGraphics-70.root
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 2000-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CGAFFINETRANSFORM__') = 'UNDEFINED' THEN
__CGAFFINETRANSFORM__ SET 1

	IF &TYPE('__CGBASE__') = 'UNDEFINED' THEN
	include 'CGBase.a'
	ENDIF
	IF &TYPE('__CGGEOMETRY__') = 'UNDEFINED' THEN
	include 'CGGeometry.a'
	ENDIF

CGAffineTransform		RECORD 0
a						 ds		Float32			; offset: $0 (0)
b						 ds		Float32			; offset: $4 (4)
c						 ds		Float32			; offset: $8 (8)
d						 ds		Float32			; offset: $C (12)
tx						 ds		Float32			; offset: $10 (16)
ty						 ds		Float32			; offset: $14 (20)
sizeof					 EQU *					; size:   $18 (24)
						ENDR
;  The identity transform: [ 1 0 0 1 0 0 ]. 

; *  CGAffineTransformIdentity
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;  Return the transform [ a b c d tx ty ]. 

; *  CGAffineTransformMake()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGAffineTransform CGAffineTransformMake(float a, float b, float c, float d, float tx, float ty)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGAffineTransformMake
	ENDIF

;  Return a transform which translates by `(tx, ty)':
; *   t' = [ 1 0 0 1 tx ty ] 

; *  CGAffineTransformMakeTranslation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGAffineTransform CGAffineTransformMakeTranslation(float tx, float ty)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGAffineTransformMakeTranslation
	ENDIF

;  Return a transform which scales by `(sx, sy)':
; *   t' = [ sx 0 0 sy 0 0 ] 

; *  CGAffineTransformMakeScale()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGAffineTransform CGAffineTransformMakeScale(float sx, float sy)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGAffineTransformMakeScale
	ENDIF

;  Return a transform which rotates by `angle' radians:
; *   t' = [ cos(angle) sin(angle) -sin(angle) cos(angle) 0 0 ] 

; *  CGAffineTransformMakeRotation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGAffineTransform CGAffineTransformMakeRotation(float angle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGAffineTransformMakeRotation
	ENDIF

;  Translate `t' by `(tx, ty)' and return the result:
; *   t' = [ 1 0 0 1 tx ty ] * t 

; *  CGAffineTransformTranslate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGAffineTransform CGAffineTransformTranslate(CGAffineTransform t, float tx, float ty)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGAffineTransformTranslate
	ENDIF

;  Scale `t' by `(sx, sy)' and return the result:
; *   t' = [ sx 0 0 sy 0 0 ] * t 

; *  CGAffineTransformScale()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGAffineTransform CGAffineTransformScale(CGAffineTransform t, float sx, float sy)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGAffineTransformScale
	ENDIF

;  Rotate `t' by `angle' radians and return the result:
; *   t' =  [ cos(angle) sin(angle) -sin(angle) cos(angle) 0 0 ] * t 

; *  CGAffineTransformRotate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGAffineTransform CGAffineTransformRotate(CGAffineTransform t, float angle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGAffineTransformRotate
	ENDIF

;  Invert `t' and return the result.  If `t' has zero determinant, then `t'
; * is returned unchanged. 

; *  CGAffineTransformInvert()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGAffineTransform CGAffineTransformInvert(CGAffineTransform t)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGAffineTransformInvert
	ENDIF

;  Concatenate `t2' to `t1' and returne the result:
; *   t' = t1 * t2 

; *  CGAffineTransformConcat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGAffineTransform CGAffineTransformConcat(CGAffineTransform t1, CGAffineTransform t2)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGAffineTransformConcat
	ENDIF

;  Transform `point' by `t' and return the result:
; *   p' = p * t
; * where p = [ x y 1 ]. 


; *  CGPointApplyAffineTransform()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform t)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGPointApplyAffineTransform
	ENDIF

;  Transform `size' by `t' and return the result:
; *   s' = s * t
; * where s = [ width height 0 ]. 


; *  CGSizeApplyAffineTransform()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGSize CGSizeApplyAffineTransform(CGSize size, CGAffineTransform t)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGSizeApplyAffineTransform
	ENDIF



	ENDIF ; __CGAFFINETRANSFORM__ 


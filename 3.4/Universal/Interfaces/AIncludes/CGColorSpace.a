;
;    File:       CGColorSpace.a
;
;    Contains:   xxx put contents here xxx
;
;    Version:    Technology: from CoreGraphics-70.root
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 2000-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CGCOLORSPACE__') = 'UNDEFINED' THEN
__CGCOLORSPACE__ SET 1

	IF &TYPE('__CGBASE__') = 'UNDEFINED' THEN
	include 'CGBase.a'
	ENDIF
	IF &TYPE('__CGDATAPROVIDER__') = 'UNDEFINED' THEN
	include 'CGDataProvider.a'
	ENDIF




; typedef long							CGColorRenderingIntent
kCGRenderingIntentDefault		EQU		0
kCGRenderingIntentAbsoluteColorimetric EQU 1
kCGRenderingIntentRelativeColorimetric EQU 2
kCGRenderingIntentPerceptual	EQU		3
kCGRenderingIntentSaturation	EQU		4

; * Device-dependent color spaces.  *
;  Create a DeviceGray colorspace. 

; *  CGColorSpaceCreateDeviceGray()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGColorSpaceRef CGColorSpaceCreateDeviceGray(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGColorSpaceCreateDeviceGray
	ENDIF

;  Create a DeviceRGB colorspace. 

; *  CGColorSpaceCreateDeviceRGB()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGColorSpaceCreateDeviceRGB
	ENDIF

;  Create a DeviceCMYK colorspace. 

; *  CGColorSpaceCreateDeviceCMYK()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGColorSpaceRef CGColorSpaceCreateDeviceCMYK(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGColorSpaceCreateDeviceCMYK
	ENDIF

; * Device-independent color spaces. *
;  Create a calibrated gray colorspace.  `whitePoint' is an array of 3
; * numbers specifying the tristimulus value, in the CIE 1931 XYZ-space, of
; * the diffuse white point.  `blackPoint' is an array of 3 numbers
; * specifying the tristimulus value, in CIE 1931 XYZ-space, of the diffuse
; * black point. `gamma' defines the gamma for the gray component. 


; *  CGColorSpaceCreateCalibratedGray()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGColorSpaceRef CGColorSpaceCreateCalibratedGray(const float whitePoint[3], const float blackPoint[3], float gamma)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGColorSpaceCreateCalibratedGray
	ENDIF

;  Create a calibrated RGB colorspace.  `whitePoint' is an array of 3
; * numbers specifying the tristimulus value, in the CIE 1931 XYZ-space, of
; * the diffuse white point.  `blackPoint' is an array of 3 numbers
; * specifying the tristimulus value, in CIE 1931 XYZ-space, of the diffuse
; * black point. `gamma' is an array of 3 numbers specifying the gamma for
; * the red, green, and blue components of the color space. `matrix' is an
; * array of 9 numbers specifying the linear interpretation of the
; * gamma-modified RGB values of the colorspace with respect to the final
; * XYZ representation. 


; *  CGColorSpaceCreateCalibratedRGB()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGColorSpaceRef CGColorSpaceCreateCalibratedRGB(const float whitePoint[3], const float blackPoint[3], const float gamma[3], const float matrix[9])
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGColorSpaceCreateCalibratedRGB
	ENDIF

;  Create an L*a*b* colorspace.  `whitePoint' is an array of 3 numbers
; * specifying the tristimulus value, in the CIE 1931 XYZ-space, of the
; * diffuse white point.  `blackPoint' is an array of 3 numbers specifying
; * the tristimulus value, in CIE 1931 XYZ-space, of the diffuse black
; * point. `range' is an array of four numbers specifying the range of valid
; * values for the a* and b* components of the color space. 


; *  CGColorSpaceCreateLab()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGColorSpaceRef CGColorSpaceCreateLab(const float whitePoint[3], const float blackPoint[3], const float range[4])
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGColorSpaceCreateLab
	ENDIF

;  Create an ICC-based colorspace.  `nComponents' specifies the number of
; * color components in the color space defined by the ICC profile data.
; * This must match the number of components actually in the ICC profile,
; * must be 1, 3, or 4.  `range' is an array of 2*nComponents numbers
; * specifying the minimum and maximum valid values of the corresponding
; * color components, so that for color component k, range[2*k] <= c[k] <=
; * range[2*k+1], where c[k] is the k'th color component.  `profile' is a
; * data provider specifying the ICC profile.  `alternate' specifies an
; * alternate colorspace to be used in case the ICC profile is no supported.
; * It must have `nComponents' color components. If `alternate' is NULL,
; * then the color space used will be DeviceGray, DeviceRGB, or DeviceCMYK,
; * depending on whether `nComponents' is 1, 3, or 4, respectively. 


; *  CGColorSpaceCreateICCBased()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGColorSpaceRef CGColorSpaceCreateICCBased(size_t nComponents, const float *range, CGDataProviderRef profile, CGColorSpaceRef alternateSpace)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGColorSpaceCreateICCBased
	ENDIF

; * Special colorspaces. *
;  Create an indexed colorspace.  A sample value in an indexed color space
; * is treated as an index into the color table of the color space.  `base'
; * specifies the base color space in which the values in the color table
; * are to be interpreted. `lastIndex' is an integer which specifies the
; * maximum valid index value; it must be less than or equal to 255.
; * `colorTable' is an array of m * (lastIndex + 1) bytes, where m is
; * the number of color components in the base color space.  Each byte
; * is an unsigned integer in the range 0 to 255 that is scaled to the
; * range of the corresponding color component in the base color space. 


; *  CGColorSpaceCreateIndexed()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGColorSpaceRef CGColorSpaceCreateIndexed(CGColorSpaceRef baseSpace, size_t lastIndex, const unsigned char *colorTable)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGColorSpaceCreateIndexed
	ENDIF

; * Colorspace information. *
;  Return the number of color components supported by the colorspace `cs'. 

; *  CGColorSpaceGetNumberOfComponents()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef cs)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGColorSpaceGetNumberOfComponents
	ENDIF

; * Retaining & releasing colorspaces. *
;  Increment the retain count of `cs' and return it.  All colorspaces are
; * created with an initial retain count of 1. 

; *  CGColorSpaceRetain()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef cs)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGColorSpaceRetain
	ENDIF

;  Decrement the retain count of `cs'.  If the retain count reaches 0, then
; * release it and any associated resources. 

; *  CGColorSpaceRelease()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGColorSpaceRelease(CGColorSpaceRef cs)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGColorSpaceRelease
	ENDIF

	ENDIF ; __CGCOLORSPACE__ 


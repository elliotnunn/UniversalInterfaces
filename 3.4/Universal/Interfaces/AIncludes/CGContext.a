;
;    File:       CGContext.a
;
;    Contains:   xxx put contents here xxx
;
;    Version:    Technology: from CoreGraphics-93.14
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 2000-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;

	IF &TYPE('__CGCONTEXT__') = 'UNDEFINED' THEN
__CGCONTEXT__ SET 1

	IF &TYPE('__CGBASE__') = 'UNDEFINED' THEN
	include 'CGBase.a'
	ENDIF
	IF &TYPE('__CGAFFINETRANSFORM__') = 'UNDEFINED' THEN
	include 'CGAffineTransform.a'
	ENDIF
	IF &TYPE('__CGCOLORSPACE__') = 'UNDEFINED' THEN
	include 'CGColorSpace.a'
	ENDIF
	IF &TYPE('__CGFONT__') = 'UNDEFINED' THEN
	include 'CGFont.a'
	ENDIF
	IF &TYPE('__CGIMAGE__') = 'UNDEFINED' THEN
	include 'CGImage.a'
	ENDIF
	IF &TYPE('__CGPDFDOCUMENT__') = 'UNDEFINED' THEN
	include 'CGPDFDocument.a'
	ENDIF



;  Line join styles. 

; typedef long							CGLineJoin
kCGLineJoinMiter				EQU		0
kCGLineJoinRound				EQU		1
kCGLineJoinBevel				EQU		2
;  Line cap styles. 

; typedef long							CGLineCap
kCGLineCapButt					EQU		0
kCGLineCapRound					EQU		1
kCGLineCapSquare				EQU		2
;  Drawing modes for paths. 

; typedef long							CGPathDrawingMode
kCGPathFill						EQU		0
kCGPathEOFill					EQU		1
kCGPathStroke					EQU		2
kCGPathFillStroke				EQU		3
kCGPathEOFillStroke				EQU		4
;  Drawing modes for text. 

; typedef long							CGTextDrawingMode
kCGTextFill						EQU		0
kCGTextStroke					EQU		1
kCGTextFillStroke				EQU		2
kCGTextInvisible				EQU		3
kCGTextFillClip					EQU		4
kCGTextStrokeClip				EQU		5
kCGTextFillStrokeClip			EQU		6
kCGTextClip						EQU		7
;  Text encodings. 

; typedef long							CGTextEncoding
kCGEncodingFontSpecific			EQU		0
kCGEncodingMacRoman				EQU		1
; * Graphics state functions. *
;  Push a copy of the current graphics state onto the graphics state
; * stack. Note that the path is not considered part of the gstate, and is
; * not saved. 


; *  CGContextSaveGState()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSaveGState(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSaveGState
	ENDIF

;  Restore the current graphics state from the one on the top of the
; * graphics state stack, popping the graphics state stack in the
; * process. 


; *  CGContextRestoreGState()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextRestoreGState(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextRestoreGState
	ENDIF

; * Coordinate space transformations. *
;  Scale the current graphics state's transformation matrix (the CTM) by
; * `(sx, sy)'. 

; *  CGContextScaleCTM()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextScaleCTM(CGContextRef ctx, float sx, float sy)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextScaleCTM
	ENDIF

;  Translate the current graphics state's transformation matrix (the CTM)
; * by `(tx, ty)'. 

; *  CGContextTranslateCTM()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextTranslateCTM(CGContextRef ctx, float tx, float ty)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextTranslateCTM
	ENDIF

;  Rotate the current graphics state's transformation matrix (the CTM) by
; * `angle' radians. 

; *  CGContextRotateCTM()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextRotateCTM(CGContextRef ctx, float angle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextRotateCTM
	ENDIF

;  Concatenate the current graphics state's transformation matrix (the CTM)
; * with the affine transform `transform'. 

; *  CGContextConcatCTM()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextConcatCTM(CGContextRef ctx, CGAffineTransform transform)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextConcatCTM
	ENDIF

;  Return the current graphics state's transformation matrix. 

; *  CGContextGetCTM()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGAffineTransform CGContextGetCTM(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextGetCTM
	ENDIF

; * Drawing attribute functions. *
;  Set the line width in the current graphics state to `width'. 

; *  CGContextSetLineWidth()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetLineWidth(CGContextRef ctx, float width)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetLineWidth
	ENDIF

;  Set the line cap in the current graphics state to `cap'. 

; *  CGContextSetLineCap()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetLineCap(CGContextRef ctx, CGLineCap cap)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetLineCap
	ENDIF

;  Set the line join in the current graphics state to `join'. 

; *  CGContextSetLineJoin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetLineJoin(CGContextRef ctx, CGLineJoin join)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetLineJoin
	ENDIF

;  Set the miter limit in the current graphics state to `limit'. 

; *  CGContextSetMiterLimit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetMiterLimit(CGContextRef ctx, float limit)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetMiterLimit
	ENDIF

;  Set the line dash patttern in the current graphics state. 

; *  CGContextSetLineDash()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetLineDash(CGContextRef ctx, float phase, const float lengths[], size_t count)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetLineDash
	ENDIF

;  Set the path flatness parameter in the current graphics state to
; * `flatness'. 

; *  CGContextSetFlatness()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetFlatness(CGContextRef ctx, float flatness)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetFlatness
	ENDIF

;  Set the alpha value in the current graphics state to `alpha'. 

; *  CGContextSetAlpha()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetAlpha(CGContextRef ctx, float alpha)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetAlpha
	ENDIF

; * Path construction functions. *
;  Note that a context has a single path in use at any time: a path is not
; * part of the graphics state. 
;  Begin a new path.  The old path is discarded. 

; *  CGContextBeginPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextBeginPath(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextBeginPath
	ENDIF

;  Start a new subpath at point `(x, y)' in the context's path. 

; *  CGContextMoveToPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextMoveToPoint(CGContextRef ctx, float x, float y)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextMoveToPoint
	ENDIF

;  Append a straight line segment from the current point to `(x, y)'. 

; *  CGContextAddLineToPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextAddLineToPoint(CGContextRef ctx, float x, float y)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextAddLineToPoint
	ENDIF

;  Append a cubic Bezier curve from the current point to `(x,y)', with
; * control points `(cp1x, cp1y)' and `(cp2x, cp2y)'. 

; *  CGContextAddCurveToPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextAddCurveToPoint(CGContextRef ctx, float cp1x, float cp1y, float cp2x, float cp2y, float x, float y)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextAddCurveToPoint
	ENDIF

;  Append a quadratic curve from the current point to `(x, y)', with
; * control point `(cpx, cpy)'. 

; *  CGContextAddQuadCurveToPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextAddQuadCurveToPoint(CGContextRef ctx, float cpx, float cpy, float x, float y)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextAddQuadCurveToPoint
	ENDIF

;  Close the current subpath of the context's path. 

; *  CGContextClosePath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextClosePath(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextClosePath
	ENDIF

; * Path construction convenience functions. *
;  Add a single rect to the context's path. 

; *  CGContextAddRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextAddRect(CGContextRef ctx, CGRect rect)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextAddRect
	ENDIF

;  Add a set of rects to the context's path. 

; *  CGContextAddRects()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextAddRects(CGContextRef ctx, const CGRect rects[], size_t count)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextAddRects
	ENDIF

;  Add a set of lines to the context's path. 

; *  CGContextAddLines()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextAddLines(CGContextRef ctx, const CGPoint points[], size_t count)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextAddLines
	ENDIF

;  Add an arc of a circle to the context's path, possibly preceded by a
; * straight line segment.  `(x, y)' is the center of the arc; `radius' is
; * its radius; `startAngle' is the angle to the first endpoint of the arc;
; * `endAngle' is the angle to the second endpoint of the arc; and
; * `clockwise' is 1 if the arc is to be drawn clockwise, 0 otherwise.
; * `startAngle' and `endAngle' are measured in radians. 


; *  CGContextAddArc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextAddArc(CGContextRef ctx, float x, float y, float radius, float startAngle, float endAngle, int clockwise)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextAddArc
	ENDIF

;  Add an arc of a circle to the context's path, possibly preceded by a
; * straight line segment.  `radius' is the radius of the arc.  The arc is
; * tangent to the line from the current point to `(x1, y1)', and the line
; * from `(x1, y1)' to `(x2, y2)'. 


; *  CGContextAddArcToPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextAddArcToPoint(CGContextRef ctx, float x1, float y1, float x2, float y2, float radius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextAddArcToPoint
	ENDIF

; * Path information functions. *
;  Return 1 if the context's path contains no elements, 0 otherwise. 

; *  CGContextIsPathEmpty()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern int CGContextIsPathEmpty(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextIsPathEmpty
	ENDIF

;  Return the current point of the current subpath of the context's
; * path. 

; *  CGContextGetPathCurrentPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGPoint CGContextGetPathCurrentPoint(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextGetPathCurrentPoint
	ENDIF

;  Return the bounding box of the context's path.  The bounding box is the
; * smallest rectangle completely enclosing all points in the path,
; * including control points for Bezier and quadratic curves. 


; *  CGContextGetPathBoundingBox()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGRect CGContextGetPathBoundingBox(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextGetPathBoundingBox
	ENDIF

; * Path drawing functions. *
;  Draw the context's path using drawing mode `mode'. 

; *  CGContextDrawPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextDrawPath(CGContextRef ctx, CGPathDrawingMode mode)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextDrawPath
	ENDIF

; * Path drawing convenience functions. *
;  Fill the context's path using the winding-number fill rule.  Any open
; * subpath of the path is implicitly closed. 

; *  CGContextFillPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextFillPath(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextFillPath
	ENDIF

;  Fill the context's path using the even-odd fill rule.  Any open subpath
; * of the path is implicitly closed. 

; *  CGContextEOFillPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextEOFillPath(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextEOFillPath
	ENDIF

;  Stroke the context's path. 

; *  CGContextStrokePath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextStrokePath(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextStrokePath
	ENDIF

;  Fill `rect' with the current fill color. 

; *  CGContextFillRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextFillRect(CGContextRef ctx, CGRect rect)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextFillRect
	ENDIF

;  Fill `rects', an array of `count' CGRects, with the current fill
; * color. 

; *  CGContextFillRects()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextFillRects(CGContextRef ctx, const CGRect rects[], size_t count)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextFillRects
	ENDIF

;  Stroke `rect' with the current stroke color and the current linewidth. 

; *  CGContextStrokeRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextStrokeRect(CGContextRef ctx, CGRect rect)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextStrokeRect
	ENDIF

;  Stroke `rect' with the current stroke color, using `width' as the the
; * line width. 

; *  CGContextStrokeRectWithWidth()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextStrokeRectWithWidth(CGContextRef ctx, CGRect rect, float width)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextStrokeRectWithWidth
	ENDIF

;  Clear `rect' (that is, set the region within the rect to
; * transparent). 

; *  CGContextClearRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextClearRect(CGContextRef c, CGRect rect)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextClearRect
	ENDIF

; * Clipping functions. *
;  Intersect the context's path with the current clip path and use the
; * resulting path as the clip path for subsequent rendering operations.
; * Use the winding-number fill rule for deciding what's inside the path. 


; *  CGContextClip()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextClip(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextClip
	ENDIF

;  Intersect the context's path with the current clip path and use the
; * resulting path as the clip path for subsequent rendering operations.
; * Use the even-odd fill rule for deciding what's inside the path. 


; *  CGContextEOClip()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextEOClip(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextEOClip
	ENDIF

; * Clipping convenience functions. *
;  Intersect the current clipping path with `rect'.  Note that this
; * function resets the context's path to the empty path. 

; *  CGContextClipToRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextClipToRect(CGContextRef ctx, CGRect rect)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextClipToRect
	ENDIF

;  Intersect the current clipping path with the clipping region formed by
; * creating a path consisting of all rects in `rects'.  Note that this
; * function resets the context's path to the empty path. 


; *  CGContextClipToRects()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextClipToRects(CGContextRef ctx, const CGRect rects[], size_t count)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextClipToRects
	ENDIF

; * Colorspace functions. *
;  Set the fill colorspace in the current graphics state to `colorspace'.
; * As a side-effect, set the current fill color to a default value
; * appropriate for the colorspace. 


; *  CGContextSetFillColorSpace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetFillColorSpace(CGContextRef ctx, CGColorSpaceRef colorspace)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetFillColorSpace
	ENDIF

;  Set the stroke colorspace in the current graphics state to `colorspace'.
; * As a side-effect, set the current stroke color to a default value
; * appropriate for the colorspace. 


; *  CGContextSetStrokeColorSpace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetStrokeColorSpace(CGContextRef ctx, CGColorSpaceRef colorspace)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetStrokeColorSpace
	ENDIF

; * Color functions. *
;  Set the fill color in the current graphics state to the values specifed
; * by `value'.  The number of elements in `value' must be equal to the
; * number of components in the current colorspace. 


; *  CGContextSetFillColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetFillColor(CGContextRef ctx, const float value[])
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetFillColor
	ENDIF

;  Set the current stroke color in the current graphics state to the values
; * specifed by `value'.  The number of elements in `value' must be equal to
; * the number of components in the current colorspace. 


; *  CGContextSetStrokeColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetStrokeColor(CGContextRef ctx, const float value[])
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetStrokeColor
	ENDIF

; * Color convenience functions. *
;  Set the current fill color to `(gray, alpha)' in the `DeviceGray'
; * colorspace. 

; *  CGContextSetGrayFillColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetGrayFillColor(CGContextRef ctx, float gray, float alpha)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetGrayFillColor
	ENDIF

;  Set the current stroke color to `(gray, alpha)' in the `DeviceGray'
; * colorspace. 

; *  CGContextSetGrayStrokeColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetGrayStrokeColor(CGContextRef ctx, float gray, float alpha)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetGrayStrokeColor
	ENDIF

;  Set the current fill color to `(r, g, b, alpha)' in the `DeviceRGB'
; * colorspace. 

; *  CGContextSetRGBFillColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetRGBFillColor(CGContextRef ctx, float r, float g, float b, float alpha)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetRGBFillColor
	ENDIF

;  Set the current stroke color to `(r, g, b, alpha)' in the `DeviceRGB'
; * colorspace. 

; *  CGContextSetRGBStrokeColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetRGBStrokeColor(CGContextRef ctx, float r, float g, float b, float alpha)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetRGBStrokeColor
	ENDIF

;  Set the current fill color to `(c, m, y, k, alpha)' in the `DeviceCMYK'
; * colorspace. 

; *  CGContextSetCMYKFillColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetCMYKFillColor(CGContextRef ctx, float c, float m, float y, float k, float alpha)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetCMYKFillColor
	ENDIF

;  Set the current stroke color to `(c, m, y, k, alpha)' in the
; * `DeviceCMYK' colorspace. 

; *  CGContextSetCMYKStrokeColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetCMYKStrokeColor(CGContextRef ctx, float c, float m, float y, float k, float alpha)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetCMYKStrokeColor
	ENDIF

; * Rendering intent. *
;  Set the rendering intent in the graphics state to `intent'. 

; *  CGContextSetRenderingIntent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetRenderingIntent(CGContextRef c, CGColorRenderingIntent intent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetRenderingIntent
	ENDIF

; * Image functions. *
;  Draw `image' in the rectangular area specified by `rect'.  The image is
; * scaled, if necessary, to fit into `rect'. 

; *  CGContextDrawImage()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextDrawImage(CGContextRef ctx, CGRect rect, CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextDrawImage
	ENDIF

; * Text functions. *
;  Set the character spacing to `spacing'.  The character spacing is added
; * to the displacement between the origin of one character and the origin
; * of the next. 


; *  CGContextSetCharacterSpacing()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetCharacterSpacing(CGContextRef ctx, float spacing)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetCharacterSpacing
	ENDIF

;  Set the user-space point at which text will be drawn to (x,y). 

; *  CGContextSetTextPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetTextPosition(CGContextRef ctx, float x, float y)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetTextPosition
	ENDIF

;  Return the current user-space point at which text will be drawn to (x,y). 

; *  CGContextGetTextPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGPoint CGContextGetTextPosition(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextGetTextPosition
	ENDIF

;  Set the text matrix to `transform'. 

; *  CGContextSetTextMatrix()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetTextMatrix(CGContextRef ctx, CGAffineTransform transform)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetTextMatrix
	ENDIF

;  Return the text matrix. 

; *  CGContextGetTextMatrix()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGAffineTransform CGContextGetTextMatrix(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextGetTextMatrix
	ENDIF

;  Set the text drawing mode to `mode'. 

; *  CGContextSetTextDrawingMode()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetTextDrawingMode(CGContextRef ctx, CGTextDrawingMode mode)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetTextDrawingMode
	ENDIF

;  Set the current font to `font'. 

; *  CGContextSetFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetFont(CGContextRef ctx, CGFontRef font)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetFont
	ENDIF

;  Set the current font size to `size'. 

; *  CGContextSetFontSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetFontSize(CGContextRef ctx, float size)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetFontSize
	ENDIF


;  Attempts to find the font named `name'.  If successful, scales it to
; * `size' units in user space.  `textEncoding' specifies how to translate
; * from bytes to glyphs. 


; *  CGContextSelectFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSelectFont(CGContextRef ctx, const char *name, float size, CGTextEncoding textEncoding)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSelectFont
	ENDIF

;  Draw `string', a string of `length' bytes, at the point specified by the
; * current text matrix.  Each byte of the string is mapped through the
; * encoding vector of the current font to obtain the glyph to display. 


; *  CGContextShowText()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextShowText(CGContextRef ctx, const char *cstring, size_t length)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextShowText
	ENDIF

;  Display the glyphs pointed to by `g', an array of `count' glyphs, at the
; * point specified by the current text matrix. 

; *  CGContextShowGlyphs()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextShowGlyphs(CGContextRef ctx, const CGGlyph g[], size_t count)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextShowGlyphs
	ENDIF


; * Text convenience functions. *
;  Draw `string', a string of `length' bytes, at the point `(x, y)',
; * specified in user space.  Each byte of the string is mapped through the
; * encoding vector of the current font to obtain the glyph to display. 


; *  CGContextShowTextAtPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextShowTextAtPoint(CGContextRef ctx, float x, float y, const char *cstring, size_t length)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextShowTextAtPoint
	ENDIF

;  Display the glyphs pointed to by `g', an array of `count' glyph ids, at
; * the point `(x, y)', specified in user space. 

; *  CGContextShowGlyphsAtPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextShowGlyphsAtPoint(CGContextRef ctx, float x, float y, const CGGlyph g[], size_t count)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextShowGlyphsAtPoint
	ENDIF


; * PDF document functions. *
;  Draw `page' in `document' in the rectangular area specified by `rect'.
; * The media box of the page is scaled, if necessary, to fit into
; * `rect'. 


; *  CGContextDrawPDFDocument()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextDrawPDFDocument(CGContextRef ctx, CGRect rect, CGPDFDocumentRef document, int page)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextDrawPDFDocument
	ENDIF

; * Page functions. *
;  Begin a new page. 

; *  CGContextBeginPage()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextBeginPage(CGContextRef ctx, const CGRect *mediaBox)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextBeginPage
	ENDIF

;  End the current page. 

; *  CGContextEndPage()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextEndPage(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextEndPage
	ENDIF

; * Context functions. *
;  Increment the retain count of `ctx' and return it.  All contexts are
; * created with an initial retain count of 1. 

; *  CGContextRetain()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGContextRef CGContextRetain(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextRetain
	ENDIF

;  Decrement the retain count of `ctx'.  If the retain count reaches 0,
; * then free `ctx' and any associated resources. 

; *  CGContextRelease()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextRelease(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextRelease
	ENDIF

;  Flush all drawing to the destination. 

; *  CGContextFlush()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextFlush(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextFlush
	ENDIF

;  Synchronized drawing. 

; *  CGContextSynchronize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSynchronize(CGContextRef ctx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSynchronize
	ENDIF

; * Antialiasing functions. *
;  Turn off antialiasing if `shouldAntialias' is zero; turn it on
; * otherwise.  This parameter is part of the graphics state. 

; *  CGContextSetShouldAntialias()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGContextSetShouldAntialias(CGContextRef ctx, int shouldAntialias)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGContextSetShouldAntialias
	ENDIF

	ENDIF ; __CGCONTEXT__ 


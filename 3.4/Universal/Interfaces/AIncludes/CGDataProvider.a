;
;    File:       CGDataProvider.a
;
;    Contains:   xxx put contents here xxx
;
;    Version:    Technology: from CoreGraphics-70.root
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 2000-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;

	IF &TYPE('__CGDATAPROVIDER__') = 'UNDEFINED' THEN
__CGDATAPROVIDER__ SET 1

	IF &TYPE('__CGBASE__') = 'UNDEFINED' THEN
	include 'CGBase.a'
	ENDIF
	IF &TYPE('__CFURL__') = 'UNDEFINED' THEN
	include 'CFURL.a'
	ENDIF



;  Callbacks for sequentially accessing data.
; * `getBytes' is called to copy `count' bytes from the provider's data to
; * `buffer'.  It should return the number of bytes copied, or 0 if there's
; * no more data.
; * `skipBytes' is called to skip ahead in the provider's data by `count' bytes.
; * `rewind' is called to rewind the provider to the beginning of the data.
; * `releaseProvider', if non-NULL, is called when the provider is freed. 

CGDataProviderCallbacks	RECORD 0
getBytes				 ds.l	1				; offset: $0 (0)
skipBytes				 ds.l	1				; offset: $4 (4)
rewind					 ds.l	1				; offset: $8 (8)
releaseProvider			 ds.l	1				; offset: $C (12)
sizeof					 EQU *					; size:   $10 (16)
						ENDR
;  Callbacks for directly accessing data.
; * `getBytePointer', if non-NULL, is called to return a pointer to the
; * provider's entire block of data.
; * `releaseBytePointer', if non-NULL, is called to release a pointer to
; * the provider's entire block of data.
; * `getBytes', if non-NULL, is called to copy `count' bytes at offset
; * `offset' from the provider's data to `buffer'.  It should return the
; * number of bytes copied, or 0 if there's no more data.
; * `releaseProvider', if non-NULL, is called when the provider is freed.
; * At least one of `getBytePointer' or `getBytes' must be non-NULL.  

CGDataProviderDirectAccessCallbacks RECORD 0
getBytePointer			 ds.l	1				; offset: $0 (0)
releaseBytePointer		 ds.l	1				; offset: $4 (4)
getBytes				 ds.l	1				; offset: $8 (8)
releaseProvider			 ds.l	1				; offset: $C (12)
sizeof					 EQU *					; size:   $10 (16)
						ENDR
;  Create a sequential-access data provider using `callbacks' to provide
; * the data.  `info' is passed to each of the callback functions. 

; *  CGDataProviderCreate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGDataProviderRef CGDataProviderCreate(void *info, const CGDataProviderCallbacks *callbacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGDataProviderCreate
	ENDIF

;  Create a direct-access data provider using `callbacks' to supply `size'
; * bytes of data. `info' is passed to each of the callback functions. 

; *  CGDataProviderCreateDirectAccess()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGDataProviderRef CGDataProviderCreateDirectAccess(void *info, size_t size, const CGDataProviderDirectAccessCallbacks *callbacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGDataProviderCreateDirectAccess
	ENDIF

;  Create a direct-access data provider using `data', an array of `size'
; * bytes.  `releaseData' is called when the data provider is freed, and is
; * passed `info' as its first argument. 


; *  CGDataProviderCreateWithData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGReleaseDataProcPtr releaseData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGDataProviderCreateWithData
	ENDIF

;  Create a data provider using `url'. 

; *  CGDataProviderCreateWithURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGDataProviderRef CGDataProviderCreateWithURL(CFURLRef url)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGDataProviderCreateWithURL
	ENDIF

;  Increment the retain count of `provider' and return it.  All data
; * providers are created with an initial retain count of 1. 

; *  CGDataProviderRetain()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGDataProviderRef CGDataProviderRetain(CGDataProviderRef provider)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGDataProviderRetain
	ENDIF

;  Decrement the retain count of `provider'.  If the retain count reaches
; * 0, then free `provider' and any associated resources. 

; *  CGDataProviderRelease()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGDataProviderRelease(CGDataProviderRef provider)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGDataProviderRelease
	ENDIF

	ENDIF ; __CGDATAPROVIDER__ 


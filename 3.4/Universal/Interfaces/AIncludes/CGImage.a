;
;    File:       CGImage.a
;
;    Contains:   xxx put contents here xxx
;
;    Version:    Technology: from CoreGraphics-93.14
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 2000-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;

	IF &TYPE('__CGIMAGE__') = 'UNDEFINED' THEN
__CGIMAGE__ SET 1

	IF &TYPE('__CGBASE__') = 'UNDEFINED' THEN
	include 'CGBase.a'
	ENDIF
	IF &TYPE('__CGCOLORSPACE__') = 'UNDEFINED' THEN
	include 'CGColorSpace.a'
	ENDIF
	IF &TYPE('__CGDATAPROVIDER__') = 'UNDEFINED' THEN
	include 'CGDataProvider.a'
	ENDIF




; typedef long							CGImageAlphaInfo
kCGImageAlphaNone				EQU		0
kCGImageAlphaPremultipliedLast	EQU		1					; For example, premultiplied RGBA 
kCGImageAlphaPremultipliedFirst	EQU		2					; For example, premultiplied ARGB 
kCGImageAlphaLast				EQU		3					; For example, non-premultiplied RGBA 
kCGImageAlphaFirst				EQU		4					; For example, non-premultiplied ARGB 
kCGImageAlphaNoneSkipLast		EQU		5					; Equivalent to kCGImageAlphaNone. 
kCGImageAlphaNoneSkipFirst		EQU		6

;  Create an image. 

; *  CGImageCreate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef colorspace, CGImageAlphaInfo alphaInfo, CGDataProviderRef provider, const float decode[], int shouldInterpolate, CGColorRenderingIntent intent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageCreate
	ENDIF

;  Create an image mask. 

; *  CGImageMaskCreate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGImageRef CGImageMaskCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGDataProviderRef provider, const float decode[], int shouldInterpolate)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageMaskCreate
	ENDIF

;  Increment the retain count of `image' and return it.  All images are
; * created with an initial retain count of 1. 

; *  CGImageRetain()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGImageRef CGImageRetain(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageRetain
	ENDIF

;  Decrement the retain count of `image'.  If the retain count reaches 0,
; * then release it and any associated resources. 

; *  CGImageRelease()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void CGImageRelease(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageRelease
	ENDIF

;  Return 1 if `image' is an image mask, 0 otherwise. 

; *  CGImageIsMask()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern int CGImageIsMask(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageIsMask
	ENDIF

;  Return the width of `image'. 

; *  CGImageGetWidth()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern size_t CGImageGetWidth(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageGetWidth
	ENDIF

;  Return the height of `image'. 

; *  CGImageGetHeight()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern size_t CGImageGetHeight(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageGetHeight
	ENDIF

;  Return the number of bits/component of `image'. 

; *  CGImageGetBitsPerComponent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern size_t CGImageGetBitsPerComponent(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageGetBitsPerComponent
	ENDIF

;  Return the number of bits/pixel of `image'. 

; *  CGImageGetBitsPerPixel()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern size_t CGImageGetBitsPerPixel(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageGetBitsPerPixel
	ENDIF

;  Return the number of bytes/row of `image'. 

; *  CGImageGetBytesPerRow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern size_t CGImageGetBytesPerRow(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageGetBytesPerRow
	ENDIF

;  Return the colorspace of `image', or NULL if `image' is an image
; * mask. 

; *  CGImageGetColorSpace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageGetColorSpace
	ENDIF

;  Return the alpha info of `image'. 

; *  CGImageGetAlphaInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageGetAlphaInfo
	ENDIF

; Return the data provider of `image'. 

; *  CGImageGetDataProvider()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageGetDataProvider
	ENDIF

;  Return the decode array of `image'. 

; *  CGImageGetDecode()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern const float *CGImageGetDecode(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageGetDecode
	ENDIF

;  Return the interpolation parameter of `image'. 

; *  CGImageGetShouldInterpolate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern int CGImageGetShouldInterpolate(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageGetShouldInterpolate
	ENDIF

;  Return the rendering intent of `image'. 

; *  CGImageGetRenderingIntent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGColorRenderingIntent CGImageGetRenderingIntent(CGImageRef image)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CGImageGetRenderingIntent
	ENDIF

	ENDIF ; __CGIMAGE__ 


;
;    File:       CarbonEvents.a
;
;    Contains:   Carbon Event Manager
;
;    Version:    Technology: Mac OS X/CarbonLib 1.3
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 1999-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CARBONEVENTS__') = 'UNDEFINED' THEN
__CARBONEVENTS__ SET 1

	IF &TYPE('__EVENTS__') = 'UNDEFINED' THEN
	include 'Events.a'
	ENDIF
	IF &TYPE('__MENUS__') = 'UNDEFINED' THEN
	include 'Menus.a'
	ENDIF
	IF &TYPE('__CONTROLS__') = 'UNDEFINED' THEN
	include 'Controls.a'
	ENDIF
	IF &TYPE('__MACWINDOWS__') = 'UNDEFINED' THEN
	include 'MacWindows.a'
	ENDIF
	IF &TYPE('__CFSTRING__') = 'UNDEFINED' THEN
	include 'CFString.a'
	ENDIF
	IF &TYPE('__AEREGISTRY__') = 'UNDEFINED' THEN
	include 'AERegistry.a'
	ENDIF
	IF &TYPE('__AEDATAMODEL__') = 'UNDEFINED' THEN
	include 'AEDataModel.a'
	ENDIF

; ======================================================================================
;   EVENT COMMON                                                                        
; ======================================================================================




; *  Discussion:
; *    The following are all errors which can be returned from the
; *    routines contained in this file.
; 


eventAlreadyPostedErr			EQU		-9860
eventClassInvalidErr			EQU		-9862
eventClassIncorrectErr			EQU		-9864
eventHandlerAlreadyInstalledErr	EQU		-9866
eventInternalErr				EQU		-9868
eventKindIncorrectErr			EQU		-9869
eventParameterNotFoundErr		EQU		-9870
eventNotHandledErr				EQU		-9874
eventLoopTimedOutErr			EQU		-9875
eventLoopQuitErr				EQU		-9876
eventNotInQueueErr				EQU		-9877
eventHotKeyExistsErr			EQU		-9878
eventHotKeyInvalidErr			EQU		-9879
; ======================================================================================
;   EVENT CORE                                                                          
; ======================================================================================
; ——————————————————————————————————————————————————————————————————————————————————————
;   • Event Flags, options                                                              
; ——————————————————————————————————————————————————————————————————————————————————————


; *  EventPriority
; *  
; *  Discussion:
; *    These values define the relative priority of an event, and are
; *    used when posting events with PostEventToQueue. In general events
; *    are pulled from the queue in order of first posted to last
; *    posted. These priorities are a way to alter that when posting
; *    events. You can post a standard priority event and then a high
; *    priority event and the high priority event will be pulled from
; *    the queue first.
; 


; typedef SInt16						EventPriority
kEventPriorityLow				EQU		0
kEventPriorityStandard			EQU		1
kEventPriorityHigh				EQU		2

kEventLeaveInQueue				EQU		0
kEventRemoveFromQueue			EQU		1
; ——————————————————————————————————————————————————————————————————————————————————————
;  • Event Times                                                                        
;                                                                                       
;  EventTime is in seconds since boot. Use the constants to make life easy.             
; ——————————————————————————————————————————————————————————————————————————————————————
; typedef double 						EventTime

; typedef EventTime 					EventTimeout

; typedef EventTime 					EventTimerInterval

; #define kEventDurationSecond ((EventTime)(1.0))
; #define kEventDurationMillisecond ((EventTime)(kEventDurationSecond/1000))
; #define kEventDurationMicrosecond ((EventTime)(kEventDurationSecond/1000000))
; #define kEventDurationNanosecond ((EventTime)(kEventDurationSecond/1000000000))
; #define kEventDurationMinute ((EventTime)(kEventDurationSecond*60))
; #define kEventDurationHour ((EventTime)(kEventDurationMinute*60))
; #define kEventDurationDay ((EventTime)(kEventDurationHour*24))
; #define kEventDurationNoWait ((EventTime)(0.0))
; #define kEventDurationForever ((EventTime)(-1.0))


; ——————————————————————————————————————————————————————————————————————————————————————
;  EventTypeSpec structure                                                              
;                                                                                       
;  This structure is used in many routines to pass a list of event types to a function. 
;  You typically would declare a const array of these types to pass in.                 
; ——————————————————————————————————————————————————————————————————————————————————————


; *  EventTypeSpec
; *  
; *  Discussion:
; *    This structure is used to specify an event. Typically, a static
; *    array of EventTypeSpecs are passed into functions such as
; *    InstallEventHandler, as well as routines such as
; *    FlushEventsMatchingListFromQueue.
; 

EventTypeSpec			RECORD 0
eventClass				 ds.l	1				; offset: $0 (0)
eventKind				 ds.l	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $8 (8)
						ENDR


; *  Discussion:
; *    These are returned from calls to TrackMouseLocation and
; *    TrackMouseRegion. Those routines are designed as replacements to
; *    calls such as StillDown and WaitMouseUp. The advantage over those
; *    routines is that TrackMouseLocation and TrackMouseRegion will
; *    block if the user is not moving the mouse, whereas mouse tracking
; *    loops based on StillDown and WaitMouseUp will spin, chewing up
; *    valuable CPU time that could be better spent elsewhere. It is
; *    highly recommended that any tracking loops in your application
; *    stop using StillDown and WaitMouseUp and start using
; *    TrackMouseLocation/Region. See the notes on those routines for
; *    more information.
; 


kTrackMouseLocationOptionDontConsumeMouseUp EQU $01

; typedef UInt16						MouseTrackingResult
kMouseTrackingMousePressed		EQU		1
kMouseTrackingMouseReleased		EQU		2
kMouseTrackingMouseExited		EQU		3
kMouseTrackingMouseEntered		EQU		4
kMouseTrackingMouseMoved		EQU		5
kMouseTrackingKeyModifiersChanged EQU	6
kMouseTrackingUserCancelled		EQU		7
kMouseTrackingTimedOut			EQU		8
; typedef OSType 						EventParamName

; typedef OSType 						EventParamType

; ——————————————————————————————————————————————————————————————————————————————————————
;   • EventLoop                                                                         
; ——————————————————————————————————————————————————————————————————————————————————————


; *  EventLoopRef
; *  
; *  Discussion:
; *    An EventLoopRef represents an 'event loop', which is the
; *    conceptual entity that you 'run' to fetch events from hardware
; *    and other sources and also fires timers that might be installed
; *    with InstallEventLoopTimer. The term 'run' is a bit of a
; *    misnomer, as the event loop's goal is to stay as blocked as
; *    possible to minimize CPU usage for the current application. The
; *    event loop is run implicitly thru APIs like ReceiveNextEvent,
; *    RunApplicationEventLoop, or even WaitNextEvent. It can also be
; *    run explicitly thru a call to RunCurrentEventLoop. Each
; *    preemptive thread can have an event loop. Cooperative threads
; *    share the main thread's event loop.
; 




; *  GetCurrentEventLoop()
; *  
; *  Discussion:
; *    Returns the current event loop for the current thread. If the
; *    current thread is a cooperative thread, the main event loop is
; *    returned.
; *  
; *  Result:
; *    An event loop reference.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventLoopRef GetCurrentEventLoop(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCurrentEventLoop
	ENDIF


; *  GetMainEventLoop()
; *  
; *  Discussion:
; *    Returns the event loop object for the main application thread.
; *  
; *  Result:
; *    An event loop reference.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventLoopRef GetMainEventLoop(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetMainEventLoop
	ENDIF



; *  RunCurrentEventLoop()
; *  
; *  Discussion:
; *    This routine 'runs' the event loop, returning only if aborted or
; *    the timeout specified is reached. The event loop is mostly
; *    blocked while in this function, occasionally waking up to fire
; *    timers or pick up events. The typical use of this function is to
; *    cause the current thread to wait for some operation to complete,
; *    most likely on another thread of execution.
; *  
; *  Parameters:
; *    
; *    inTimeout:
; *      The time to wait until returning (can be kEventDurationForever).
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus RunCurrentEventLoop(EventTimeout inTimeout)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RunCurrentEventLoop
	ENDIF


; *  QuitEventLoop()
; *  
; *  Discussion:
; *    Causes a specific event loop to terminate. Usage of this is
; *    similar to WakeUpProcess, in that it causes the eventloop
; *    specified to return immediately (as opposed to timing out).
; *    Typically this call is used in conjunction with
; *    RunCurrentEventLoop.
; *  
; *  Parameters:
; *    
; *    inEventLoop:
; *      The event loop to terminate.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus QuitEventLoop(EventLoopRef inEventLoop)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QuitEventLoop
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Low-level event fetching                                                          
; ——————————————————————————————————————————————————————————————————————————————————————

; *  ReceiveNextEvent()
; *  
; *  Discussion:
; *    This routine tries to fetch the next event of a specified type.
; *    If no events in the event queue match, this routine will run the
; *    current event loop until an event that matches arrives, or the
; *    timeout expires. Except for timers firing, your application is
; *    blocked waiting for events to arrive when inside this function.
; *  
; *  Parameters:
; *    
; *    inNumTypes:
; *      The number of event types we are waiting for (0 if any event
; *      should cause this routine to return).
; *    
; *    inList:
; *      The list of event types we are waiting for (pass NULL if any
; *      event should cause this routine to return).
; *    
; *    inTimeout:
; *      The time to wait (passing kEventDurationForever is preferred).
; *    
; *    inPullEvent:
; *      Pass true for this parameter to actually remove the next
; *      matching event from the queue.
; *    
; *    outEvent:
; *      The next event that matches the list passed in. If inPullEvent
; *      is true, the event is owned by you, and you will need to
; *      release it when done.
; *  
; *  Result:
; *    A result indicating whether an event was received, the timeout
; *    expired, or the current event loop was quit.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ReceiveNextEvent(UInt32 inNumTypes, const EventTypeSpec *inList, EventTimeout inTimeout, Boolean inPullEvent, EventRef *outEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ReceiveNextEvent
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Core event lifetime APIs                                                          
; ——————————————————————————————————————————————————————————————————————————————————————

; typedef UInt32						EventAttributes
kEventAttributeNone				EQU		0
kEventAttributeUserEvent		EQU		$01

; *  [Mac]CreateEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateEvent(CFAllocatorRef inAllocator, UInt32 inClassID, UInt32 kind, EventTime when, EventAttributes flags, EventRef *outEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateEvent
	ENDIF


; *  CopyEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventRef CopyEvent(EventRef inOther)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CopyEvent
	ENDIF


; *  RetainEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventRef RetainEvent(EventRef inEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RetainEvent
	ENDIF


; *  GetEventRetainCount()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal UInt32 GetEventRetainCount(EventRef inEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetEventRetainCount
	ENDIF


; *  ReleaseEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ReleaseEvent(EventRef inEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ReleaseEvent
	ENDIF


; *  SetEventParameter()
; *  
; *  Discussion:
; *    Sets a piece of data for the given event.
; *  
; *  Parameters:
; *    
; *    inEvent:
; *      The event to set the data for.
; *    
; *    inName:
; *      The symbolic name of the parameter.
; *    
; *    inType:
; *      The symbolic type of the parameter.
; *    
; *    inSize:
; *      The size of the parameter data.
; *    
; *    inDataPtr:
; *      The pointer to the parameter data.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetEventParameter(EventRef inEvent, EventParamName inName, EventParamType inType, UInt32 inSize, const void *inDataPtr)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetEventParameter
	ENDIF



; *  GetEventParameter()
; *  
; *  Discussion:
; *    Gets a piece of data from the given event, if it exists.
; *  
; *  Parameters:
; *    
; *    inEvent:
; *      The event to get the parameter from.
; *    
; *    inName:
; *      The symbolic name of the parameter.
; *    
; *    inDesiredType:
; *      The desired type of the parameter. At present we do not support
; *      coercion, so this parameter must be the actual type of data
; *      stored in the event, or an error will be returned.
; *    
; *    outActualType:
; *      The actual type of the parameter, can be NULL if you are not
; *      interested in receiving this information.
; *    
; *    inBufferSize:
; *      The size of the output buffer specified by ioBuffer.
; *    
; *    outActualSize:
; *      The actual size of the data, or NULL if you don't want this
; *      information.
; *    
; *    outData:
; *      The pointer to the buffer which will receive the parameter data.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetEventParameter(EventRef inEvent, EventParamName inName, EventParamType inDesiredType, EventParamType *outActualType, UInt32 inBufferSize, UInt32 *outActualSize, void *outData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetEventParameter
	ENDIF


; ——————————————————————————————————————————————————————————————————————————————————————
;   • Getters for 'base-class' event info                                               
; ——————————————————————————————————————————————————————————————————————————————————————

; *  GetEventClass()
; *  
; *  Discussion:
; *    Returns the class of the given event, such as mouse, keyboard,
; *    etc.
; *  
; *  Parameters:
; *    
; *    inEvent:
; *      The event in question.
; *  
; *  Result:
; *    The class ID of the event.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal UInt32 GetEventClass(EventRef inEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetEventClass
	ENDIF


; *  GetEventKind()
; *  
; *  Discussion:
; *    Returns the kind of the given event (mousedown, etc.). Event
; *    kinds overlap between event classes, e.g. kEventMouseDown and
; *    kEventAppActivated have the same value (1). The combination of
; *    class and kind is what determines an event signature.
; *  
; *  Parameters:
; *    
; *    inEvent:
; *      The event in question.
; *  
; *  Result:
; *    The kind of the event.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal UInt32 GetEventKind(EventRef inEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetEventKind
	ENDIF


; *  GetEventTime()
; *  
; *  Discussion:
; *    Returns the time the event specified occurred, specified in
; *    EventTime, which is a floating point number representing seconds
; *    since the last system startup.
; *  
; *  Parameters:
; *    
; *    inEvent:
; *      The event in question.
; *  
; *  Result:
; *    The time the event occurred.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventTime GetEventTime(EventRef inEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetEventTime
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Setters for 'base-class' event info                                               
; ——————————————————————————————————————————————————————————————————————————————————————


; *  SetEventTime()
; *  
; *  Discussion:
; *    This routine allows you to set the time of a given event, if you
; *    so desire. In general, you would never use this routine, except
; *    for those special cases where you reuse an event from time to
; *    time instead of creating a new event each time.
; *  
; *  Parameters:
; *    
; *    inEvent:
; *      The event in question.
; *    
; *    inTime:
; *      The new time.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetEventTime(EventRef inEvent, EventTime inTime)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetEventTime
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Event Queue routines (posting, finding, flushing)                                 
; ——————————————————————————————————————————————————————————————————————————————————————




; *  GetCurrentEventQueue()
; *  
; *  Discussion:
; *    Returns the current event queue for the current thread. If the
; *    current thread is a cooperative thread, the main event queue is
; *    returned.
; *  
; *  Result:
; *    An event queue reference.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventQueueRef GetCurrentEventQueue(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCurrentEventQueue
	ENDIF


; *  GetMainEventQueue()
; *  
; *  Discussion:
; *    Returns the event queue object for the main application thread.
; *  
; *  Result:
; *    An event queue reference.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventQueueRef GetMainEventQueue(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetMainEventQueue
	ENDIF



; *  EventComparatorProcPtr
; *  
; *  Discussion:
; *    Type of a callback function used by queue searches.
; *  
; *  Parameters:
; *    
; *    inEvent:
; *      The event to compare.
; *    
; *    inCompareData:
; *      The data used to compare the event.
; *  
; *  Result:
; *    A boolean value indicating whether the event matches (true) or
; *    not (false).
; 


; *  NewEventComparatorUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeEventComparatorUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeEventComparatorUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  PostEventToQueue()
; *  
; *  Discussion:
; *    Posts an event to the queue specified. This automatically wakes
; *    up the event loop of the thread the queue belongs to. After
; *    posting the event, you should release the event. The event queue
; *    retains it.
; *  
; *  Parameters:
; *    
; *    inQueue:
; *      The event queue to post the event onto.
; *    
; *    inEvent:
; *      The event to post.
; *    
; *    inPriority:
; *      The priority of the event.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus PostEventToQueue(EventQueueRef inQueue, EventRef inEvent, EventPriority inPriority)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PostEventToQueue
	ENDIF


; *  FlushEventsMatchingListFromQueue()
; *  
; *  Discussion:
; *    Flushes events matching a specified list of classes and kinds
; *    from an event queue.
; *  
; *  Parameters:
; *    
; *    inQueue:
; *      The event queue to flush events from.
; *    
; *    inNumTypes:
; *      The number of event kinds to flush.
; *    
; *    inList:
; *      The list of event classes and kinds to flush from the queue.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus FlushEventsMatchingListFromQueue(EventQueueRef inQueue, UInt32 inNumTypes, const EventTypeSpec *inList)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FlushEventsMatchingListFromQueue
	ENDIF


; *  FlushSpecificEventsFromQueue()
; *  
; *  Discussion:
; *    Flushes events that match a comparator function.
; *  
; *  Parameters:
; *    
; *    inQueue:
; *      The event queue to flush events from.
; *    
; *    inComparator:
; *      The comparison function to invoke for each event in the queue.
; *    
; *    inCompareData:
; *      The data you wish to pass to your comparison function.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus FlushSpecificEventsFromQueue(EventQueueRef inQueue, EventComparatorUPP inComparator, void *inCompareData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FlushSpecificEventsFromQueue
	ENDIF


; *  FlushEventQueue()
; *  
; *  Discussion:
; *    Flushes all events from an event queue.
; *  
; *  Parameters:
; *    
; *    inQueue:
; *      The event queue to flush.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus FlushEventQueue(EventQueueRef inQueue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FlushEventQueue
	ENDIF


; *  FindSpecificEventInQueue()
; *  
; *  Discussion:
; *    Returns the first event that matches a comparator function, or
; *    NULL if no events match.
; *  
; *  Parameters:
; *    
; *    inQueue:
; *      The event queue to search.
; *    
; *    inComparator:
; *      The comparison function to invoke for each event in the queue.
; *    
; *    inCompareData:
; *      The data you wish to pass to your comparison function.
; *  
; *  Result:
; *    An event reference.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventRef FindSpecificEventInQueue(EventQueueRef inQueue, EventComparatorUPP inComparator, void *inCompareData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FindSpecificEventInQueue
	ENDIF


; *  GetNumEventsInQueue()
; *  
; *  Discussion:
; *    Returns the number of events in an event queue.
; *  
; *  Parameters:
; *    
; *    inQueue:
; *      The event queue to query.
; *  
; *  Result:
; *    The number of items in the queue.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal UInt32 GetNumEventsInQueue(EventQueueRef inQueue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetNumEventsInQueue
	ENDIF


; *  RemoveEventFromQueue()
; *  
; *  Discussion:
; *    Removes the given event from the queue which it was posted. When
; *    you call this function, the event ownership is transferred to
; *    you, the caller, at no charge. You must release the event when
; *    you are through with it.
; *  
; *  Parameters:
; *    
; *    inQueue:
; *      The queue to remove the event from.
; *    
; *    inEvent:
; *      The event to remove.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus RemoveEventFromQueue(EventQueueRef inQueue, EventRef inEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RemoveEventFromQueue
	ENDIF


; *  IsEventInQueue()
; *  
; *  Discussion:
; *    Returns true if the specified event is posted to a queue.
; *  
; *  Parameters:
; *    
; *    inQueue:
; *      The queue to check.
; *    
; *    inEvent:
; *      The event in question.
; *  
; *  Result:
; *    A boolean value.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsEventInQueue(EventQueueRef inQueue, EventRef inEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsEventInQueue
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Helpful utilities                                                                 
; ——————————————————————————————————————————————————————————————————————————————————————


; *  GetCurrentEventTime()
; *  
; *  Discussion:
; *    Returns the current time since last system startup in seconds.
; *  
; *  Result:
; *    EventTime.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventTime GetCurrentEventTime(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCurrentEventTime
	ENDIF


; *  IsUserCancelEventRef()
; *  
; *  Discussion:
; *    Tests the event given to see whether the event represents a 'user
; *    cancel' event. Currently this is defined to be either the escape
; *    key being pressed, or command-period being pressed.
; *  
; *  Result:
; *    A boolean value indicating whether the event is a user cancel
; *    event.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsUserCancelEventRef(EventRef event)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsUserCancelEventRef
	ENDIF


; *  TrackMouseLocation()
; *  
; *  Discussion:
; *    Once entered, this routine waits for certain mouse events (move,
; *    mouse down, mouse up). When one of these events occurs, the
; *    function returns and tells the caller what happened and where the
; *    mouse is currently located. While there is no activity, the
; *    current event loop is run, effectively blocking the current
; *    thread (save for any timers that fire). This helps to minimize
; *    CPU usage when there is nothing going on.
; *  
; *  Parameters:
; *    
; *    inPort:
; *      The grafport to consider for mouse coordinates. You can pass
; *      NULL for this parameter to indicate the current port. The mouse
; *      location is returned in terms of local coordinates of this port.
; *    
; *    outPt:
; *      On exit, this parameter receives the mouse location from the
; *      last mouse event that caused this function to exit.
; *    
; *    outResult:
; *      On exit, this parameter receives a value representing what kind
; *      of event was received that cause the function to exit, such as
; *      kMouseTrackingMouseReleased.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TrackMouseLocation(GrafPtr inPort, Point *outPt, MouseTrackingResult *outResult)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TrackMouseLocation
	ENDIF


; *  TrackMouseLocationWithOptions()
; *  
; *  Discussion:
; *    Once entered, this routine waits for certain mouse events (move,
; *    mouse down, mouse up). When one of these events occurs, the
; *    function returns and tells the caller what happened and where the
; *    mouse is currently located. While there is no activity, the
; *    current event loop is run, effectively blocking the current
; *    thread (save for any timers that fire). This helps to minimize
; *    CPU usage when there is nothing going on.
; *  
; *  Parameters:
; *    
; *    inPort:
; *      The grafport to consider for mouse coordinates. You can pass
; *      NULL for this parameter to indicate the current port. The mouse
; *      location is returned in terms of local coordinates of this port.
; *    
; *    inOptions:
; *      The only option supported by this routine at present is the
; *      option to have the toolbox leave mouse up events in the queue,
; *      rather than pulling them (which is the default).
; *    
; *    inTimeout:
; *      The amount of time to wait for an event. If no events arrive
; *      within this time, kMouseTrackingTimedOut is returned in
; *      outResult.
; *    
; *    outPt:
; *      On exit, this parameter receives the mouse location from the
; *      last mouse event that caused this function to exit. If a
; *      timeout or key modifiers changed event caused this function to
; *      exit, the current mouse position at the time is returned.
; *    
; *    outModifiers:
; *      On exit, this parameter receives the most recent state of the
; *      keyboard modifiers.
; *    
; *    outResult:
; *      On exit, this parameter receives a value representing what kind
; *      of event was received that cause the function to exit, such as
; *      kMouseTrackingMouseReleased.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus TrackMouseLocationWithOptions(GrafPtr inPort, OptionBits inOptions, EventTimeout inTimeout, Point *outPt, UInt32 *outModifiers, MouseTrackingResult *outResult)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TrackMouseLocationWithOptions
	ENDIF


; *  TrackMouseRegion()
; *  
; *  Discussion:
; *    This routine is largely identical to TrackMouseLocation. Please
; *    read the notes on that function as well. The difference between
; *    TrackMouseLocation and TrackMouseRegion is that TrackMouseRegion
; *    only returns when the mouse enters or exits a specified region
; *    that you pass in to the function, as opposed to whenever the
; *    mouse moves (it also returns for mouse up/down events). This is
; *    useful if you don't need to know intermediate mouse events, but
; *    rather just if the mouse enters or leaves an area.
; *  
; *  Parameters:
; *    
; *    inPort:
; *      The grafport to consider for mouse coordinates. You can pass
; *      NULL for this parameter to indicate the current port.
; *    
; *    inRegion:
; *      The region to consider. This should be in the coordinates of
; *      the port you passed to inPort.
; *    
; *    ioWasInRgn:
; *      On enter, this parameter should be set to true if the mouse is
; *      currently inside the region passed in inRegion, or false if the
; *      mouse is currently outside the region. On exit, this parameter
; *      is updated to reflect the current reality, e.g. if the
; *      outResult parameter returns kMouseTrackingMouseExited,
; *      ioWasInRgn will be set to false when this function exits.
; *      Because it is updated from within, you should only need to set
; *      this yourself before the first call to this function in your
; *      tracking loop.
; *    
; *    outResult:
; *      On exit, this parameter receives a value representing what kind
; *      of event was received that cause the function to exit, such as
; *      kMouseTrackingMouseEntered.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TrackMouseRegion(GrafPtr inPort, RgnHandle inRegion, Boolean *ioWasInRgn, MouseTrackingResult *outResult)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TrackMouseRegion
	ENDIF


; *  ConvertEventRefToEventRecord()
; *  
; *  Discussion:
; *    This is a convenience routine to help you if there are places in
; *    your application where you need an EventRecord and all you have
; *    is an EventRef. If the event can be converted, outEvent is filled
; *    in and the function returns true. If not, false is returned and
; *    outEvent will contain a nullEvent.
; *  
; *  Parameters:
; *    
; *    inEvent:
; *      The EventRef to convert into an EventRecord.
; *    
; *    outEvent:
; *      The EventRecord to fill out.
; *  
; *  Result:
; *    A boolean indicating if the conversion was successful (true) or
; *    not (false).
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean ConvertEventRefToEventRecord(EventRef inEvent, EventRecord *outEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ConvertEventRefToEventRecord
	ENDIF


; *  IsEventInMask()
; *  
; *  Discussion:
; *    This is a companion function for ConvertEventRefToEventRecord,
; *    and is provided as a convenience routine to help you if there are
; *    places in your application where you want to check an EventRef to
; *    see if it matches a classic EventMask bitfield. If the event
; *    matches, the function returns true.
; *  
; *  Parameters:
; *    
; *    inEvent:
; *      The EventRef to convert into an EventRecord.
; *    
; *    inMask:
; *      The mask to consider.
; *  
; *  Result:
; *    A boolean indicating if the event was considered to be in the
; *    mask provided.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsEventInMask(EventRef inEvent, EventMask inMask)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsEventInMask
	ENDIF


; *  GetLastUserEventTime()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventTime GetLastUserEventTime(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetLastUserEventTime
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Timers                                                                            
; ——————————————————————————————————————————————————————————————————————————————————————


; *  EventLoopTimerRef
; *  
; *  Discussion:
; *    An EventLoopTimerRef represents what we term a 'timer'. A timer
; *    is a function that is called either once or at regular intervals.
; *    It executes at task level and should not be confused with Time
; *    Manager Tasks or any other interrupt-level callback. This means
; *    you can call Toolbox routines, allocate memory and draw. When a
; *    timer 'fires', it calls a callback that you specify when the
; *    timer is installed. Timers in general have two uses - as a
; *    timeout mechanism and as a periodic task. An everyday example of
; *    using a timer for a timeout might be a light that goes out if no
; *    motion is detected in a room for 5 minutes. For this, you might
; *    install a timer which will fire in 5 minutes. If motion is
; *    detected, you would reset the timer fire time and let the clock
; *    start over. If no motion is detected for the full 5 minutes, the
; *    timer will fire and you could power off the light. A periodic
; *    timer is one that fires at regular intervals (say every second or
; *    so). You might use such a timer to blink the insertion point in
; *    your editor, etc. One advantage of timers is that you can install
; *    the timer right from the code that wants the time. For example,
; *    the standard Toolbox Edit Text control can install a timer to
; *    blink the cursor when it's active, meaning that IdleControls is a
; *    no-op for that control and doesn't need to be called. When the
; *    control is inactive, it removes its timer and doesn't waste CPU
; *    time in that state. NOTE: Currently, if you do decide to draw
; *    when your timer is called, be sure to save and restore the
; *    current port so that calling your timer doesn't inadvertently
; *    change the port out from under someone.
; 





; *  EventLoopTimerProcPtr
; *  
; *  Discussion:
; *    Called when a timer fires.
; *  
; *  Parameters:
; *    
; *    inTimer:
; *      The timer that fired.
; *    
; *    inUserData:
; *      The data passed into InstallEventLoopTimer.
; 


; *  NewEventLoopTimerUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeEventLoopTimerUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeEventLoopTimerUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InstallEventLoopTimer()
; *  
; *  Discussion:
; *    Installs a timer onto the event loop specified. The timer can
; *    either fire once or repeatedly at a specified interval depending
; *    on the parameters passed to this function.
; *  
; *  Parameters:
; *    
; *    inEventLoop:
; *      The event loop to add the timer.
; *    
; *    inFireDelay:
; *      The delay before first firing this timer (can be 0).
; *    
; *    inInterval:
; *      The timer interval (pass 0 for one-shot timers).
; *    
; *    inTimerProc:
; *      The routine to call when the timer fires.
; *    
; *    inTimerData:
; *      Data to pass to the timer proc when called.
; *    
; *    outTimer:
; *      A reference to the newly installed timer.
; *  
; *  Result:
; *    An operating system status code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus InstallEventLoopTimer(EventLoopRef inEventLoop, EventTimerInterval inFireDelay, EventTimerInterval inInterval, EventLoopTimerUPP inTimerProc, void *inTimerData, EventLoopTimerRef *outTimer)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InstallEventLoopTimer
	ENDIF



; *  RemoveEventLoopTimer()
; *  
; *  Discussion:
; *    Removes a timer that was previously installed by a call to
; *    InstallEventLoopTimer. You call this function when you are done
; *    using a timer.
; *  
; *  Parameters:
; *    
; *    inTimer:
; *      The timer to remove.
; *  
; *  Result:
; *    An operating system status code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus RemoveEventLoopTimer(EventLoopTimerRef inTimer)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RemoveEventLoopTimer
	ENDIF


; *  SetEventLoopTimerNextFireTime()
; *  
; *  Discussion:
; *    This routine is used to 'reset' a timer. It controls the next
; *    time the timer fires. This will override any interval you might
; *    have set. For example, if you have a timer that fires every
; *    second, and you call this function setting the next time to 5
; *    seconds from now, the timer will sleep for 5 seconds, then fire.
; *    It will then resume it's one second interval after that. It is as
; *    if you removed the timer and reinstalled it with a new first-fire
; *    delay.
; *  
; *  Parameters:
; *    
; *    inTimer:
; *      The timer to adjust
; *    
; *    inNextFire:
; *      The interval from the current time to wait until firing the
; *      timer again.
; *  
; *  Result:
; *    An operating system status code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetEventLoopTimerNextFireTime(EventLoopTimerRef inTimer, EventTimerInterval inNextFire)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetEventLoopTimerNextFireTime
	ENDIF

; ======================================================================================
;   EVENT CLASSES                                                                       
; ======================================================================================


; *  Discussion:
; *    Event classes
; 


kEventClassMouse				EQU		'mous'
kEventClassKeyboard				EQU		'keyb'
kEventClassTextInput			EQU		'text'
kEventClassApplication			EQU		'appl'
kEventClassAppleEvent			EQU		'eppc'
kEventClassMenu					EQU		'menu'
kEventClassWindow				EQU		'wind'
kEventClassControl				EQU		'cntl'
kEventClassCommand				EQU		'cmds'
kEventClassTablet				EQU		'tblt'
kEventClassVolume				EQU		'vol '
; ——————————————————————————————————————————————————————————————————————————————————————
;  Mouse Events                                                                         
; ——————————————————————————————————————————————————————————————————————————————————————
;  Mouse Events 


; *  Discussion:
; *    Mouse events (kEventClassMouse)
; 


kEventMouseDown					EQU		1
kEventMouseUp					EQU		2
kEventMouseMoved				EQU		5
kEventMouseDragged				EQU		6
kEventMouseWheelMoved			EQU		10
; 
;    Parameters for mouse events:
;
;    kEventMouseDown
;        -->     kEventParamMouseLocation    typeQDPoint
;        -->     kEventParamKeyModifiers     typeUInt32
;        -->     kEventParamMouseButton      typeMouseButton
;        -->     kEventParamClickCount       typeUInt32
;        -->     kEventParamMouseChord       typeUInt32  (X Only)
;
;    kEventMouseUp
;        -->     kEventParamMouseLocation    typeQDPoint
;        -->     kEventParamKeyModifiers     typeUInt32
;        -->     kEventParamMouseButton      typeMouseButton
;        -->     kEventParamClickCount       typeUInt32
;        -->     kEventParamMouseChord       typeUInt32  (X Only)
;
;    kEventMouseMoved
;        -->     kEventParamMouseLocation    typeQDPoint
;        -->     kEventParamKeyModifiers     typeUInt32
;
;    kEventMouseDragged
;        -->     kEventParamMouseLocation    typeQDPoint
;        -->     kEventParamKeyModifiers     typeUInt32
;        -->     kEventParamMouseButton      typeMouseButton
;        -->     kEventParamMouseChord       typeUInt32  (X Only)
;
;    kEventMouseWheelMoved
;        -->     kEventParamMouseLocation    typeQDPoint
;        -->     kEventParamKeyModifiers     typeUInt32
;        -->     kEventParamMouseWheelAxis   typeMouseWheelAxis
;        -->     kEventParamMouseWheelDelta  typeLongInteger
;



; *  EventMouseButton
; *  
; 


; typedef UInt16						EventMouseButton
kEventMouseButtonPrimary		EQU		1
kEventMouseButtonSecondary		EQU		2
kEventMouseButtonTertiary		EQU		3



; *  EventMouseWheelAxis
; *  
; 


; typedef UInt16						EventMouseWheelAxis
kEventMouseWheelAxisX			EQU		0
kEventMouseWheelAxisY			EQU		1



; ——————————————————————————————————————————————————————————————————————————————————————
;  Text Input Events                                                                    
; ——————————————————————————————————————————————————————————————————————————————————————


; *  Summary:
; *    Text input events (kEventClassTextInput)
; *  
; *  Discussion:
; *    The following TextInput events reimplement the AppleEvents
; *    defined in Inside Mac Text - Text Services Manager, and provide
; *    the benefits of Carbon Event targeting, dispatching and
; *    propagation to applications that have formerly handled the TSM
; *    suite of AppleEvents. TextInput handlers may be installed on
; *    controls, windows, or the application event target (equivalent to
; *    AppleEvent-based handling). In all cases, if a given TextInput
; *    handler is not installed, TSM will convert that TextInput to an
; *    AppleEvent and redispatch via AESend to the current process,
; *    making adoption as gradual as is desired.
; 


kEventTextInputUpdateActiveInputArea EQU 1
kEventTextInputUnicodeForKeyEvent EQU	2
kEventTextInputOffsetToPos		EQU		3
kEventTextInputPosToOffset		EQU		4
kEventTextInputShowHideBottomWindow EQU	5
kEventTextInputGetSelectedText	EQU		6
; 
;    Parameters for TextInput events:
;    
;    kEventTextInputUpdateActiveInputArea
;        Required parameters:
;        -->     kEventParamTextInputSendComponentInstance           typeComponentInstance
;        -->     kEventParamTextInputSendRefCon                      typeLongInteger
;        -->     kEventParamTextInputSendSLRec                       typeIntlWritingCode
;        -->     kEventParamTextInputSendFixLen                      typeLongInteger
;        -->     kEventParamTextInputSendText                        typeUnicodeText, typeChar
;                    (data type depends on TSMDocument type created via NewTSMDocument...
;                     typeChar for kTextService document, typeUnicodeText for kUnicodeDocument)
;        
;        Optional parameters:
;        -->     kEventParamTextInputSendUpdateRng                   typeTextRangeArray
;        -->     kEventParamTextInputSendHiliteRng                   typeTextRangeArray
;        -->     kEventParamTextInputSendClauseRng                   typeOffsetArray
;        -->     kEventParamTextInputSendPinRng                      typeTextRange
;        -->     kEventParamTextInputSendPinRng                      typeTextRange
;        -->     kEventParamTextInputSendTextServiceEncoding         typeUInt32
;        -->     kEventParamTextInputSendTextServiceMacEncoding      typeUInt32
;        
;    kEventTextInputUnicodeForKeyEvent
;        Required parameters:
;        -->     kEventParamTextInputSendComponentInstance           typeComponentInstance
;        -->     kEventParamTextInputSendRefCon                      typeLongInteger
;        -->     kEventParamTextInputSendSLRec                       typeIntlWritingCode
;        -->     kEventParamTextInputSendText                        typeUnicodeText
;        -->     kEventParamTextInputSendKeyboardEvent               typeEventRef
;                    (This parameter is the original raw keyboard event that produced the
;                     text.  It enables access to kEventParamKeyModifiers and 
;                     kEventParamKeyCode parameters.
;                     You can also extract from this event either Unicodes or Mac encoding
;                     characters as follows:
;                            kEventParamKeyUnicodes              typeUnicodeText
;                            kEventParamKeyMacCharCodes          typeChar (if available)
;                     The kEventParamKeyUnicodes parameter of the raw keyboard event is
;                     identical to the TextInput event's kEventParamTextInputSendText
;                     parameter.  Note that when contents of TSM's bottom-line input
;                     window (i.e. during typing Chinese, Korean, or Japanese) are confirmed,
;                     the raw keyboard event's keyCode and modifiers are set to default values.)
;
;    kEventTextInputOffsetToPos
;        Required parameters:
;        -->     kEventParamTextInputSendComponentInstance           typeComponentInstance
;        -->     kEventParamTextInputSendRefCon                      typeLongInteger
;        -->     kEventParamTextInputSendTextOffset                  typeLongInteger
;        <--     kEventParamTextInputReplyPoint                      typeQDPoint
;        
;        Optional parameters:
;        -->     kEventParamTextInputSendSLRec                       typeIntlWritingCode
;        -->     kEventParamTextInputSendLeadingEdge                 typeBoolean
;        <--     kEventParamTextInputReplySLRec                      typeIntlWritingCode
;        <--     kEventParamTextInputReplyFont                       typeLongInteger
;        <--     kEventParamTextInputReplyPointSize                  typeFixed
;        <--     kEventParamTextInputReplyLineHeight                 typeShortInteger
;        <--     kEventParamTextInputReplyLineAscent                 typeShortInteger
;        <--     kEventParamTextInputReplyTextAngle                  typeFixed
;
;    kEventTextInputPosToOffset
;        Required parameters:
;        -->     kEventParamTextInputSendComponentInstance           typeComponentInstance
;        -->     kEventParamTextInputSendRefCon                      typeLongInteger
;        -->     kEventParamTextInputSendCurrentPoint                typeQDPoint
;        <--     kEventParamTextInputReplyRegionClass                typeLongInteger
;        <--     kEventParamTextInputReplyTextOffset                 typeLongInteger
;                    (required if the position is inside the document's body)
;        
;        Optional parameters:
;        -->     kEventParamTextInputSendDraggingMode                typeBoolean
;        <--     kEventParamTextInputReplyLeadingEdge                typeBoolean
;        <--     kEventParamTextInputReplySLRec                      typeIntlWritingCode
;        
;    kEventTextInputShowHideBottomWindow
;        Required parameters:
;        -->     kEventParamTextInputSendComponentInstance           typeComponentInstance
;        -->     kEventParamTextInputSendRefCon                      typeLongInteger
;        
;        Optional parameters:
;        -->     kEventParamTextInputSendShowHide                    typeBoolean
;        <--     kEventParamTextInputReplyShowHide                   typeBoolean
;
;    kEventTextInputGetSelectedText
;        Required parameters:
;        -->     kEventParamTextInputSendComponentInstance           typeComponentInstance
;        -->     kEventParamTextInputSendRefCon                      typeLongInteger
;        
;        Optional parameters:
;        -->     kEventParamTextInputSendLeadingEdge                 typeBoolean
;        -->     kEventParamTextInputSendTextServiceEncoding         typeUInt32
;        -->     kEventParamTextInputSendTextServiceMacEncoding      typeUInt32
;        <--     kEventParamTextInputReplyText                       typeUnicodeText, typeChar
;                    (data type depends on TSMDocument.  See kEventTextInputUpdateActiveInputArea Notes)
;        <--     kEventParamTextInputReplySLRec                      typeIntlWritingCode
;

; ——————————————————————————————————————————————————————————————————————————————————————
;  Raw Keyboard Events                                                                  
; ——————————————————————————————————————————————————————————————————————————————————————


; *  Summary:
; *    Keyboard events (kEventClassKeyboard)
; *  
; *  Discussion:
; *    These events are the lowest-level keyboard events.
; 


kEventRawKeyDown				EQU		1					; hardware-level events
kEventRawKeyRepeat				EQU		2
kEventRawKeyUp					EQU		3
kEventRawKeyModifiersChanged	EQU		4
kEventHotKeyPressed				EQU		5
kEventHotKeyReleased			EQU		6					; X Only



; *  Summary:
; *    Key modifier change event bits and masks
; *  
; *  Discussion:
; *    From bit 8, cmdKeyBit, to bit 15, rightControlKeyBit, are
; *    compatible with Event Manager modifiers.
; 


kEventKeyModifierNumLockBit		EQU		16					; Num Lock is on? (Mac OS X only)
kEventKeyModifierFnBit			EQU		17					; Fn key is down? (Mac OS X only)

kEventKeyModifierNumLockMask	EQU		$00010000
kEventKeyModifierFnMask			EQU		$00020000
; 
;    Parameters for keyboard events:
;
;    kEventRawKeyDown
;        -->     kEventParamKeyMacCharCodes  typeChar
;        -->     kEventParamKeyCode          typeUInt32
;        -->     kEventParamKeyModifiers     typeUInt32
;
;    kEventRawKeyRepeat
;        -->     kEventParamKeyMacCharCodes  typeChar
;        -->     kEventParamKeyCode          typeUInt32
;        -->     kEventParamKeyModifiers     typeUInt32
;
;    kEventRawKeyUp
;        -->     kEventParamKeyMacCharCodes  typeChar
;        -->     kEventParamKeyCode          typeUInt32
;        -->     kEventParamKeyModifiers     typeUInt32
;
;    kEventRawKeyModifiersChanged
;        -->     kEventParamKeyModifiers     typeUInt32
;
;    kEventHotKeyPressed
;        -->     kEventParamDirectObject     typeEventHotKeyID
;
;    kEventHotKeyReleased
;        -->     kEventParamDirectObject     typeEventHotKeyID
;


; ——————————————————————————————————————————————————————————————————————————————————————
;  Application Events                                                                   
; ——————————————————————————————————————————————————————————————————————————————————————


; *  Summary:
; *    Application events (kEventClassApplication)
; 


kEventAppActivated				EQU		1					; resume, in old parlance
kEventAppDeactivated			EQU		2					; suspend, in old parlance
kEventAppQuit					EQU		3					; this app is quitting
kEventAppLaunchNotification		EQU		4					; response to async application launch
kEventAppLaunched				EQU		5					; (CarbonLib 1.3 or later) some other app was launched
kEventAppTerminated				EQU		6					; (CarbonLib 1.3 or later) some other app was terminated
kEventAppFrontSwitched			EQU		7					; (CarbonLib 1.3 or later) the frontmost app has changed
; ——————————————————————————————————————————————————————————————————————————————————————
;   Apple Events                                                                        
; ——————————————————————————————————————————————————————————————————————————————————————


; *  Summary:
; *    Apple events (kEventClassAppleEvent)
; 


kEventAppleEvent				EQU		1

; 
;    Parameters for Apple events:
;
;    kEventAppleEvent
;        -->     kEventParamAEEventClass     typeType        // the eventClass of the Apple event
;        -->     kEventParamAEEventID        typeType        // the eventID of the Apple event
;

; ——————————————————————————————————————————————————————————————————————————————————————
;   Window Events                                                                       
; ——————————————————————————————————————————————————————————————————————————————————————


; *  Summary:
; *    Window refresh events (kEventClassWindow)
; *  
; *  Discussion:
; *    Events related to drawing a window's content.
; 


kEventWindowUpdate				EQU		1
kEventWindowDrawContent			EQU		2
; 
;    Parameters for window refresh events:
;
;    kEventWindowUpdate
;        -->     kEventParamDirectObject     typeWindowRef
;
;    kEventWindowDrawContent
;        -->     kEventParamDirectObject     typeWindowRef
;



; *  Summary:
; *    Window activation events (kEventClassWindow)
; *  
; *  Discussion:
; *    Events related to activating and deactivating a window.
; 


kEventWindowActivated			EQU		5
kEventWindowDeactivated			EQU		6
kEventWindowGetClickActivation	EQU		7
; 
;    Parameters for window activation events:
;
;    kEventWindowActivated
;        -->     kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowDeactivated
;        -->     kEventParamDirectObject     typeWindowRef
;
;    kEventWindowGetClickActivation
;        -->     kEventParamDirectObject     typeWindowRef
;        -->     kEventParamMouseLocation    typeQDPoint
;        -->     kEventParamKeyModifiers     typeUInt32
;        -->     kEventParamWindowDefPart    typeWindowDefPartCode
;        -->     kEventParamControlRef       typeControlRef (only present if the click was on a control)
;        <--     kEventParamClickActivation  typeClickActivationResult
;



; *  Summary:
; *    Window state change events (kEventClassWindow)
; *  
; *  Discussion:
; *    Events that notify of a change in the window's state. These
; *    events are sent to all windows, regardless of whether the window
; *    has the standard handler installed.
; 


kEventWindowShowing				EQU		22
kEventWindowHiding				EQU		23
kEventWindowShown				EQU		24
kEventWindowHidden				EQU		25
kEventWindowBoundsChanging		EQU		26
kEventWindowBoundsChanged		EQU		27
kEventWindowResizeStarted		EQU		28
kEventWindowResizeCompleted		EQU		29
kEventWindowDragStarted			EQU		30
kEventWindowDragCompleted		EQU		31


; *  Summary:
; *    Window bounds change event attributes
; *  
; *  Discussion:
; *    When the toolbox sends out a kEventWindowBoundsChanging or
; *    kEventWindowBoundsChanged event, it also sends along a parameter
; *    containing attributes of the event. These attributes can be used
; *    to determine what aspect of the window changed (origin, size, or
; *    both), and whether or not some user action is driving the change
; *    (drag or resize).
; 


kWindowBoundsChangeUserDrag		EQU		$01
kWindowBoundsChangeUserResize	EQU		$02
kWindowBoundsChangeSizeChanged	EQU		$04
kWindowBoundsChangeOriginChanged EQU	$08

; 
;    Parameters for window state change events:
;    
;    kEventWindowBoundsChanging
;        -->     kEventParamDirectObject     typeWindowRef
;        -->     kEventParamAttributes       typeUInt32
;        -->     kEventParamOriginalBounds   typeQDRectangle
;        -->     kEventParamPreviousBounds   typeQDRectangle
;        <->     kEventParamCurrentBounds    typeQDRectangle
;        
;    kEventWindowBoundsChanged
;        -->     kEventParamDirectObject     typeWindowRef
;        -->     kEventParamAttributes       typeUInt32
;        -->     kEventParamOriginalBounds   typeQDRectangle
;        -->     kEventParamPreviousBounds   typeQDRectangle
;        -->     kEventParamCurrentBounds    typeQDRectangle
;    
;    kEventWindowShown
;        -->     kEventParamDirectObject     typeWindowRef
;
;    kEventWindowHidden
;        -->     kEventParamDirectObject     typeWindowRef
;



; *  Summary:
; *    Window click events (kEventClassWindow)
; *  
; *  Discussion:
; *    Low-level events which generate higher-level “action” events.
; *    These events are only generated for windows with the standard
; *    window handler installed. Most clients should allow the standard
; *    handler to implement these events.
; 


kEventWindowClickDragRgn		EQU		32
kEventWindowClickResizeRgn		EQU		33
kEventWindowClickCollapseRgn	EQU		34
kEventWindowClickCloseRgn		EQU		35
kEventWindowClickZoomRgn		EQU		36
kEventWindowClickContentRgn		EQU		37
kEventWindowClickProxyIconRgn	EQU		38


; *  Summary:
; *    Window cursor change events (kEventClassWindow)
; 


kEventWindowCursorChange		EQU		40
; 
;    Parameters for window cursor change events:
;    
;    kEventWindowCursorChange
;        -->     kEventParamDirectObject     typeWindowRef
;        -->     kEventParamMouseLocation    typeQDPoint
;        -->     kEventParamKeyModifiers     typeUInt32
;



; *  Summary:
; *    Window action events
; *  
; *  Discussion:
; *    Events which indicate that certain changes have been made to the
; *    window. These events have greater semantic meaning than the
; *    low-level window click events and are usually prefered for
; *    overriding.
; 


kEventWindowCollapse			EQU		66
kEventWindowCollapsed			EQU		67
kEventWindowCollapseAll			EQU		68
kEventWindowExpand				EQU		69
kEventWindowExpanded			EQU		70
kEventWindowExpandAll			EQU		71
kEventWindowClose				EQU		72
kEventWindowClosed				EQU		73
kEventWindowCloseAll			EQU		74
kEventWindowZoom				EQU		75
kEventWindowZoomed				EQU		76
kEventWindowZoomAll				EQU		77
kEventWindowContextualMenuSelect EQU	78
kEventWindowPathSelect			EQU		79
kEventWindowGetIdealSize		EQU		80
kEventWindowGetMinimumSize		EQU		81
kEventWindowGetMaximumSize		EQU		82
kEventWindowConstrain			EQU		83
kEventWindowHandleContentClick	EQU		85
kEventWindowProxyBeginDrag		EQU		128
kEventWindowProxyEndDrag		EQU		129
; 
;    Parameters for window action events:
;    
;    kEventWindowCollapse
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowCollapsed
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowCollapseAll
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowExpand
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowExpanded
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowExpandAll
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowClose
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowClosed
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowCloseAll
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowZoom
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowZoomed
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowZoomAll
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowContextualMenuSelect
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowPathSelect
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowGetIdealSize
;        --> kEventParamDirectObject     typeWindowRef
;        <-- kEventParamDimensions       typeQDPoint
;        
;    kEventWindowGetMinimumSize
;        --> kEventParamDirectObject     typeWindowRef
;        <-- kEventParamDimensions       typeQDPoint
;        
;    kEventWindowGetMaximumSize
;        --> kEventParamDirectObject     typeWindowRef
;        <-- kEventParamDimensions       typeQDPoint
;    
;    kEventWindowConstrain
;        --> kEventParamAvailableBounds  typeQDRectangle
;    
;    kEventWindowHandleContentClick
;        --> kEventParamDirectObject     typeWindowRef
;        --> kEventParamMouseLocation    typeQDPoint
;        --> kEventParamKeyModifiers     typeUInt32
;
;    kEventWindowProxyBeginDrag
;        --> kEventParamDirectObject     typeWindowRef
;        
;    kEventWindowProxyEndDrag
;        --> kEventParamDirectObject     typeWindowRef
;



; *  Summary:
; *    Window focus events (kEventClassWindow)
; *  
; *  Discussion:
; *    Events related to focus changes between windows. These events are
; *    generated by SetUserFocusWindow; since that API is only called by
; *    default by the standard window handler, these events are normally
; *    only sent to windows with the standard handler installed.
; 


kEventWindowFocusAcquired		EQU		200
kEventWindowFocusRelinquish		EQU		201
; 
;    Parameters for window focus events:
;    
;    kEventWindowFocusAcquire
;        -->     kEventParamDirectObject     typeWindowRef
;
;    kEventWindowFocusRelinquish
;        -->     kEventParamDirectObject     typeWindowRef
;



; *  Summary:
; *    Window definition events (kEventClassWindow)
; *  
; *  Discussion:
; *    Events that correspond to WDEF messages. Sent to all windows,
; *    regardless of whether they have the standard window handler
; *    installed.
; 


kEventWindowDrawFrame			EQU		1000
kEventWindowDrawPart			EQU		1001
kEventWindowGetRegion			EQU		1002
kEventWindowHitTest				EQU		1003
kEventWindowInit				EQU		1004
kEventWindowDispose				EQU		1005
kEventWindowDragHilite			EQU		1006
kEventWindowModified			EQU		1007
kEventWindowSetupProxyDragImage	EQU		1008
kEventWindowStateChanged		EQU		1009
kEventWindowMeasureTitle		EQU		1010
kEventWindowDrawGrowBox			EQU		1011
kEventWindowGetGrowImageRegion	EQU		1012
kEventWindowPaint				EQU		1013
; 
;    Parameters for window definition events:
;    
;    kEventWindowDrawFrame
;        -->     kEventParamDirectObject     typeWindowRef               the window
;
;    kEventWindowDrawPart
;        -->     kEventParamDirectObject     typeWindowRef               the window
;        -->     kEventParamWindowDefPart    typeWindowDefPartCode       the part to draw
;
;    kEventWindowGetRegion
;        -->     kEventParamDirectObject     typeWindowRef               the window
;        -->     kEventParamWindowRegionCode typeWindowRegionCode        the region to get
;        -->     kEventParamRgnHandle        typeQDRgnHandle             the region to munge
;
;    kEventWindowHitTest
;        -->     kEventParamDirectObject     typeWindowRef               the window
;        -->     kEventParamMouseLocation    typeQDPoint                 the mouse location
;        <--     kEventParamWindowDefPart    typeWindowDefPartCode       the part hit
;
;    kEventWindowInit
;        -->     kEventParamDirectObject     typeWindowRef               the window
;        <--     kEventParamWindowFeatures   typeUInt32                  the window features
;
;    kEventWindowDispose
;        -->     kEventParamDirectObject     typeWindowRef               the window
;
;    kEventWindowDragHilite
;        -->     kEventParamDirectObject             typeWindowRef       the window
;        -->     kEventParamWindowDragHiliteFlag     typeBoolean         whether to draw (true) or
;                                                                        erase (false) the hilite
;
;    kEventWindowModified
;        -->     kEventParamDirectObject             typeWindowRef       the window
;        -->     kEventParamWindowModifiedFlag       typeBoolean         the new modified state
;
;    kEventWindowSetupProxyDragImage
;        -->     kEventParamDirectObject             typeWindowRef       the window
;        -->     kEventParamWindowProxyImageRgn      typeQDRgnHandle     the region you modify
;                                                                        to contain the clip
;                                                                        region for the GWorld.
;        -->     kEventParamWindowProxyOutlineRgn    typeQDRgnHandle     the region you modify
;                                                                        to contain the drag
;                                                                        outline used when the
;                                                                        GWorld cannot be used.
;        <--     kEventParamWindowProxyGWorldPtr     typeGWorldPtr       a GWorld you allocate
;                                                                        which contains the
;                                                                        drag image.
;
;    kEventWindowStateChanged
;        -->     kEventParamDirectObject             typeWindowRef       the window
;        -->     kEventParamWindowStateChangedFlags  typeUInt32          the state change flags
;
;    kEventWindowMeasureTitle
;        -->     kEventParamDirectObject             typeWindowRef       the window
;        <--     kEventParamWindowTitleFullWidth     typeSInt16          the length of the whole title area
;        <--     kEventParamWindowTitleTextWidth     typeSInt16          the length just the title text
;
;    kEventWindowDrawGrowBox
;        -->     kEventParamDirectObject     typeWindowRef               the window
;
;    kEventWindowGetGrowImageRegion
;        -->     kEventParamDirectObject     typeWindowRef               the window
;        -->     kEventParamWindowGrowRect   typeQDRectangle             the global rect
;        -->     kEventParamRgnHandle        typeQDRgnHandle             the region to modify
;
;    kEventWindowPaint
;        -->     kEventParamDirectObject     typeWindowRef               the window
;

; ——————————————————————————————————————————————————————————————————————————————————————
;   Menu Events                                                                         
; ——————————————————————————————————————————————————————————————————————————————————————


; *  Summary:
; *    Menu events (kEventClassMenu)
; 


kEventMenuBeginTracking			EQU		1
kEventMenuEndTracking			EQU		2
kEventMenuChangeTrackingMode	EQU		3
kEventMenuOpening				EQU		4
kEventMenuClosed				EQU		5
kEventMenuTargetItem			EQU		6
kEventMenuMatchKey				EQU		7
kEventMenuEnableItems			EQU		8
kEventMenuDispose				EQU		1001
; 
;    Parameters for menu events:
;    
;    kEventMenuBeginTracking
;        -->     kEventParamDirectObject             typeMenuRef
;        -->     kEventParamCurrentMenuTrackingMode  typeMenuTrackingMode
;        
;    kEventMenuEndTracking
;        -->     kEventParamDirectObject             typeMenuRef
;        
;    kEventMenuOpening
;        -->     kEventParamDirectObject             typeMenuRef
;        -->     kEventParamMenuFirstOpen            typeBoolean
;        
;    kEventMenuClosed
;        -->     kEventParamDirectObject             typeMenuRef
;        
;    kEventMenuTargetItem
;        -->     kEventParamDirectObject             typeMenuRef
;        -->     kEventParamMenuItemIndex            typeMenuItemIndex
;        -->     kEventParamMenuCommand              typeMenuCommand
;    
;    kEventMenuMatchKey
;        -->     kEventParamDirectObject             typeMenuRef
;        -->     kEventParamEventRef                 typeEventRef
;        -->     kEventParamMenuEventOptions         typeMenuEventOptions
;        <--     kEventParamMenuItemIndex            typeMenuItemIndex
;        
;    kEventMenuEnableItems
;        -->     kEventParamDirectObject             typeMenuRef
;        -->     kEventParamEnableMenuForKeyEvent    typeBoolean
;        
;    kEventMenuDispose
;        -->     kEventParamDirectObject             typeMenuRef
;

; ——————————————————————————————————————————————————————————————————————————————————————
;   Command Events                                                                      
; ——————————————————————————————————————————————————————————————————————————————————————


; *  Summary:
; *    Command events (kEventClassCommand)
; 


kEventProcessCommand			EQU		1
kEventCommandProcess			EQU		1
kEventCommandUpdateStatus		EQU		2
; 
;    Parameters for command events:
;
;    kEventCommandProcess
;        -->     kEventParamDirectObject     typeHICommand
;        -->     kEventParamKeyModifiers     typeUInt32 (optional)
;
;    kEventCommandUpdateStatus
;        -->     kEventParamDirectObject     typeHICommand
;

;  HI Commands 

kHICommandOK					EQU		'ok  '
kHICommandCancel				EQU		'not!'
kHICommandQuit					EQU		'quit'
kHICommandUndo					EQU		'undo'
kHICommandRedo					EQU		'redo'
kHICommandCut					EQU		'cut '
kHICommandCopy					EQU		'copy'
kHICommandPaste					EQU		'past'
kHICommandClear					EQU		'clea'
kHICommandSelectAll				EQU		'sall'
kHICommandHide					EQU		'hide'
kHICommandPreferences			EQU		'pref'
kHICommandZoomWindow			EQU		'zoom'
kHICommandMinimizeWindow		EQU		'mini'
kHICommandArrangeInFront		EQU		'frnt'
kHICommandAbout					EQU		'abou'

kHICommandFromMenu				EQU		$00000001
HICommand				RECORD 0
attributes				 ds.l	1				; offset: $0 (0)
commandID				 ds.l	1				; offset: $4 (4)
menuRef					 ds.l	1				; offset: $8 (8)
menuItemIndex			 ds.w	1				; offset: $C (12)
sizeof					 EQU *					; size:   $E (14)
						ENDR
; ——————————————————————————————————————————————————————————————————————————————————————
;   Control Events                                                                      
; ——————————————————————————————————————————————————————————————————————————————————————


; *  Summary:
; *    Control events (kEventClassControl)
; 


kEventControlInitialize			EQU		1000
kEventControlDispose			EQU		1001
kEventControlGetOptimalBounds	EQU		1003
kEventControlDefInitialize		EQU		1000
kEventControlDefDispose			EQU		1001
kEventControlHit				EQU		1
kEventControlSimulateHit		EQU		2
kEventControlHitTest			EQU		3
kEventControlDraw				EQU		4
kEventControlApplyBackground	EQU		5
kEventControlApplyTextColor		EQU		6
kEventControlSetFocusPart		EQU		7
kEventControlGetFocusPart		EQU		8
kEventControlActivate			EQU		9
kEventControlDeactivate			EQU		10
kEventControlSetCursor			EQU		11
kEventControlContextualMenuClick EQU	12
kEventControlClick				EQU		13
kEventControlTrack				EQU		51
kEventControlGetScrollToHereStartPoint EQU 52
kEventControlGetIndicatorDragConstraint EQU 53
kEventControlIndicatorMoved		EQU		54
kEventControlGhostingFinished	EQU		55
kEventControlGetActionProcPart	EQU		56
kEventControlGetPartRegion		EQU		101
kEventControlGetPartBounds		EQU		102
kEventControlSetData			EQU		103
kEventControlGetData			EQU		104
kEventControlValueFieldChanged	EQU		151
kEventControlAddedSubControl	EQU		152
kEventControlRemovingSubControl	EQU		153
kEventControlBoundsChanged		EQU		154
kEventControlOwningWindowChanged EQU	159
kEventControlArbitraryMessage	EQU		201


; *  Summary:
; *    Control bounds change event attributes
; *  
; *  Discussion:
; *    When the toolbox sends out a kEventControlBoundsChanged event, it
; *    also sends along a parameter containing attributes of the event.
; *    These attributes can be used to determine what aspect of the
; *    control changed (position, size, or both).
; 


kControlBoundsChangeSizeChanged	EQU		$04
kControlBoundsChangePositionChanged EQU	$08
; 
;    Parameters for control events:
;
;    kEventControlInitialize
;        -->     kEventParamDirectObject     typeControlRef
;        -->     kEventParamInitCollection   typeCollection
;        <--     kEventParamControlFeatures  typeUInt32
;        
;    kEventControlDispose
;        -->     kEventParamDirectObject     typeControlRef
;
;    kEventControlGetOptimalBounds
;        Required parameters:
;        -->     kEventParamDirectObject                     typeControlRef
;        <--     kEventParamControlOptimalBounds             typeQDRectangle
;        
;        Optional parameters:
;        <--     kEventParamControlOptimalBaselineOffset     typeShortInteger (optional)
;        
;    kEventControlHit
;        -->     kEventParamDirectObject     typeControlRef
;        -->     kEventParamControlPart      typeControlPartCode
;        -->     kEventParamKeyModifiers     typeUInt32
;
;    kEventControlSimulateHit
;        -->     kEventParamDirectObject     typeControlRef
;        
;    kEventControlHitTest
;        -->     kEventParamDirectObject     typeControlRef
;        -->     kEventParamMouseLocation    typeQDPoint
;        <--     kEventParamControlPart      typeControlPartCode
;        
;    kEventControlDraw
;        Required parameters:
;        -->     kEventParamDirectObject     typeControlRef
;        
;        Optional parameters:
;        -->     kEventParamControlPart      typeControlPartCode
;                    (draw the entire control if kEventParamControlPart is not present)
;        -->     kEventParamGrafPort         typeGrafPtr
;                    (draw into the current port if kEventParamGrafPort is not present)
;
;    kEventControlApplyBackground
;        Required parameters:
;        -->     kEventParamDirectObject         typeControlRef
;        -->     kEventParamControlSubControl    typeControlRef
;        -->     kEventParamControlDrawDepth     typeShortInteger
;        -->     kEventParamControlDrawInColor   typeBoolean
;        
;        Optional parameters:
;        -->     kEventParamGrafPort             typeGrafPtr
;                    (apply to the current port if kEventParamGrafPort is not present)
;
;    kEventControlApplyTextColor
;        Required parameters:
;        -->     kEventParamDirectObject         typeControlRef
;        -->     kEventParamControlSubControl    typeControlRef
;        -->     kEventParamControlDrawDepth     typeShortInteger
;        -->     kEventParamControlDrawInColor   typeBoolean
;        
;        Optional parameters:
;        -->     kEventParamCGContextRef         typeCGContextRef
;        -->     kEventParamGrafPort             typeGrafPtr
;                    (apply to the current port if kEventParamGrafPort is not present)
;
;    kEventControlSetFocusPart
;        -->     kEventParamDirectObject     typeControlRef
;        <->     kEventParamControlPart      typeControlPartCode
;
;    kEventControlGetFocusPart
;        -->     kEventParamDirectObject     typeControlRef
;        <--     kEventParamControlPart      typeControlPartCode
;
;    kEventControlActivate
;        -->     kEventParamDirectObject     typeControlRef
;
;    kEventControlDeactivate
;        -->     kEventParamDirectObject     typeControlRef
;
;    kEventControlSetCursor
;        -->     kEventParamDirectObject     typeControlRef
;        -->     kEventParamMouseLocation    typeQDPoint
;        -->     kEventParamKeyModifiers     typeUInt32
;
;    kEventControlContextualMenuClick
;        -->     kEventParamDirectObject     typeControlRef
;        -->     kEventParamMouseLocation    typeQDPoint
;
;    kEventControlTrack
;        -->     kEventParamDirectObject     typeControlRef
;        -->     kEventParamMouseLocation    typeQDPoint
;        <->     kEventParamKeyModifiers     typeUInt32
;        -->     kEventParamControlAction    typeControlActionUPP
;        <--     kEventParamControlPart      typeControlPartCode
;
;    kEventControlGetScrollToHereStartPoint
;        -->     kEventParamDirectObject     typeControlRef
;        <->     kEventParamMouseLocation    typeQDPoint
;        -->     kEventParamKeyModifiers     typeUInt32
;
;    kEventControlGetIndicatorDragConstraint
;        -->     kEventParamDirectObject                     typeControlRef
;        -->     kEventParamMouseLocation                    typeQDPoint
;        -->     kEventParamKeyModifiers                     typeUInt32
;        <--     kEventParamControlIndicatorDragConstraint   typeIndicatorDragConstraint
;
;    kEventControlIndicatorMoved
;        -->     kEventParamDirectObject             typeControlRef
;        -->     kEventParamControlIndicatorRegion   typeQDRgnHandle
;        -->     kEventParamControlIsGhosting        typeBoolean
;
;    kEventControlGhostingFinished
;        -->     kEventParamDirectObject             typeControlRef
;        -->     kEventParamControlIndicatorOffset   typeQDPoint
;
;    kEventControlGetActionProcPart
;        -->     kEventParamDirectObject             typeControlRef
;        -->     kEventParamKeyModifiers             typeUInt32
;        <->     kEventParamControlPart              typeControlPartCode
;
;    kEventControlGetPartRegion
;        -->     kEventParamDirectObject             typeControlRef
;        -->     kEventParamControlPart              typeControlPartCode
;        -->     kEventParamControlRegion            typeQDRgnHandle
;
;    kEventControlGetPartBounds
;        -->     kEventParamDirectObject             typeControlRef
;        -->     kEventParamControlPart              typeControlPartCode
;        <--     kEventParamControlPartBounds        typeQDRectangle
;
;    kEventControlSetData
;        -->     kEventParamDirectObject             typeControlRef
;        -->     kEventParamControlPart              typeControlPartCode
;        -->     kEventParamControlDataTag           typeEnumeration
;        -->     kEventParamControlDataBuffer        typePtr
;        -->     kEventParamControlDataBufferSize    typeLongInteger
;
;    kEventControlGetData
;        -->     kEventParamDirectObject             typeControlRef
;        -->     kEventParamControlPart              typeControlPartCode
;        -->     kEventParamControlDataTag           typeEnumeration
;        -->     kEventParamControlDataBuffer        typePtr
;        <->     kEventParamControlDataBufferSize    typeLongInteger
;
;    kEventControlValueFieldChanged
;        -->     kEventParamDirectObject             typeControlRef
;
;    kEventControlAddedSubControl
;        -->     kEventParamDirectObject             typeControlRef
;        -->     kEventParamControlSubControl        typeControlRef
;
;    kEventControlRemovingSubControl
;        -->     kEventParamDirectObject             typeControlRef
;        -->     kEventParamControlSubControl        typeControlRef
;
;    kEventControlBoundsChanged
;        -->     kEventParamDirectObject             typeControlRef
;        -->     kEventParamAttributes               typeUInt32
;        -->     kEventParamOriginalBounds           typeQDRectangle
;        -->     kEventParamPreviousBounds           typeQDRectangle
;        -->     kEventParamCurrentBounds            typeQDRectangle
;
;    kEventControlOwningWindowChanged
;        -->     kEventParamDirectObject                 typeControlRef
;        -->     kEventParamAttributes                   typeUInt32
;        -->     kEventParamControlOriginalOwningWindow  typeWindowRef
;        -->     kEventParamControlCurrentOwningWindow   typeWindowRef
;
;    kEventControlArbitraryMessage
;        -->     kEventParamDirectObject             typeControlRef
;        -->     kEventParamControlMessage           typeShortInteger
;        -->     kEventParamControlParam             typeLongInteger
;        <--     kEventParamControlResult            typeLongInteger
;

; ——————————————————————————————————————————————————————————————————————————————————————
;   Tablet Events                                                                       
; ——————————————————————————————————————————————————————————————————————————————————————


; *  Summary:
; *    Tablet events (kEventClassTablet)
; 


kEventTabletPointer				EQU		1
kEventTabletProximity			EQU		2
TabletPointerRec		RECORD 0
absX					 ds.l	1				; offset: $0 (0)		;  absolute x coordinate in tablet space at full tablet resolution 
absY					 ds.l	1				; offset: $4 (4)		;  absolute y coordinate in tablet space at full tablet resolution 
absZ					 ds.l	1				; offset: $8 (8)		;  absolute z coordinate in tablet space at full tablet resolution 
buttons					 ds.w	1				; offset: $C (12)		;  one bit per button - bit 0 is first button - 1 = closed 
pressure				 ds.w	1				; offset: $E (14)		;  scaled pressure value; MAXPRESSURE=(2^16)-1, MINPRESSURE=0 
tiltX					 ds.w	1				; offset: $10 (16)		;  scaled tilt x value; range is -((2^15)-1) to (2^15)-1 (-32767 to 32767) 
tiltY					 ds.w	1				; offset: $12 (18)		;  scaled tilt y value; range is -((2^15)-1) to (2^15)-1 (-32767 to 32767) 
rotation				 ds.w	1				; offset: $14 (20)		;  Fixed-point representation of device rotation in a 10.6 format 
tangentialPressure		 ds.w	1				; offset: $16 (22)		;  tangential pressure on the device; range same as tilt 
deviceID				 ds.w	1				; offset: $18 (24)		;  system-assigned unique device ID - matches to deviceID field in proximity event 
vendor1					 ds.w	1				; offset: $1A (26)		;  vendor-defined signed 16-bit integer 
vendor2					 ds.w	1				; offset: $1C (28)		;  vendor-defined signed 16-bit integer 
vendor3					 ds.w	1				; offset: $1E (30)		;  vendor-defined signed 16-bit integer 
sizeof					 EQU *					; size:   $20 (32)
						ENDR
TabletProximityRec		RECORD 0
vendorID				 ds.w	1				; offset: $0 (0)		;  vendor-defined ID - typically will be USB vendor ID 
tabletID				 ds.w	1				; offset: $2 (2)		;  vendor-defined tablet ID - typically will be USB product ID for the tablet 
pointerID				 ds.w	1				; offset: $4 (4)		;  vendor-defined ID of the specific pointing device 
deviceID				 ds.w	1				; offset: $6 (6)		;  system-assigned unique device ID - matches to deviceID field in tablet event 
systemTabletID			 ds.w	1				; offset: $8 (8)		;  system-assigned unique tablet ID 
vendorPointerType		 ds.w	1				; offset: $A (10)		;  vendor-defined pointer type 
pointerSerialNumber		 ds.l	1				; offset: $C (12)		;  vendor-defined serial number of the specific pointing device 
uniqueID				 ds		UInt64			; offset: $10 (16)		;  vendor-defined unique ID for this pointer 
capabilityMask			 ds.l	1				; offset: $18 (24)		;  mask representing the capabilities of the device 
pointerType				 ds.b	1				; offset: $1C (28)		;  type of pointing device - enum to be defined 
enterProximity			 ds.b	1				; offset: $1D (29)		;  non-zero = entering; zero = leaving 
sizeof					 EQU *					; size:   $1E (30)
						ENDR
; ——————————————————————————————————————————————————————————————————————————————————————
;  Volume Events                                                                        
; ——————————————————————————————————————————————————————————————————————————————————————


; *  Summary:
; *    Volume events (kEventClassVolume)
; 


kEventVolumeMounted				EQU		1					; new volume mounted
kEventVolumeUnmounted			EQU		2					; volume has been ejected or unmounted
; 
;    Parameters for volume events:
;
;    kEventVolumeMounted
;        -->     kEventParamDirectObject     typeFSVolumeRefNum
;    
;    kEventVolumeUnmounted
;        -->     kEventParamDirectObject     typeFSVolumeRefNum
;


;  types for volume events


typeFSVolumeRefNum				EQU		'voln'				; FSVolumeRefNum
; ——————————————————————————————————————————————————————————————————————————————————————
;  Parameter names and types                                                            
; ——————————————————————————————————————————————————————————————————————————————————————

kEventParamDirectObject			EQU		'----'				; type varies depending on event
;  Generic toolbox types and parameter names


kEventParamWindowRef			EQU		'wind'				; typeWindowRef
kEventParamGrafPort				EQU		'graf'				; typeGrafPtr
kEventParamDragRef				EQU		'drag'				; typeDragRef
kEventParamMenuRef				EQU		'menu'				; typeMenuRef
kEventParamEventRef				EQU		'evnt'				; typeEventRef
kEventParamControlRef			EQU		'ctrl'				; typeControlRef
kEventParamRgnHandle			EQU		'rgnh'				; typeQDRgnHandle
kEventParamEnabled				EQU		'enab'				; typeBoolean
kEventParamDimensions			EQU		'dims'				; typeQDPoint
kEventParamAvailableBounds		EQU		'avlb'				; typeQDRectangle
kEventParamAEEventID			EQU		'evti'				; typeType
kEventParamAEEventClass			EQU		'evcl'				; typeType
kEventParamCGContextRef			EQU		'cntx'				; typeCGContextRef
typeWindowRef					EQU		'wind'				; WindowRef
typeGrafPtr						EQU		'graf'				; CGrafPtr
typeGWorldPtr					EQU		'gwld'				; GWorldPtr
typeDragRef						EQU		'drag'				; DragRef
typeMenuRef						EQU		'menu'				; MenuRef
typeControlRef					EQU		'ctrl'				; ControlRef
typeCollection					EQU		'cltn'				; Collection
typeQDRgnHandle					EQU		'rgnh'				; RgnHandle
typeOSStatus					EQU		'osst'				; OSStatus
typeCGContextRef				EQU		'cntx'				; CGContextRef
;  mouse-event-related event parameters


kEventParamMouseLocation		EQU		'mloc'				; typeQDPoint
kEventParamMouseButton			EQU		'mbtn'				; typeMouseButton
kEventParamClickCount			EQU		'ccnt'				; typeUInt32
kEventParamMouseWheelAxis		EQU		'mwax'				; typeMouseWheelAxis
kEventParamMouseWheelDelta		EQU		'mwdl'				; typeSInt32
kEventParamMouseDelta			EQU		'mdta'				; typeQDPoint
kEventParamMouseChord			EQU		'chor'				; typeUInt32
typeMouseButton					EQU		'mbtn'				; EventMouseButton
typeMouseWheelAxis				EQU		'mwax'				; EventMouseWheelAxis
;  keyboard parameter types


kEventParamKeyCode				EQU		'kcod'				; typeUInt32
kEventParamKeyMacCharCodes		EQU		'kchr'				; typeChar
kEventParamKeyModifiers			EQU		'kmod'				; typeUInt32
kEventParamKeyUnicodes			EQU		'kuni'				; typeUnicodeText
typeEventHotKeyID				EQU		'hkid'				; EventHotKeyID
;  TextInput parameter types


kEventParamTextInputSendRefCon	EQU		'tsrc'				;    typeLongInteger
kEventParamTextInputSendComponentInstance EQU 'tsci'		;    typeComponentInstance
kEventParamTextInputSendSLRec	EQU		'tssl'				;    typeIntlWritingCode
kEventParamTextInputReplySLRec	EQU		'trsl'				;    typeIntlWritingCode
kEventParamTextInputSendText	EQU		'tstx'				;    typeUnicodeText (if TSMDocument is Unicode), otherwise typeChar
kEventParamTextInputReplyText	EQU		'trtx'				;    typeUnicodeText (if TSMDocument is Unicode), otherwise typeChar
kEventParamTextInputSendUpdateRng EQU	'tsup'				;    typeTextRangeArray
kEventParamTextInputSendHiliteRng EQU	'tshi'				;    typeTextRangeArray
kEventParamTextInputSendClauseRng EQU	'tscl'				;    typeOffsetArray
kEventParamTextInputSendPinRng	EQU		'tspn'				;    typeTextRange
kEventParamTextInputSendFixLen	EQU		'tsfx'				;    typeLongInteger
kEventParamTextInputSendLeadingEdge EQU	'tsle'				;    typeBoolean
kEventParamTextInputReplyLeadingEdge EQU 'trle'				;    typeBoolean
kEventParamTextInputSendTextOffset EQU	'tsto'				;    typeLongInteger
kEventParamTextInputReplyTextOffset EQU	'trto'				;    typeLongInteger
kEventParamTextInputReplyRegionClass EQU 'trrg'				;    typeLongInteger
kEventParamTextInputSendCurrentPoint EQU 'tscp'				;    typeQDPoint
kEventParamTextInputSendDraggingMode EQU 'tsdm'				;    typeBoolean
kEventParamTextInputReplyPoint	EQU		'trpt'				;    typeQDPoint
kEventParamTextInputReplyFont	EQU		'trft'				;    typeLongInteger
kEventParamTextInputReplyPointSize EQU	'trpz'				;    typeFixed
kEventParamTextInputReplyLineHeight EQU	'trlh'				;    typeShortInteger
kEventParamTextInputReplyLineAscent EQU	'trla'				;    typeShortInteger
kEventParamTextInputReplyTextAngle EQU	'trta'				;    typeFixed
kEventParamTextInputSendShowHide EQU	'tssh'				;    typeBoolean
kEventParamTextInputReplyShowHide EQU	'trsh'				;    typeBoolean
kEventParamTextInputSendKeyboardEvent EQU 'tske'			;    typeEventRef
kEventParamTextInputSendTextServiceEncoding EQU 'tsse'		;    typeUInt32
kEventParamTextInputSendTextServiceMacEncoding EQU 'tssm'	;    typeUInt32


;  HICommand stuff


kEventParamHICommand			EQU		'hcmd'				; typeHICommand
typeHICommand					EQU		'hcmd'				; HICommand
;  Window-related stuff

kEventParamWindowFeatures		EQU		'wftr'				; typeUInt32
kEventParamWindowDefPart		EQU		'wdpc'				; typeWindowDefPartCode
kEventParamCurrentBounds		EQU		'crct'				; typeQDRectangle
kEventParamOriginalBounds		EQU		'orct'				; typeQDRectangle
kEventParamPreviousBounds		EQU		'prct'				; typeQDRectangle
kEventParamClickActivation		EQU		'clac'				; typeClickActivationResult
kEventParamWindowRegionCode		EQU		'wshp'				; typeWindowRegionCode
kEventParamWindowDragHiliteFlag	EQU		'wdhf'				; typeBoolean
kEventParamWindowModifiedFlag	EQU		'wmff'				; typeBoolean
kEventParamWindowProxyGWorldPtr	EQU		'wpgw'				; typeGWorldPtr
kEventParamWindowProxyImageRgn	EQU		'wpir'				; typeQDRgnHandle
kEventParamWindowProxyOutlineRgn EQU	'wpor'				; typeQDRgnHandle
kEventParamWindowStateChangedFlags EQU	'wscf'				; typeUInt32 
kEventParamWindowTitleFullWidth	EQU		'wtfw'				; typeSInt16
kEventParamWindowTitleTextWidth	EQU		'wttw'				; typeSInt16
kEventParamWindowGrowRect		EQU		'grct'				; typeQDRectangle
kEventParamAttributes			EQU		'attr'				; typeUInt32
typeWindowRegionCode			EQU		'wshp'				; WindowRegionCode
typeWindowDefPartCode			EQU		'wdpt'				; WindowDefPartCode
typeClickActivationResult		EQU		'clac'				; ClickActivationResult

;  control stuff


kEventParamControlPart			EQU		'cprt'				; typeControlPartCode
kEventParamInitCollection		EQU		'icol'				; typeCollection
kEventParamControlMessage		EQU		'cmsg'				; typeShortInteger
kEventParamControlParam			EQU		'cprm'				; typeLongInteger
kEventParamControlResult		EQU		'crsl'				; typeLongInteger
kEventParamControlRegion		EQU		'crgn'				; typeQDRgnHandle
kEventParamControlAction		EQU		'caup'				; typeControlActionUPP
kEventParamControlIndicatorDragConstraint EQU 'cidc'		; typeIndicatorDragConstraint
kEventParamControlIndicatorRegion EQU	'cirn'				; typeQDRgnHandle
kEventParamControlIsGhosting	EQU		'cgst'				; typeBoolean
kEventParamControlIndicatorOffset EQU	'ciof'				; typeQDPoint
kEventParamControlClickActivationResult EQU 'ccar'			; typeClickActivationResult
kEventParamControlSubControl	EQU		'csub'				; typeControlRef
kEventParamControlOptimalBounds	EQU		'cobn'				; typeQDRectangle
kEventParamControlOptimalBaselineOffset EQU 'cobo'			; typeShortInteger
kEventParamControlDataTag		EQU		'cdtg'				; typeEnumeration
kEventParamControlDataBuffer	EQU		'cdbf'				; typePtr
kEventParamControlDataBufferSize EQU	'cdbs'				; typeLongInteger
kEventParamControlDrawDepth		EQU		'cddp'				; typeShortInteger
kEventParamControlDrawInColor	EQU		'cdic'				; typeBoolean
kEventParamControlFeatures		EQU		'cftr'				; typeUInt32
kEventParamControlPartBounds	EQU		'cpbd'				; typeQDRectangle
kEventParamControlOriginalOwningWindow EQU 'coow'			; typeWindowRef
kEventParamControlCurrentOwningWindow EQU 'ccow'			; typeWindowRef
typeControlActionUPP			EQU		'caup'				; ControlActionUPP
typeIndicatorDragConstraint		EQU		'cidc'				; IndicatorDragConstraint
typeControlPartCode				EQU		'cprt'				; ControlPartCode
;  menu-related event parameters


kEventParamCurrentMenuTrackingMode EQU	'cmtm'				; typeMenuTrackingMode
kEventParamNewMenuTrackingMode	EQU		'nmtm'				; typeMenuTrackingMode
kEventParamMenuFirstOpen		EQU		'1sto'				; typeBoolean
kEventParamMenuItemIndex		EQU		'item'				; typeMenuItemIndex
kEventParamMenuCommand			EQU		'mcmd'				; typeMenuCommand
kEventParamEnableMenuForKeyEvent EQU	'fork'				; typeBoolean
kEventParamMenuEventOptions		EQU		'meop'				; typeMenuEventOptions
typeMenuItemIndex				EQU		'midx'				; MenuItemIndex
typeMenuCommand					EQU		'mcmd'				; MenuCommand
typeMenuTrackingMode			EQU		'mtmd'				; MenuTrackingMode
typeMenuEventOptions			EQU		'meop'				; MenuEventOptions
;  application-event parameters


kEventParamProcessID			EQU		'psn '				; typeProcessSerialNumber
kEventParamLaunchRefCon			EQU		'lref'				; typeWildcard
kEventParamLaunchErr			EQU		'err '				; typeOSStatus
;  tablet event parameters


kEventParamTabletPointerRec		EQU		'tbrc'				; typeTabletPointerRec
kEventParamTabletProximityRec	EQU		'tbpx'				; typeTabletProximityRec
typeTabletPointerRec			EQU		'tbrc'				; kEventParamTabletPointerRec
typeTabletProximityRec			EQU		'tbpx'				; kEventParamTabletProximityRec

; ======================================================================================
;   EVENT HANDLERS                                                                      
; ======================================================================================






; ——————————————————————————————————————————————————————————————————————————————————————
;   • EventHandler specification                                                        
; ——————————————————————————————————————————————————————————————————————————————————————


; *  EventHandlerProcPtr
; *  
; *  Discussion:
; *    Callback for receiving events sent to a target this callback is
; *    installed on.
; *  
; *  Parameters:
; *    
; *    inHandlerCallRef:
; *      A reference to the current handler call chain. This is sent to
; *      your handler so that you can call CallNextEventHandler if you
; *      need to.
; *    
; *    inEvent:
; *      The Event.
; *    
; *    inUserData:
; *      The app-specified data you passed in a call to
; *      InstallEventHandler.
; *  
; *  Result:
; *    An operating system result code. Returning noErr indicates you
; *    handled the event. Returning eventNotHandledErr indicates you did
; *    not handle the event and perhaps the toolbox should take other
; *    action.
; 


; *  NewEventHandlerUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeEventHandlerUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeEventHandlerUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Installing Event Handlers                                                         
;                                                                                       
;  Use these routines to install event handlers for a specific toolbox object. You may  
;  pass zero for inNumTypes and NULL for inList if you need to be in a situation where  
;  you know you will be receiving events, but not exactly which ones at the time you    
;  are installing the handler. Later, your application can call the Add/Remove routines 
;  listed below this section.                                                           
;                                                                                       
;  You can only install a specific handler once. The combination of inHandler and       
;  inUserData is considered the 'signature' of a handler. Any attempt to install a new  
;  handler with the same proc and user data as an already-installed handler will result 
;  in eventHandlerAlreadyInstalledErr. Installing the same proc and user data on a      
;  different object is legal.                                                           
;                                                                                       
;  Upon successful completion of this routine, you are returned an EventHandlerRef,     
;  which you can use in various other calls, and is passed to your event handler. You   
;  use it to extract information about the handler, such as the target (window, etc.)   
;  if you have the same handler installed for different objects and need to perform     
;  actions on the current target (say, call a window manager function).                 
; ——————————————————————————————————————————————————————————————————————————————————————



; *  GetWindowEventTarget()
; *  
; *  Discussion:
; *    Returns the EventTargetRef for the specified window. Once you
; *    obtain this reference, you can send events to the target and
; *    install an event handler on it.
; *  
; *  Parameters:
; *    
; *    inWindow:
; *      The window to return the target for.
; *  
; *  Result:
; *    An EventTargetRef.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventTargetRef GetWindowEventTarget(WindowRef inWindow)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetWindowEventTarget
	ENDIF


; *  GetControlEventTarget()
; *  
; *  Discussion:
; *    Returns the EventTargetRef for the specified control. Once you
; *    obtain this reference, you can send events to the target and
; *    install event handler on it.
; *  
; *  Parameters:
; *    
; *    inControl:
; *      The control to return the target for.
; *  
; *  Result:
; *    An EventTargetRef.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventTargetRef GetControlEventTarget(ControlRef inControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlEventTarget
	ENDIF


; *  GetMenuEventTarget()
; *  
; *  Discussion:
; *    Returns the EventTargetRef for the specified menu. Once you
; *    obtain this reference, you can send events to the target and
; *    install event handler on it.
; *  
; *  Parameters:
; *    
; *    inMenu:
; *      The menu to return the target for.
; *  
; *  Result:
; *    An EventTargetRef.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventTargetRef GetMenuEventTarget(MenuRef inMenu)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetMenuEventTarget
	ENDIF


; *  GetApplicationEventTarget()
; *  
; *  Discussion:
; *    Returns the EventTargetRef for the application. Once you obtain
; *    this reference, you can send events to the target and install
; *    event handler on it.
; *  
; *  Result:
; *    An EventTargetRef.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventTargetRef GetApplicationEventTarget(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetApplicationEventTarget
	ENDIF


; *  GetUserFocusEventTarget()
; *  
; *  Discussion:
; *    Returns the EventTargetRef for the current user focus at the time
; *    of the call. Keyboard events are always sent to this target.
; *  
; *  Result:
; *    An EventTargetRef.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal EventTargetRef GetUserFocusEventTarget(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetUserFocusEventTarget
	ENDIF


; *  GetEventDispatcherTarget()
; *  
; *  Discussion:
; *    Returns the EventTargetRef for the standard toolbox dispatcher.
; *    You typically would never need to use this, but there are some
; *    exotic apps that need to pick events off the event queue and call
; *    the dispatcher themselves. This allows you to do just that
; *    instead of calling RunApplicationEventLoop to handle it all.
; *  
; *  Result:
; *    An EventTargetRef.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern EventTargetRef GetEventDispatcherTarget(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetEventDispatcherTarget
	ENDIF


; *  InstallEventHandler()
; *  
; *  Discussion:
; *    Installs an event handler on a specified target. Your handler
; *    proc will be called with the events you registered with when an
; *    event of the corresponding type and class are send to the target
; *    you are installing your handler on.
; *  
; *  Parameters:
; *    
; *    inTarget:
; *      The target to register your handler with.
; *    
; *    inHandler:
; *      A pointer to your handler function.
; *    
; *    inNumTypes:
; *      The number of events you are registering for.
; *    
; *    inList:
; *      A pointer to an array of EventTypeSpec entries representing the
; *      events you are interested in.
; *    
; *    inUserData:
; *      The value passed in this parameter is passed on to your event
; *      handler proc when it is called.
; *    
; *    outRef:
; *      Receives an EventHandlerRef, which you can use later to remove
; *      the handler. You can pass null if you don't want the reference
; *      - when the target is disposed, the handler will be disposed as
; *      well.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus InstallEventHandler(EventTargetRef inTarget, EventHandlerUPP inHandler, UInt32 inNumTypes, const EventTypeSpec *inList, void *inUserData, EventHandlerRef *outRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InstallEventHandler
	ENDIF


; *  InstallStandardEventHandler()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus InstallStandardEventHandler(EventTargetRef inTarget)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InstallStandardEventHandler
	ENDIF


; *  RemoveEventHandler()
; *  
; *  Discussion:
; *    Removes an event handler from the target it was bound to.
; *  
; *  Parameters:
; *    
; *    inHandlerRef:
; *      The handler ref to remove (returned in a call to
; *      InstallEventHandler). After you call this function, the handler
; *      ref is considered to be invalid and can no longer be used.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus RemoveEventHandler(EventHandlerRef inHandlerRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RemoveEventHandler
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Adjusting set of event types after a handler is created                           
;                                                                                       
;  After installing a handler with the routine above, you can adjust the event type     
;  list telling the toolbox what events to send to that handler by calling the two      
;  routines below. If you add an event type twice for the same handler, your handler    
;  will only be called once, but it will take two RemoveEventType calls to stop your    
;  handler from being called with that event type. In other words, the install count    
;  for each event type is maintained by the toolbox. This might allow you, for example  
;  to have subclasses of a window object register for types without caring if the base  
;  class has already registered for that type. When the subclass removes its types, it  
;  can successfully do so without affecting the base class's reception of its event     
;  types, yielding eternal bliss.                                                       
; ——————————————————————————————————————————————————————————————————————————————————————


; *  AddEventTypesToHandler()
; *  
; *  Discussion:
; *    Adds additional events to an event handler that has already been
; *    installed.
; *  
; *  Parameters:
; *    
; *    inHandlerRef:
; *      The event handler to add the additional events to.
; *    
; *    inNumTypes:
; *      The number of events to add.
; *    
; *    inList:
; *      A pointer to an array of EventTypeSpec entries.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus AddEventTypesToHandler(EventHandlerRef inHandlerRef, UInt32 inNumTypes, const EventTypeSpec *inList)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddEventTypesToHandler
	ENDIF


; *  RemoveEventTypesFromHandler()
; *  
; *  Discussion:
; *    Removes events from an event handler that has already been
; *    installed.
; *  
; *  Parameters:
; *    
; *    inHandlerRef:
; *      The event handler to remove the events from.
; *    
; *    inNumTypes:
; *      The number of events to remove.
; *    
; *    inList:
; *      A pointer to an array of EventTypeSpec entries.
; *  
; *  Result:
; *    An operating system status code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus RemoveEventTypesFromHandler(EventHandlerRef inHandlerRef, UInt32 inNumTypes, const EventTypeSpec *inList)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RemoveEventTypesFromHandler
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Explicit Propogation                                                              
;                                                                                       
;   CallNextEventHandler can be used to call thru to all handlers below the current     
;   handler being called. You pass the EventHandlerCallRef passed to your EventHandler  
;   into this call so that we know how to properly forward the event. The result of     
;   this function should normally be the result of your own handler that you called     
;   this API from. The typical use of this routine would be to allow the toolbox to do  
;   its standard processing and then follow up with some type of embellishment.         
; ——————————————————————————————————————————————————————————————————————————————————————


; *  CallNextEventHandler()
; *  
; *  Discussion:
; *    Calls thru to the event handlers below you in the event handler
; *    stack of the target to which your handler is bound. You might use
; *    this to call thru to the default toolbox handling in order to
; *    post-process the event. You can only call this routine from
; *    within an event handler.
; *  
; *  Parameters:
; *    
; *    inCallRef:
; *      The event handler call ref passed into your event handler.
; *    
; *    inEvent:
; *      The event to pass thru.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CallNextEventHandler(EventHandlerCallRef inCallRef, EventRef inEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CallNextEventHandler
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Sending Events                                                                    
; ——————————————————————————————————————————————————————————————————————————————————————

; *  SendEventToEventTarget()
; *  
; *  Discussion:
; *    Sends an event to the specified event target.
; *  
; *  Parameters:
; *    
; *    inEvent:
; *      The event to send.
; *    
; *    inTarget:
; *      The target to send it to.
; *  
; *  Result:
; *    An operating system result code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SendEventToEventTarget(EventRef inEvent, EventTargetRef inTarget)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SendEventToEventTarget
	ENDIF

; ======================================================================================
;   EVENT-BASED OBJECT CLASSES                                                          
;                                                                                       
;   Here it is - the replacement for classic defprocs. This is also a convenient way    
;   to create toolbox objects (windows, etc.) that have a specific behavior without     
;   installing handlers on each instance of the object. With a toolbox object class,    
;   you register your class, then use special creation routines to create objects of    
;   that class. The event handlers are automatically installed and ready to go.         
; ======================================================================================





; *  RegisterToolboxObjectClass()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus RegisterToolboxObjectClass(CFStringRef inClassID, ToolboxObjectClassRef inBaseClass, UInt32 inNumEvents, const EventTypeSpec *inEventList, EventHandlerUPP inEventHandler, void *inEventHandlerData, ToolboxObjectClassRef *outClassRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RegisterToolboxObjectClass
	ENDIF


; *  UnregisterToolboxObjectClass()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus UnregisterToolboxObjectClass(ToolboxObjectClassRef inClassRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UnregisterToolboxObjectClass
	ENDIF

; ======================================================================================
;   • Command Routines                                                                  
; ======================================================================================


; *  ProcessHICommand()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ProcessHICommand(const HICommand *inCommand)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ProcessHICommand
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Event Loop Routines                                                               
; ——————————————————————————————————————————————————————————————————————————————————————


; *  RunApplicationEventLoop()
; *  
; *  Discussion:
; *    This routine is used as the main event loop for a Carbon
; *    Event-based application. Once entered, this function waits for
; *    events to arrive and dispatches them to your event handlers
; *    automatically.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void RunApplicationEventLoop(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RunApplicationEventLoop
	ENDIF


; *  QuitApplicationEventLoop()
; *  
; *  Discussion:
; *    This routine is used to quit the RunApplicationEventLoop
; *    function. Typically, your application doesn't need to call this.
; *    If your application has the Quit menu item tagged with the
; *    kHICommandQuit Menu Command ID, the toolbox will automatically
; *    call this for your application, automatically terminating your
; *    event loop. If your application wants to do pre-processing before
; *    the event loop exits, it should intercept either the
; *    kHICommandQuit menu command, or the kEventApplicationQuit event.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void QuitApplicationEventLoop(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QuitApplicationEventLoop
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Event Modality routines                                                           
; ——————————————————————————————————————————————————————————————————————————————————————


; *  RunAppModalLoopForWindow()
; *  
; *  Discussion:
; *    This routine is used as a replacement to ModalDialog to drive a
; *    Carbon Event-based modal dialog. Once called, this routine will
; *    not exit until QuitAppModalLoopForWindow is called.
; *  
; *  Parameters:
; *    
; *    inWindow:
; *      The window you wish to behave modally.
; *  
; *  Result:
; *    An operating system status code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus RunAppModalLoopForWindow(WindowRef inWindow)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RunAppModalLoopForWindow
	ENDIF


; *  QuitAppModalLoopForWindow()
; *  
; *  Discussion:
; *    This routine is used to quit a currently running call to
; *    RunAppModalLoopForWindow, i.e. it terminates a modal loop.
; *    Typically this would be called from a handler you have installed
; *    on the modal window in question when the user clicks the
; *    appropriate button, etc.
; *  
; *  Parameters:
; *    
; *    inWindow:
; *      The window for which to quit the modal state.
; *  
; *  Result:
; *    An operating system status code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus QuitAppModalLoopForWindow(WindowRef inWindow)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QuitAppModalLoopForWindow
	ENDIF


; *  BeginAppModalStateForWindow()
; *  
; *  Discussion:
; *    This routine is a lower level routine than
; *    RunAppModalLoopForWindow. It can be used if you wish to enter an
; *    app modal state for a window, but need to control the event loop
; *    yourself for whatever reason. In most cases, you would use
; *    RunAppModalLoopForWindow. Once you begin your app modal state,
; *    the menu bar will disable and prepare for the modal situation.
; *  
; *  Parameters:
; *    
; *    inWindow:
; *      The window you wish to behave modally.
; *  
; *  Result:
; *    An operating system status code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus BeginAppModalStateForWindow(WindowRef inWindow)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BeginAppModalStateForWindow
	ENDIF


; *  EndAppModalStateForWindow()
; *  
; *  Discussion:
; *    This routine ends an app modal state started with
; *    BeginAppModalStateForWindow.
; *  
; *  Parameters:
; *    
; *    inWindow:
; *      The window you wish to stop acting as app modal.
; *  
; *  Result:
; *    An operating system status code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus EndAppModalStateForWindow(WindowRef inWindow)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EndAppModalStateForWindow
	ENDIF


; ——————————————————————————————————————————————————————————————————————————————————————
;   • User Focus                                                                        
;                                                                                       
;  The 'user focus' is where keyboard input goes. We also use the term 'key' applied    
;  to windows to mean this. The user focus window is normally the active non-floating   
;  window or dialog. It is possible to make a floater get the focus, however, by calling
;  SetUserFocusWindow. After that call, the event model will automatically route key    
;  input to the active keyboard focus of that window, if any. Passing kUserFocusAuto    
;  into the window parameter tells the toolbox to pick what it considers to be the best 
;  candidate for focus. You should call this to restore focus, rather than getting the  
;  focus, setting it to a special window, and then restoring to the saved focus. There  
;  are cases, however, when you might want to restore to an explicit window, but the    
;  typical usage should just be to restore to the kUserFocusAuto focus.                 
;                                                                                       
;  Keep in mind that setting the focus will only last until you restore focus, or the   
;  user starts clicking in other windows. When that happens, the toolbox will auto-     
;  redirect the user focus to a newly selected window.                                  
; ——————————————————————————————————————————————————————————————————————————————————————

kUserFocusAuto					EQU		-1

; *  SetUserFocusWindow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetUserFocusWindow(WindowRef inWindow)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetUserFocusWindow
	ENDIF


; *  GetUserFocusWindow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal WindowRef GetUserFocusWindow(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetUserFocusWindow
	ENDIF


; ——————————————————————————————————————————————————————————————————————————————————————
;   • Default/Cancel buttons                                                            
;                                                                                       
;  In our quest to eliminate the need for dialogs when using the new event model, we    
;  have added the following routines which add dialog-like button control to normal     
;  windows. With these routines, you can set the default and cancel buttons for a       
;  window; these work just like the corresponding concepts in dialogs, and when         
;  present, the standard toolbox handlers will handle keyboard input mapping to these   
;  buttons. This means that pressing return or enter will 'press' the default button    
;  and escape or command-period will 'press' the cancel button.                         
; ——————————————————————————————————————————————————————————————————————————————————————


; *  SetWindowDefaultButton()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetWindowDefaultButton(WindowRef inWindow, ControlRef inControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetWindowDefaultButton
	ENDIF


; *  SetWindowCancelButton()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetWindowCancelButton(WindowRef inWindow, ControlRef inControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetWindowCancelButton
	ENDIF


; *  GetWindowDefaultButton()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetWindowDefaultButton(WindowRef inWindow, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetWindowDefaultButton
	ENDIF


; *  GetWindowCancelButton()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetWindowCancelButton(WindowRef inWindow, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetWindowCancelButton
	ENDIF


; ——————————————————————————————————————————————————————————————————————————————————————
;   • Global HotKey API                                                                 
; ——————————————————————————————————————————————————————————————————————————————————————
EventHotKeyID			RECORD 0
signature				 ds.l	1				; offset: $0 (0)
id						 ds.l	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $8 (8)
						ENDR



; *  RegisterEventHotKey()
; *  
; *  Discussion:
; *    Registers a global hot key based on the virtual key code and
; *    modifiers you pass in. Only one such combination can exist for
; *    the current application, i.e. multiple entities in the same
; *    application cannot register for the same hot key combination. The
; *    same hot key can, however, be registered by multiple
; *    applications. This means that multiple applications can
; *    potentially be notified when a particular hot key is requested.
; *    This might not necessarily be desirable, but it is how it works
; *    at present.
; *  
; *  Parameters:
; *    
; *    inHotKeyCode:
; *      The virtual key code of the key to watch
; *    
; *    inHotKeyModifiers:
; *      The keyboard modifiers to look for. There must be a modifier
; *      specified, or this function will return paramErr.
; *    
; *    inHotKeyID:
; *      The application-specified hot key ID. You will receive this in
; *      the kEventHotKeyPressed event as the direct object parameter.
; *    
; *    inTarget:
; *      The target to notify when the hot key is pressed.
; *    
; *    inOptions:
; *      Currently unused. Pass 0 or face the consequences.
; *    
; *    outRef:
; *      The EventHotKeyRef that represents your new, shiny hot key. You
; *      need this if you later wish to unregister it.
; *  
; *  Result:
; *    An operating system status code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus RegisterEventHotKey(UInt32 inHotKeyCode, UInt32 inHotKeyModifiers, EventHotKeyID inHotKeyID, EventTargetRef inTarget, OptionBits inOptions, EventHotKeyRef *outRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RegisterEventHotKey
	ENDIF


; *  UnregisterEventHotKey()
; *  
; *  Discussion:
; *    Unregisters a global hot key that was previously registered with
; *    the RegisterEventHotKey API. You do not need to unregister a hot
; *    key when your application terminates, the system will take care
; *    of that for you. This would be used if the user changes a hot key
; *    for something in your application - you would unregister the
; *    previous key and register your new key.
; *  
; *  Parameters:
; *    
; *    inHotKey:
; *      The EventHotKeyRef to unregister.
; *  
; *  Result:
; *    An operating system status code.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus UnregisterEventHotKey(EventHotKeyRef inHotKey)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UnregisterEventHotKey
	ENDIF


	ENDIF ; __CARBONEVENTS__ 


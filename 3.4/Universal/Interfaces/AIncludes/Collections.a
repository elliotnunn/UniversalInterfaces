;
;    File:       Collections.a
;
;    Contains:   Collection Manager Interfaces
;
;    Version:    Technology: Carbon
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 1989-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__COLLECTIONS__') = 'UNDEFINED' THEN
__COLLECTIONS__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__MIXEDMODE__') = 'UNDEFINED' THEN
	include 'MixedMode.a'
	ENDIF

; ************
;  Constants 
; ************
;  Convenience constants for functions which optionally return values 

kCollectionDontWantTag			EQU		0
kCollectionDontWantId			EQU		0
kCollectionDontWantSize			EQU		0
kCollectionDontWantAttributes	EQU		0
kCollectionDontWantIndex		EQU		0
kCollectionDontWantData			EQU		0

;  attributes bits 

kCollectionNoAttributes			EQU		$00000000			; no attributes bits set 
kCollectionAllAttributes		EQU		$FFFFFFFF			; all attributes bits set 
kCollectionUserAttributes		EQU		$0000FFFF			; user attributes bits 
kCollectionDefaultAttributes	EQU		$40000000			; default attributes - unlocked, persistent 

;  
;    Attribute bits 0 through 15 (entire low word) are reserved for use by the application.
;    Attribute bits 16 through 31 (entire high word) are reserved for use by the Collection Manager.
;    Only bits 31 (kCollectionLockBit) and 30 (kCollectionPersistenceBit) currently have meaning.
;


kCollectionUser0Bit				EQU		0
kCollectionUser1Bit				EQU		1
kCollectionUser2Bit				EQU		2
kCollectionUser3Bit				EQU		3
kCollectionUser4Bit				EQU		4
kCollectionUser5Bit				EQU		5
kCollectionUser6Bit				EQU		6
kCollectionUser7Bit				EQU		7
kCollectionUser8Bit				EQU		8
kCollectionUser9Bit				EQU		9
kCollectionUser10Bit			EQU		10
kCollectionUser11Bit			EQU		11
kCollectionUser12Bit			EQU		12
kCollectionUser13Bit			EQU		13
kCollectionUser14Bit			EQU		14
kCollectionUser15Bit			EQU		15
kCollectionReserved0Bit			EQU		16
kCollectionReserved1Bit			EQU		17
kCollectionReserved2Bit			EQU		18
kCollectionReserved3Bit			EQU		19
kCollectionReserved4Bit			EQU		20
kCollectionReserved5Bit			EQU		21
kCollectionReserved6Bit			EQU		22
kCollectionReserved7Bit			EQU		23
kCollectionReserved8Bit			EQU		24
kCollectionReserved9Bit			EQU		25
kCollectionReserved10Bit		EQU		26
kCollectionReserved11Bit		EQU		27
kCollectionReserved12Bit		EQU		28
kCollectionReserved13Bit		EQU		29
kCollectionPersistenceBit		EQU		30
kCollectionLockBit				EQU		31

;  attribute masks 

kCollectionUser0Mask			EQU		$00000001
kCollectionUser1Mask			EQU		$00000002
kCollectionUser2Mask			EQU		$00000004
kCollectionUser3Mask			EQU		$00000008
kCollectionUser4Mask			EQU		$00000010
kCollectionUser5Mask			EQU		$00000020
kCollectionUser6Mask			EQU		$00000040
kCollectionUser7Mask			EQU		$00000080
kCollectionUser8Mask			EQU		$00000100
kCollectionUser9Mask			EQU		$00000200
kCollectionUser10Mask			EQU		$00000400
kCollectionUser11Mask			EQU		$00000800
kCollectionUser12Mask			EQU		$00001000
kCollectionUser13Mask			EQU		$00002000
kCollectionUser14Mask			EQU		$00004000
kCollectionUser15Mask			EQU		$00008000
kCollectionReserved0Mask		EQU		$00010000
kCollectionReserved1Mask		EQU		$00020000
kCollectionReserved2Mask		EQU		$00040000
kCollectionReserved3Mask		EQU		$00080000
kCollectionReserved4Mask		EQU		$00100000
kCollectionReserved5Mask		EQU		$00200000
kCollectionReserved6Mask		EQU		$00400000
kCollectionReserved7Mask		EQU		$00800000
kCollectionReserved8Mask		EQU		$01000000
kCollectionReserved9Mask		EQU		$02000000
kCollectionReserved10Mask		EQU		$04000000
kCollectionReserved11Mask		EQU		$08000000
kCollectionReserved12Mask		EQU		$10000000
kCollectionReserved13Mask		EQU		$20000000
kCollectionPersistenceMask		EQU		$40000000
kCollectionLockMask				EQU		$80000000

; **********
;  Types   
; **********
;  abstract data type for a collection 


;  collection member 4 byte tag 
; typedef FourCharCode 					CollectionTag


; *  NewCollectionFlattenUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewCollectionExceptionUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeCollectionFlattenUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeCollectionExceptionUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeCollectionFlattenUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeCollectionExceptionUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

; ********************************************
; ************* Public interfaces ************
; ********************************************

; *  NewCollection()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Collection NewCollection(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_NewCollection
			moveq           	#0,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NewCollection
	ENDIF



; *  DisposeCollection()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DisposeCollection(Collection c)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_DisposeCollection
			moveq           	#1,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DisposeCollection
	ENDIF



; *  CloneCollection()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Collection CloneCollection(Collection c)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CloneCollection
			moveq           	#2,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CloneCollection
	ENDIF



; *  CountCollectionOwners()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 CountCollectionOwners(Collection c)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CountCollectionOwners
			moveq           	#3,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CountCollectionOwners
	ENDIF



; *  RetainCollection()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus RetainCollection(Collection c)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RetainCollection
	ENDIF



; *  ReleaseCollection()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ReleaseCollection(Collection c)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ReleaseCollection
	ENDIF



; *  GetCollectionRetainCount()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal ItemCount GetCollectionRetainCount(Collection c)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCollectionRetainCount
	ENDIF



; *  CopyCollection()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Collection CopyCollection(Collection srcCollection, Collection dstCollection)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CopyCollection
			moveq           	#4,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CopyCollection
	ENDIF



; *  GetCollectionDefaultAttributes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 GetCollectionDefaultAttributes(Collection c)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetCollectionDefaultAttributes
			moveq           	#5,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCollectionDefaultAttributes
	ENDIF



; *  SetCollectionDefaultAttributes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetCollectionDefaultAttributes(Collection c, SInt32 whichAttributes, SInt32 newAttributes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetCollectionDefaultAttributes
			moveq           	#6,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetCollectionDefaultAttributes
	ENDIF



; *  CountCollectionItems()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 CountCollectionItems(Collection c)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CountCollectionItems
			moveq           	#7,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CountCollectionItems
	ENDIF



; *  AddCollectionItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AddCollectionItem(Collection c, CollectionTag tag, SInt32 id, SInt32 itemSize, const void *itemData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AddCollectionItem
			moveq           	#8,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddCollectionItem
	ENDIF



; *  GetCollectionItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetCollectionItem(Collection c, CollectionTag tag, SInt32 id, SInt32 *itemSize, void *itemData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetCollectionItem
			moveq           	#9,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCollectionItem
	ENDIF



; *  RemoveCollectionItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr RemoveCollectionItem(Collection c, CollectionTag tag, SInt32 id)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_RemoveCollectionItem
			moveq           	#10,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RemoveCollectionItem
	ENDIF



; *  SetCollectionItemInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetCollectionItemInfo(Collection c, CollectionTag tag, SInt32 id, SInt32 whichAttributes, SInt32 newAttributes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetCollectionItemInfo
			moveq           	#11,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetCollectionItemInfo
	ENDIF



; *  GetCollectionItemInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetCollectionItemInfo(Collection c, CollectionTag tag, SInt32 id, SInt32 *index, SInt32 *itemSize, SInt32 *attributes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetCollectionItemInfo
			moveq           	#12,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCollectionItemInfo
	ENDIF



; *  ReplaceIndexedCollectionItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr ReplaceIndexedCollectionItem(Collection c, SInt32 index, SInt32 itemSize, const void *itemData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ReplaceIndexedCollectionItem
			moveq           	#13,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ReplaceIndexedCollectionItem
	ENDIF



; *  GetIndexedCollectionItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetIndexedCollectionItem(Collection c, SInt32 index, SInt32 *itemSize, void *itemData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetIndexedCollectionItem
			moveq           	#14,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetIndexedCollectionItem
	ENDIF



; *  RemoveIndexedCollectionItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr RemoveIndexedCollectionItem(Collection c, SInt32 index)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_RemoveIndexedCollectionItem
			moveq           	#15,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RemoveIndexedCollectionItem
	ENDIF



; *  SetIndexedCollectionItemInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetIndexedCollectionItemInfo(Collection c, SInt32 index, SInt32 whichAttributes, SInt32 newAttributes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetIndexedCollectionItemInfo
			moveq           	#16,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetIndexedCollectionItemInfo
	ENDIF



; *  GetIndexedCollectionItemInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetIndexedCollectionItemInfo(Collection c, SInt32 index, CollectionTag *tag, SInt32 *id, SInt32 *itemSize, SInt32 *attributes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetIndexedCollectionItemInfo
			moveq           	#17,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetIndexedCollectionItemInfo
	ENDIF



; *  CollectionTagExists()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean CollectionTagExists(Collection c, CollectionTag tag)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CollectionTagExists
			moveq           	#18,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CollectionTagExists
	ENDIF



; *  CountCollectionTags()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 CountCollectionTags(Collection c)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CountCollectionTags
			moveq           	#19,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CountCollectionTags
	ENDIF



; *  GetIndexedCollectionTag()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetIndexedCollectionTag(Collection c, SInt32 tagIndex, CollectionTag *tag)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetIndexedCollectionTag
			moveq           	#20,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetIndexedCollectionTag
	ENDIF



; *  CountTaggedCollectionItems()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 CountTaggedCollectionItems(Collection c, CollectionTag tag)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CountTaggedCollectionItems
			moveq           	#21,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CountTaggedCollectionItems
	ENDIF



; *  GetTaggedCollectionItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetTaggedCollectionItem(Collection c, CollectionTag tag, SInt32 whichItem, SInt32 *itemSize, void *itemData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetTaggedCollectionItem
			moveq           	#22,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetTaggedCollectionItem
	ENDIF



; *  GetTaggedCollectionItemInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetTaggedCollectionItemInfo(Collection c, CollectionTag tag, SInt32 whichItem, SInt32 *id, SInt32 *index, SInt32 *itemSize, SInt32 *attributes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetTaggedCollectionItemInfo
			moveq           	#23,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetTaggedCollectionItemInfo
	ENDIF



; *  PurgeCollection()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PurgeCollection(Collection c, SInt32 whichAttributes, SInt32 matchingAttributes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PurgeCollection
			moveq           	#24,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PurgeCollection
	ENDIF



; *  PurgeCollectionTag()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PurgeCollectionTag(Collection c, CollectionTag tag)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_PurgeCollectionTag
			moveq           	#25,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PurgeCollectionTag
	ENDIF



; *  EmptyCollection()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void EmptyCollection(Collection c)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_EmptyCollection
			moveq           	#26,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EmptyCollection
	ENDIF


; *  FlattenCollection()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr FlattenCollection(Collection c, CollectionFlattenUPP flattenProc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FlattenCollection
			moveq           	#27,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FlattenCollection
	ENDIF



; *  FlattenPartialCollection()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr FlattenPartialCollection(Collection c, CollectionFlattenUPP flattenProc, void *refCon, SInt32 whichAttributes, SInt32 matchingAttributes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FlattenPartialCollection
			moveq           	#28,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FlattenPartialCollection
	ENDIF



; *  UnflattenCollection()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr UnflattenCollection(Collection c, CollectionFlattenUPP flattenProc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_UnflattenCollection
			moveq           	#29,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UnflattenCollection
	ENDIF



; *  GetCollectionExceptionProc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal CollectionExceptionUPP GetCollectionExceptionProc(Collection c)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetCollectionExceptionProc
			moveq           	#30,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCollectionExceptionProc
	ENDIF



; *  SetCollectionExceptionProc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetCollectionExceptionProc(Collection c, CollectionExceptionUPP exceptionProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetCollectionExceptionProc
			moveq           	#31,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetCollectionExceptionProc
	ENDIF



; *  GetNewCollection()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Collection GetNewCollection(SInt16 collectionID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetNewCollection
			moveq           	#32,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetNewCollection
	ENDIF


; *********************************************************************
; ************** Utility routines for handle-based access *************
; *********************************************************************

; *  AddCollectionItemHdl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AddCollectionItemHdl(Collection aCollection, CollectionTag tag, SInt32 id, Handle itemData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AddCollectionItemHdl
			moveq           	#33,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddCollectionItemHdl
	ENDIF



; *  GetCollectionItemHdl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetCollectionItemHdl(Collection aCollection, CollectionTag tag, SInt32 id, Handle itemData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetCollectionItemHdl
			moveq           	#34,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCollectionItemHdl
	ENDIF



; *  ReplaceIndexedCollectionItemHdl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr ReplaceIndexedCollectionItemHdl(Collection aCollection, SInt32 index, Handle itemData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ReplaceIndexedCollectionItemHdl
			moveq           	#35,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ReplaceIndexedCollectionItemHdl
	ENDIF



; *  GetIndexedCollectionItemHdl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetIndexedCollectionItemHdl(Collection aCollection, SInt32 index, Handle itemData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetIndexedCollectionItemHdl
			moveq           	#36,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetIndexedCollectionItemHdl
	ENDIF



; *  FlattenCollectionToHdl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr FlattenCollectionToHdl(Collection aCollection, Handle flattened)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FlattenCollectionToHdl
			moveq           	#37,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FlattenCollectionToHdl
	ENDIF



; *  UnflattenCollectionFromHdl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CollectionsLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr UnflattenCollectionFromHdl(Collection aCollection, Handle flattened)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_UnflattenCollectionFromHdl
			moveq           	#38,D0
			dc.w            	$ABF6
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UnflattenCollectionFromHdl
	ENDIF


	IF OLDROUTINENAMES THEN

dontWantTag						EQU		0
dontWantId						EQU		0
dontWantSize					EQU		0
dontWantAttributes				EQU		0
dontWantIndex					EQU		0
dontWantData					EQU		0

noCollectionAttributes			EQU		$00000000
allCollectionAttributes			EQU		$FFFFFFFF
userCollectionAttributes		EQU		$0000FFFF
defaultCollectionAttributes		EQU		$40000000

collectionUser0Bit				EQU		0
collectionUser1Bit				EQU		1
collectionUser2Bit				EQU		2
collectionUser3Bit				EQU		3
collectionUser4Bit				EQU		4
collectionUser5Bit				EQU		5
collectionUser6Bit				EQU		6
collectionUser7Bit				EQU		7
collectionUser8Bit				EQU		8
collectionUser9Bit				EQU		9
collectionUser10Bit				EQU		10
collectionUser11Bit				EQU		11
collectionUser12Bit				EQU		12
collectionUser13Bit				EQU		13
collectionUser14Bit				EQU		14
collectionUser15Bit				EQU		15
collectionReserved0Bit			EQU		16
collectionReserved1Bit			EQU		17
collectionReserved2Bit			EQU		18
collectionReserved3Bit			EQU		19
collectionReserved4Bit			EQU		20
collectionReserved5Bit			EQU		21
collectionReserved6Bit			EQU		22
collectionReserved7Bit			EQU		23
collectionReserved8Bit			EQU		24
collectionReserved9Bit			EQU		25
collectionReserved10Bit			EQU		26
collectionReserved11Bit			EQU		27
collectionReserved12Bit			EQU		28
collectionReserved13Bit			EQU		29
collectionPersistenceBit		EQU		30
collectionLockBit				EQU		31

collectionUser0Mask				EQU		$00000001
collectionUser1Mask				EQU		$00000002
collectionUser2Mask				EQU		$00000004
collectionUser3Mask				EQU		$00000008
collectionUser4Mask				EQU		$00000010
collectionUser5Mask				EQU		$00000020
collectionUser6Mask				EQU		$00000040
collectionUser7Mask				EQU		$00000080
collectionUser8Mask				EQU		$00000100
collectionUser9Mask				EQU		$00000200
collectionUser10Mask			EQU		$00000400
collectionUser11Mask			EQU		$00000800
collectionUser12Mask			EQU		$00001000
collectionUser13Mask			EQU		$00002000
collectionUser14Mask			EQU		$00004000
collectionUser15Mask			EQU		$00008000
collectionReserved0Mask			EQU		$00010000
collectionReserved1Mask			EQU		$00020000
collectionReserved2Mask			EQU		$00040000
collectionReserved3Mask			EQU		$00080000
collectionReserved4Mask			EQU		$00100000
collectionReserved5Mask			EQU		$00200000
collectionReserved6Mask			EQU		$00400000
collectionReserved7Mask			EQU		$00800000
collectionReserved8Mask			EQU		$01000000
collectionReserved9Mask			EQU		$02000000
collectionReserved10Mask		EQU		$04000000
collectionReserved11Mask		EQU		$08000000
collectionReserved12Mask		EQU		$10000000
collectionReserved13Mask		EQU		$20000000
collectionPersistenceMask		EQU		$40000000
collectionLockMask				EQU		$80000000
	ENDIF	; OLDROUTINENAMES

	ENDIF ; __COLLECTIONS__ 


;
;    File:       ControlDefinitions.a
;
;    Contains:   Definitions of controls provided by the Control Manager
;
;    Version:    Technology: Mac OS X
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 1999-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CONTROLDEFINITIONS__') = 'UNDEFINED' THEN
__CONTROLDEFINITIONS__ SET 1

	IF &TYPE('__APPEARANCE__') = 'UNDEFINED' THEN
	include 'Appearance.a'
	ENDIF
	IF &TYPE('__CARBONEVENTS__') = 'UNDEFINED' THEN
	include 'CarbonEvents.a'
	ENDIF
	IF &TYPE('__CONTROLS__') = 'UNDEFINED' THEN
	include 'Controls.a'
	ENDIF
	IF &TYPE('__LISTS__') = 'UNDEFINED' THEN
	include 'Lists.a'
	ENDIF
	IF &TYPE('__MACHELP__') = 'UNDEFINED' THEN
	include 'MacHelp.a'
	ENDIF
	IF &TYPE('__MENUS__') = 'UNDEFINED' THEN
	include 'Menus.a'
	ENDIF

	IF &TYPE('__CFSTRING__') = 'UNDEFINED' THEN
	include 'CFString.a'
	ENDIF
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Resource Types                                                                                    
; ——————————————————————————————————————————————————————————————————————————————————————————————————————


kControlTabListResType			EQU		'tab#'				; used for tab control (Appearance 1.0 and later)
kControlListDescResType			EQU		'ldes'				; used for list box control (Appearance 1.0 and later)
; ——————————————————————————————————————————————————————————————————————————————————————
;   • Check Box Values                                                                  
; ——————————————————————————————————————————————————————————————————————————————————————

kControlCheckBoxUncheckedValue	EQU		0
kControlCheckBoxCheckedValue	EQU		1
kControlCheckBoxMixedValue		EQU		2
; ——————————————————————————————————————————————————————————————————————————————————————
;   • Radio Button Values                                                               
; ——————————————————————————————————————————————————————————————————————————————————————

kControlRadioButtonUncheckedValue EQU	0
kControlRadioButtonCheckedValue	EQU		1
kControlRadioButtonMixedValue	EQU		2
; ——————————————————————————————————————————————————————————————————————————————————————
;   • Pop-Up Menu Control Constants                                                     
; ——————————————————————————————————————————————————————————————————————————————————————
;  Variant codes for the System 7 pop-up menu

popupFixedWidth					EQU		$01
popupVariableWidth				EQU		$02
popupUseAddResMenu				EQU		$04
popupUseWFont					EQU		$08
;  Menu label styles for the System 7 pop-up menu

popupTitleBold					EQU		$0100
popupTitleItalic				EQU		$0200
popupTitleUnderline				EQU		$0400
popupTitleOutline				EQU		$0800
popupTitleShadow				EQU		$1000
popupTitleCondense				EQU		$2000
popupTitleExtend				EQU		$4000
popupTitleNoStyle				EQU		$8000
;  Menu label justifications for the System 7 pop-up menu

popupTitleLeftJust				EQU		$00000000
popupTitleCenterJust			EQU		$00000001
popupTitleRightJust				EQU		$000000FF
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • PopUp Menu Private Data Structure                                                                 
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
	IF ¬ OPAQUE_TOOLBOX_STRUCTS THEN
PopupPrivateData		RECORD 0
mHandle					 ds.l	1				; offset: $0 (0)
mID						 ds.w	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $6 (6)
						ENDR
; typedef struct PopupPrivateData *		PopupPrivateDataPtr

; typedef PopupPrivateDataPtr *			PopupPrivateDataHandle

	ENDIF
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Control Definition ID’s                                                                           
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;  Standard System 7 procIDs


pushButProc						EQU		0
checkBoxProc					EQU		1
radioButProc					EQU		2
scrollBarProc					EQU		16
popupMenuProc					EQU		1008
; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Part Codes                                                                
; ——————————————————————————————————————————————————————————————————————————————————————

kControlLabelPart				EQU		1
kControlMenuPart				EQU		2
kControlTrianglePart			EQU		4
kControlEditTextPart			EQU		5					; Appearance 1.0 and later
kControlPicturePart				EQU		6					; Appearance 1.0 and later
kControlIconPart				EQU		7					; Appearance 1.0 and later
kControlClockPart				EQU		8					; Appearance 1.0 and later
kControlListBoxPart				EQU		24					; Appearance 1.0 and later
kControlListBoxDoubleClickPart	EQU		25					; Appearance 1.0 and later
kControlImageWellPart			EQU		26					; Appearance 1.0 and later
kControlRadioGroupPart			EQU		27					; Appearance 1.0.2 and later
kControlButtonPart				EQU		10
kControlCheckBoxPart			EQU		11
kControlRadioButtonPart			EQU		11
kControlUpButtonPart			EQU		20
kControlDownButtonPart			EQU		21
kControlPageUpPart				EQU		22
kControlPageDownPart			EQU		23
kControlClockHourDayPart		EQU		9					; Appearance 1.1 and later
kControlClockMinuteMonthPart	EQU		10					; Appearance 1.1 and later
kControlClockSecondYearPart		EQU		11					; Appearance 1.1 and later
kControlClockAMPMPart			EQU		12					; Appearance 1.1 and later
kControlDataBrowserPart			EQU		24					; CarbonLib 1.0 and later
kControlDataBrowserDraggedPart	EQU		25					; CarbonLib 1.0 and later


; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Control Types and ID’s available only with Appearance 1.0 and later                               
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
; ——————————————————————————————————————————————————————————————————————————————————————
;   • BEVEL BUTTON INTERFACE (CDEF 2)                                                   
; ——————————————————————————————————————————————————————————————————————————————————————
;   Bevel buttons allow you to control the content type (pict/icon/etc.), the behavior  
;  (pushbutton/toggle/sticky), and the bevel size. You also have the option of          
;   attaching a menu to it. When a menu is present, you can specify which way the       
;   popup arrow is facing (down or right).                                              
;                                                                                       
;   This is all made possible by overloading the Min, Max, and Value parameters for the 
;   control, as well as adjusting the variant. Here's the breakdown of what goes where: 
;                                                                                       
;   Parameter                   What Goes Here                                          
;   ———————————————————         ————————————————————————————————————————————————————    
;   Min                         Hi Byte = Behavior, Lo Byte = content type.             
;   Max                         ResID for resource-based content types.                 
;   Value                       MenuID to attach, 0 = no menu, please.                  
;                                                                                       
;   The variant is broken down into two halfs. The low 2 bits control the bevel type.   
;   Bit 2 controls the popup arrow direction (if a menu is present) and bit 3 controls  
;   whether or not to use the control's owning window's font.                           
;                                                                                       
;   Constants for all you need to put this together are below. The values for behaviors 
;   are set up so that you can simply add them to the content type and pass them into   
;   the Min parameter of NewControl.                                                    
;                                                                                       
;   An example call:                                                                    
;                                                                                       
;   control = NewControl( window, &bounds, "\p", true, 0, kContentIconSuiteRes +        
;                           kBehaviorToggles, myIconSuiteID, bevelButtonSmallBevelProc, 
;                           0L );                                                       
;                                                                                       
;   Attaching a menu:                                                                   
;                                                                                       
;   control = NewControl( window, &bounds, "\p", true, kMyMenuID, kContentIconSuiteRes, 
;           myIconSuiteID, bevelButtonSmallBevelProc + kBevelButtonMenuOnRight, 0L );   
;                                                                                       
;   This will attach menu ID kMyMenuID to the button, with the popup arrow facing right.
;   This also puts the menu up to the right of the button. You can also specify that a  
;   menu can have multiple items checked at once by adding kBehaviorMultiValueMenus     
;   into the Min parameter. If you do use multivalue menus, the GetBevelButtonMenuValue 
;   helper function will return the last item chosen from the menu, whether or not it   
;   was checked.                                                                        
;                                                                                       
;   NOTE:   Bevel buttons with menus actually have *two* values. The value of the       
;           button (on/off), and the value of the menu. The menu value can be gotten    
;           with the GetBevelButtonMenuValue helper function.                           
;                                                                                       
;   Handle-based Content                                                                
;   ————————————————————                                                                
;   You can create your control and then set the content to an existing handle to an    
;   icon suite, etc. using the macros below. Please keep in mind that resource-based    
;   content is owned by the control, handle-based content is owned by you. The CDEF will
;   not try to dispose of handle-based content. If you are changing the content type of 
;   the button on the fly, you must make sure that if you are replacing a handle-       
;   based content with a resource-based content to properly dispose of the handle,      
;   else a memory leak will ensue.                                                      
;                                                                                       
;  Bevel Button Proc IDs 

kControlBevelButtonSmallBevelProc EQU	32
kControlBevelButtonNormalBevelProc EQU	33
kControlBevelButtonLargeBevelProc EQU	34
;  Add these variant codes to kBevelButtonSmallBevelProc to change the type of button 

kControlBevelButtonSmallBevelVariant EQU 0
kControlBevelButtonNormalBevelVariant EQU $01
kControlBevelButtonLargeBevelVariant EQU $02
kControlBevelButtonMenuOnRightVariant EQU $04
;  Bevel Thicknesses 

; typedef UInt16						ControlBevelThickness
kControlBevelButtonSmallBevel	EQU		0
kControlBevelButtonNormalBevel	EQU		1
kControlBevelButtonLargeBevel	EQU		2
;  Behaviors of bevel buttons. These are set up so you can add  
;  them together with the content types.                        

kControlBehaviorPushbutton		EQU		0
kControlBehaviorToggles			EQU		$0100
kControlBehaviorSticky			EQU		$0200
kControlBehaviorSingleValueMenu	EQU		0
kControlBehaviorMultiValueMenu	EQU		$4000				; only makes sense when a menu is attached.
kControlBehaviorOffsetContents	EQU		$8000
;  Behaviors for 1.0.1 or later 

kControlBehaviorCommandMenu		EQU		$2000				; menu holds commands, not choices. Overrides multi-value bit.
; typedef UInt16 						ControlBevelButtonBehavior

; typedef UInt16 						ControlBevelButtonMenuBehavior

;  Bevel Button Menu Placements 

; typedef UInt16						ControlBevelButtonMenuPlacement
kControlBevelButtonMenuOnBottom	EQU		0
kControlBevelButtonMenuOnRight	EQU		$04
;  Control Kind Tag 

kControlKindBevelButton			EQU		'bevl'
;  Creation API: Carbon Only 

; *  CreateBevelButtonControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateBevelButtonControl(WindowRef window, const Rect *boundsRect, CFStringRef title, ControlBevelThickness thickness, ControlBevelButtonBehavior behavior, ControlButtonContentInfoPtr info, SInt16 menuID, ControlBevelButtonMenuBehavior menuBehavior, ControlBevelButtonMenuPlacement menuPlacement, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateBevelButtonControl
	ENDIF

;  Graphic Alignments 

; typedef SInt16						ControlButtonGraphicAlignment
kControlBevelButtonAlignSysDirection EQU -1					; only left or right
kControlBevelButtonAlignCenter	EQU		0
kControlBevelButtonAlignLeft	EQU		1
kControlBevelButtonAlignRight	EQU		2
kControlBevelButtonAlignTop		EQU		3
kControlBevelButtonAlignBottom	EQU		4
kControlBevelButtonAlignTopLeft	EQU		5
kControlBevelButtonAlignBottomLeft EQU	6
kControlBevelButtonAlignTopRight EQU	7
kControlBevelButtonAlignBottomRight EQU	8
;  Text Alignments 

; typedef SInt16						ControlButtonTextAlignment
kControlBevelButtonAlignTextSysDirection EQU 0
kControlBevelButtonAlignTextCenter EQU	1
kControlBevelButtonAlignTextFlushRight EQU -1
kControlBevelButtonAlignTextFlushLeft EQU -2
;  Text Placements 

; typedef SInt16						ControlButtonTextPlacement
kControlBevelButtonPlaceSysDirection EQU -1					; if graphic on right, then on left
kControlBevelButtonPlaceNormally EQU	0
kControlBevelButtonPlaceToRightOfGraphic EQU 1
kControlBevelButtonPlaceToLeftOfGraphic EQU 2
kControlBevelButtonPlaceBelowGraphic EQU 3
kControlBevelButtonPlaceAboveGraphic EQU 4

;  Data tags supported by the bevel button controls 

kControlBevelButtonContentTag	EQU		'cont'				; ButtonContentInfo
kControlBevelButtonTransformTag	EQU		'tran'				; IconTransformType
kControlBevelButtonTextAlignTag	EQU		'tali'				; ButtonTextAlignment
kControlBevelButtonTextOffsetTag EQU	'toff'				; SInt16
kControlBevelButtonGraphicAlignTag EQU	'gali'				; ButtonGraphicAlignment
kControlBevelButtonGraphicOffsetTag EQU	'goff'				; Point
kControlBevelButtonTextPlaceTag	EQU		'tplc'				; ButtonTextPlacement
kControlBevelButtonMenuValueTag	EQU		'mval'				; SInt16
kControlBevelButtonMenuHandleTag EQU	'mhnd'				; MenuRef
kControlBevelButtonMenuRefTag	EQU		'mhnd'				; MenuRef
kControlBevelButtonOwnedMenuRefTag EQU	'omrf'				; MenuRef (control will dispose)
kControlBevelButtonCenterPopupGlyphTag EQU 'pglc'			; Boolean: true = center, false = bottom right
kControlBevelButtonKindTag		EQU		'bebk'				; ThemeButtonKind ( kTheme[Small,Medium,Large,Rounded]BevelButton )
;  These are tags in 1.0.1 or later 

kControlBevelButtonLastMenuTag	EQU		'lmnu'				; SInt16: menuID of last menu item selected from
kControlBevelButtonMenuDelayTag	EQU		'mdly'				; SInt32: ticks to delay before menu appears
;  tags available with Appearance 1.1 or later 

															; Boolean: True = if an icon of the ideal size for
															; the button isn't available, scale a larger or
															; smaller icon to the ideal size. False = don't
															; scale; draw a smaller icon or clip a larger icon.
															; Default is false. Only applies to IconSuites and
kControlBevelButtonScaleIconTag	EQU		'scal'				; IconRefs.
;  Helper routines are available only thru the shared library/glue. 

; *  GetBevelButtonMenuValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetBevelButtonMenuValue(ControlRef inButton, SInt16 *outValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetBevelButtonMenuValue
	ENDIF


; *  SetBevelButtonMenuValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetBevelButtonMenuValue(ControlRef inButton, SInt16 inValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetBevelButtonMenuValue
	ENDIF


; *  GetBevelButtonMenuHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetBevelButtonMenuHandle(ControlRef inButton, MenuHandle *outHandle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetBevelButtonMenuHandle
	ENDIF


; *  GetBevelButtonContentInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetBevelButtonContentInfo(ControlRef inButton, ControlButtonContentInfoPtr outContent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetBevelButtonContentInfo
	ENDIF


; *  SetBevelButtonContentInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetBevelButtonContentInfo(ControlRef inButton, ControlButtonContentInfoPtr inContent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetBevelButtonContentInfo
	ENDIF


; *  SetBevelButtonTransform()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetBevelButtonTransform(ControlRef inButton, IconTransformType transform)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetBevelButtonTransform
	ENDIF


; *  SetBevelButtonGraphicAlignment()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetBevelButtonGraphicAlignment(ControlRef inButton, ControlButtonGraphicAlignment inAlign, SInt16 inHOffset, SInt16 inVOffset)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetBevelButtonGraphicAlignment
	ENDIF


; *  SetBevelButtonTextAlignment()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetBevelButtonTextAlignment(ControlRef inButton, ControlButtonTextAlignment inAlign, SInt16 inHOffset)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetBevelButtonTextAlignment
	ENDIF


; *  SetBevelButtonTextPlacement()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetBevelButtonTextPlacement(ControlRef inButton, ControlButtonTextPlacement inWhere)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetBevelButtonTextPlacement
	ENDIF


; ——————————————————————————————————————————————————————————————————————————————————————
;   • SLIDER (CDEF 3)                                                                   
; ——————————————————————————————————————————————————————————————————————————————————————
;   There are several variants that control the behavior of the slider control. Any     
;   combination of the following three constants can be added to the basic CDEF ID      
;   (kSliderProc).                                                                      
;                                                                                       
;   Variants:                                                                           
;                                                                                       
;       kSliderLiveFeedback     Slider does not use "ghosted" indicator when tracking.  
;                               ActionProc is called (set via SetControlAction) as the  
;                               indicator is dragged. The value is updated so that the  
;                               actionproc can adjust some other property based on the  
;                               value each time the action proc is called. If no action 
;                               proc is installed, it reverts to the ghost indicator.   
;                                                                                       
;       kSliderHasTickMarks     Slider is drawn with 'tick marks'. The control          
;                               rectangle must be large enough to accomidate the tick   
;                               marks.                                                  
;                                                                                       
;       kSliderReverseDirection Slider thumb points in opposite direction than normal.  
;                               If the slider is vertical, the thumb will point to the  
;                               left, if the slider is horizontal, the thumb will point 
;                               upwards.                                                
;                                                                                       
;       kSliderNonDirectional   This option overrides the kSliderReverseDirection and   
;                               kSliderHasTickMarks variants. It creates an indicator   
;                               which is rectangular and doesn't point in any direction 
;                               like the normal indicator does.                         
;  Slider proc ID and variants 

kControlSliderProc				EQU		48
kControlSliderLiveFeedback		EQU		$01
kControlSliderHasTickMarks		EQU		$02
kControlSliderReverseDirection	EQU		$04
kControlSliderNonDirectional	EQU		$08
;  Slider Orientation 

; typedef UInt16						ControlSliderOrientation
kControlSliderPointsDownOrRight	EQU		0
kControlSliderPointsUpOrLeft	EQU		1
kControlSliderDoesNotPoint		EQU		2
;  Control Kind Tag 

kControlKindSlider				EQU		'sldr'
;  Creation API: Carbon Only 

; *  CreateSliderControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateSliderControl(WindowRef window, const Rect *boundsRect, SInt32 value, SInt32 minimum, SInt32 maximum, ControlSliderOrientation orientation, UInt16 numTickMarks, Boolean liveTracking, ControlActionUPP liveTrackingProc, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateSliderControl
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • DISCLOSURE TRIANGLE (CDEF 4)                                                      
; ——————————————————————————————————————————————————————————————————————————————————————
;   This control can be used as either left or right facing. It can also handle its own 
;   tracking if you wish. This means that when the 'autotoggle' variant is used, if the 
;   user clicks the control, it's state will change automatically from open to closed   
;   and vice-versa depending on its initial state. After a successful call to Track-    
;   Control, you can just check the current value to see what state it was switched to. 
;  Triangle proc IDs 

kControlTriangleProc			EQU		64
kControlTriangleLeftFacingProc	EQU		65
kControlTriangleAutoToggleProc	EQU		66
kControlTriangleLeftFacingAutoToggleProc EQU 67

; typedef UInt16						ControlDisclosureTriangleOrientation
kControlDisclosureTrianglePointDefault EQU 0				; points right on a left-to-right script system (X only)
kControlDisclosureTrianglePointRight EQU 1
kControlDisclosureTrianglePointLeft EQU	2
;  Control Kind Tag 

kControlKindDisclosureTriangle	EQU		'dist'
;  Creation API: Carbon only 

; *  CreateDisclosureTriangleControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateDisclosureTriangleControl(WindowRef window, const Rect *boundsRect, ControlDisclosureTriangleOrientation orientation, CFStringRef title, SInt32 initialValue, Boolean drawTitle, Boolean autoToggles, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateDisclosureTriangleControl
	ENDIF

;  Tagged data supported by disclosure triangles 

kControlTriangleLastValueTag	EQU		'last'				; SInt16
;  Helper routines are available only thru the shared library/glue. 

; *  SetDisclosureTriangleLastValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetDisclosureTriangleLastValue(ControlRef inTabControl, SInt16 inValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDisclosureTriangleLastValue
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • PROGRESS INDICATOR (CDEF 5)                                                       
; ——————————————————————————————————————————————————————————————————————————————————————
;   This CDEF implements both determinate and indeterminate progress bars. To switch,   
;   just use SetControlData to set the indeterminate flag to make it indeterminate call 
;   IdleControls to step thru the animation. IdleControls should be called at least     
;   once during your event loop.                                                        
;                                                                                       
;   We also use this same CDEF for Relevance bars. At this time this control does not   
;   idle.                                                                               
;  Progress Bar proc IDs 

kControlProgressBarProc			EQU		80
kControlRelevanceBarProc		EQU		81
;  Control Kind Tag 

kControlKindProgressBar			EQU		'prgb'
kControlKindRelevanceBar		EQU		'relb'
;  Creation API: Carbon only 

; *  CreateProgressBarControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateProgressBarControl(WindowRef window, const Rect *boundsRect, SInt32 value, SInt32 minimum, SInt32 maximum, Boolean indeterminate, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateProgressBarControl
	ENDIF


; *  CreateRelevanceBarControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateRelevanceBarControl(WindowRef window, const Rect *boundsRect, SInt32 value, SInt32 minimum, SInt32 maximum, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateRelevanceBarControl
	ENDIF

;  Tagged data supported by progress bars 

kControlProgressBarIndeterminateTag EQU	'inde'				; Boolean
kControlProgressBarAnimatingTag	EQU		'anim'				; Boolean
; ——————————————————————————————————————————————————————————————————————————————————————
;   • LITTLE ARROWS (CDEF 6)                                                            
; ——————————————————————————————————————————————————————————————————————————————————————
;   This control implements the little up and down arrows you'd see in the Memory       
;   control panel for adjusting the cache size.                                         
;  Little Arrows proc IDs 

kControlLittleArrowsProc		EQU		96
;  Control Kind Tag 

kControlKindLittleArrows		EQU		'larr'
;  Creation API: Carbon only 

; *  CreateLittleArrowsControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateLittleArrowsControl(WindowRef window, const Rect *boundsRect, SInt32 value, SInt32 minimum, SInt32 maximum, SInt32 increment, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateLittleArrowsControl
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • CHASING ARROWS (CDEF 7)                                                           
; ——————————————————————————————————————————————————————————————————————————————————————
;   To animate this control, make sure to call IdleControls repeatedly.                 
;                                                                                       
;  Chasing Arrows proc IDs 

kControlChasingArrowsProc		EQU		112
;  Control Kind Tag 

kControlKindChasingArrows		EQU		'carr'
;  Creation API: Carbon only 

; *  CreateChasingArrowsControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateChasingArrowsControl(WindowRef window, const Rect *boundsRect, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateChasingArrowsControl
	ENDIF

;  Tagged data supported by the Chasing Arrows control 

kControlChasingArrowsAnimatingTag EQU	'anim'				; Boolean

; ——————————————————————————————————————————————————————————————————————————————————————
;   • TABS (CDEF 8)                                                                     
; ——————————————————————————————————————————————————————————————————————————————————————
;   Tabs use an auxiliary resource (tab#) to hold tab information such as the tab name  
;   and an icon suite ID for each tab.                                                  
;                                                                                       
;   The ID of the tab# resource that you wish to associate with a tab control should    
;   be passed in as the Value parameter of the control. If you are using GetNewControl, 
;   then the Value slot in the CNTL resource should have the ID of the 'tab#' resource  
;   on creation.                                                                        
;                                                                                       
;   Passing zero in for the tab# resource tells the control not to read in a tab# res.  
;   You can then use SetControlMaximum to add tabs, followed by a call to SetControlData
;   with the kControlTabInfoTag, passing in a pointer to a ControlTabInfoRec. This sets 
;   the name and optionally an icon for a tab.                                          
;  Tabs proc IDs 

kControlTabLargeProc			EQU		128					; Large tab size, north facing   
kControlTabSmallProc			EQU		129					; Small tab size, north facing   
kControlTabLargeNorthProc		EQU		128					; Large tab size, north facing   
kControlTabSmallNorthProc		EQU		129					; Small tab size, north facing   
kControlTabLargeSouthProc		EQU		130					; Large tab size, south facing   
kControlTabSmallSouthProc		EQU		131					; Small tab size, south facing   
kControlTabLargeEastProc		EQU		132					; Large tab size, east facing    
kControlTabSmallEastProc		EQU		133					; Small tab size, east facing    
kControlTabLargeWestProc		EQU		134					; Large tab size, west facing    
kControlTabSmallWestProc		EQU		135					; Small tab size, west facing    
;  Tab Directions 

; typedef UInt16						ControlTabDirection
kControlTabDirectionNorth		EQU		0
kControlTabDirectionSouth		EQU		1
kControlTabDirectionEast		EQU		2
kControlTabDirectionWest		EQU		3
;  Tab Sizes 

; typedef UInt16						ControlTabSize
kControlTabSizeLarge			EQU		0
kControlTabSizeSmall			EQU		1
;  Control Tab Entry - used during creation                             
;  Note that the client is responsible for allocating/providing         
;  the ControlButtonContentInfo and string storage for this             
;  structure.                                                           
ControlTabEntry			RECORD 0
icon					 ds.l	1				; offset: $0 (0)
name					 ds.l	1				; offset: $4 (4)
enabled					 ds.b	1				; offset: $8 (8)
						 ORG 10
sizeof					 EQU *					; size:   $A (10)
						ENDR
;  Control Kind Tag 

kControlKindTabs				EQU		'tabs'
;  Creation API: Carbon only 

; *  CreateTabsControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateTabsControl(WindowRef window, const Rect *boundsRect, ControlTabSize size, ControlTabDirection direction, UInt16 numTabs, const ControlTabEntry *tabArray, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateTabsControl
	ENDIF

;  Tagged data supported by tabs 

kControlTabContentRectTag		EQU		'rect'				; Rect
kControlTabEnabledFlagTag		EQU		'enab'				; Boolean
kControlTabFontStyleTag			EQU		'font'				; ControlFontStyleRec
;  New tags in 1.0.1 or later 

kControlTabInfoTag				EQU		'tabi'				; ControlTabInfoRec
;  New tags in X 10.1 or later 

kControlTabImageContentTag		EQU		'cont'				; ControlButtonContentInfo

kControlTabInfoVersionZero		EQU		0					; ControlTabInfoRec
kControlTabInfoVersionOne		EQU		1					; ControlTabInfoRecV1
ControlTabInfoRec		RECORD 0
version					 ds.w	1				; offset: $0 (0)		;  version of this structure.
iconSuiteID				 ds.w	1				; offset: $2 (2)		;  icon suite to use. Zero indicates no icon
name					 ds		Str255			; offset: $4 (4)		;  name to be displayed on the tab
sizeof					 EQU *					; size:   $104 (260)
						ENDR
ControlTabInfoRecV1		RECORD 0
version					 ds.w	1				; offset: $0 (0)		;  version of this structure. == kControlTabInfoVersionOne
iconSuiteID				 ds.w	1				; offset: $2 (2)		;  icon suite to use. Zero indicates no icon
name					 ds.l	1				; offset: $4 (4)		;  name to be displayed on the tab. Will be retained so caller
;  should always release it.
sizeof					 EQU *					; size:   $8 (8)
						ENDR
;  Helper routines are available only thru the shared library/glue. 

; *  GetTabContentRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetTabContentRect(ControlRef inTabControl, Rect *outContentRect)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetTabContentRect
	ENDIF


; *  SetTabEnabled()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetTabEnabled(ControlRef inTabControl, SInt16 inTabToHilite, Boolean inEnabled)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetTabEnabled
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • VISUAL SEPARATOR (CDEF 9)                                                         
; ——————————————————————————————————————————————————————————————————————————————————————
;   Separator lines determine their orientation (horizontal or vertical) automatically  
;   based on the relative height and width of their contrlRect.                         
;  Visual separator proc IDs 

kControlSeparatorLineProc		EQU		144
;  Control Kind Tag 

kControlKindSeparator			EQU		'sepa'
;  Creation API: Carbon only 

; *  CreateSeparatorControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateSeparatorControl(WindowRef window, const Rect *boundsRect, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateSeparatorControl
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • GROUP BOX (CDEF 10)                                                               
; ——————————————————————————————————————————————————————————————————————————————————————
;   The group box CDEF can be use in several ways. It can have no title, a text title,  
;   a check box as the title, or a popup button as a title. There are two versions of   
;   group boxes, primary and secondary, which look slightly different.                  
;  Group Box proc IDs 

kControlGroupBoxTextTitleProc	EQU		160
kControlGroupBoxCheckBoxProc	EQU		161
kControlGroupBoxPopupButtonProc	EQU		162
kControlGroupBoxSecondaryTextTitleProc EQU 164
kControlGroupBoxSecondaryCheckBoxProc EQU 165
kControlGroupBoxSecondaryPopupButtonProc EQU 166
;  Control Kind Tag 

kControlKindGroupBox			EQU		'grpb'
kControlKindCheckGroupBox		EQU		'cgrp'
kControlKindPopupGroupBox		EQU		'pgrp'
;  Creation APIs: Carbon only 

; *  CreateGroupBoxControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateGroupBoxControl(WindowRef window, const Rect *boundsRect, CFStringRef title, Boolean primary, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateGroupBoxControl
	ENDIF


; *  CreateCheckGroupBoxControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateCheckGroupBoxControl(WindowRef window, const Rect *boundsRect, CFStringRef title, SInt32 initialValue, Boolean primary, Boolean autoToggle, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateCheckGroupBoxControl
	ENDIF


; *  CreatePopupGroupBoxControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreatePopupGroupBoxControl(WindowRef window, const Rect *boundsRect, CFStringRef title, Boolean primary, SInt16 menuID, Boolean variableWidth, SInt16 titleWidth, SInt16 titleJustification, Style titleStyle, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreatePopupGroupBoxControl
	ENDIF

;  Tagged data supported by group box 

kControlGroupBoxMenuHandleTag	EQU		'mhan'				; MenuRef (popup title only)
kControlGroupBoxMenuRefTag		EQU		'mhan'				; MenuRef (popup title only)
kControlGroupBoxFontStyleTag	EQU		'font'				; ControlFontStyleRec
;  tags available with Appearance 1.1 or later 

kControlGroupBoxTitleRectTag	EQU		'trec'				; Rect. Rectangle that the title text/control is drawn in. (get only)
; ——————————————————————————————————————————————————————————————————————————————————————
;   • IMAGE WELL (CDEF 11)                                                              
; ——————————————————————————————————————————————————————————————————————————————————————
;   Image Wells allow you to control the content type (pict/icon/etc.) shown in the     
;   well.                                                                               
;                                                                                       
;   This is made possible by overloading the Min and Value parameters for the control.  
;                                                                                       
;   Parameter                   What Goes Here                                          
;   ———————————————————         ——————————————————————————————————————————————————      
;   Min                         content type (see constants for bevel buttons)          
;   Value                       Resource ID of content type, if resource-based.         
;                                                                                       
;                                                                                       
;   Handle-based Content                                                                
;   ————————————————————                                                                
;   You can create your control and then set the content to an existing handle to an    
;   icon suite, etc. using the macros below. Please keep in mind that resource-based    
;   content is owned by the control, handle-based content is owned by you. The CDEF will
;   not try to dispose of handle-based content. If you are changing the content type of 
;   the button on the fly, you must make sure that if you are replacing a handle-       
;   based content with a resource-based content to properly dispose of the handle,      
;   else a memory leak will ensue.                                                      
;                                                                                       
;  Image Well proc IDs 

kControlImageWellProc			EQU		176
;  Control Kind Tag 

kControlKindImageWell			EQU		'well'
;  Creation API: Carbon only 

; *  CreateImageWellControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateImageWellControl(WindowRef window, const Rect *boundsRect, const ControlButtonContentInfo *info, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateImageWellControl
	ENDIF

;  Tagged data supported by image wells 

kControlImageWellContentTag		EQU		'cont'				; ButtonContentInfo
kControlImageWellTransformTag	EQU		'tran'				; IconTransformType
kControlImageWellIsDragDestinationTag EQU 'drag'			; Boolean
;  Helper routines are available only thru the shared library/glue. 

; *  GetImageWellContentInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetImageWellContentInfo(ControlRef inButton, ControlButtonContentInfoPtr outContent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetImageWellContentInfo
	ENDIF


; *  SetImageWellContentInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetImageWellContentInfo(ControlRef inButton, ControlButtonContentInfoPtr inContent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetImageWellContentInfo
	ENDIF


; *  SetImageWellTransform()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetImageWellTransform(ControlRef inButton, IconTransformType inTransform)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetImageWellTransform
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • POPUP ARROW (CDEF 12)                                                             
; ——————————————————————————————————————————————————————————————————————————————————————
;   The popup arrow CDEF is used to draw the small arrow normally associated with a     
;   popup control. The arrow can point in four directions, and a small or large version 
;   can be used. This control is provided to allow clients to draw the arrow in a       
;   normalized fashion which will take advantage of themes automatically.               
;                                                                                       
;  Popup Arrow proc IDs 

kControlPopupArrowEastProc		EQU		192
kControlPopupArrowWestProc		EQU		193
kControlPopupArrowNorthProc		EQU		194
kControlPopupArrowSouthProc		EQU		195
kControlPopupArrowSmallEastProc	EQU		196
kControlPopupArrowSmallWestProc	EQU		197
kControlPopupArrowSmallNorthProc EQU	198
kControlPopupArrowSmallSouthProc EQU	199
;  Popup Arrow Orientations 

kControlPopupArrowOrientationEast EQU	0
kControlPopupArrowOrientationWest EQU	1
kControlPopupArrowOrientationNorth EQU	2
kControlPopupArrowOrientationSouth EQU	3
; typedef UInt16 						ControlPopupArrowOrientation

;  Popup Arrow Size 

kControlPopupArrowSizeNormal	EQU		0
kControlPopupArrowSizeSmall		EQU		1
; typedef UInt16 						ControlPopupArrowSize

;  Control Kind Tag 

kControlKindPopupArrow			EQU		'parr'
;  Creation API: Carbon only 

; *  CreatePopupArrowControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreatePopupArrowControl(WindowRef window, const Rect *boundsRect, ControlPopupArrowOrientation orientation, ControlPopupArrowSize size, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreatePopupArrowControl
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • PLACARD (CDEF 14)                                                                 
; ——————————————————————————————————————————————————————————————————————————————————————
;  Placard proc IDs 

kControlPlacardProc				EQU		224
;  Control Kind Tag 

kControlKindPlacard				EQU		'plac'
;  Creation API: Carbon only 

; *  CreatePlacardControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreatePlacardControl(WindowRef window, const Rect *boundsRect, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreatePlacardControl
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • CLOCK (CDEF 15)                                                                   
; ——————————————————————————————————————————————————————————————————————————————————————
;   NOTE:   You can specify more options in the Value paramter when creating the clock. 
;           See below.                                                                  
;                                                                                       
;   NOTE:   Under Appearance 1.1, the clock control knows and returns more part codes.  
;           The new clock-specific part codes are defined with the other control parts. 
;           Besides these clock-specific parts, we also return kControlUpButtonPart     
;           and kControlDownButtonPart when they hit the up and down arrows.            
;           The new part codes give you more flexibility for focusing and hit testing.  
;                                                                                       
;           The original kControlClockPart is still valid. When hit testing, it means   
;           that some non-editable area of the clock's whitespace has been clicked.     
;           When focusing a currently unfocused clock, it changes the focus to the      
;           first part; it is the same as passing kControlFocusNextPart. When           
;           re-focusing a focused clock, it will not change the focus at all.           
;  Clock proc IDs 

kControlClockTimeProc			EQU		240
kControlClockTimeSecondsProc	EQU		241
kControlClockDateProc			EQU		242
kControlClockMonthYearProc		EQU		243
;  Clock Types 

; typedef UInt16						ControlClockType
kControlClockTypeHourMinute		EQU		0
kControlClockTypeHourMinuteSecond EQU	1
kControlClockTypeMonthDayYear	EQU		2
kControlClockTypeMonthYear		EQU		3
;  Clock Flags 
;   These flags can be passed into 'value' field on creation of the control.            
;   Value is set to 0 after control is created.                                         

; typedef UInt32						ControlClockFlags
kControlClockFlagStandard		EQU		0					; editable, non-live
kControlClockNoFlags			EQU		0
kControlClockFlagDisplayOnly	EQU		1					; add this to become non-editable
kControlClockIsDisplayOnly		EQU		1
kControlClockFlagLive			EQU		2					; automatically shows current time on idle. only valid with display only.
kControlClockIsLive				EQU		2
;  Control Kind Tag 

kControlKindClock				EQU		'clck'
;  Creation API: Carbon only 

; *  CreateClockControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateClockControl(WindowRef window, const Rect *boundsRect, ControlClockType clockType, ControlClockFlags clockFlags, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateClockControl
	ENDIF

;  Tagged data supported by clocks 

kControlClockLongDateTag		EQU		'date'				; LongDateRec
kControlClockFontStyleTag		EQU		'font'				; ControlFontStyleRec
kControlClockAnimatingTag		EQU		'anim'				; Boolean
; ——————————————————————————————————————————————————————————————————————————————————————
;   • USER PANE (CDEF 16)                                                               
; ——————————————————————————————————————————————————————————————————————————————————————
;   User panes have two primary purposes: to allow easy implementation of a custom      
;   control by the developer, and to provide a generic container for embedding other    
;   controls.                                                                           
;                                                                                       
;   In Carbon, with the advent of Carbon-event-based controls, you may find it easier   
;   to simply write a new control from scratch than to customize a user pane control.   
;   The set of callbacks provided by the user pane will not be extended to support      
;   new Control Manager features; instead, you should just write a real control.        
;                                                                                       
;   User panes do not, by default, support embedding. If you try to embed a control     
;   into a user pane, you will get back errControlIsNotEmbedder. You can make a user    
;   pane support embedding by passing the kControlSupportsEmbedding flag in the 'value' 
;   parameter when you create the control.                                              
;                                                                                       
;   User panes support the following overloaded control initialization options:         
;                                                                                       
;   Parameter                   What Goes Here                                          
;   ———————————————————         ——————————————————————————————————————————————————      
;   Value                       Control feature flags                                   

;  User Pane proc IDs 

kControlUserPaneProc			EQU		256
;  Control Kind Tag 

kControlKindUserPane			EQU		'upan'
;  Creation API: Carbon only 

; *  CreateUserPaneControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateUserPaneControl(WindowRef window, const Rect *boundsRect, UInt32 features, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateUserPaneControl
	ENDIF

;  Tagged data supported by user panes 
;  Currently, they are all proc ptrs for doing things like drawing and hit testing, etc. 

kControlUserItemDrawProcTag		EQU		'uidp'				; UserItemUPP
kControlUserPaneDrawProcTag		EQU		'draw'				; ControlUserPaneDrawingUPP
kControlUserPaneHitTestProcTag	EQU		'hitt'				; ControlUserPaneHitTestUPP
kControlUserPaneTrackingProcTag	EQU		'trak'				; ControlUserPaneTrackingUPP
kControlUserPaneIdleProcTag		EQU		'idle'				; ControlUserPaneIdleUPP
kControlUserPaneKeyDownProcTag	EQU		'keyd'				; ControlUserPaneKeyDownUPP
kControlUserPaneActivateProcTag	EQU		'acti'				; ControlUserPaneActivateUPP
kControlUserPaneFocusProcTag	EQU		'foci'				; ControlUserPaneFocusUPP
kControlUserPaneBackgroundProcTag EQU	'back'				; ControlUserPaneBackgroundUPP

; *  NewControlUserPaneDrawUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewControlUserPaneHitTestUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewControlUserPaneTrackingUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewControlUserPaneIdleUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewControlUserPaneKeyDownUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewControlUserPaneActivateUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewControlUserPaneFocusUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewControlUserPaneBackgroundUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlUserPaneDrawUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlUserPaneHitTestUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlUserPaneTrackingUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlUserPaneIdleUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlUserPaneKeyDownUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlUserPaneActivateUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlUserPaneFocusUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlUserPaneBackgroundUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlUserPaneDrawUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlUserPaneHitTestUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlUserPaneTrackingUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlUserPaneIdleUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlUserPaneKeyDownUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlUserPaneActivateUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlUserPaneFocusUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlUserPaneBackgroundUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


;  ——————————————————————————————————————————————————————————————————————————————————————————
;    • EDIT TEXT (CDEF 17)
;  ——————————————————————————————————————————————————————————————————————————————————————————


;  Edit Text proc IDs 

kControlEditTextProc			EQU		272
kControlEditTextPasswordProc	EQU		274
;  proc IDs available with Appearance 1.1 or later 

kControlEditTextInlineInputProc	EQU		276					; Can't combine with the other variants
;  Control Kind Tag 

kControlKindEditText			EQU		'etxt'
;  Creation API: Carbon only 

; *  CreateEditTextControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateEditTextControl(WindowRef window, const Rect *boundsRect, CFStringRef text, Boolean isPassword, Boolean useInlineInput, const ControlFontStyleRec *style, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateEditTextControl
	ENDIF

;  Tagged data supported by edit text 

kControlEditTextStyleTag		EQU		'font'				; ControlFontStyleRec
kControlEditTextTextTag			EQU		'text'				; Buffer of chars - you supply the buffer
kControlEditTextTEHandleTag		EQU		'than'				; The TEHandle of the text edit record
kControlEditTextKeyFilterTag	EQU		'fltr'
kControlEditTextSelectionTag	EQU		'sele'				; EditTextSelectionRec
kControlEditTextPasswordTag		EQU		'pass'				; The clear text password text
;  tags available with Appearance 1.1 or later 

kControlEditTextKeyScriptBehaviorTag EQU 'kscr'				; ControlKeyScriptBehavior. Defaults to "PrefersRoman" for password fields,
															;       or "AllowAnyScript" for non-password fields.
kControlEditTextLockedTag		EQU		'lock'				; Boolean. Locking disables editability.
kControlEditTextFixedTextTag	EQU		'ftxt'				; Like the normal text tag, but fixes inline input first
kControlEditTextValidationProcTag EQU	'vali'				; ControlEditTextValidationUPP. Called when a key filter can't be: after cut, paste, etc.
kControlEditTextInlinePreUpdateProcTag EQU 'prup'			; TSMTEPreUpdateUPP and TSMTEPostUpdateUpp. For use with inline input variant...
kControlEditTextInlinePostUpdateProcTag EQU 'poup'			; ...The refCon parameter will contain the ControlRef.
;  Tags available with Mac OS X and later 

kControlEditTextCFStringTag		EQU		'cfst'				; CFStringRef



;  Structure for getting the edit text selection 
ControlEditTextSelectionRec RECORD 0
selStart				 ds.w	1				; offset: $0 (0)
selEnd					 ds.w	1				; offset: $2 (2)
sizeof					 EQU *					; size:   $4 (4)
						ENDR
; typedef struct ControlEditTextSelectionRec * ControlEditTextSelectionPtr


; *  NewControlEditTextValidationUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlEditTextValidationUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlEditTextValidationUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

; ——————————————————————————————————————————————————————————————————————————————————————
;   • STATIC TEXT (CDEF 18)                                                             
; ——————————————————————————————————————————————————————————————————————————————————————
;  Static Text proc IDs 

kControlStaticTextProc			EQU		288
;  Control Kind Tag 

kControlKindStaticText			EQU		'stxt'
;  Creation API: Carbon only 

; *  CreateStaticTextControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateStaticTextControl(WindowRef window, const Rect *boundsRect, CFStringRef text, const ControlFontStyleRec *style, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateStaticTextControl
	ENDIF

;  Tagged data supported by static text 

kControlStaticTextStyleTag		EQU		'font'				; ControlFontStyleRec
kControlStaticTextTextTag		EQU		'text'				; Copy of text
kControlStaticTextTextHeightTag	EQU		'thei'				; SInt16
;  Tags available with appearance 1.1 or later 

kControlStaticTextTruncTag		EQU		'trun'				; TruncCode (-1 means no truncation)
;  Tags available with Mac OS X or later 

kControlStaticTextCFStringTag	EQU		'cfst'				; CFStringRef

; ——————————————————————————————————————————————————————————————————————————————————————
;   • PICTURE CONTROL (CDEF 19)                                                         
; ——————————————————————————————————————————————————————————————————————————————————————
;   Value parameter should contain the ID of the picture you wish to display when       
;   creating controls of this type. If you don't want the control tracked at all, use   
;   the 'no track' variant.                                                             
;  Picture control proc IDs 

kControlPictureProc				EQU		304
kControlPictureNoTrackProc		EQU		305					; immediately returns kControlPicturePart
;  Control Kind Tag 

kControlKindPicture				EQU		'pict'
;  Creation API: Carbon only 

; *  CreatePictureControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreatePictureControl(WindowRef window, const Rect *boundsRect, const ControlButtonContentInfo *content, Boolean dontTrack, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreatePictureControl
	ENDIF

;  Tagged data supported by picture controls 

kControlPictureHandleTag		EQU		'pich'				; PicHandle
; ——————————————————————————————————————————————————————————————————————————————————————
;   • ICON CONTROL (CDEF 20)                                                            
; ——————————————————————————————————————————————————————————————————————————————————————
;   Value parameter should contain the ID of the ICON or cicn you wish to display when  
;   creating controls of this type. If you don't want the control tracked at all, use   
;   the 'no track' variant.                                                             
;  Icon control proc IDs 

kControlIconProc				EQU		320
kControlIconNoTrackProc			EQU		321					; immediately returns kControlIconPart
kControlIconSuiteProc			EQU		322
kControlIconSuiteNoTrackProc	EQU		323					; immediately returns kControlIconPart

															; icon ref controls may have either an icon, color icon, icon suite, or icon ref.
															; for data other than icon, you must set the data by passing a
															; ControlButtonContentInfo to SetControlData
kControlIconRefProc				EQU		324
kControlIconRefNoTrackProc		EQU		325					; immediately returns kControlIconPart
;  Control Kind Tag 

kControlKindIcon				EQU		'icon'
;  Creation API: Carbon Only 

; *  CreateIconControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateIconControl(WindowRef window, const Rect *boundsRect, const ControlButtonContentInfo *icon, Boolean dontTrack, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateIconControl
	ENDIF

;  Tagged data supported by icon controls 

kControlIconTransformTag		EQU		'trfm'				; IconTransformType
kControlIconAlignmentTag		EQU		'algn'				; IconAlignmentType
;  Tags available with appearance 1.1 or later 

kControlIconResourceIDTag		EQU		'ires'				; SInt16 resource ID of icon to use
kControlIconContentTag			EQU		'cont'				; accepts a ControlButtonContentInfo
; ——————————————————————————————————————————————————————————————————————————————————————
;   • WINDOW HEADER (CDEF 21)                                                           
; ——————————————————————————————————————————————————————————————————————————————————————
;  Window Header proc IDs 

kControlWindowHeaderProc		EQU		336					; normal header
kControlWindowListViewHeaderProc EQU	337					; variant for list views - no bottom line
;  Control Kind Tag 

kControlKindWindowHeader		EQU		'whed'
;  Creation API: Carbon Only 

; *  CreateWindowHeaderControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateWindowHeaderControl(WindowRef window, const Rect *boundsRect, Boolean isListHeader, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateWindowHeaderControl
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • LIST BOX (CDEF 22)                                                                
; ——————————————————————————————————————————————————————————————————————————————————————
;   Lists use an auxiliary resource to define their format. The resource type used is   
;   'ldes' and a definition for it can be found in Appearance.r. The resource ID for    
;   the ldes is passed in the 'value' parameter when creating the control. You may pass 
;   zero in value. This tells the List Box control to not use a resource. The list will 
;   be created with default values, and will use the standard LDEF (0). You can change  
;   the list by getting the list handle. You can set the LDEF to use by using the tag   
;   below (kControlListBoxLDEFTag)                                                      
;  List Box proc IDs 

kControlListBoxProc				EQU		352
kControlListBoxAutoSizeProc		EQU		353
;  Control Kind Tag 

kControlKindListBox				EQU		'lbox'
;  Creation API: Carbon Only 

; *  CreateListBoxControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateListBoxControl(WindowRef window, const Rect *boundsRect, Boolean autoSize, SInt16 numRows, SInt16 numColumns, Boolean horizScroll, Boolean vertScroll, SInt16 cellHeight, SInt16 cellWidth, Boolean hasGrowSpace, const ListDefSpec *listDef, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateListBoxControl
	ENDIF

;  Tagged data supported by list box 

kControlListBoxListHandleTag	EQU		'lhan'				; ListHandle
kControlListBoxKeyFilterTag		EQU		'fltr'				; ControlKeyFilterUPP
kControlListBoxFontStyleTag		EQU		'font'				; ControlFontStyleRec
;  New tags in 1.0.1 or later 

kControlListBoxDoubleClickTag	EQU		'dblc'				; Boolean. Was last click a double-click?
kControlListBoxLDEFTag			EQU		'ldef'				; SInt16. ID of LDEF to use.
; ——————————————————————————————————————————————————————————————————————————————————————
;   • PUSH BUTTON (CDEF 23)                                                             
; ——————————————————————————————————————————————————————————————————————————————————————
;   The new standard checkbox and radio button controls support a "mixed" value that    
;   indicates that the current setting contains a mixed set of on and off values. The   
;   control value used to display this indication is defined in Controls.h:             
;                                                                                       
;       kControlCheckBoxMixedValue = 2                                                  
;                                                                                       
;   Two new variants of the standard pushbutton have been added to the standard control 
;   suite that draw a color icon next to the control title. One variant draws the icon  
;   on the left side, the other draws it on the right side (when the system justifica-  
;   tion is right to left, these are reversed).                                         
;                                                                                       
;   When either of the icon pushbuttons are created, the contrlMax field of the control 
;   record is used to determine the ID of the 'cicn' resource drawn in the pushbutton.  
;                                                                                       
;   In addition, a push button can now be told to draw with a default outline using the 
;   SetControlData routine with the kPushButtonDefaultTag below.                        
;                                                                                       
;   A push button may also be marked using the kControlPushButtonCancelTag. This has    
;   no visible representation, but does cause the button to play the CancelButton theme 
;   sound instead of the regular pushbutton theme sound when pressed.                   
;                                                                                       
;  Theme Push Button/Check Box/Radio Button proc IDs 

kControlPushButtonProc			EQU		368
kControlCheckBoxProc			EQU		369
kControlRadioButtonProc			EQU		370
kControlPushButLeftIconProc		EQU		374					; Standard pushbutton with left-side icon
kControlPushButRightIconProc	EQU		375					; Standard pushbutton with right-side icon
;  Variants with Appearance 1.1 or later 

kControlCheckBoxAutoToggleProc	EQU		371
kControlRadioButtonAutoToggleProc EQU	372
;  Push Button Icon Alignments 

; typedef UInt16						ControlPushButtonIconAlignment
kControlPushButtonIconOnLeft	EQU		6
kControlPushButtonIconOnRight	EQU		7
;  Control Kind Tag 

kControlKindPushButton			EQU		'push'
kControlKindPushIconButton		EQU		'picn'
kControlKindRadioButton			EQU		'rdio'
kControlKindCheckBox			EQU		'cbox'
;  Creation APIs: Carbon Only 

; *  CreatePushButtonControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreatePushButtonControl(WindowRef window, const Rect *boundsRect, CFStringRef title, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreatePushButtonControl
	ENDIF


; *  CreatePushButtonWithIconControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreatePushButtonWithIconControl(WindowRef window, const Rect *boundsRect, CFStringRef title, ControlButtonContentInfo *icon, ControlPushButtonIconAlignment iconAlignment, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreatePushButtonWithIconControl
	ENDIF


; *  CreateRadioButtonControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateRadioButtonControl(WindowRef window, const Rect *boundsRect, CFStringRef title, SInt32 initialValue, Boolean autoToggle, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateRadioButtonControl
	ENDIF


; *  CreateCheckBoxControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateCheckBoxControl(WindowRef window, const Rect *boundsRect, CFStringRef title, SInt32 initialValue, Boolean autoToggle, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateCheckBoxControl
	ENDIF


;  Tagged data supported by standard buttons 

kControlPushButtonDefaultTag	EQU		'dflt'				; default ring flag
kControlPushButtonCancelTag		EQU		'cncl'				; cancel button flag (1.1 and later)
; ——————————————————————————————————————————————————————————————————————————————————————
;   • SCROLL BAR (CDEF 24)                                                              
; ——————————————————————————————————————————————————————————————————————————————————————
;   This is the new Appearance scroll bar.                                              
;                                                                                       
;  Theme Scroll Bar proc IDs 

kControlScrollBarProc			EQU		384					; normal scroll bar
kControlScrollBarLiveProc		EQU		386					; live scrolling variant
;  Control Kind Tag 

kControlKindScrollBar			EQU		'sbar'
;  Creation API: Carbon Only 

; *  CreateScrollBarControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateScrollBarControl(WindowRef window, const Rect *boundsRect, SInt32 value, SInt32 minimum, SInt32 maximum, SInt32 viewSize, Boolean liveTracking, ControlActionUPP liveTrackingProc, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateScrollBarControl
	ENDIF

;  These tags are available in Mac OS X or later 

kControlScrollBarShowsArrowsTag	EQU		'arro'				; Boolean whether or not to draw the scroll arrows
; ——————————————————————————————————————————————————————————————————————————————————————
;   • POPUP BUTTON (CDEF 25)                                                            
; ——————————————————————————————————————————————————————————————————————————————————————
;   This is the new Appearance Popup Button. It takes the same variants and does the    
;   same overloading as the previous popup menu control. There are some differences:    
;                                                                                       
;   Passing in a menu ID of -12345 causes the popup not to try and get the menu from a  
;   resource. Instead, you can build the menu and later stuff the MenuRef field in      
;   the popup data information.                                                         
;                                                                                       
;   You can pass -1 in the Max parameter to have the control calculate the width of the 
;   title on its own instead of guessing and then tweaking to get it right. It adds the 
;   appropriate amount of space between the title and the popup.                        
;                                                                                       
;  Theme Popup Button proc IDs 

kControlPopupButtonProc			EQU		400
kControlPopupFixedWidthVariant	EQU		$01
kControlPopupVariableWidthVariant EQU	$02
kControlPopupUseAddResMenuVariant EQU	$04
kControlPopupUseWFontVariant	EQU		$08
;  Control Kind Tag 

kControlKindPopupButton			EQU		'popb'
;  Creation API: Carbon Only 

; *  CreatePopupButtonControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreatePopupButtonControl(WindowRef window, const Rect *boundsRect, CFStringRef title, SInt16 menuID, Boolean variableWidth, SInt16 titleWidth, SInt16 titleJustification, Style titleStyle, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreatePopupButtonControl
	ENDIF


;  These tags are available in 1.0.1 or later of Appearance 

kControlPopupButtonMenuHandleTag EQU	'mhan'				; MenuRef
kControlPopupButtonMenuRefTag	EQU		'mhan'				; MenuRef
kControlPopupButtonMenuIDTag	EQU		'mnid'				; SInt16
;  These tags are available in 1.1 or later of Appearance 

kControlPopupButtonExtraHeightTag EQU	'exht'				; SInt16 - extra vertical whitespace within the button
kControlPopupButtonOwnedMenuRefTag EQU	'omrf'				; MenuRef
kControlPopupButtonCheckCurrentTag EQU	'chck'				; Boolean    - whether the popup puts a checkmark next to the current item (defaults to true)

; ——————————————————————————————————————————————————————————————————————————————————————
;   • RADIO GROUP (CDEF 26)                                                             
; ——————————————————————————————————————————————————————————————————————————————————————
;   This control implements a radio group. It is an embedding control and can therefore 
;   only be used when a control hierarchy is established for its owning window. You     
;   should only embed radio buttons within it. As radio buttons are embedded into it,   
;   the group sets up its value, min, and max to represent the number of embedded items.
;   The current value of the control is the index of the sub-control that is the current
;   'on' radio button. To get the current radio button control handle, you can use the  
;   control manager call GetIndSubControl, passing in the value of the radio group.     
;                                                                                       
;   NOTE: This control is only available with Appearance 1.0.1.                         
;  Radio Group Proc ID 

kControlRadioGroupProc			EQU		416
;  Control Kind Tag 

kControlKindRadioGroup			EQU		'rgrp'
;  Creation API: Carbon Only 

; *  CreateRadioGroupControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateRadioGroupControl(WindowRef window, const Rect *boundsRect, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateRadioGroupControl
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • SCROLL TEXT BOX (CDEF 27)                                                         
; ——————————————————————————————————————————————————————————————————————————————————————
;   This control implements a scrolling box of (non-editable) text. This is useful for  
;   credits in about boxes, etc.                                                        
;   The standard version of this control has a scroll bar, but the autoscrolling        
;   variant does not. The autoscrolling variant needs two pieces of information to      
;   work: delay (in ticks) before the scrolling starts, and time (in ticks) between     
;   scrolls. It will scroll one pixel at a time, unless changed via SetControlData.     
;                                                                                       
;   Parameter                   What Goes Here                                          
;   ———————————————————         ————————————————————————————————————————————————————    
;   Value                       Resource ID of 'TEXT'/'styl' content.                   
;   Min                         Scroll start delay (in ticks)                       .   
;   Max                         Delay (in ticks) between scrolls.                       
;                                                                                       
;   NOTE: This control is only available with Appearance 1.1.                           
;  Scroll Text Box Proc IDs 

kControlScrollTextBoxProc		EQU		432
kControlScrollTextBoxAutoScrollProc EQU	433
;  Control Kind Tag 

kControlKindScrollingTextBox	EQU		'stbx'
;  Creation API: Carbon Only 

; *  CreateScrollingTextBoxControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateScrollingTextBoxControl(WindowRef window, const Rect *boundsRect, SInt16 contentResID, Boolean autoScroll, UInt32 delayBeforeAutoScroll, UInt32 delayBetweenAutoScroll, UInt16 autoScrollAmount, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateScrollingTextBoxControl
	ENDIF

;  Tagged data supported by Scroll Text Box 

kControlScrollTextBoxDelayBeforeAutoScrollTag EQU 'stdl'	; UInt32 (ticks until autoscrolling starts)
kControlScrollTextBoxDelayBetweenAutoScrollTag EQU 'scdl'	; UInt32 (ticks between scrolls)
kControlScrollTextBoxAutoScrollAmountTag EQU 'samt'			; UInt16 (pixels per scroll) -- defaults to 1
kControlScrollTextBoxContentsTag EQU	'tres'				; SInt16 (resource ID of 'TEXT'/'styl') -- write only!
kControlScrollTextBoxAnimatingTag EQU	'anim'				; Boolean (whether the text box should auto-scroll)

; ——————————————————————————————————————————————————————————————————————————————————————
;   • DISCLOSURE BUTTON                                                                 
; ——————————————————————————————————————————————————————————————————————————————————————

; *  CreateDisclosureButtonControl()
; *  
; *  Summary:
; *    Creates a new instance of the Disclosure Button Control.
; *  
; *  Discussion:
; *    CreateDisclosureButtonControl is preferred over NewControl
; *    because it allows you to specify the exact set of parameters
; *    required to create the control without overloading parameter
; *    semantics. The initial minimum of the Disclosure Button will be
; *    kControlDisclosureButtonClosed, and the maximum will be
; *    kControlDisclosureButtonDisclosed.
; *  
; *  Parameters:
; *    
; *    inWindow:
; *      The WindowRef in which to create the control.
; *    
; *    inBoundsRect:
; *      The bounding rectangle for the control. The height of the
; *      control is fixed and the control will be centered vertically
; *      within the rectangle you specify.
; *    
; *    inValue:
; *      The initial value; either kControlDisclosureButtonClosed or
; *      kControlDisclosureButtonDisclosed.
; *    
; *    inAutoToggles:
; *      A boolean value indicating whether its value should change
; *      automatically after tracking the mouse.
; *    
; *    outControl:
; *      On successful exit, this will contain the new control.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateDisclosureButtonControl(WindowRef inWindow, const Rect *inBoundsRect, SInt32 inValue, Boolean inAutoToggles, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateDisclosureButtonControl
	ENDIF


;  Control Kind Tag 

kControlKindDisclosureButton	EQU		'disb'


; *  Discussion:
; *    Disclosure Button Values
; 


kControlDisclosureButtonClosed	EQU		0
kControlDisclosureButtonDisclosed EQU	1

; ——————————————————————————————————————————————————————————————————————————————————————
;   • ROUND BUTTON                                                                      
; ——————————————————————————————————————————————————————————————————————————————————————


; *  ControlRoundButtonSize
; *  
; *  Discussion:
; *    Button Sizes
; 


; typedef SInt16						ControlRoundButtonSize
kControlRoundButtonNormalSize	EQU		0
kControlRoundButtonLargeSize	EQU		2
;  Data tags supported by the round button controls 

kControlRoundButtonContentTag	EQU		'cont'				; ControlButtonContentInfo
kControlRoundButtonSizeTag		EQU		'size'				; ControlRoundButtonSize
;  Control Kind Tag 

kControlKindRoundButton			EQU		'rndb'

; *  CreateRoundButtonControl()
; *  
; *  Summary:
; *    Creates a new instance of the Round Button Control.
; *  
; *  Discussion:
; *    CreateRoundButtonControl is preferred over NewControl because it
; *    allows you to specify the exact set of parameters required to
; *    create the control without overloading parameter semantics.
; *  
; *  Parameters:
; *    
; *    inWindow:
; *      The WindowRef in which to create the control.
; *    
; *    inBoundsRect:
; *      The bounding rectangle for the control. The height and width of
; *      the control is fixed (specified by the ControlRoundButtonSize
; *      parameter) and the control will be centered within the
; *      rectangle you specify.
; *    
; *    inSize:
; *      The button size; either kControlRoundButtonNormalSize or
; *      kControlRoundButtonLargeSize.
; *    
; *    inContent:
; *      Any optional content displayed in the button. Currently only
; *      kControlContentIconRef is supported.
; *    
; *    outControl:
; *      On successful exit, this will contain the new control.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateRoundButtonControl(WindowRef inWindow, const Rect *inBoundsRect, ControlRoundButtonSize inSize, ControlButtonContentInfo *inContent, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateRoundButtonControl
	ENDIF


; ——————————————————————————————————————————————————————————————————————————————————————
;     • DATA BROWSER                                                                    
; ——————————————————————————————————————————————————————————————————————————————————————
;   This control implements a user interface component for browsing (optionally)        
;   hiearchical data structures. The browser supports multiple presentation styles      
;   including, but not limited to:                                                      
;                                                                                       
;       kDataBrowserListView   - items and item properties in                           
;                                multi-column (optionally outline) format               
;       kDataBrowserColumnView - in-place browsing using fixed navigation columns       
;                                                                                       
;   The browser manages all view styles through a single high-level interface.          
;   The high-level interface makes the following assumptions:                           
;                                                                                       
;       - Items have unique 32-bit identifiers (0 is reserved)                          
;                                                                                       
;       - Items have two kinds of named and typed properties:                           
;            - Predefined attribute properties ( < 1024 )                               
;              (including some display properties)                                      
;            - Client-defined display properties ( >= 1024 )                            
;                                                                                       
;       - Some items are containers of other items                                      
;       - Items may be sorted by any property                                           
;                                                                                       
;   Because a browser doesn't know all details about the type of objects it manages,    
;   some implementation responsibility is best handled by its client. The client must   
;   provide a set of callback routines which define the item hierarchy and help to      
;   populate the browser with items. The client may also provide callbacks for handling 
;   custom data types and doing low-level event management.                             
;                                                                                       
;   The API is subdivided into a "universal" set of routines that applies to all view   
;   styles, and a set of routines unique to each view style. kDataBrowserListView and   
;   kDataBrowserColumnView share an (internal) TableView abstract base class. The       
;   TableView formatting options and API applies to both of these view styles.          
;                                                                                       
;   NOTE: This control is only available with CarbonLib 1.1.                            
;  Control Kind Tag 

kControlKindDataBrowser			EQU		'datb'
;  Error Codes 

errDataBrowserNotConfigured		EQU		-4970
errDataBrowserItemNotFound		EQU		-4971
errDataBrowserItemNotAdded		EQU		-4975
errDataBrowserPropertyNotFound	EQU		-4972
errDataBrowserInvalidPropertyPart EQU	-4973
errDataBrowserInvalidPropertyData EQU	-4974
errDataBrowserPropertyNotSupported EQU	-4979				; Return from DataBrowserGetSetItemDataProc 

															; Generic Control Tags 
kControlDataBrowserIncludesFrameAndFocusTag EQU 'brdr'		; Boolean 
kControlDataBrowserKeyFilterTag	EQU		'fltr'
kControlDataBrowserEditTextKeyFilterTag EQU 'fltr'
kControlDataBrowserEditTextValidationProcTag EQU 'vali'
;  Data Browser View Styles 
; typedef OSType 						DataBrowserViewStyle


kDataBrowserNoView				EQU		'????'				; Error State 
kDataBrowserListView			EQU		'lstv'
kDataBrowserColumnView			EQU		'clmv'
;  Selection Flags 

; typedef UInt32						DataBrowserSelectionFlags
kDataBrowserDragSelect			EQU		$01					; ≈ ListMgr lNoRect 
kDataBrowserSelectOnlyOne		EQU		$02					; ≈ ListMgr lOnlyOne 
kDataBrowserResetSelection		EQU		$04					; ≈ ListMgr lNoExtend 
kDataBrowserCmdTogglesSelection	EQU		$08					; ≈ ListMgr lUseSense 
kDataBrowserNoDisjointSelection	EQU		$10					; ≈ ListMgr lNoDisjoint 
kDataBrowserAlwaysExtendSelection EQU	$20					; ≈ ListMgr lExtendDrag 
kDataBrowserNeverEmptySelectionSet EQU	$40					; ≈ ListMgr lNoNilHilite 
;  Data Browser Sorting 

; typedef UInt16						DataBrowserSortOrder
kDataBrowserOrderUndefined		EQU		0					; Not currently supported 
kDataBrowserOrderIncreasing		EQU		1
kDataBrowserOrderDecreasing		EQU		2
;  Data Browser Item Management 

; typedef UInt32						DataBrowserItemID
kDataBrowserNoItem				EQU		0					; Reserved DataBrowserItemID 

; typedef UInt32						DataBrowserItemState
kDataBrowserItemNoState			EQU		0
kDataBrowserItemAnyState		EQU		-1
kDataBrowserItemIsSelected		EQU		$01
kDataBrowserContainerIsOpen		EQU		$02
kDataBrowserItemIsDragTarget	EQU		$04					; During a drag operation 
;  Options for use with RevealDataBrowserItem 

; typedef UInt8							DataBrowserRevealOptions
kDataBrowserRevealOnly			EQU		0
kDataBrowserRevealAndCenterInView EQU	$01
kDataBrowserRevealWithoutSelecting EQU	$02
;  Set operations for use with SetDataBrowserSelectedItems 

; typedef UInt32						DataBrowserSetOption
kDataBrowserItemsAdd			EQU		0					; add specified items to existing set 
kDataBrowserItemsAssign			EQU		1					; assign destination set to specified items 
kDataBrowserItemsToggle			EQU		2					; toggle membership state of specified items 
kDataBrowserItemsRemove			EQU		3					; remove specified items from existing set 
;  Commands for use with MoveDataBrowserSelectionAnchor 

; typedef UInt32						DataBrowserSelectionAnchorDirection
kDataBrowserSelectionAnchorUp	EQU		0
kDataBrowserSelectionAnchorDown	EQU		1
kDataBrowserSelectionAnchorLeft	EQU		2
kDataBrowserSelectionAnchorRight EQU	3
;  Edit menu command IDs for use with Enable/ExecuteDataBrowserEditCommand 

; typedef UInt32						DataBrowserEditCommand
kDataBrowserEditMsgUndo			EQU		'undo'
kDataBrowserEditMsgRedo			EQU		'redo'
kDataBrowserEditMsgCut			EQU		'cut '
kDataBrowserEditMsgCopy			EQU		'copy'
kDataBrowserEditMsgPaste		EQU		'past'
kDataBrowserEditMsgClear		EQU		'clea'
kDataBrowserEditMsgSelectAll	EQU		'sall'
;  Notifications used in DataBrowserItemNotificationProcPtr 

; typedef UInt32						DataBrowserItemNotification
kDataBrowserItemAdded			EQU		1					; The specified item has been added to the browser 
kDataBrowserItemRemoved			EQU		2					; The specified item has been removed from the browser 
kDataBrowserEditStarted			EQU		3					; Starting an EditText session for specified item 
kDataBrowserEditStopped			EQU		4					; Stopping an EditText session for specified item 
kDataBrowserItemSelected		EQU		5					; Item has just been added to the selection set 
kDataBrowserItemDeselected		EQU		6					; Item has just been removed from the selection set 
kDataBrowserItemDoubleClicked	EQU		7
kDataBrowserContainerOpened		EQU		8					; Container is open 
kDataBrowserContainerClosing	EQU		9					; Container is about to close (and will real soon now, y'all) 
kDataBrowserContainerClosed		EQU		10					; Container is closed (y'all come back now!) 
kDataBrowserContainerSorting	EQU		11					; Container is about to be sorted (lock any volatile properties) 
kDataBrowserContainerSorted		EQU		12					; Container has been sorted (you may release any property locks) 
kDataBrowserUserToggledContainer EQU	16					; _User_ requested container open/close state to be toggled 
kDataBrowserTargetChanged		EQU		15					; The target has changed to the specified item 
kDataBrowserUserStateChanged	EQU		13					; The user has reformatted the view for the target 
kDataBrowserSelectionSetChanged	EQU		14					; The selection set has been modified (net result may be the same) 
;  DataBrowser Property Management 
;  0-1023 reserved; >= 1024 for client use 

; typedef UInt32						DataBrowserPropertyID
															; Predefined attribute properties, optional & non-display unless otherwise stated 
kDataBrowserItemNoProperty		EQU		0					; The anti-property (no associated data) 
kDataBrowserItemIsActiveProperty EQU	1					; Boolean typed data (defaults to true) 
kDataBrowserItemIsSelectableProperty EQU 2					; Boolean typed data (defaults to true) 
kDataBrowserItemIsEditableProperty EQU	3					; Boolean typed data (defaults to false, used for editable properties) 
kDataBrowserItemIsContainerProperty EQU	4					; Boolean typed data (defaults to false) 
kDataBrowserContainerIsOpenableProperty EQU 5				; Boolean typed data (defaults to true) 
kDataBrowserContainerIsClosableProperty EQU 6				; Boolean typed data (defaults to true) 
kDataBrowserContainerIsSortableProperty EQU 7				; Boolean typed data (defaults to true) 
kDataBrowserItemSelfIdentityProperty EQU 8					; kDataBrowserIconAndTextType (display property; ColumnView only) 
kDataBrowserContainerAliasIDProperty EQU 9					; DataBrowserItemID (alias/symlink an item to a container item) 
kDataBrowserColumnViewPreviewProperty EQU 10				; kDataBrowserCustomType (display property; ColumnView only) 
kDataBrowserItemParentContainerProperty EQU 11				; DataBrowserItemID (the parent of the specified item, used by ColumnView) 
;  DataBrowser Property Types (for display properties; i.e. ListView columns) 
;       These are primarily presentation types (or styles) although         
;       they also imply a particular set of primitive types or structures.  
; typedef OSType 						DataBrowserPropertyType


															; == Corresponding data type or structure == 
kDataBrowserCustomType			EQU		'????'				; No associated data, custom callbacks used 
kDataBrowserIconType			EQU		'icnr'				; IconRef, IconTransformType, RGBColor 
kDataBrowserTextType			EQU		'text'				; CFStringRef 
kDataBrowserDateTimeType		EQU		'date'				; DateTime or LongDateTime 
kDataBrowserSliderType			EQU		'sldr'				; Min, Max, Value 
kDataBrowserCheckboxType		EQU		'chbx'				; ThemeButtonValue 
kDataBrowserProgressBarType		EQU		'prog'				; Min, Max, Value 
kDataBrowserRelevanceRankType	EQU		'rank'				; Min, Max, Value 
kDataBrowserPopupMenuType		EQU		'menu'				; MenuRef, Value 
kDataBrowserIconAndTextType		EQU		'ticn'				; IconRef, CFStringRef, etc 
;  DataBrowser Property Parts 
;       Visual components of a property type.      
;       For use with GetDataBrowserItemPartBounds. 
; typedef OSType 						DataBrowserPropertyPart


kDataBrowserPropertyEnclosingPart EQU	0
kDataBrowserPropertyContentPart	EQU		'----'
kDataBrowserPropertyDisclosurePart EQU	'disc'
kDataBrowserPropertyTextPart	EQU		'text'
kDataBrowserPropertyIconPart	EQU		'icnr'
kDataBrowserPropertySliderPart	EQU		'sldr'
kDataBrowserPropertyCheckboxPart EQU	'chbx'
kDataBrowserPropertyProgressBarPart EQU	'prog'
kDataBrowserPropertyRelevanceRankPart EQU 'rank'
;  Modify appearance/behavior of display properties 
; typedef unsigned long 				DataBrowserPropertyFlags

;  Low 8 bits apply to all property types 

kDataBrowserUniversalPropertyFlagsMask EQU $FF
kDataBrowserPropertyIsMutable	EQU		$01
kDataBrowserDefaultPropertyFlags EQU	$00
kDataBrowserUniversalPropertyFlags EQU	$FF					; support for an old name
kDataBrowserPropertyIsEditable	EQU		$01					; support for an old name
;  Next 8 bits contain property-specific modifiers 

kDataBrowserPropertyFlagsOffset	EQU		8
kDataBrowserPropertyFlagsMask	EQU		$FF00
kDataBrowserCheckboxTriState	EQU		$0100				; kDataBrowserCheckboxType
kDataBrowserDateTimeRelative	EQU		$0100				; kDataBrowserDateTimeType 
kDataBrowserDateTimeDateOnly	EQU		$0200				; kDataBrowserDateTimeType 
kDataBrowserDateTimeTimeOnly	EQU		$0400				; kDataBrowserDateTimeType 
kDataBrowserDateTimeSecondsToo	EQU		$0800				; kDataBrowserDateTimeType 
kDataBrowserSliderPlainThumb	EQU		$00					; kDataBrowserSliderType 
kDataBrowserSliderUpwardThumb	EQU		$0100				; kDataBrowserSliderType 
kDataBrowserSliderDownwardThumb	EQU		$0200				; kDataBrowserSliderType 
kDataBrowserDoNotTruncateText	EQU		$0300				; kDataBrowserTextType && kDataBrowserIconAndTextType 
kDataBrowserTruncateTextAtEnd	EQU		$0200				; kDataBrowserTextType && kDataBrowserIconAndTextType 
kDataBrowserTruncateTextMiddle	EQU		$00					; kDataBrowserTextType && kDataBrowserIconAndTextType 
kDataBrowserTruncateTextAtStart	EQU		$0100				; kDataBrowserTextType && kDataBrowserIconAndTextType 
kDataBrowserPropertyModificationFlags EQU $FF00				; support for an old name
kDataBrowserRelativeDateTime	EQU		$0100				; support for an old name

;   Next 8 bits contain viewStyle-specific modifiers 
;   See individual ViewStyle sections below for flag definitions 



kDataBrowserViewSpecificFlagsOffset EQU	16
kDataBrowserViewSpecificFlagsMask EQU	$00FF0000
kDataBrowserViewSpecificPropertyFlags EQU $00FF0000			; support for an old name
;  High 8 bits are reserved for client application use 

kDataBrowserClientPropertyFlagsOffset EQU 24
kDataBrowserClientPropertyFlagsMask EQU	$FF000000
;  Client defined property description 
DataBrowserPropertyDesc	RECORD 0
propertyID				 ds.l	1				; offset: $0 (0)
propertyType			 ds.l	1				; offset: $4 (4)
propertyFlags			 ds.l	1				; offset: $8 (8)
sizeof					 EQU *					; size:   $C (12)
						ENDR
;  Callback definition for use with ForEachDataBrowserItem 

; *  NewDataBrowserItemUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserItemUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserItemUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;  Creation/Configuration 

; *  CreateDataBrowserControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateDataBrowserControl(WindowRef window, const Rect *boundsRect, DataBrowserViewStyle style, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateDataBrowserControl
	ENDIF


; *  GetDataBrowserViewStyle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserViewStyle(ControlRef browser, DataBrowserViewStyle *style)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserViewStyle
	ENDIF


; *  SetDataBrowserViewStyle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserViewStyle(ControlRef browser, DataBrowserViewStyle style)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserViewStyle
	ENDIF

;  Item Manipulation 
;  Passing NULL for "items" argument to RemoveDataBrowserItems and 
;  UpdateDataBrowserItems refers to all items in the specified container 

; *  AddDataBrowserItems()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus AddDataBrowserItems(ControlRef browser, DataBrowserItemID container, UInt32 numItems, const DataBrowserItemID *items, DataBrowserPropertyID preSortProperty)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddDataBrowserItems
	ENDIF


; *  RemoveDataBrowserItems()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus RemoveDataBrowserItems(ControlRef browser, DataBrowserItemID container, UInt32 numItems, const DataBrowserItemID *items, DataBrowserPropertyID preSortProperty)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RemoveDataBrowserItems
	ENDIF


; *  UpdateDataBrowserItems()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus UpdateDataBrowserItems(ControlRef browser, DataBrowserItemID container, UInt32 numItems, const DataBrowserItemID *items, DataBrowserPropertyID preSortProperty, DataBrowserPropertyID propertyID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UpdateDataBrowserItems
	ENDIF

;  Edit Menu Enabling and Handling 

; *  EnableDataBrowserEditCommand()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean EnableDataBrowserEditCommand(ControlRef browser, DataBrowserEditCommand command)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EnableDataBrowserEditCommand
	ENDIF


; *  ExecuteDataBrowserEditCommand()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ExecuteDataBrowserEditCommand(ControlRef browser, DataBrowserEditCommand command)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ExecuteDataBrowserEditCommand
	ENDIF


; *  GetDataBrowserSelectionAnchor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserSelectionAnchor(ControlRef browser, DataBrowserItemID *first, DataBrowserItemID *last)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserSelectionAnchor
	ENDIF


; *  MoveDataBrowserSelectionAnchor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus MoveDataBrowserSelectionAnchor(ControlRef browser, DataBrowserSelectionAnchorDirection direction, Boolean extendSelection)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION MoveDataBrowserSelectionAnchor
	ENDIF

;  Container Manipulation 

; *  OpenDataBrowserContainer()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OpenDataBrowserContainer(ControlRef browser, DataBrowserItemID container)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OpenDataBrowserContainer
	ENDIF


; *  CloseDataBrowserContainer()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CloseDataBrowserContainer(ControlRef browser, DataBrowserItemID container)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CloseDataBrowserContainer
	ENDIF


; *  SortDataBrowserContainer()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SortDataBrowserContainer(ControlRef browser, DataBrowserItemID container, Boolean sortChildren)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SortDataBrowserContainer
	ENDIF

;  Aggregate Item Access and Iteration 

; *  GetDataBrowserItems()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItems(ControlRef browser, DataBrowserItemID container, Boolean recurse, DataBrowserItemState state, Handle items)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItems
	ENDIF


; *  GetDataBrowserItemCount()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemCount(ControlRef browser, DataBrowserItemID container, Boolean recurse, DataBrowserItemState state, UInt32 *numItems)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemCount
	ENDIF


; *  ForEachDataBrowserItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ForEachDataBrowserItem(ControlRef browser, DataBrowserItemID container, Boolean recurse, DataBrowserItemState state, DataBrowserItemUPP callback, void *clientData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ForEachDataBrowserItem
	ENDIF

;  Individual Item Access and Display 

; *  IsDataBrowserItemSelected()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsDataBrowserItemSelected(ControlRef browser, DataBrowserItemID item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsDataBrowserItemSelected
	ENDIF


; *  GetDataBrowserItemState()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemState(ControlRef browser, DataBrowserItemID item, DataBrowserItemState *state)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemState
	ENDIF


; *  RevealDataBrowserItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus RevealDataBrowserItem(ControlRef browser, DataBrowserItemID item, DataBrowserPropertyID propertyID, DataBrowserRevealOptions options)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RevealDataBrowserItem
	ENDIF

;  Selection Set Manipulation 

; *  SetDataBrowserSelectedItems()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserSelectedItems(ControlRef browser, UInt32 numItems, const DataBrowserItemID *items, DataBrowserSetOption operation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserSelectedItems
	ENDIF


;  DataBrowser Attribute Manipulation 
;  The user customizable portion of the current view style settings 

; *  SetDataBrowserUserState()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserUserState(ControlRef browser, CFDataRef stateInfo)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserUserState
	ENDIF


; *  GetDataBrowserUserState()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserUserState(ControlRef browser, CFDataRef *stateInfo)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserUserState
	ENDIF

;  All items are active/enabled or not 

; *  SetDataBrowserActiveItems()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserActiveItems(ControlRef browser, Boolean active)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserActiveItems
	ENDIF


; *  GetDataBrowserActiveItems()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserActiveItems(ControlRef browser, Boolean *active)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserActiveItems
	ENDIF

;  Inset the scrollbars within the DataBrowser bounds 

; *  SetDataBrowserScrollBarInset()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserScrollBarInset(ControlRef browser, Rect *insetRect)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserScrollBarInset
	ENDIF


; *  GetDataBrowserScrollBarInset()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserScrollBarInset(ControlRef browser, Rect *insetRect)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserScrollBarInset
	ENDIF

;  The "user focused" item 
;  For the ListView, this means the root container 
;  For the ColumnView, this means the rightmost container column 

; *  SetDataBrowserTarget()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserTarget(ControlRef browser, DataBrowserItemID target)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserTarget
	ENDIF


; *  GetDataBrowserTarget()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserTarget(ControlRef browser, DataBrowserItemID *target)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserTarget
	ENDIF

;  Current sort ordering 
;  ListView tracks this per-column 

; *  SetDataBrowserSortOrder()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserSortOrder(ControlRef browser, DataBrowserSortOrder order)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserSortOrder
	ENDIF


; *  GetDataBrowserSortOrder()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserSortOrder(ControlRef browser, DataBrowserSortOrder *order)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserSortOrder
	ENDIF

;  Scrollbar values 

; *  SetDataBrowserScrollPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserScrollPosition(ControlRef browser, UInt32 top, UInt32 left)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserScrollPosition
	ENDIF


; *  GetDataBrowserScrollPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserScrollPosition(ControlRef browser, UInt32 *top, UInt32 *left)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserScrollPosition
	ENDIF

;  Show/Hide each scrollbar 

; *  SetDataBrowserHasScrollBars()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserHasScrollBars(ControlRef browser, Boolean horiz, Boolean vert)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserHasScrollBars
	ENDIF


; *  GetDataBrowserHasScrollBars()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserHasScrollBars(ControlRef browser, Boolean *horiz, Boolean *vert)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserHasScrollBars
	ENDIF

;  Property passed to sort callback (ListView sort column) 

; *  SetDataBrowserSortProperty()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserSortProperty(ControlRef browser, DataBrowserPropertyID property)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserSortProperty
	ENDIF


; *  GetDataBrowserSortProperty()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserSortProperty(ControlRef browser, DataBrowserPropertyID *property)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserSortProperty
	ENDIF

;  Modify selection behavior 

; *  SetDataBrowserSelectionFlags()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserSelectionFlags(ControlRef browser, DataBrowserSelectionFlags selectionFlags)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserSelectionFlags
	ENDIF


; *  GetDataBrowserSelectionFlags()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserSelectionFlags(ControlRef browser, DataBrowserSelectionFlags *selectionFlags)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserSelectionFlags
	ENDIF

;  Dynamically modify property appearance/behavior 

; *  SetDataBrowserPropertyFlags()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserPropertyFlags(ControlRef browser, DataBrowserPropertyID property, DataBrowserPropertyFlags flags)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserPropertyFlags
	ENDIF


; *  GetDataBrowserPropertyFlags()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserPropertyFlags(ControlRef browser, DataBrowserPropertyID property, DataBrowserPropertyFlags *flags)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserPropertyFlags
	ENDIF

;  Text of current in-place edit session 

; *  SetDataBrowserEditText()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserEditText(ControlRef browser, CFStringRef text)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserEditText
	ENDIF


; *  CopyDataBrowserEditText()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CopyDataBrowserEditText(ControlRef browser, CFStringRef *text)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CopyDataBrowserEditText
	ENDIF


; *  GetDataBrowserEditText()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserEditText(ControlRef browser, CFMutableStringRef text)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserEditText
	ENDIF

;  Item/property currently being edited 

; *  SetDataBrowserEditItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserEditItem(ControlRef browser, DataBrowserItemID item, DataBrowserPropertyID property)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserEditItem
	ENDIF


; *  GetDataBrowserEditItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserEditItem(ControlRef browser, DataBrowserItemID *item, DataBrowserPropertyID *property)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserEditItem
	ENDIF

;  Get the current bounds of a visual part of an item's property 

; *  GetDataBrowserItemPartBounds()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemPartBounds(ControlRef browser, DataBrowserItemID item, DataBrowserPropertyID property, DataBrowserPropertyPart part, Rect *bounds)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemPartBounds
	ENDIF


;  DataBrowser ItemData Accessors (used within DataBrowserItemData callback) 
; typedef void *						DataBrowserItemDataRef


; *  SetDataBrowserItemDataIcon()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataIcon(DataBrowserItemDataRef itemData, IconRef theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataIcon
	ENDIF


; *  GetDataBrowserItemDataIcon()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataIcon(DataBrowserItemDataRef itemData, IconRef *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataIcon
	ENDIF


; *  SetDataBrowserItemDataText()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataText(DataBrowserItemDataRef itemData, CFStringRef theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataText
	ENDIF


; *  GetDataBrowserItemDataText()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataText(DataBrowserItemDataRef itemData, CFStringRef *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataText
	ENDIF



; *  SetDataBrowserItemDataValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataValue(DataBrowserItemDataRef itemData, SInt32 theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataValue
	ENDIF


; *  GetDataBrowserItemDataValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataValue(DataBrowserItemDataRef itemData, SInt32 *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataValue
	ENDIF


; *  SetDataBrowserItemDataMinimum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataMinimum(DataBrowserItemDataRef itemData, SInt32 theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataMinimum
	ENDIF


; *  GetDataBrowserItemDataMinimum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataMinimum(DataBrowserItemDataRef itemData, SInt32 *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataMinimum
	ENDIF


; *  SetDataBrowserItemDataMaximum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataMaximum(DataBrowserItemDataRef itemData, SInt32 theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataMaximum
	ENDIF


; *  GetDataBrowserItemDataMaximum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataMaximum(DataBrowserItemDataRef itemData, SInt32 *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataMaximum
	ENDIF


; *  SetDataBrowserItemDataBooleanValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataBooleanValue(DataBrowserItemDataRef itemData, Boolean theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataBooleanValue
	ENDIF


; *  GetDataBrowserItemDataBooleanValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataBooleanValue(DataBrowserItemDataRef itemData, Boolean *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataBooleanValue
	ENDIF


; *  SetDataBrowserItemDataMenuRef()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataMenuRef(DataBrowserItemDataRef itemData, MenuRef theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataMenuRef
	ENDIF


; *  GetDataBrowserItemDataMenuRef()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataMenuRef(DataBrowserItemDataRef itemData, MenuRef *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataMenuRef
	ENDIF


; *  SetDataBrowserItemDataRGBColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataRGBColor(DataBrowserItemDataRef itemData, const RGBColor *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataRGBColor
	ENDIF


; *  GetDataBrowserItemDataRGBColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataRGBColor(DataBrowserItemDataRef itemData, RGBColor *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataRGBColor
	ENDIF



; *  SetDataBrowserItemDataDrawState()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataDrawState(DataBrowserItemDataRef itemData, ThemeDrawState theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataDrawState
	ENDIF


; *  GetDataBrowserItemDataDrawState()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataDrawState(DataBrowserItemDataRef itemData, ThemeDrawState *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataDrawState
	ENDIF


; *  SetDataBrowserItemDataButtonValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataButtonValue(DataBrowserItemDataRef itemData, ThemeButtonValue theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataButtonValue
	ENDIF


; *  GetDataBrowserItemDataButtonValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataButtonValue(DataBrowserItemDataRef itemData, ThemeButtonValue *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataButtonValue
	ENDIF


; *  SetDataBrowserItemDataIconTransform()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataIconTransform(DataBrowserItemDataRef itemData, IconTransformType theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataIconTransform
	ENDIF


; *  GetDataBrowserItemDataIconTransform()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataIconTransform(DataBrowserItemDataRef itemData, IconTransformType *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataIconTransform
	ENDIF



; *  SetDataBrowserItemDataDateTime()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataDateTime(DataBrowserItemDataRef itemData, long theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataDateTime
	ENDIF


; *  GetDataBrowserItemDataDateTime()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataDateTime(DataBrowserItemDataRef itemData, long *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataDateTime
	ENDIF


; *  SetDataBrowserItemDataLongDateTime()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataLongDateTime(DataBrowserItemDataRef itemData, const LongDateTime *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataLongDateTime
	ENDIF


; *  GetDataBrowserItemDataLongDateTime()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataLongDateTime(DataBrowserItemDataRef itemData, LongDateTime *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataLongDateTime
	ENDIF



; *  SetDataBrowserItemDataItemID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserItemDataItemID(DataBrowserItemDataRef itemData, DataBrowserItemID theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserItemDataItemID
	ENDIF


; *  GetDataBrowserItemDataItemID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataItemID(DataBrowserItemDataRef itemData, DataBrowserItemID *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataItemID
	ENDIF


; *  GetDataBrowserItemDataProperty()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserItemDataProperty(DataBrowserItemDataRef itemData, DataBrowserPropertyID *theData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserItemDataProperty
	ENDIF


;  Standard DataBrowser Callbacks 
;  Basic Item Management & Manipulation 
;  Item Comparison 
;  ItemEvent Notification 

;  Drag & Drop Processing 
;  Contextual Menu Support 
;  Help Manager Support 

; *  NewDataBrowserItemDataUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserItemCompareUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserItemNotificationUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserAddDragItemUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserAcceptDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserReceiveDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserPostProcessDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserGetContextualMenuUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserSelectContextualMenuUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserItemHelpContentUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserItemDataUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserItemCompareUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserItemNotificationUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserAddDragItemUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserAcceptDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserReceiveDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserPostProcessDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserGetContextualMenuUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserSelectContextualMenuUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserItemHelpContentUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserItemDataUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserItemCompareUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserItemNotificationUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserAddDragItemUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserAcceptDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserReceiveDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserPostProcessDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserGetContextualMenuUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserSelectContextualMenuUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserItemHelpContentUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;  Standard Callback (vtable) Structure 

kDataBrowserLatestCallbacks		EQU		0
DataBrowserCallbacks	RECORD 0
version					 ds.l	1				; offset: $0 (0)		;  Use kDataBrowserLatestCallbacks 
itemDataCallback		 ds.l	1				; offset: $4 (4)
itemCompareCallback		 ds.l	1				; offset: $8 (8)
itemNotificationCallback  ds.l	1				; offset: $C (12)
addDragItemCallback		 ds.l	1				; offset: $10 (16)
acceptDragCallback		 ds.l	1				; offset: $14 (20)
receiveDragCallback		 ds.l	1				; offset: $18 (24)
postProcessDragCallback	 ds.l	1				; offset: $1C (28)
itemHelpContentCallback	 ds.l	1				; offset: $20 (32)
getContextualMenuCallback  ds.l	1				; offset: $24 (36)
selectContextualMenuCallback  ds.l 1			; offset: $28 (40)
sizeof					 EQU *					; size:   $2C (44)
						ENDR

; *  InitDataBrowserCallbacks()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus InitDataBrowserCallbacks(DataBrowserCallbacks *callbacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InitDataBrowserCallbacks
	ENDIF


; *  GetDataBrowserCallbacks()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserCallbacks(ControlRef browser, DataBrowserCallbacks *callbacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserCallbacks
	ENDIF


; *  SetDataBrowserCallbacks()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserCallbacks(ControlRef browser, const DataBrowserCallbacks *callbacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserCallbacks
	ENDIF


;  Custom Format Callbacks (kDataBrowserCustomType display properties) 
; typedef unsigned long 				DataBrowserDragFlags


; typedef SInt16						DataBrowserTrackingResult
kDataBrowserContentHit			EQU		1
kDataBrowserNothingHit			EQU		0
kDataBrowserStopTracking		EQU		-1

; *  NewDataBrowserDrawItemUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserEditItemUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserHitTestUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserTrackingUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserItemDragRgnUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserItemAcceptDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewDataBrowserItemReceiveDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserDrawItemUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserEditItemUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserHitTestUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserTrackingUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserItemDragRgnUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserItemAcceptDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDataBrowserItemReceiveDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserDrawItemUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserEditItemUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserHitTestUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserTrackingUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserItemDragRgnUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserItemAcceptDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDataBrowserItemReceiveDragUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;  Custom Callback (vtable) Structure 

kDataBrowserLatestCustomCallbacks EQU	0
DataBrowserCustomCallbacks RECORD 0
version					 ds.l	1				; offset: $0 (0)		;  Use kDataBrowserLatestCustomCallbacks 
drawItemCallback		 ds.l	1				; offset: $4 (4)
editTextCallback		 ds.l	1				; offset: $8 (8)
hitTestCallback			 ds.l	1				; offset: $C (12)
trackingCallback		 ds.l	1				; offset: $10 (16)
dragRegionCallback		 ds.l	1				; offset: $14 (20)
acceptDragCallback		 ds.l	1				; offset: $18 (24)
receiveDragCallback		 ds.l	1				; offset: $1C (28)
sizeof					 EQU *					; size:   $20 (32)
						ENDR

; *  InitDataBrowserCustomCallbacks()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus InitDataBrowserCustomCallbacks(DataBrowserCustomCallbacks *callbacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InitDataBrowserCustomCallbacks
	ENDIF


; *  GetDataBrowserCustomCallbacks()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserCustomCallbacks(ControlRef browser, DataBrowserCustomCallbacks *callbacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserCustomCallbacks
	ENDIF


; *  SetDataBrowserCustomCallbacks()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserCustomCallbacks(ControlRef browser, const DataBrowserCustomCallbacks *callbacks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserCustomCallbacks
	ENDIF




;  TableView Formatting 

; typedef UInt32						DataBrowserTableViewHiliteStyle
kDataBrowserTableViewMinimalHilite EQU	0
kDataBrowserTableViewFillHilite	EQU		1

; typedef UInt32						DataBrowserTableViewPropertyFlags
															; kDataBrowserTableView DataBrowserPropertyFlags 
kDataBrowserTableViewSelectionColumn EQU $00010000
; typedef UInt32 						DataBrowserTableViewRowIndex

; typedef UInt32 						DataBrowserTableViewColumnIndex

; typedef DataBrowserPropertyID 		DataBrowserTableViewColumnID

DataBrowserTableViewColumnDesc RECORD 0
f						 ds		DataBrowserPropertyDesc
sizeof					 EQU *					; size:   $C (12)
						ENDR



;  TableView API 
;  Use when setting column position 

kDataBrowserTableViewLastColumn	EQU		-1

; *  RemoveDataBrowserTableViewColumn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus RemoveDataBrowserTableViewColumn(ControlRef browser, DataBrowserTableViewColumnID column)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RemoveDataBrowserTableViewColumn
	ENDIF


; *  GetDataBrowserTableViewColumnCount()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserTableViewColumnCount(ControlRef browser, UInt32 *numColumns)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserTableViewColumnCount
	ENDIF



; *  SetDataBrowserTableViewHiliteStyle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserTableViewHiliteStyle(ControlRef browser, DataBrowserTableViewHiliteStyle hiliteStyle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserTableViewHiliteStyle
	ENDIF


; *  GetDataBrowserTableViewHiliteStyle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserTableViewHiliteStyle(ControlRef browser, DataBrowserTableViewHiliteStyle *hiliteStyle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserTableViewHiliteStyle
	ENDIF



; *  SetDataBrowserTableViewRowHeight()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserTableViewRowHeight(ControlRef browser, UInt16 height)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserTableViewRowHeight
	ENDIF


; *  GetDataBrowserTableViewRowHeight()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserTableViewRowHeight(ControlRef browser, UInt16 *height)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserTableViewRowHeight
	ENDIF


; *  SetDataBrowserTableViewColumnWidth()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserTableViewColumnWidth(ControlRef browser, UInt16 width)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserTableViewColumnWidth
	ENDIF


; *  GetDataBrowserTableViewColumnWidth()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserTableViewColumnWidth(ControlRef browser, UInt16 *width)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserTableViewColumnWidth
	ENDIF


; *  SetDataBrowserTableViewItemRowHeight()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserTableViewItemRowHeight(ControlRef browser, DataBrowserItemID item, UInt16 height)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserTableViewItemRowHeight
	ENDIF


; *  GetDataBrowserTableViewItemRowHeight()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserTableViewItemRowHeight(ControlRef browser, DataBrowserItemID item, UInt16 *height)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserTableViewItemRowHeight
	ENDIF


; *  SetDataBrowserTableViewNamedColumnWidth()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserTableViewNamedColumnWidth(ControlRef browser, DataBrowserTableViewColumnID column, UInt16 width)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserTableViewNamedColumnWidth
	ENDIF


; *  GetDataBrowserTableViewNamedColumnWidth()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserTableViewNamedColumnWidth(ControlRef browser, DataBrowserTableViewColumnID column, UInt16 *width)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserTableViewNamedColumnWidth
	ENDIF


; *  SetDataBrowserTableViewGeometry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserTableViewGeometry(ControlRef browser, Boolean variableWidthColumns, Boolean variableHeightRows)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserTableViewGeometry
	ENDIF


; *  GetDataBrowserTableViewGeometry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserTableViewGeometry(ControlRef browser, Boolean *variableWidthColumns, Boolean *variableHeightRows)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserTableViewGeometry
	ENDIF



; *  GetDataBrowserTableViewItemID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserTableViewItemID(ControlRef browser, DataBrowserTableViewRowIndex row, DataBrowserItemID *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserTableViewItemID
	ENDIF


; *  SetDataBrowserTableViewItemRow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserTableViewItemRow(ControlRef browser, DataBrowserItemID item, DataBrowserTableViewRowIndex row)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserTableViewItemRow
	ENDIF


; *  GetDataBrowserTableViewItemRow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserTableViewItemRow(ControlRef browser, DataBrowserItemID item, DataBrowserTableViewRowIndex *row)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserTableViewItemRow
	ENDIF


; *  SetDataBrowserTableViewColumnPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserTableViewColumnPosition(ControlRef browser, DataBrowserTableViewColumnID column, DataBrowserTableViewColumnIndex position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserTableViewColumnPosition
	ENDIF


; *  GetDataBrowserTableViewColumnPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserTableViewColumnPosition(ControlRef browser, DataBrowserTableViewColumnID column, DataBrowserTableViewColumnIndex *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserTableViewColumnPosition
	ENDIF


; *  GetDataBrowserTableViewColumnProperty()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserTableViewColumnProperty(ControlRef browser, DataBrowserTableViewColumnIndex column, DataBrowserTableViewColumnID *property)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserTableViewColumnProperty
	ENDIF




;  kDataBrowserListView Formatting 

; typedef UInt32						DataBrowserListViewPropertyFlags
															; kDataBrowserListView DataBrowserPropertyFlags 
kDataBrowserListViewMovableColumn EQU	$00020000
kDataBrowserListViewSortableColumn EQU	$00040000
kDataBrowserListViewSelectionColumn EQU	$00010000
kDataBrowserListViewDefaultColumnFlags EQU $00060000


kDataBrowserListViewLatestHeaderDesc EQU 0
DataBrowserListViewHeaderDesc RECORD 0
version					 ds.l	1				; offset: $0 (0)		;  Use kDataBrowserListViewLatestHeaderDesc 
minimumWidth			 ds.w	1				; offset: $4 (4)
maximumWidth			 ds.w	1				; offset: $6 (6)
titleOffset				 ds.w	1				; offset: $8 (8)
titleString				 ds.l	1				; offset: $A (10)
initialOrder			 ds.w	1				; offset: $E (14)
btnFontStyle			 ds		ControlFontStyleRec ; offset: $10 (16)
btnContentInfo			 ds		ControlButtonContentInfo ; offset: $28 (40)
sizeof					 EQU *					; size:   $2E (46)
						ENDR
DataBrowserListViewColumnDesc RECORD 0
propertyDesc			 ds		DataBrowserTableViewColumnDesc ; offset: $0 (0)
headerBtnDesc			 ds		DataBrowserListViewHeaderDesc ; offset: $C (12)
sizeof					 EQU *					; size:   $3A (58)
						ENDR
;  kDataBrowserListView API 

kDataBrowserListViewAppendColumn EQU	-1

; *  AutoSizeDataBrowserListViewColumns()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus AutoSizeDataBrowserListViewColumns(ControlRef browser)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AutoSizeDataBrowserListViewColumns
	ENDIF


; *  AddDataBrowserListViewColumn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus AddDataBrowserListViewColumn(ControlRef browser, DataBrowserListViewColumnDesc *columnDesc, DataBrowserTableViewColumnIndex position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddDataBrowserListViewColumn
	ENDIF


; *  SetDataBrowserListViewHeaderBtnHeight()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserListViewHeaderBtnHeight(ControlRef browser, UInt16 height)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserListViewHeaderBtnHeight
	ENDIF


; *  GetDataBrowserListViewHeaderBtnHeight()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserListViewHeaderBtnHeight(ControlRef browser, UInt16 *height)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserListViewHeaderBtnHeight
	ENDIF


; *  SetDataBrowserListViewUsePlainBackground()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserListViewUsePlainBackground(ControlRef browser, Boolean usePlainBackground)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserListViewUsePlainBackground
	ENDIF


; *  GetDataBrowserListViewUsePlainBackground()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserListViewUsePlainBackground(ControlRef browser, Boolean *usePlainBackground)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserListViewUsePlainBackground
	ENDIF


; *  SetDataBrowserListViewDisclosureColumn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserListViewDisclosureColumn(ControlRef browser, DataBrowserTableViewColumnID column, Boolean expandableRows)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserListViewDisclosureColumn
	ENDIF


; *  GetDataBrowserListViewDisclosureColumn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserListViewDisclosureColumn(ControlRef browser, DataBrowserTableViewColumnID *column, Boolean *expandableRows)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserListViewDisclosureColumn
	ENDIF


;  kDataBrowserColumnView API 

; *  GetDataBrowserColumnViewPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserColumnViewPath(ControlRef browser, Handle path)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserColumnViewPath
	ENDIF


; *  GetDataBrowserColumnViewPathLength()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserColumnViewPathLength(ControlRef browser, UInt32 *pathLength)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserColumnViewPathLength
	ENDIF


; *  SetDataBrowserColumnViewPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserColumnViewPath(ControlRef browser, UInt32 length, const DataBrowserItemID *path)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserColumnViewPath
	ENDIF


; *  SetDataBrowserColumnViewDisplayType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetDataBrowserColumnViewDisplayType(ControlRef browser, DataBrowserPropertyType propertyType)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDataBrowserColumnViewDisplayType
	ENDIF


; *  GetDataBrowserColumnViewDisplayType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetDataBrowserColumnViewDisplayType(ControlRef browser, DataBrowserPropertyType *propertyType)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDataBrowserColumnViewDisplayType
	ENDIF


;  DataBrowser UPP macros 
; ---------------------------------------------------------------------------------------
;  EditUnicodeText Contol                                                                
; ---------------------------------------------------------------------------------------
;  This control is only available in X, XXXXX.  It is super similar to Edit Text control 
;  Use all the same Get/Set tags.  But don't ask for the TEHandle.           
; ---------------------------------------------------------------------------------------
;  This callback supplies the functionality of the TSMTEPostUpdateProcPtr that is used 
;  in the EditText control.  A client should supply this call if they want to look at  
;  inline text that has been fixed before it is included in the actual body text       
;  if the new text (i.e. the text in the handle) should be included in the body text    
;  the client should return true.  If the client wants to block the inclusion of the    
;  text they should return false.                                                       

; *  NewEditUnicodePostUpdateUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib on Mac OS X
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeEditUnicodePostUpdateUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib on Mac OS X
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeEditUnicodePostUpdateUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib on Mac OS X
; *    Mac OS X:         in version 10.0 or later
; 

;  Use this tag when calling ControlSet/GetData to specify the UnicodePostUpdateProcPtr 
;  tags available with Appearance 1.1 or later 

kControlEditUnicodeTextPostUpdateProcTag EQU 'upup'


kControlEditUnicodeTextProc		EQU		912
kControlEditUnicodeTextPasswordProc EQU	914
;  Creation API for X 

; *  CreateEditUnicodeTextControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateEditUnicodeTextControl(WindowRef window, const Rect *boundsRect, CFStringRef text, Boolean isPassword, const ControlFontStyleRec *style, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateEditUnicodeTextControl
	ENDIF



	IF OLDROUTINENAMES THEN
; ——————————————————————————————————————————————————————————————————————————————————————
;   • OLDROUTINENAMES                                                                   
; ——————————————————————————————————————————————————————————————————————————————————————

inLabel							EQU		1
inMenu							EQU		2
inTriangle						EQU		4
inButton						EQU		10
inCheckBox						EQU		11
inUpButton						EQU		20
inDownButton					EQU		21
inPageUp						EQU		22
inPageDown						EQU		23

kInLabelControlPart				EQU		1
kInMenuControlPart				EQU		2
kInTriangleControlPart			EQU		4
kInButtonControlPart			EQU		10
kInCheckBoxControlPart			EQU		11
kInUpButtonControlPart			EQU		20
kInDownButtonControlPart		EQU		21
kInPageUpControlPart			EQU		22
kInPageDownControlPart			EQU		23

	ENDIF	; OLDROUTINENAMES



	ENDIF ; __CONTROLDEFINITIONS__ 


;
;    File:       Controls.a
;
;    Contains:   Control Manager interfaces
;
;    Version:    Technology: Mac OS 9
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 1985-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__CONTROLS__') = 'UNDEFINED' THEN
__CONTROLS__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN
	include 'Quickdraw.a'
	ENDIF
	IF &TYPE('__MENUS__') = 'UNDEFINED' THEN
	include 'Menus.a'
	ENDIF
	IF &TYPE('__TEXTEDIT__') = 'UNDEFINED' THEN
	include 'TextEdit.a'
	ENDIF
	IF &TYPE('__DRAG__') = 'UNDEFINED' THEN
	include 'Drag.a'
	ENDIF
	IF &TYPE('__ICONS__') = 'UNDEFINED' THEN
	include 'Icons.a'
	ENDIF
	IF &TYPE('__COLLECTIONS__') = 'UNDEFINED' THEN
	include 'Collections.a'
	ENDIF
	IF &TYPE('__MACERRORS__') = 'UNDEFINED' THEN
	include 'MacErrors.a'
	ENDIF


; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Resource Types                                                                                    
; ——————————————————————————————————————————————————————————————————————————————————————————————————————

kControlDefProcType				EQU		'CDEF'
kControlTemplateResourceType	EQU		'CNTL'
kControlColorTableResourceType	EQU		'cctb'
kControlDefProcResourceType		EQU		'CDEF'
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Format of a ‘CNTL’ resource                                                                       
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
ControlTemplate			RECORD 0
controlRect				 ds		Rect			; offset: $0 (0)
controlValue			 ds.w	1				; offset: $8 (8)
controlVisible			 ds.b	1				; offset: $A (10)
fill					 ds.b	1				; offset: $B (11)
controlMaximum			 ds.w	1				; offset: $C (12)
controlMinimum			 ds.w	1				; offset: $E (14)
controlDefProcID		 ds.w	1				; offset: $10 (16)
controlReference		 ds.l	1				; offset: $12 (18)
controlTitle			 ds		Str255			; offset: $16 (22)
sizeof					 EQU *					; size:   $116 (278)
						ENDR
; typedef struct ControlTemplate *		ControlTemplatePtr

; typedef ControlTemplatePtr *			ControlTemplateHandle



	IF ¬ TARGET_OS_MAC THEN

;  —————————————————————————————————————————————————————————————————————————————————————————————————————————
;   • NON-MAC COMPATIBILITY CODES (QuickTime 3.0)
;  —————————————————————————————————————————————————————————————————————————————————————————————————————————


; typedef UInt32 						ControlNotification


controlNotifyNothing			EQU		'nada'				; No (null) notification
controlNotifyClick				EQU		'clik'				; Control was clicked
controlNotifyFocus				EQU		'focu'				; Control got keyboard focus
controlNotifyKey				EQU		'key '				; Control got a keypress
; typedef UInt32 						ControlCapabilities


kControlCanAutoInvalidate		EQU		$00000001			; Control component automatically invalidates areas left behind after hide/move operation.
;  procID's for our added "controls"

staticTextProc					EQU		256					; static text
editTextProc					EQU		272					; editable text
iconProc						EQU		288					; icon
userItemProc					EQU		304					; user drawn item
pictItemProc					EQU		320					; pict
	ENDIF
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • ControlRef                                                                                        
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
	IF ¬ OPAQUE_TOOLBOX_STRUCTS THEN


; typedef ControlRecord *				ControlPtr

; typedef ControlPtr *					ControlRef

	ELSE


	ENDIF
;  ControlHandle is obsolete. Use ControlRef.
; typedef ControlRef 					ControlHandle

; typedef SInt16 						ControlPartCode

; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;  • Control ActionProcPtr                                                                              
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • ControlRecord                                                                                     
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
	IF ¬ OPAQUE_TOOLBOX_STRUCTS THEN
ControlRecord			RECORD 0
nextControl				 ds.l	1				; offset: $0 (0)		;  in Carbon use embedding heirarchy functions
contrlOwner				 ds.l	1				; offset: $4 (4)		;  in Carbon use GetControlOwner or EmbedControl
contrlRect				 ds		Rect			; offset: $8 (8)		;  in Carbon use Get/SetControlBounds
contrlVis				 ds.b	1				; offset: $10 (16)		;  in Carbon use IsControlVisible, SetControlVisibility
contrlHilite			 ds.b	1				; offset: $11 (17)		;  in Carbon use GetControlHilite, HiliteControl
contrlValue				 ds.w	1				; offset: $12 (18)		;  in Carbon use Get/SetControlValue, Get/SetControl32BitValue
contrlMin				 ds.w	1				; offset: $14 (20)		;  in Carbon use Get/SetControlMinimum, Get/SetControl32BitMinimum
contrlMax				 ds.w	1				; offset: $16 (22)		;  in Carbon use Get/SetControlMaximum, Get/SetControl32BitMaximum
contrlDefProc			 ds.l	1				; offset: $18 (24)		;  not supported in Carbon
contrlData				 ds.l	1				; offset: $1C (28)		;  in Carbon use Get/SetControlDataHandle
contrlAction			 ds.l	1				; offset: $20 (32)		;  in Carbon use Get/SetControlAction
contrlRfCon				 ds.l	1				; offset: $24 (36)		;  in Carbon use Get/SetControlReference
contrlTitle				 ds		Str255			; offset: $28 (40)		;  in Carbon use Get/SetControlTitle
sizeof					 EQU *					; size:   $128 (296)
						ENDR
	ENDIF
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;  • Control ActionProcPtr : Epilogue                                                                   
; ——————————————————————————————————————————————————————————————————————————————————————————————————————

; *  NewControlActionUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlActionUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlActionUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Control Color Table                                                                               
; ——————————————————————————————————————————————————————————————————————————————————————————————————————

cFrameColor						EQU		0
cBodyColor						EQU		1
cTextColor						EQU		2
cThumbColor						EQU		3
kNumberCtlCTabEntries			EQU		4
CtlCTab					RECORD 0
ccSeed					 ds.l	1				; offset: $0 (0)
ccRider					 ds.w	1				; offset: $4 (4)
ctSize					 ds.w	1				; offset: $6 (6)
ctTable					 ds.b	4 * ColorSpec.sizeof ; offset: $8 (8)
sizeof					 EQU *					; size:   $28 (40)
						ENDR
; typedef struct CtlCTab *				CCTabPtr

; typedef CCTabPtr *					CCTabHandle

; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Auxiliary Control Record                                                                          
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
	IF ¬ OPAQUE_TOOLBOX_STRUCTS THEN
AuxCtlRec				RECORD 0
acNext					 ds.l	1				; offset: $0 (0)		;  not supported in Carbon
acOwner					 ds.l	1				; offset: $4 (4)		;  not supported in Carbon
acCTable				 ds.l	1				; offset: $8 (8)		;  not supported in Carbon
acFlags					 ds.w	1				; offset: $C (12)		;  not supported in Carbon
acReserved				 ds.l	1				; offset: $E (14)		;  not supported in Carbon
acRefCon				 ds.l	1				; offset: $12 (18)		;  in Carbon use Get/SetControlProperty if you need more refCons
sizeof					 EQU *					; size:   $16 (22)
						ENDR
; typedef struct AuxCtlRec *			AuxCtlPtr

; typedef AuxCtlPtr *					AuxCtlHandle

	ENDIF
; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Variants                                                                  
; ——————————————————————————————————————————————————————————————————————————————————————
; typedef SInt16 						ControlVariant


kControlNoVariant				EQU		0					; No variant
kControlUsesOwningWindowsFontVariant EQU $08				; Control uses owning windows font to display text

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Part Codes                                                                
; ——————————————————————————————————————————————————————————————————————————————————————
;  Basic part codes 

kControlNoPart					EQU		0
kControlIndicatorPart			EQU		129
kControlDisabledPart			EQU		254
kControlInactivePart			EQU		255
;  Use this constant in Get/SetControlData when the data referred to is not         
;  specific to a part, but rather the entire control, e.g. the list handle of a     
;  list box control.                                                                

kControlEntireControl			EQU		0
;   Meta-Parts                                                                          
;                                                                                       
;   If you haven't guessed from looking at other toolbox headers. We like the word      
;   'meta'. It's cool. So here's one more for you. A meta-part is a part used in a call 
;   to the GetControlRegion API. These parts are parts that might be defined by a       
;   control, but should not be returned from calls like TestControl, et al. They define 
;   a region of a control, presently the structure and the content region. The content  
;   region is only defined by controls that can embed other controls. It is the area    
;   that embedded content can live.                                                     
;                                                                                       
;   Along with these parts, you can also pass in normal part codes to get the regions   
;   of the parts. Not all controls fully support this at the time this was written.     

kControlStructureMetaPart		EQU		-1
kControlContentMetaPart			EQU		-2
;  focusing part codes 

kControlFocusNoPart				EQU		0					; tells control to clear its focus
kControlFocusNextPart			EQU		-1					; tells control to focus on the next part
kControlFocusPrevPart			EQU		-2					; tells control to focus on the previous part
; typedef SInt16 						ControlFocusPart

; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Control Collection Tags                                                                           
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   These are standard tags that you will find in a flattened Control's Collection.                     
;                                                                                                       
;   All tags at ID zero in a flattened Control's Collection is reserved for Control Manager use.        
;   Custom control definitions should use other IDs.                                                    
;                                                                                                       
;   Most of these tags are interpreted when you call CreateCustomControl; the Control Manager will      
;   put value in the right place before calling the Control Definition with the initialization message. 
;   Other tags are only interpreted when calling UnflattenControl.                                      

kControlCollectionTagBounds		EQU		'boun'				; Rect - the bounding rectangle
kControlCollectionTagValue		EQU		'valu'				; SInt32 - the value
kControlCollectionTagMinimum	EQU		'min '				; SInt32 - the minimum
kControlCollectionTagMaximum	EQU		'max '				; SInt32 - the maximum
kControlCollectionTagViewSize	EQU		'view'				; SInt32 - the view size
kControlCollectionTagVisibility	EQU		'visi'				; Boolean - the visible state
kControlCollectionTagRefCon		EQU		'refc'				; SInt32 - the refCon
kControlCollectionTagTitle		EQU		'titl'				; arbitrarily sized character array - the title
kControlCollectionTagUnicodeTitle EQU	'uttl'				; bytes as received via CFStringCreateExternalRepresentation
kControlCollectionTagIDSignature EQU	'idsi'				; OSType - the ControlID signature
kControlCollectionTagIDID		EQU		'idid'				; SInt32 - the ControlID id
kControlCollectionTagCommand	EQU		'cmd '				; UInt32 - the command
kControlCollectionTagVarCode	EQU		'varc'				; SInt16 - the variant
;   The following are additional tags which are only interpreted by UnflattenControl. 

kControlCollectionTagSubControls EQU	'subc'				; data for all of a control's subcontrols

; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Control Image Content                                                                             
; ——————————————————————————————————————————————————————————————————————————————————————————————————————

kControlContentTextOnly			EQU		0
kControlNoContent				EQU		0
kControlContentIconSuiteRes		EQU		1
kControlContentCIconRes			EQU		2
kControlContentPictRes			EQU		3
kControlContentICONRes			EQU		4
kControlContentIconSuiteHandle	EQU		129
kControlContentCIconHandle		EQU		130
kControlContentPictHandle		EQU		131
kControlContentIconRef			EQU		132
kControlContentICON				EQU		133
; typedef SInt16 						ControlContentType

ControlButtonContentInfo RECORD 0
contentType				 ds.w	1				; offset: $0 (0)
resID					 ds.w	1				; offset: $2 (2)
						 ORG 2
cIconHandle				 ds.l	1				; offset: $2 (2)
						 ORG 2
iconSuite				 ds.l	1				; offset: $2 (2)
						 ORG 2
iconRef					 ds.l	1				; offset: $2 (2)
						 ORG 2
picture					 ds.l	1				; offset: $2 (2)
						 ORG 2
ICONHandle				 ds.l	1				; offset: $2 (2)
sizeof					 EQU *					; size:   $6 (6)
						ENDR
; typedef struct ControlButtonContentInfo * ControlButtonContentInfoPtr

ControlImageContentInfo	RECORD 0
f						 ds		ControlButtonContentInfo
sizeof					 EQU *					; size:   $6 (6)
						ENDR


; typedef struct ControlButtonContentInfo * ControlImageContentInfoPtr

; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Control Key Script Behavior                                                                       
; ——————————————————————————————————————————————————————————————————————————————————————————————————————

kControlKeyScriptBehaviorAllowAnyScript EQU 'any '			; leaves the current keyboard alone and allows user to change the keyboard.
kControlKeyScriptBehaviorPrefersRoman EQU 'prmn'			; switches the keyboard to roman, but allows them to change it as desired.
kControlKeyScriptBehaviorRequiresRoman EQU 'rrmn'			; switches the keyboard to roman and prevents the user from changing it.
; typedef UInt32 						ControlKeyScriptBehavior

; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Control Font Style                                                                                
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;     SPECIAL FONT USAGE NOTES: You can specify the font to use for many control types.
;    The constants below are meta-font numbers which you can use to set a particular
;    control's font usage. There are essentially two modes you can use: 1) default,
;    which is essentially the same as it always has been, i.e. it uses the system font, unless
;    directed to use the window font via a control variant. 2) you can specify to use
;    the big or small system font in a generic manner. The Big system font is the font
;    used in menus, etc. Chicago has filled that role for some time now. Small system
;    font is currently Geneva 10. The meta-font number implies the size and style.
;
;    NOTE:       Not all font attributes are used by all controls. Most, in fact, ignore
;                the fore and back color (Static Text is the only one that does, for
;                backwards compatibility). Also size, face, and addFontSize are ignored
;                when using the meta-font numbering.
;

;  Meta-font numbering - see note above 

kControlFontBigSystemFont		EQU		-1					; force to big system font
kControlFontSmallSystemFont		EQU		-2					; force to small system font
kControlFontSmallBoldSystemFont	EQU		-3					; force to small bold system font
kControlFontViewSystemFont		EQU		-4					; force to views system font (DataBrowser control only)
;  Add these masks together to set the flags field of a ControlFontStyleRec 
;  They specify which fields to apply to the text. It is important to make  
;  sure that you specify only the fields that you wish to set.              

kControlUseFontMask				EQU		$0001
kControlUseFaceMask				EQU		$0002
kControlUseSizeMask				EQU		$0004
kControlUseForeColorMask		EQU		$0008
kControlUseBackColorMask		EQU		$0010
kControlUseModeMask				EQU		$0020
kControlUseJustMask				EQU		$0040
kControlUseAllMask				EQU		$00FF
kControlAddFontSizeMask			EQU		$0100
;  AddToMetaFont indicates that we want to start with a standard system     
;  font, but then we'd like to add the other attributes. Normally, the meta 
;  font ignores all other flags                                             

kControlAddToMetaFontMask		EQU		$0200				; Available in Appearance 1.1 or later
;  UseThemeFontID indicates that the font field of the ControlFontStyleRec  
;  should be interpreted as a ThemeFontID (see Appearance.h). In all other  
;  ways, specifying a ThemeFontID is just like using one of the control     
;  meta-fonts IDs.                                                          

kControlUseThemeFontIDMask		EQU		$0080				; Available in Mac OS X or later
ControlFontStyleRec		RECORD 0
flags					 ds.w	1				; offset: $0 (0)
font					 ds.w	1				; offset: $2 (2)
size					 ds.w	1				; offset: $4 (4)
style					 ds.w	1				; offset: $6 (6)
mode					 ds.w	1				; offset: $8 (8)
just					 ds.w	1				; offset: $A (10)
foreColor				 ds		RGBColor		; offset: $C (12)
backColor				 ds		RGBColor		; offset: $12 (18)
sizeof					 EQU *					; size:   $18 (24)
						ENDR
; typedef struct ControlFontStyleRec *	ControlFontStylePtr

; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Click Activation Results                                                                          
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   These are for use with GetControlClickActivation. The enumerated values should be pretty            
;   self-explanatory, but just in case:                                                                 
;   • Activate/DoNotActivate indicates whether or not to change the owning window's z-ordering before   
;       processing the click. If activation is requested, you may also want to immediately redraw the   
;       newly exposed portion of the window.                                                            
;   • Ignore/Handle Click indicates whether or not to call an appropriate click handling API (like      
;       HandleControlClick) in respose to the event.                                                    

kDoNotActivateAndIgnoreClick	EQU		0					; probably never used. here for completeness.
kDoNotActivateAndHandleClick	EQU		1					; let the control handle the click while the window is still in the background.
kActivateAndIgnoreClick			EQU		2					; control doesn't want to respond directly to the click, but window should still be brought forward.
kActivateAndHandleClick			EQU		3					; control wants to respond to the click, but only after the window has been activated.
; typedef UInt32 						ClickActivationResult

; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Common data tags for Get/SetControlData                                                           
; ——————————————————————————————————————————————————————————————————————————————————————————————————————


; *  Discussion:
; *    Get/SetControlData Common Tags
; 


kControlFontStyleTag			EQU		'font'
kControlKeyFilterTag			EQU		'fltr'
kControlKindTag					EQU		'kind'
kControlSizeTag					EQU		'size'
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Control Feature Bits                                                                              
; ——————————————————————————————————————————————————————————————————————————————————————————————————————

															; Control feature bits - returned by GetControlFeatures 
kControlSupportsGhosting		EQU		$01
kControlSupportsEmbedding		EQU		$02
kControlSupportsFocus			EQU		$04
kControlWantsIdle				EQU		$08
kControlWantsActivate			EQU		$10
kControlHandlesTracking			EQU		$20
kControlSupportsDataAccess		EQU		$40
kControlHasSpecialBackground	EQU		$80
kControlGetsFocusOnClick		EQU		$0100
kControlSupportsCalcBestRect	EQU		$0200
kControlSupportsLiveFeedback	EQU		$0400
kControlHasRadioBehavior		EQU		$0800				; Available in Appearance 1.0.1 or later
kControlSupportsDragAndDrop		EQU		$1000				; Available in Carbon
kControlAutoToggles				EQU		$4000				; Available in Appearance 1.1 or later
kControlSupportsGetRegion		EQU		$00020000			; Available in Appearance 1.1 or later
kControlSupportsFlattening		EQU		$00080000			; Available in Carbon
kControlSupportsSetCursor		EQU		$00100000			; Available in Carbon
kControlSupportsContextualMenus	EQU		$00200000			; Available in Carbon
kControlSupportsClickActivation	EQU		$00400000			; Available in Carbon
kControlIdlesWithTimer			EQU		$00800000			; Available in Carbon - this bit indicates that the control animates automatically
; ——————————————————————————————————————————————————————————————————————————————————————————————————————
;   • Control Messages                                                                                  
; ——————————————————————————————————————————————————————————————————————————————————————————————————————

drawCntl						EQU		0
testCntl						EQU		1
calcCRgns						EQU		2
initCntl						EQU		3
dispCntl						EQU		4
posCntl							EQU		5
thumbCntl						EQU		6
dragCntl						EQU		7
autoTrack						EQU		8
calcCntlRgn						EQU		10
calcThumbRgn					EQU		11
drawThumbOutline				EQU		12
kControlMsgDrawGhost			EQU		13
kControlMsgCalcBestRect			EQU		14					; Calculate best fitting rectangle for control
kControlMsgHandleTracking		EQU		15
kControlMsgFocus				EQU		16					; param indicates action.
kControlMsgKeyDown				EQU		17
kControlMsgIdle					EQU		18
kControlMsgGetFeatures			EQU		19
kControlMsgSetData				EQU		20
kControlMsgGetData				EQU		21
kControlMsgActivate				EQU		22
kControlMsgSetUpBackground		EQU		23
kControlMsgCalcValueFromPos		EQU		26
kControlMsgTestNewMsgSupport	EQU		27					; See if this control supports new messaging
kControlMsgSubValueChanged		EQU		25					; Available in Appearance 1.0.1 or later
kControlMsgSubControlAdded		EQU		28					; Available in Appearance 1.0.1 or later
kControlMsgSubControlRemoved	EQU		29					; Available in Appearance 1.0.1 or later
kControlMsgApplyTextColor		EQU		30					; Available in Appearance 1.1 or later
kControlMsgGetRegion			EQU		31					; Available in Appearance 1.1 or later
kControlMsgFlatten				EQU		32					; Available in Carbon. Param is Collection.
kControlMsgSetCursor			EQU		33					; Available in Carbon. Param is ControlSetCursorRec
kControlMsgDragEnter			EQU		38					; Available in Carbon. Param is DragRef, result is boolean indicating acceptibility of drag.
kControlMsgDragLeave			EQU		39					; Available in Carbon. As above.
kControlMsgDragWithin			EQU		40					; Available in Carbon. As above.
kControlMsgDragReceive			EQU		41					; Available in Carbon. Param is DragRef, result is OSStatus indicating success/failure.
kControlMsgDisplayDebugInfo		EQU		46					; Available in Carbon on X.
kControlMsgContextualMenuClick	EQU		47					; Available in Carbon. Param is ControlContextualMenuClickRec
kControlMsgGetClickActivation	EQU		48					; Available in Carbon. Param is ControlClickActivationRec
; typedef SInt16 						ControlDefProcMessage

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Sizes                                                                     
; ——————————————————————————————————————————————————————————————————————————————————————

kControlSizeNormal				EQU		0
kControlSizeSmall				EQU		1
kControlSizeLarge				EQU		2
kControlSizeAuto				EQU		$FFFF
; typedef UInt16 						ControlSize

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Constants for drawCntl message (passed in param)                                  
; ——————————————————————————————————————————————————————————————————————————————————————

kDrawControlEntireControl		EQU		0
kDrawControlIndicatorOnly		EQU		129
; ——————————————————————————————————————————————————————————————————————————————————————
;   • Constants for dragCntl message (passed in param)                                  
; ——————————————————————————————————————————————————————————————————————————————————————

kDragControlEntireControl		EQU		0
kDragControlIndicator			EQU		1
; ——————————————————————————————————————————————————————————————————————————————————————
;   • Drag Constraint Structure for thumbCntl message (passed in param)                 
; ——————————————————————————————————————————————————————————————————————————————————————
IndicatorDragConstraint	RECORD 0
limitRect				 ds		Rect			; offset: $0 (0)
slopRect				 ds		Rect			; offset: $8 (8)
axis					 ds.w	1				; offset: $10 (16)
sizeof					 EQU *					; size:   $12 (18)
						ENDR
; typedef struct IndicatorDragConstraint * IndicatorDragConstraintPtr

; ——————————————————————————————————————————————————————————————————————————————————————
;   CDEF should return as result of kControlMsgTestNewMsgSupport                        
; ——————————————————————————————————————————————————————————————————————————————————————

kControlSupportsNewMessages		EQU		' ok '
; ——————————————————————————————————————————————————————————————————————————————————————
;   This structure is passed into a CDEF when called with the kControlMsgHandleTracking 
;   message                                                                             
; ——————————————————————————————————————————————————————————————————————————————————————
ControlTrackingRec		RECORD 0
startPt					 ds		Point			; offset: $0 (0)
modifiers				 ds.w	1				; offset: $4 (4)
action					 ds.l	1				; offset: $6 (6)
sizeof					 EQU *					; size:   $A (10)
						ENDR
; typedef struct ControlTrackingRec *	ControlTrackingPtr

; ——————————————————————————————————————————————————————————————————————————————————————
;  This structure is passed into a CDEF when called with the kControlMsgKeyDown message 
; ——————————————————————————————————————————————————————————————————————————————————————
ControlKeyDownRec		RECORD 0
modifiers				 ds.w	1				; offset: $0 (0)
keyCode					 ds.w	1				; offset: $2 (2)
charCode				 ds.w	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $6 (6)
						ENDR
; typedef struct ControlKeyDownRec *	ControlKeyDownPtr

; ——————————————————————————————————————————————————————————————————————————————————————
;  This structure is passed into a CDEF when called with the kControlMsgGetData or      
;  kControlMsgSetData message                                                           
; ——————————————————————————————————————————————————————————————————————————————————————
ControlDataAccessRec	RECORD 0
tag						 ds.l	1				; offset: $0 (0)
part					 ds.l	1				; offset: $4 (4)
size					 ds.l	1				; offset: $8 (8)
dataPtr					 ds.l	1				; offset: $C (12)
sizeof					 EQU *					; size:   $10 (16)
						ENDR
; typedef struct ControlDataAccessRec *	ControlDataAccessPtr

; ——————————————————————————————————————————————————————————————————————————————————————
;  This structure is passed into a CDEF when called with the kControlCalcBestRect msg   
; ——————————————————————————————————————————————————————————————————————————————————————
ControlCalcSizeRec		RECORD 0
height					 ds.w	1				; offset: $0 (0)
width					 ds.w	1				; offset: $2 (2)
baseLine				 ds.w	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $6 (6)
						ENDR
; typedef struct ControlCalcSizeRec *	ControlCalcSizePtr

; ——————————————————————————————————————————————————————————————————————————————————————
;  This structure is passed into a CDEF when called with the kControlMsgSetUpBackground 
;  message is sent                                                                      
; ——————————————————————————————————————————————————————————————————————————————————————
ControlBackgroundRec	RECORD 0
depth					 ds.w	1				; offset: $0 (0)
colorDevice				 ds.b	1				; offset: $2 (2)
						 ORG 4
sizeof					 EQU *					; size:   $4 (4)
						ENDR
; typedef struct ControlBackgroundRec *	ControlBackgroundPtr

; ——————————————————————————————————————————————————————————————————————————————————————
;  This structure is passed into a CDEF when called with the kControlMsgApplyTextColor  
;  message is sent                                                                      
; ——————————————————————————————————————————————————————————————————————————————————————
ControlApplyTextColorRec RECORD 0
depth					 ds.w	1				; offset: $0 (0)
colorDevice				 ds.b	1				; offset: $2 (2)
active					 ds.b	1				; offset: $3 (3)
sizeof					 EQU *					; size:   $4 (4)
						ENDR
; typedef struct ControlApplyTextColorRec * ControlApplyTextColorPtr

; ——————————————————————————————————————————————————————————————————————————————————————
;  This structure is passed into a CDEF when called with the kControlMsgGetRegion       
;  message is sent                                                                      
; ——————————————————————————————————————————————————————————————————————————————————————
ControlGetRegionRec		RECORD 0
region					 ds.l	1				; offset: $0 (0)
part					 ds.w	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $6 (6)
						ENDR
; typedef struct ControlGetRegionRec *	ControlGetRegionPtr

; ——————————————————————————————————————————————————————————————————————————————————————
;  This structure is passed into a CDEF when the kControlMsgSetCursor message is sent   
;  Only sent on Carbon                                                                  
; ——————————————————————————————————————————————————————————————————————————————————————
ControlSetCursorRec		RECORD 0
localPoint				 ds		Point			; offset: $0 (0)
modifiers				 ds.w	1				; offset: $4 (4)
cursorWasSet			 ds.b	1				; offset: $6 (6)		;  your CDEF must set this to true if you set the cursor, or false otherwise
						 ORG 8
sizeof					 EQU *					; size:   $8 (8)
						ENDR
; typedef struct ControlSetCursorRec *	ControlSetCursorPtr

; ——————————————————————————————————————————————————————————————————————————————————————
;  This structure is passed into a CDEF when the kControlMsgContextualMenuClick message 
;  is sent                                                                              
;  Only sent on Carbon                                                                  
; ——————————————————————————————————————————————————————————————————————————————————————
ControlContextualMenuClickRec RECORD 0
localPoint				 ds		Point			; offset: $0 (0)
menuDisplayed			 ds.b	1				; offset: $4 (4)		;  your CDEF must set this to true if you displayed a menu, or false otherwise
						 ORG 6
sizeof					 EQU *					; size:   $6 (6)
						ENDR
; typedef struct ControlContextualMenuClickRec * ControlContextualMenuClickPtr

; ——————————————————————————————————————————————————————————————————————————————————————
;  This structure is passed into a CDEF when the kControlMsgGetClickActivation message  
;  is sent                                                                              
;  Only sent on Carbon                                                                  
; ——————————————————————————————————————————————————————————————————————————————————————
ControlClickActivationRec RECORD 0
localPoint				 ds		Point			; offset: $0 (0)
modifiers				 ds.w	1				; offset: $4 (4)
result					 ds.l	1				; offset: $6 (6)		;  your CDEF must pass the desired result back
sizeof					 EQU *					; size:   $A (10)
						ENDR
; typedef struct ControlClickActivationRec * ControlClickActivationPtr

; ——————————————————————————————————————————————————————————————————————————————————————
;   • ‘CDEF’ entrypoint                                                                 
; ——————————————————————————————————————————————————————————————————————————————————————

; *  NewControlDefUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlDefUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlDefUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

; ——————————————————————————————————————————————————————————————————————————————————————
;   Control Key Filter                                                                  
; ——————————————————————————————————————————————————————————————————————————————————————
;  Certain controls can have a keyfilter attached to them.                              
;  Definition of a key filter for intercepting and possibly changing keystrokes         
;  which are destined for a control.                                                    
;  Key Filter Result Codes                                                          
;  The filter proc should return one of the two constants below. If                 
;  kKeyFilterBlockKey is returned, the key is blocked and never makes it to the     
;  control. If kKeyFilterPassKey is returned, the control receives the keystroke.   

kControlKeyFilterBlockKey		EQU		0
kControlKeyFilterPassKey		EQU		1
; typedef SInt16 						ControlKeyFilterResult


; *  NewControlKeyFilterUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlKeyFilterUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlKeyFilterUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; ——————————————————————————————————————————————————————————————————————————————————————
;   • DragGrayRgn Constatns                                                             
;                                                                                       
;    For DragGrayRgnUPP used in TrackControl()                                          
; ——————————————————————————————————————————————————————————————————————————————————————

noConstraint					EQU		0
hAxisOnly						EQU		1
vAxisOnly						EQU		2
; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Creation/Deletion/Persistence                                             
; ——————————————————————————————————————————————————————————————————————————————————————
;   CreateCustomControl is only available as part of Carbon                             

kControlDefProcPtr				EQU		0					; raw proc-ptr based access
kControlDefObjectClass			EQU		1					; event-based definition (Carbon 1.1 or later)
; typedef UInt32 						ControlDefType

ControlDefSpec			RECORD 0
defType					 ds.l	1				; offset: $0 (0)
defProc					 ds.l	1				; offset: $4 (4)
						 ORG 4
classRef				 ds.l	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $8 (8)
						ENDR

; *  CreateCustomControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CreateCustomControl(WindowRef owningWindow, const Rect *contBounds, const ControlDefSpec *def, Collection initData, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateCustomControl
	ENDIF


; *  NewControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal ControlRef NewControl(WindowRef owningWindow, const Rect *boundsRect, ConstStr255Param controlTitle, Boolean initiallyVisible, SInt16 initialValue, SInt16 minimumValue, SInt16 maximumValue, SInt16 procID, SInt32 controlReference)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_NewControl:	OPWORD	$A954
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NewControl
	ENDIF


; *  GetNewControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal ControlRef GetNewControl(SInt16 resourceID, WindowRef owningWindow)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetNewControl:	OPWORD	$A9BE
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetNewControl
	ENDIF


; *  DisposeControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DisposeControl(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DisposeControl:	OPWORD	$A955
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DisposeControl
	ENDIF


; *  KillControls()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void KillControls(WindowRef theWindow)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_KillControls:	OPWORD	$A956
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KillControls
	ENDIF

	IF CALL_NOT_IN_CARBON THEN

; *  FlattenControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus FlattenControl(ControlRef control, Boolean flattenSubControls, Collection collection)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FlattenControl
	ENDIF


; *  UnflattenControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus UnflattenControl(WindowRef window, Collection collection, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UnflattenControl
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON
; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Definition Registration                                                   
; ——————————————————————————————————————————————————————————————————————————————————————

; *  NewControlCNTLToCollectionUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlCNTLToCollectionUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlCNTLToCollectionUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  RegisterControlDefinition()
; *  
; *  Summary:
; *    Associates or dissociates a control definition with a virtual
; *    CDEF resource ID.
; *  
; *  Discussion:
; *    In GetNewControl or NewControl on Carbon, the Control Manager
; *    needs to know how to map the procID to a ControlDefSpec. With
; *    RegisterControlDefinition, your application can inform the
; *    Control Manager which ControlDefSpec to call when it sees a
; *    request to use a 'CDEF' of a particular resource ID. Since custom
; *    control definitions receive their initialization data in a
; *    Collection, you must also provide a procedure to convert the
; *    bounds, min, max, and other parameters to NewControl into a
; *    Collection. If you don't provide a conversion proc, your control
; *    will receive an empty collection when it is sent the
; *    initialization message. If you want the value, min, visibility,
; *    etc. to be given to the control, you must add the appropriate
; *    tagged data to the collection. See the Control Collection Tags
; *    above. If you want to unregister a ControlDefSpec that you have
; *    already registered, call RegisterControlDefinition with the same
; *    CDEF resource ID, but pass NULL for the inControlDef parameter.
; *    In this situation, inConversionProc is effectively ignored.
; *  
; *  Parameters:
; *    
; *    inCDEFResID:
; *      The virtual CDEF resource ID to which you'd like to associate
; *      or dissociate the control definition.
; *    
; *    inControlDef:
; *      A pointer to a ControlDefSpec which represents the control
; *      definition you want to register, or NULL if you are attempting
; *      to unregister a control definition.
; *    
; *    inConversionProc:
; *      The conversion proc which will translate the NewControl
; *      parameters into a Collection.
; *  
; *  Result:
; *    An OSStatus code indicating success or failure.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus RegisterControlDefinition(SInt16 inCDEFResID, const ControlDefSpec *inControlDef, ControlCNTLToCollectionUPP inConversionProc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RegisterControlDefinition
	ENDIF



; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Visible State                                                             
; ——————————————————————————————————————————————————————————————————————————————————————

; *  HiliteControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void HiliteControl(ControlRef theControl, ControlPartCode hiliteState)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_HiliteControl:	OPWORD	$A95D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HiliteControl
	ENDIF


; *  ShowControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ShowControl(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ShowControl:	OPWORD	$A957
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ShowControl
	ENDIF


; *  HideControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void HideControl(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_HideControl:	OPWORD	$A958
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HideControl
	ENDIF


;  following state routines available only with Appearance 1.0 and later

; *  IsControlActive()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsControlActive(ControlRef inControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_IsControlActive
			move.w              #$0005,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsControlActive
	ENDIF


; *  IsControlVisible()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsControlVisible(ControlRef inControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_IsControlVisible
			move.w              #$0006,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsControlVisible
	ENDIF


; *  ActivateControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr ActivateControl(ControlRef inControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ActivateControl
			move.w              #$0007,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ActivateControl
	ENDIF


; *  DeactivateControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr DeactivateControl(ControlRef inControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_DeactivateControl
			move.w              #$0008,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DeactivateControl
	ENDIF


; *  SetControlVisibility()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetControlVisibility(ControlRef inControl, Boolean inIsVisible, Boolean inDoDraw)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetControlVisibility
			move.w              #$001E,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlVisibility
	ENDIF


;  following state routines available only on Mac OS X and later

; *  IsControlEnabled()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsControlEnabled(ControlRef inControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsControlEnabled
	ENDIF


; *  EnableControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus EnableControl(ControlRef inControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EnableControl
	ENDIF


; *  DisableControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus DisableControl(ControlRef inControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DisableControl
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Imaging                                                                   
; ——————————————————————————————————————————————————————————————————————————————————————

; *  DrawControls()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DrawControls(WindowRef theWindow)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DrawControls:	OPWORD	$A969
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DrawControls
	ENDIF


; *  Draw1Control()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void Draw1Control(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_Draw1Control:	OPWORD	$A96D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Draw1Control
	ENDIF



; *  UpdateControls()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void UpdateControls(WindowRef theWindow, RgnHandle updateRegion)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_UpdateControls:	OPWORD	$A953
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UpdateControls
	ENDIF


;  following imaging routines available only with Appearance 1.0 and later

; *  GetBestControlRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetBestControlRect(ControlRef inControl, Rect *outRect, SInt16 *outBaseLineOffset)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetBestControlRect
			move.w              #$001B,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetBestControlRect
	ENDIF


; *  SetControlFontStyle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetControlFontStyle(ControlRef inControl, const ControlFontStyleRec *inStyle)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetControlFontStyle
			move.w              #$001C,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlFontStyle
	ENDIF


; *  DrawControlInCurrentPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DrawControlInCurrentPort(ControlRef inControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_DrawControlInCurrentPort
			move.w              #$0018,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DrawControlInCurrentPort
	ENDIF


; *  SetUpControlBackground()
; *  
; *  Summary:
; *    Applies the proper background color for the given control to the
; *    current port.
; *  
; *  Discussion:
; *    An embedding-savvy control which erases before drawing must
; *    ensure that its background color properly matches the body color
; *    of any parent controls on top of which it draws. This routine
; *    asks the Control Manager to determine and apply the proper
; *    background color to the current port. If a ControlColorProc has
; *    been provided for the given control, the proc will be called to
; *    set up the background color. If no proc exists, or if the proc
; *    returns a value other than noErr, the Control Manager ascends the
; *    parent chain for the given control looking for a control which
; *    has a special background (see the kControlHasSpecialBackground
; *    feature bit). The first such parent is asked to set up the
; *    background color (see the kControlMsgSetUpBackground message). If
; *    no such parent exists, the Control Manager applies any ThemeBrush
; *    which has been associated with the owning window (see
; *    SetThemeWindowBackground). Available in Appearance 1.0 (Mac OS
; *    8), CarbonLib 1.0, Mac OS X, and later.
; *  
; *  Parameters:
; *    
; *    inControl:
; *      The ControlRef that wants to erase.
; *    
; *    inDepth:
; *      A short integer indicating the color depth of the device onto
; *      which drawing will take place.
; *    
; *    inIsColorDevice:
; *      A Boolean indicating whether the draw device is a color device.
; *  
; *  Result:
; *    An OSStatus code indicating success or failure. The most likely
; *    error is a controlHandleInvalidErr, resulting from a bad
; *    ControlRef. Any non-noErr result indicates that the color set up
; *    failed, and that the caller should probably give up its attempt
; *    to draw.
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetUpControlBackground(ControlRef inControl, SInt16 inDepth, Boolean inIsColorDevice)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetUpControlBackground
			move.w              #$001D,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetUpControlBackground
	ENDIF


; *  SetUpControlTextColor()
; *  
; *  Summary:
; *    Applies the proper text color for the given control to the
; *    current port.
; *  
; *  Discussion:
; *    An embedding-savvy control which draws text must ensure that its
; *    text color properly contrasts the background on which it draws.
; *    This routine asks the Control Manager to determine and apply the
; *    proper text color to the current port. If a ControlColorProc has
; *    been provided for the given control, the proc will be called to
; *    set up the text color. If no proc exists, or if the proc returns
; *    a value other than noErr, the Control Manager ascends the parent
; *    chain for the given control looking for a control which has a
; *    special background (see the kControlHasSpecialBackground feature
; *    bit). The first such parent is asked to set up the text color
; *    (see the kControlMsgApplyTextColor message). If no such parent
; *    exists, the Control Manager chooses a text color which contrasts
; *    any ThemeBrush which has been associated with the owning window
; *    (see SetThemeWindowBackground). Available in Appearance 1.1 (Mac
; *    OS 8.5), CarbonLib 1.0, Mac OS X, and later.
; *  
; *  Parameters:
; *    
; *    inControl:
; *      The ControlRef that wants to draw text.
; *    
; *    inDepth:
; *      A short integer indicating the color depth of the device onto
; *      which drawing will take place.
; *    
; *    inIsColorDevice:
; *      A Boolean indicating whether the draw device is a color device.
; *  
; *  Result:
; *    An OSStatus code indicating success or failure. The most likely
; *    error is a controlHandleInvalidErr, resulting from a bad
; *    ControlRef. Any non-noErr result indicates that the color set up
; *    failed, and that the caller should probably give up its attempt
; *    to draw.
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetUpControlTextColor(ControlRef inControl, SInt16 inDepth, Boolean inIsColorDevice)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetUpControlTextColor
	ENDIF




; *  ControlColorProcPtr
; *  
; *  Discussion:
; *    Callback allowing clients to specify/override the background
; *    color and text color that a Control will use during drawing. Your
; *    procedure should make the color changes to the current port. See
; *    SetControlColorProc, SetUpControlBackground, and
; *    SetUpControlTextColor for more information. Available on Mac OS
; *    8.5, CarbonLib 1.1, Mac OS X, and later.
; *  
; *  Parameters:
; *    
; *    inControl:
; *      A reference to the Control for whom your proc is setting up
; *      colors.
; *    
; *    inMessage:
; *      A ControlDefProcMessage indicating what sort of color your
; *      procedure should set up. It will be either
; *      kControlMsgApplyTextColor or kControlMsgSetUpBackground.
; *      kControlMsgApplyTextColor is a request to set up the
; *      appropriate text color (by setting the current port's
; *      foreground color, pen information, etc.).
; *      kControlMsgSetUpBackground is a request to set up the
; *      appropriate background color (the current port's background
; *      color, pattern, etc.).
; *    
; *    inDrawDepth:
; *      A short integer indicating the bit depth of the device into
; *      which the Control is drawing. The bit depth is typically passed
; *      in as a result of someone someone trying to draw properly
; *      across multiple monitors with different bit depths. If your
; *      procedure wants to handle proper color set up based on bit
; *      depth, it should use this parameter to help decide what color
; *      to apply.
; *    
; *    inDrawInColor:
; *      A Boolean indicating whether or not the device that the Control
; *      is drawing into is a color device. The value is typically
; *      passed in as a result of someone trying to draw properly across
; *      multiple monitors which may or may not be color devices. If
; *      your procedure wants to handle proper color set up for both
; *      color and grayscale devices, it should use this parameter to
; *      help decide what color to apply.
; *  
; *  Result:
; *    An OSStatus code indicating success or failure. Returning noErr
; *    is an indication that your proc completely handled the color set
; *    up. If you return any other value, the Control Manager will fall
; *    back to the normal color set up mechanism.
; 


; *  NewControlColorUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeControlColorUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeControlColorUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  SetControlColorProc()
; *  
; *  Summary:
; *    Associates a ControlColorUPP with a given Control, thereby
; *    allowing you to bypass the embedding hierarchy-based color setup
; *    of SetUpControlBackground/SetUpControlTextColor and replace it
; *    with your own.
; *  
; *  Discussion:
; *    Before an embedded Control can erase, it calls
; *    SetUpControlBackground to have its background color set up by any
; *    parent controls. Similarly, any Control which draws text calls
; *    SetUpControlTextColor to have the appropriate text color set up.
; *    This allows certain controls (such as Tabs and Placards) to offer
; *    special backgrounds and text colors for any child controls. By
; *    default, the SetUp routines only move up the Control Manager
; *    embedding hierarchy looking for a parent which has a special
; *    background. This is fine in a plain vanilla embedding case, but
; *    many application frameworks find it troublesome; if there are
; *    interesting views between two Controls in the embedding
; *    hierarchy, the framework needs to be in charge of the background
; *    and text colors, otherwise drawing defects will occur. You can
; *    only associate a single color proc with a given ControlRef.
; *    Available on Mac OS 8.5, CarbonLib 1.1, Mac OS X, and later.
; *  
; *  Parameters:
; *    
; *    inControl:
; *      The ControlRef with whom the color proc should be associated.
; *    
; *    inProc:
; *      The color proc to associate with the ControlRef. If you pass
; *      NULL, the ControlRef will be dissociated from any previously
; *      installed color proc.
; *  
; *  Result:
; *    An OSStatus code indicating success or failure. The most likely
; *    error is a controlHandleInvalidErr resulting from a bad
; *    ControlRef.
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetControlColorProc(ControlRef inControl, ControlColorUPP inProc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlColorProc
	ENDIF


; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Mousing                                                                   
; ——————————————————————————————————————————————————————————————————————————————————————
; 
;    NOTE ON CONTROL ACTION PROCS
;
;    When using the TrackControl() call when tracking an indicator, the actionProc parameter
;    (type ControlActionUPP) should be replaced by a parameter of type DragGrayRgnUPP
;    (see Quickdraw.h).
;
;    If, however, you are using the live feedback variants of scroll bars or sliders, you
;    must pass a ControlActionUPP in when tracking the indicator as well. This functionality
;    is available in Appearance 1.0 or later.
;


; *  TrackControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal ControlPartCode TrackControl(ControlRef theControl, Point startPoint, ControlActionUPP actionProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_TrackControl:	OPWORD	$A968
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TrackControl
	ENDIF


; *  DragControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DragControl(ControlRef theControl, Point startPoint, const Rect *limitRect, const Rect *slopRect, DragConstraint axis)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DragControl:	OPWORD	$A967
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DragControl
	ENDIF


; *  TestControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal ControlPartCode TestControl(ControlRef theControl, Point testPoint)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_TestControl:	OPWORD	$A966
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TestControl
	ENDIF


; *  FindControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal ControlPartCode FindControl(Point testPoint, WindowRef theWindow, ControlRef *theControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FindControl:	OPWORD	$A96C
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FindControl
	ENDIF

;  The following mousing routines available only with Appearance 1.0 and later  
;                                                                               
;  HandleControlClick is preferable to TrackControl when running under          
;  Appearance 1.0 as you can pass in modifiers, which some of the new controls  
;  use, such as edit text and list boxes.                                       

; *  FindControlUnderMouse()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal ControlRef FindControlUnderMouse(Point inWhere, WindowRef inWindow, SInt16 *outPart)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FindControlUnderMouse
			move.w              #$0009,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FindControlUnderMouse
	ENDIF


; *  HandleControlClick()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal ControlPartCode HandleControlClick(ControlRef inControl, Point inWhere, EventModifiers inModifiers, ControlActionUPP inAction)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_HandleControlClick
			move.w              #$000A,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HandleControlClick
	ENDIF

;  Contextual Menu support in the Control Manager is only available on Carbon.  
;  If the control didn't display a contextual menu (possibly because the point  
;  was in a non-interesting part), the menuDisplayed output parameter will be   
;  false. If the control did display a menu, menuDisplayed will be true.        
;  This in on Carbon only                                                       

; *  HandleControlContextualMenuClick()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus HandleControlContextualMenuClick(ControlRef inControl, Point inWhere, Boolean *menuDisplayed)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HandleControlContextualMenuClick
	ENDIF

;  Some complex controls (like Data Browser) require proper sequencing of       
;  window activation and click processing. In some cases, the control might     
;  want the window to be left inactive yet still handle the click, or vice-     
;  versa. The GetControlClickActivation routine lets a control client ask the   
;  control how it wishes to behave for a particular click.                      
;  This in on Carbon only.                                                      

; *  GetControlClickActivation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetControlClickActivation(ControlRef inControl, Point inWhere, EventModifiers inModifiers, ClickActivationResult *outResult)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlClickActivation
	ENDIF


; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Events (available only with Appearance 1.0 and later)                     
; ——————————————————————————————————————————————————————————————————————————————————————

; *  HandleControlKey()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal ControlPartCode HandleControlKey(ControlRef inControl, SInt16 inKeyCode, SInt16 inCharCode, EventModifiers inModifiers)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_HandleControlKey
			move.w              #$000B,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HandleControlKey
	ENDIF


; *  IdleControls()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void IdleControls(WindowRef inWindow)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_IdleControls
			move.w              #$000C,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IdleControls
	ENDIF



; ——————————————————————————————————————————————————————————————————————————————————————
;  • Control Mouse Tracking (available with Carbon)                                     
; ——————————————————————————————————————————————————————————————————————————————————————
;  The HandleControlSetCursor routine requests that a given control set the cursor to   
;  something appropriate based on the mouse location.                                   
;  If the control didn't want to set the cursor (because the point was in a             
;  non-interesting part), the cursorWasSet output parameter will be false. If the       
;  control did set the cursor, cursorWasSet will be true.                               
;  Carbon only.                                                                         

; *  HandleControlSetCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus HandleControlSetCursor(ControlRef control, Point localPoint, EventModifiers modifiers, Boolean *cursorWasSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HandleControlSetCursor
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Positioning                                                               
; ——————————————————————————————————————————————————————————————————————————————————————

; *  MoveControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void MoveControl(ControlRef theControl, SInt16 h, SInt16 v)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_MoveControl:	OPWORD	$A959
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION MoveControl
	ENDIF


; *  SizeControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SizeControl(ControlRef theControl, SInt16 w, SInt16 h)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SizeControl:	OPWORD	$A95C
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SizeControl
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Title                                                                     
; ——————————————————————————————————————————————————————————————————————————————————————

; *  SetControlTitle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControlTitle(ControlRef theControl, ConstStr255Param title)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetControlTitle:	OPWORD	$A95F
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlTitle
	ENDIF


; *  GetControlTitle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GetControlTitle(ControlRef theControl, Str255 title)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetControlTitle:	OPWORD	$A95E
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlTitle
	ENDIF


; *  SetControlTitleWithCFString()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetControlTitleWithCFString(ControlRef inControl, CFStringRef inString)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlTitleWithCFString
	ENDIF


; *  CopyControlTitleAsCFString()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus CopyControlTitleAsCFString(ControlRef inControl, CFStringRef *outString)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CopyControlTitleAsCFString
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Value                                                                     
; ——————————————————————————————————————————————————————————————————————————————————————

; *  GetControlValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt16 GetControlValue(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetControlValue:	OPWORD	$A960
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlValue
	ENDIF


; *  SetControlValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControlValue(ControlRef theControl, SInt16 newValue)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetControlValue:	OPWORD	$A963
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlValue
	ENDIF


; *  GetControlMinimum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt16 GetControlMinimum(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetControlMinimum:	OPWORD	$A961
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlMinimum
	ENDIF


; *  SetControlMinimum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControlMinimum(ControlRef theControl, SInt16 newMinimum)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetControlMinimum:	OPWORD	$A964
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlMinimum
	ENDIF


; *  GetControlMaximum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt16 GetControlMaximum(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetControlMaximum:	OPWORD	$A962
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlMaximum
	ENDIF


; *  SetControlMaximum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControlMaximum(ControlRef theControl, SInt16 newMaximum)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetControlMaximum:	OPWORD	$A965
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlMaximum
	ENDIF


;  proportional scrolling/32-bit value support is new with Appearance 1.1


; *  GetControlViewSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 GetControlViewSize(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlViewSize
	ENDIF


; *  SetControlViewSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControlViewSize(ControlRef theControl, SInt32 newViewSize)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlViewSize
	ENDIF


; *  GetControl32BitValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 GetControl32BitValue(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControl32BitValue
	ENDIF


; *  SetControl32BitValue()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControl32BitValue(ControlRef theControl, SInt32 newValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControl32BitValue
	ENDIF


; *  GetControl32BitMaximum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 GetControl32BitMaximum(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControl32BitMaximum
	ENDIF


; *  SetControl32BitMaximum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControl32BitMaximum(ControlRef theControl, SInt32 newMaximum)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControl32BitMaximum
	ENDIF


; *  GetControl32BitMinimum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 GetControl32BitMinimum(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControl32BitMinimum
	ENDIF


; *  SetControl32BitMinimum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControl32BitMinimum(ControlRef theControl, SInt32 newMinimum)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControl32BitMinimum
	ENDIF


;    IsValidControlHandle will tell you if the handle you pass in belongs to a control
;    the Control Manager knows about. It does not sanity check the data in the control.




; *  IsValidControlHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsValidControlHandle(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsValidControlHandle
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;  • Control IDs                                                                        
;  Carbon only.                                                                         
; ——————————————————————————————————————————————————————————————————————————————————————
ControlID				RECORD 0
signature				 ds.l	1				; offset: $0 (0)
id						 ds.l	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $8 (8)
						ENDR

; *  SetControlID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetControlID(ControlRef inControl, const ControlID *inID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlID
	ENDIF


; *  GetControlID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetControlID(ControlRef inControl, ControlID *outID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlID
	ENDIF


; *  GetControlByID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetControlByID(WindowRef inWindow, const ControlID *inID, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlByID
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;  • Control Command IDs                                                                    
;  Carbon only.                                                                         
; ——————————————————————————————————————————————————————————————————————————————————————

; *  SetControlCommandID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetControlCommandID(ControlRef inControl, UInt32 inCommandID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlCommandID
	ENDIF


; *  GetControlCommandID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetControlCommandID(ControlRef inControl, UInt32 *outCommandID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlCommandID
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;  • Control Identification                                                             
;  Carbon only.                                                                         
; ——————————————————————————————————————————————————————————————————————————————————————
ControlKind				RECORD 0
signature				 ds.l	1				; offset: $0 (0)
kind					 ds.l	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $8 (8)
						ENDR


; *  Discussion:
; *    Control signature kind
; 


kControlKindSignatureApple		EQU		'appl'

; *  GetControlKind()
; *  
; *  Summary:
; *    Returns the kind of the given control.
; *  
; *  Discussion:
; *    GetControlKind allows you to query the kind of any control. This
; *    function is only available in Mac OS X.
; *  
; *  Parameters:
; *    
; *    inControl:
; *      The ControlRef to find the kind of.
; *    
; *    outControlKind:
; *      On successful exit, this will contain the control signature and
; *      kind. See ControlDefinitions.h for the kinds of each system
; *      control.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetControlKind(ControlRef inControl, ControlKind *outControlKind)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlKind
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;  • Properties                                                                         
; ——————————————————————————————————————————————————————————————————————————————————————

kControlPropertyPersistent		EQU		$00000001			; whether this property gets saved when flattening the control

; *  GetControlProperty()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetControlProperty(ControlRef control, OSType propertyCreator, OSType propertyTag, UInt32 bufferSize, UInt32 *actualSize, void *propertyBuffer)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlProperty
	ENDIF


; *  GetControlPropertySize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetControlPropertySize(ControlRef control, OSType propertyCreator, OSType propertyTag, UInt32 *size)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlPropertySize
	ENDIF


; *  SetControlProperty()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetControlProperty(ControlRef control, OSType propertyCreator, OSType propertyTag, UInt32 propertySize, void *propertyData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlProperty
	ENDIF


; *  RemoveControlProperty()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus RemoveControlProperty(ControlRef control, OSType propertyCreator, OSType propertyTag)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RemoveControlProperty
	ENDIF


; *  GetControlPropertyAttributes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetControlPropertyAttributes(ControlRef control, OSType propertyCreator, OSType propertyTag, UInt32 *attributes)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlPropertyAttributes
	ENDIF


; *  ChangeControlPropertyAttributes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ChangeControlPropertyAttributes(ControlRef control, OSType propertyCreator, OSType propertyTag, UInt32 attributesToSet, UInt32 attributesToClear)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ChangeControlPropertyAttributes
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Regions (Appearance 1.1 or later)                                         
;                                                                                       
;   See the discussion on meta-parts in this header for more information                
; ——————————————————————————————————————————————————————————————————————————————————————

; *  GetControlRegion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus GetControlRegion(ControlRef inControl, ControlPartCode inPart, RgnHandle outRegion)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlRegion
	ENDIF



; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Variant                                                                   
; ——————————————————————————————————————————————————————————————————————————————————————

; *  GetControlVariant()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal ControlVariant GetControlVariant(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetControlVariant:	OPWORD	$A809
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlVariant
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Action                                                                    
; ——————————————————————————————————————————————————————————————————————————————————————

; *  SetControlAction()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControlAction(ControlRef theControl, ControlActionUPP actionProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetControlAction:	OPWORD	$A96B
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlAction
	ENDIF


; *  GetControlAction()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal ControlActionUPP GetControlAction(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetControlAction:	OPWORD	$A96A
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlAction
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;  • Control Accessors                                                                  
; ——————————————————————————————————————————————————————————————————————————————————————

; *  SetControlReference()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControlReference(ControlRef theControl, SInt32 data)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetControlReference:	OPWORD	$A95B
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlReference
	ENDIF


; *  GetControlReference()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 GetControlReference(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetControlReference:	OPWORD	$A95A
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlReference
	ENDIF

	IF ¬ OPAQUE_TOOLBOX_STRUCTS THEN

; *  GetAuxiliaryControlRecord()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean GetAuxiliaryControlRecord(ControlRef theControl, AuxCtlHandle *acHndl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetAuxiliaryControlRecord:	OPWORD	$AA44
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetAuxiliaryControlRecord
	ENDIF

	ENDIF
	IF CALL_NOT_IN_CARBON THEN

; *  SetControlColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void SetControlColor(ControlRef theControl, CCTabHandle newColorTable)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetControlColor:	OPWORD	$AA43
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlColor
	ENDIF

; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Hierarchy (Appearance 1.0 and later only)                                 
; ——————————————————————————————————————————————————————————————————————————————————————
	ENDIF	; CALL_NOT_IN_CARBON

; *  SendControlMessage()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 SendControlMessage(ControlRef inControl, SInt16 inMessage, void *inParam)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SendControlMessage
			move.w              #$FFFE,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SendControlMessage
	ENDIF


; *  DumpControlHierarchy()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr DumpControlHierarchy(WindowRef inWindow, const FSSpec *inDumpFile)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_DumpControlHierarchy
			move.w              #$FFFF,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DumpControlHierarchy
	ENDIF


; *  CreateRootControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr CreateRootControl(WindowRef inWindow, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CreateRootControl
			move.w              #$0001,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateRootControl
	ENDIF


; *  GetRootControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetRootControl(WindowRef inWindow, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetRootControl
			move.w              #$0002,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetRootControl
	ENDIF


; *  EmbedControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr EmbedControl(ControlRef inControl, ControlRef inContainer)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_EmbedControl
			move.w              #$0003,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EmbedControl
	ENDIF


; *  AutoEmbedControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AutoEmbedControl(ControlRef inControl, WindowRef inWindow)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AutoEmbedControl
			move.w              #$0004,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AutoEmbedControl
	ENDIF


; *  GetSuperControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetSuperControl(ControlRef inControl, ControlRef *outParent)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetSuperControl
			move.w              #$0015,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetSuperControl
	ENDIF


; *  CountSubControls()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr CountSubControls(ControlRef inControl, UInt16 *outNumChildren)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CountSubControls
			move.w              #$0016,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CountSubControls
	ENDIF


; *  GetIndexedSubControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetIndexedSubControl(ControlRef inControl, UInt16 inIndex, ControlRef *outSubControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetIndexedSubControl
			move.w              #$0017,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetIndexedSubControl
	ENDIF


; *  SetControlSupervisor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetControlSupervisor(ControlRef inControl, ControlRef inBoss)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetControlSupervisor
			move.w              #$001A,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlSupervisor
	ENDIF



; ——————————————————————————————————————————————————————————————————————————————————————
;   • Keyboard Focus (available only with Appearance 1.0 and later)                     
; ——————————————————————————————————————————————————————————————————————————————————————

; *  GetKeyboardFocus()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetKeyboardFocus(WindowRef inWindow, ControlRef *outControl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetKeyboardFocus
			move.w              #$000D,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetKeyboardFocus
	ENDIF


; *  SetKeyboardFocus()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetKeyboardFocus(WindowRef inWindow, ControlRef inControl, ControlFocusPart inPart)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetKeyboardFocus
			move.w              #$000E,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetKeyboardFocus
	ENDIF


; *  AdvanceKeyboardFocus()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AdvanceKeyboardFocus(WindowRef inWindow)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AdvanceKeyboardFocus
			move.w              #$000F,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AdvanceKeyboardFocus
	ENDIF


; *  ReverseKeyboardFocus()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr ReverseKeyboardFocus(WindowRef inWindow)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ReverseKeyboardFocus
			move.w              #$0010,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ReverseKeyboardFocus
	ENDIF


; *  ClearKeyboardFocus()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr ClearKeyboardFocus(WindowRef inWindow)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ClearKeyboardFocus
			move.w              #$0019,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ClearKeyboardFocus
	ENDIF



; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Data (available only with Appearance 1.0 and later)                       
; ——————————————————————————————————————————————————————————————————————————————————————


; *  GetControlFeatures()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetControlFeatures(ControlRef inControl, UInt32 *outFeatures)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetControlFeatures
			move.w              #$0011,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlFeatures
	ENDIF


; *  SetControlData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetControlData(ControlRef inControl, ControlPartCode inPart, ResType inTagName, Size inSize, const void *inData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetControlData
			move.w              #$0012,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlData
	ENDIF


; *  GetControlData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetControlData(ControlRef inControl, ControlPartCode inPart, ResType inTagName, Size inBufferSize, void *inBuffer, Size *outActualSize)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetControlData
			move.w              #$0013,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlData
	ENDIF


; *  GetControlDataSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in AppearanceLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetControlDataSize(ControlRef inControl, ControlPartCode inPart, ResType inTagName, Size *outMaxSize)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetControlDataSize
			move.w              #$0014,D0
			dc.w            	$AA73
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlDataSize
	ENDIF


; ——————————————————————————————————————————————————————————————————————————————————————
;   • Control Drag & Drop                                                               
;       Carbon only.                                                                    
; ——————————————————————————————————————————————————————————————————————————————————————
;  some simple redefinitions of the similar values found in the Drag header

kDragTrackingEnterControl		EQU		2
kDragTrackingInControl			EQU		3
kDragTrackingLeaveControl		EQU		4

; *  HandleControlDragTracking()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus HandleControlDragTracking(ControlRef inControl, DragTrackingMessage inMessage, DragReference inDrag, Boolean *outLikesDrag)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HandleControlDragTracking
	ENDIF


; *  HandleControlDragReceive()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus HandleControlDragReceive(ControlRef inControl, DragReference inDrag)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HandleControlDragReceive
	ENDIF


; *  SetControlDragTrackingEnabled()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetControlDragTrackingEnabled(ControlRef theControl, Boolean tracks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlDragTrackingEnabled
	ENDIF


; *  IsControlDragTrackingEnabled()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus IsControlDragTrackingEnabled(ControlRef theControl, Boolean *tracks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsControlDragTrackingEnabled
	ENDIF


; *  SetAutomaticControlDragTrackingEnabledForWindow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetAutomaticControlDragTrackingEnabledForWindow(WindowRef theWindow, Boolean tracks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetAutomaticControlDragTrackingEnabledForWindow
	ENDIF


; *  IsAutomaticControlDragTrackingEnabledForWindow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in ControlsLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus IsAutomaticControlDragTrackingEnabledForWindow(WindowRef theWindow, Boolean *tracks)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsAutomaticControlDragTrackingEnabledForWindow
	ENDIF



	IF ¬ TARGET_OS_MAC THEN
; ——————————————————————————————————————————————————————————————————————————————————————
;   • QuickTime 3.0 Win32/unix notification mechanism                                   
; ——————————————————————————————————————————————————————————————————————————————————————
;  Proc used to notify window that something happened to the control

;   Proc used to prefilter events before handled by control.  A client of a control calls
;   CTRLSetPreFilterProc() to have the control call this proc before handling the event.
;   If the proc returns TRUE, the control can go ahead and handle the event.


	IF CALL_NOT_IN_CARBON THEN

; *  GetControlComponentInstance()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GetControlComponentInstance(ControlRef theControl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlComponentInstance
	ENDIF


; *  GetControlHandleFromCookie()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern ControlRef GetControlHandleFromCookie(long cookie)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlHandleFromCookie
	ENDIF


; *  SetControlDefProc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern void SetControlDefProc(short resID, ControlDefProcPtr proc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlDefProc
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON
; typedef ControlNotificationProcPtr 	ControlNotificationUPP

	ENDIF
	IF OLDROUTINENAMES THEN
; ——————————————————————————————————————————————————————————————————————————————————————
;   • OLDROUTINENAMES                                                                   
; ——————————————————————————————————————————————————————————————————————————————————————

useWFont						EQU		$08

inThumb							EQU		129
kNoHiliteControlPart			EQU		0
kInIndicatorControlPart			EQU		129
kReservedControlPart			EQU		254
kControlInactiveControlPart		EQU		255

	ENDIF	; OLDROUTINENAMES
	IF ACCESSOR_CALLS_ARE_FUNCTIONS THEN
;  Getters 

; *  GetControlBounds()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Rect *GetControlBounds(ControlRef control, Rect *bounds)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlBounds
	ENDIF


; *  IsControlHilited()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsControlHilited(ControlRef control)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsControlHilited
	ENDIF


; *  GetControlHilite()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal UInt16 GetControlHilite(ControlRef control)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlHilite
	ENDIF


; *  GetControlOwner()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal WindowRef GetControlOwner(ControlRef control)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlOwner
	ENDIF


; *  GetControlDataHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Handle GetControlDataHandle(ControlRef control)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlDataHandle
	ENDIF


; *  GetControlPopupMenuHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal MenuRef GetControlPopupMenuHandle(ControlRef control)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlPopupMenuHandle
	ENDIF


; *  GetControlPopupMenuID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short GetControlPopupMenuID(ControlRef control)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetControlPopupMenuID
	ENDIF

;  Setters 

; *  SetControlDataHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControlDataHandle(ControlRef control, Handle dataHandle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlDataHandle
	ENDIF


; *  SetControlBounds()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControlBounds(ControlRef control, const Rect *bounds)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlBounds
	ENDIF


; *  SetControlPopupMenuHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControlPopupMenuHandle(ControlRef control, MenuRef popupMenu)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlPopupMenuHandle
	ENDIF


; *  SetControlPopupMenuID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetControlPopupMenuID(ControlRef control, short menuID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetControlPopupMenuID
	ENDIF

	ENDIF	; ACCESSOR_CALLS_ARE_FUNCTIONS
	IF ¬ OPAQUE_TOOLBOX_STRUCTS ** ¬ ACCESSOR_CALLS_ARE_FUNCTIONS THEN
	ENDIF

	ENDIF ; __CONTROLS__ 


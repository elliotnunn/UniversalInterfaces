;
;    File:       FileSigning.a
;
;    Contains:   Apple File Signing Interfaces.
;
;    Version:    Technology: 1.0
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1999-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__FILESIGNING__') = 'UNDEFINED' THEN
__FILESIGNING__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__FILES__') = 'UNDEFINED' THEN
	include 'Files.a'
	ENDIF
	IF &TYPE('__KEYCHAIN__') = 'UNDEFINED' THEN
	include 'Keychain.a'
	ENDIF

	IF &TYPE('__CRYPTOMESSAGESYNTAX__') = 'UNDEFINED' THEN
	include 'CryptoMessageSyntax.a'
	ENDIF

;  Data structures and types 

; typedef SInt32						SecOptions
kSecOptionProgress				EQU		$01
kSecOptionShowVerifyUI			EQU		$02
kSecOptionNeverShowUI			EQU		$04
kCertUsageReserved				EQU		$7FFFFF00			; Last 3 bytes reserved for SecOptions flags 

; typedef UInt32						SecSignatureType
kSecSignatureTypeRawPKCS7		EQU		0
kSecSignatureTypeCMS			EQU		1
kSecSignatureTypePGP			EQU		2					; reserved but not implemented 

; typedef UInt32						SecTrustPolicy
kSecTrustPolicyCodeSigning		EQU		0
kSecTrustPolicyPersonalFileSigning EQU	1
SecProgressCallbackInfo	RECORD 0
version					 ds.l	1				; offset: $0 (0)
bytesProcessed			 ds.l	1				; offset: $4 (4)
totalBytes				 ds.l	1				; offset: $8 (8)
itemsRemainingToSign	 ds.l	1				; offset: $C (12)
totalItemsToSign		 ds.l	1				; offset: $10 (16)
secondsRemaining		 ds.l	1				; offset: $14 (20)
secondsElapsed			 ds.l	1				; offset: $18 (24)
microSecondsPerByte		 ds.l	1				; offset: $1C (28)
fileName				 ds		Str255			; offset: $20 (32)
sizeof					 EQU *					; size:   $120 (288)
						ENDR
	IF CALL_NOT_IN_CARBON THEN

; *  NewSecProgressCallbackUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  DisposeSecProgressCallbackUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  InvokeSecProgressCallbackUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

	ENDIF	; CALL_NOT_IN_CARBON
	IF CALL_NOT_IN_CARBON THEN

; *  SecSetProgressCallback()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus SecSetProgressCallback(SecProgressCallbackUPP callbackProc, void *userContext)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecSetProgressCallback
	ENDIF


; *  SecRemoveProgressCallback()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus SecRemoveProgressCallback(SecProgressCallbackUPP callbackProc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecRemoveProgressCallback
	ENDIF


; *  DefaultSecProgressCallbackProc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus DefaultSecProgressCallbackProc(SecProgressCallbackInfo *info, void *userContext)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DefaultSecProgressCallbackProc
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON

kSecDefaultSignatureResID		EQU		1
	IF CALL_NOT_IN_CARBON THEN

; *  SecMacSignFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus SecMacSignFile(FSSpec *theFile, KCItemRef signingCertificate, Handle sigH, SecOptions options, SecProgressCallbackUPP progressProc, void *userContext)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecMacSignFile
	ENDIF


; *  SecMacSignFileSimple()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus SecMacSignFileSimple(FSSpec *theFile, KCItemRef signingCertificate, SecOptions options)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecMacSignFileSimple
	ENDIF


; *  SecMacLoadSigPound()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus SecMacLoadSigPound(FSSpec *theFile, Handle *resHandle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecMacLoadSigPound
	ENDIF


; *  SecMacRemoveSignature()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus SecMacRemoveSignature(FSSpec *theFile, SecSignatureType signatureType, SInt16 signatureToRemove)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecMacRemoveSignature
	ENDIF


; *  SecMacRemoveAllSignatures()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus SecMacRemoveAllSignatures(FSSpec *theFile, SecSignatureType signatureType)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecMacRemoveAllSignatures
	ENDIF



; *  SecMacVerifyFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus SecMacVerifyFile(FSSpec *theFile, SecOptions options, SecProgressCallbackUPP progressProc, void *userContext, SInt16 signatureToVerify, CFArrayRef policyOIDs, KCVerifyStopOn stopOn, SecSignerRef *signer)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecMacVerifyFile
	ENDIF


; *  SecMacVerifyFileSimple()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus SecMacVerifyFileSimple(FSSpec *theFile, SecOptions options, SecTrustPolicy trustPolicy, SecSignerRef *signer)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecMacVerifyFileSimple
	ENDIF


; *  SecMacHasSignature()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal Boolean SecMacHasSignature(FSSpec *theFile, SecSignatureType signatureType)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecMacHasSignature
	ENDIF


; *  SecMacFindSignatureToVerify()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus SecMacFindSignatureToVerify(FSSpec *theFile, SecSignatureType signatureType, SInt16 *signatureToVerify)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecMacFindSignatureToVerify
	ENDIF


; *  SecMacGetDefaultPolicyOIDs()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal CFArrayRef SecMacGetDefaultPolicyOIDs(SecTrustPolicy trustPolicy)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecMacGetDefaultPolicyOIDs
	ENDIF



; *  SecMacDisplaySigner()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FileSigningLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus SecMacDisplaySigner(OSStatus inputErr, SecSignerRef signer, Boolean alwaysShowUI, FSSpec *theFile)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SecMacDisplaySigner
	ENDIF

;  Errors Codes 
	ENDIF	; CALL_NOT_IN_CARBON

errSecTooManySigners			EQU		-13839
errSecSigningFailed				EQU		-13838
errSecCorruptSigPound			EQU		-13837
errSecNoSignatureFound			EQU		-13836
	ENDIF ; __FILESIGNING__ 


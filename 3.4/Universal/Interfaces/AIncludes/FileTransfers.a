;
;    File:       FileTransfers.a
;
;    Contains:   CommToolbox File Transfer Manager Interfaces.
;
;    Version:    Technology: System 7.5
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1988-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__FILETRANSFERS__') = 'UNDEFINED' THEN
__FILETRANSFERS__ SET 1

	IF &TYPE('__CONDITIONALMACROS__') = 'UNDEFINED' THEN
	include 'ConditionalMacros.a'
	ENDIF
	IF &TYPE('__STANDARDFILE__') = 'UNDEFINED' THEN
	include 'StandardFile.a'
	ENDIF
	IF &TYPE('__CTBUTILITIES__') = 'UNDEFINED' THEN
	include 'CTBUtilities.a'
	ENDIF
	IF &TYPE('__CONNECTIONS__') = 'UNDEFINED' THEN
	include 'Connections.a'
	ENDIF
	IF &TYPE('__FILES__') = 'UNDEFINED' THEN
	include 'Files.a'
	ENDIF
	IF &TYPE('__TERMINALS__') = 'UNDEFINED' THEN
	include 'Terminals.a'
	ENDIF

	IF CALL_NOT_IN_CARBON THEN

curFTVersion					EQU		2					; current file transfer manager version

															; FTErr    
ftGenericError					EQU		-1
ftNoErr							EQU		0
ftRejected						EQU		1
ftFailed						EQU		2
ftTimeOut						EQU		3
ftTooManyRetry					EQU		4
ftNotEnoughDSpace				EQU		5
ftRemoteCancel					EQU		6
ftWrongFormat					EQU		7
ftNoTools						EQU		8
ftUserCancel					EQU		9
ftNotSupported					EQU		10
; typedef OSErr 						FTErr


ftIsFTMode						EQU		$01
ftNoMenus						EQU		$02
ftQuiet							EQU		$04
ftConfigChanged					EQU		$10
ftSucc							EQU		$80
; typedef unsigned long 				FTFlags


ftSameCircuit					EQU		$01
ftSendDisable					EQU		$02
ftReceiveDisable				EQU		$04
ftTextOnly						EQU		$08
ftNoStdFile						EQU		$10
ftMultipleFileSend				EQU		$20
; typedef unsigned short 				FTAttributes


ftReceiving						EQU		0
ftTransmitting					EQU		1
ftFullDuplex					EQU		2					; (16) added ftFullDuplex bit.
; typedef unsigned short 				FTDirection

;   application routines type definitions 


; typedef FTRecord *					FTPtr

; typedef FTPtr *						FTHandle

FTRecord				RECORD 0
procID					 ds.w	1				; offset: $0 (0)
flags					 ds.l	1				; offset: $2 (2)
errCode					 ds.w	1				; offset: $6 (6)
refCon					 ds.l	1				; offset: $8 (8)
userData				 ds.l	1				; offset: $C (12)
defProc					 ds.l	1				; offset: $10 (16)
config					 ds.l	1				; offset: $14 (20)
oldConfig				 ds.l	1				; offset: $18 (24)
environsProc			 ds.l	1				; offset: $1C (28)
reserved1				 ds.l	1				; offset: $20 (32)
reserved2				 ds.l	1				; offset: $24 (36)
ftPrivate				 ds.l	1				; offset: $28 (40)
sendProc				 ds.l	1				; offset: $2C (44)
recvProc				 ds.l	1				; offset: $30 (48)
writeProc				 ds.l	1				; offset: $34 (52)
readProc				 ds.l	1				; offset: $38 (56)
owner					 ds.l	1				; offset: $3C (60)
direction				 ds.w	1				; offset: $40 (64)
theReply				 ds		SFReply			; offset: $42 (66)
writePtr				 ds.l	1				; offset: $8C (140)
readPtr					 ds.l	1				; offset: $90 (144)
theBuf					 ds.l	1				; offset: $94 (148)
bufSize					 ds.l	1				; offset: $98 (152)
autoRec					 ds		Str255			; offset: $9C (156)
attributes				 ds.w	1				; offset: $19C (412)
sizeof					 EQU *					; size:   $19E (414)
						ENDR
; typedef unsigned short 				FTCompletionKind


															; FTReadProc messages 
ftReadOpenFile					EQU		0					; count = forkFlags, buffer = pblock from PBGetFInfo 
ftReadDataFork					EQU		1
ftReadRsrcFork					EQU		2
ftReadAbort						EQU		3
ftReadComplete					EQU		4
ftReadSetFPos					EQU		6					; count = forkFlags, buffer = pBlock same as PBSetFPos 
ftReadGetFPos					EQU		7					; count = forkFlags, buffer = pBlock same as PBGetFPos 

															; FTWriteProc messages 
ftWriteOpenFile					EQU		0					; count = forkFlags, buffer = pblock from PBGetFInfo 
ftWriteDataFork					EQU		1
ftWriteRsrcFork					EQU		2
ftWriteAbort					EQU		3
ftWriteComplete					EQU		4
ftWriteFileInfo					EQU		5
ftWriteSetFPos					EQU		6					; count = forkFlags, buffer = pBlock same as PBSetFPos 
ftWriteGetFPos					EQU		7					; count = forkFlags, buffer = pBlock same as PBGetFPos 

															;    fork flags 
ftOpenDataFork					EQU		1
ftOpenRsrcFork					EQU		2
	IF CALL_NOT_IN_CARBON THEN

; *  NewFileTransferDefUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  NewFileTransferReadUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  NewFileTransferWriteUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  NewFileTransferSendUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  NewFileTransferReceiveUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  NewFileTransferEnvironsUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  NewFileTransferNotificationUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  NewFileTransferChooseIdleUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  DisposeFileTransferDefUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  DisposeFileTransferReadUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  DisposeFileTransferWriteUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  DisposeFileTransferSendUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  DisposeFileTransferReceiveUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  DisposeFileTransferEnvironsUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  DisposeFileTransferNotificationUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  DisposeFileTransferChooseIdleUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  InvokeFileTransferDefUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  InvokeFileTransferReadUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  InvokeFileTransferWriteUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  InvokeFileTransferSendUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  InvokeFileTransferReceiveUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  InvokeFileTransferEnvironsUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  InvokeFileTransferNotificationUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 


; *  InvokeFileTransferChooseIdleUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

	ENDIF	; CALL_NOT_IN_CARBON
	IF CALL_NOT_IN_CARBON THEN

; *  InitFT()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal FTErr InitFT(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InitFT
	ENDIF


; *  FTGetVersion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal Handle FTGetVersion(FTHandle hFT)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTGetVersion
	ENDIF


; *  FTGetFTVersion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal short FTGetFTVersion(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTGetFTVersion
	ENDIF


; *  FTNew()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal FTHandle FTNew(short procID, FTFlags flags, FileTransferSendUPP sendProc, FileTransferReceiveUPP recvProc, FileTransferReadUPP readProc, FileTransferWriteUPP writeProc, FileTransferEnvironsUPP environsProc, WindowRef owner, long refCon, long userData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTNew
	ENDIF


; *  FTDispose()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTDispose(FTHandle hFT)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTDispose
	ENDIF


; *  FTStart()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal FTErr FTStart(FTHandle hFT, FTDirection direction, const SFReply *fileInfo)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTStart
	ENDIF


; *  FTAbort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal FTErr FTAbort(FTHandle hFT)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTAbort
	ENDIF


; *  FTSend()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal FTErr FTSend(FTHandle hFT, short numFiles, FSSpecArrayPtr pFSSpec, FileTransferNotificationUPP notifyProc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTSend
	ENDIF


; *  FTReceive()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal FTErr FTReceive(FTHandle hFT, FSSpecPtr pFSSpec, FileTransferNotificationUPP notifyProc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTReceive
	ENDIF


; *  FTExec()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTExec(FTHandle hFT)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTExec
	ENDIF


; *  FTActivate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTActivate(FTHandle hFT, Boolean activate)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTActivate
	ENDIF


; *  FTResume()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTResume(FTHandle hFT, Boolean resume)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTResume
	ENDIF


; *  FTMenu()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal Boolean FTMenu(FTHandle hFT, short menuID, short item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTMenu
	ENDIF


; *  FTChoose()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal short FTChoose(FTHandle *hFT, Point where, FileTransferChooseIdleUPP idleProc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTChoose
	ENDIF


; *  FTEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTEvent(FTHandle hFT, const EventRecord *theEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTEvent
	ENDIF


; *  FTValidate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal Boolean FTValidate(FTHandle hFT)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTValidate
	ENDIF


; *  FTDefault()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTDefault(Ptr *theConfig, short procID, Boolean allocate)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTDefault
	ENDIF


; *  FTSetupPreflight()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal Handle FTSetupPreflight(short procID, long *magicCookie)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTSetupPreflight
	ENDIF


; *  FTSetupSetup()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTSetupSetup(short procID, const void *theConfig, short count, DialogRef theDialog, long *magicCookie)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTSetupSetup
	ENDIF


; *  FTSetupFilter()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal Boolean FTSetupFilter(short procID, const void *theConfig, short count, DialogRef theDialog, EventRecord *theEvent, short *theItem, long *magicCookie)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTSetupFilter
	ENDIF


; *  FTSetupItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTSetupItem(short procID, const void *theConfig, short count, DialogRef theDialog, short *theItem, long *magicCookie)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTSetupItem
	ENDIF


; *  FTSetupXCleanup()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTSetupXCleanup(short procID, const void *theConfig, short count, DialogRef theDialog, Boolean OKed, long *magicCookie)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTSetupXCleanup
	ENDIF


; *  FTSetupPostflight()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTSetupPostflight(short procID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTSetupPostflight
	ENDIF


; *  FTGetConfig()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal Ptr FTGetConfig(FTHandle hFT)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTGetConfig
	ENDIF


; *  FTSetConfig()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal short FTSetConfig(FTHandle hFT, const void *thePtr)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTSetConfig
	ENDIF


; *  FTIntlToEnglish()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal FTErr FTIntlToEnglish(FTHandle hFT, const void *inputPtr, Ptr *outputPtr, short language)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTIntlToEnglish
	ENDIF


; *  FTEnglishToIntl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal FTErr FTEnglishToIntl(FTHandle hFT, const void *inputPtr, Ptr *outputPtr, short language)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTEnglishToIntl
	ENDIF


; *  FTGetToolName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTGetToolName(short procID, Str255 name)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTGetToolName
	ENDIF


; *  FTGetProcID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal short FTGetProcID(ConstStr255Param name)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTGetProcID
	ENDIF


; *  FTSetRefCon()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTSetRefCon(FTHandle hFT, long refCon)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTSetRefCon
	ENDIF


; *  FTGetRefCon()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal long FTGetRefCon(FTHandle hFT)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTGetRefCon
	ENDIF


; *  FTSetUserData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTSetUserData(FTHandle hFT, long userData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTSetUserData
	ENDIF


; *  FTGetUserData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal long FTGetUserData(FTHandle hFT)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTGetUserData
	ENDIF


; *  FTGetErrorString()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void FTGetErrorString(FTHandle hFT, short id, Str255 errMsg)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTGetErrorString
	ENDIF

; 
;    These Async routines were added to InterfaceLib in System 7.5
;


; *  FTSendAsync()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal FTErr FTSendAsync(FTHandle hFT, short numFiles, FSSpecArrayPtr pFSSpec, FileTransferNotificationUPP notifyProc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTSendAsync
	ENDIF


; *  FTReceiveAsync()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal FTErr FTReceiveAsync(FTHandle hFT, FSSpecPtr pFSSpec, FileTransferNotificationUPP notifyProc)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTReceiveAsync
	ENDIF


; *  FTCompletionAsync()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal FTErr FTCompletionAsync(FTHandle hFT, FTCompletionKind completionCall)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FTCompletionAsync
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON
	ENDIF	; CALL_NOT_IN_CARBON
	ENDIF ; __FILETRANSFERS__ 


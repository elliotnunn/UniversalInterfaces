;
;    File:       FindByContent.a
;
;    Contains:   Public search interface for the Find by Content shared library
;
;    Version:    Technology: 2.0
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1997-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__FINDBYCONTENT__') = 'UNDEFINED' THEN
__FINDBYCONTENT__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__FILES__') = 'UNDEFINED' THEN
	include 'Files.a'
	ENDIF
	IF &TYPE('__MACERRORS__') = 'UNDEFINED' THEN
	include 'MacErrors.a'
	ENDIF
	IF &TYPE('__CFSTRING__') = 'UNDEFINED' THEN
	include 'CFString.a'
	ENDIF


;   ***************************************************************************
;   Language constants used with FBCIndexItemsInLanguages: these numbers are bits
;   in a 64-bit array that consists of two UInt32 words.  In the current implementation
;   the low word is always 0, so values for the high word are given.  If both UInt32
;   words are 0, the default value of kDefaultLanguagesHighWord is used.
;   ***************************************************************************



															; languages that use the Roman character mapping
englishHighWord					EQU		$80000000
dutchHighWord					EQU		$40000000			; also Afrikaans
germanHighWord					EQU		$20000000
swedishHighWord					EQU		$10000000			; also Norwegian
danishHighWord					EQU		$08000000
spanishHighWord					EQU		$04000000			; also Catalan
portugueseHighWord				EQU		$02000000
italianHighWord					EQU		$01000000
frenchHighWord					EQU		$00800000
romanHighWord					EQU		$00400000			; other languages using Roman alphabet
															; Languages that use other mappings
icelandicHighWord				EQU		$00200000			; also Faroese
hebrewHighWord					EQU		$00100000			; also Yiddish
arabicHighWord					EQU		$00080000			; also Farsi, Urdu
centeuroHighWord				EQU		$00040000			; Central European languages not using Cyrillic
croatianHighWord				EQU		$00020000
turkishHighWord					EQU		$00010000
romanianHighWord				EQU		$00008000
greekHighWord					EQU		$00004000
cyrillicHighWord				EQU		$00002000			; all languages using Cyrillic
devanagariHighWord				EQU		$00001000
gujuratiHighWord				EQU		$00000800
gurmukhiHighWord				EQU		$00000400
japaneseHighWord				EQU		$00000200
koreanHighWord					EQU		$00000100
kDefaultLanguagesHighWord		EQU		$FF800000			; sum of first 9


;   ***************************************************************************
;   Phase values
;   These values are passed to the client's callback function to indicate what
;   the FBC code is doing.
;   ***************************************************************************



															; indexing phases
kFBCphIndexing					EQU		0
kFBCphFlushing					EQU		1
kFBCphMerging					EQU		2
kFBCphMakingIndexAccessor		EQU		3
kFBCphCompacting				EQU		4
kFBCphIndexWaiting				EQU		5					; access phases
kFBCphSearching					EQU		6
kFBCphMakingAccessAccessor		EQU		7
kFBCphAccessWaiting				EQU		8					; summarization
kFBCphSummarizing				EQU		9					; indexing or access
kFBCphIdle						EQU		10
kFBCphCanceling					EQU		11



;   ***************************************************************************
;   Pointer types
;   These point to memory allocated by the FBC shared library, and must be deallocated
;   by calls that are defined below.
;   ***************************************************************************



;  A collection of state information for searching


;  a FBCWordList is a pointer to an array of pointers to c-strings
FBCWordListRec			RECORD 0
words					 ds.l	1				; offset: $0 (0) <-- really an array of length one ;  array of pointers to c-strings
sizeof					 EQU *					; size:   $4 (4)
						ENDR
; typedef struct FBCWordListRec *		FBCWordList


;   ***************************************************************************
;   Callback function type for progress reporting and cancelation during
;   searching and indexing.  The client's callback function should call
;   WaitNextEvent; a "sleep" value of 1 is suggested.  If the callback function
;   wants to cancel the current operation (indexing, search, or doc-terms
;   retrieval) it should return true.
;   ***************************************************************************




; *  NewFBCCallbackUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeFBCCallbackUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeFBCCallbackUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 


;   ***************************************************************************
;   Set the callback function for progress reporting and cancelation during
;   searching and indexing, and set the amount of heap space to reserve for
;   the client's use when FBC allocates memory.
;   ***************************************************************************



; *  FBCSetCallback()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void FBCSetCallback(FBCCallbackUPP fn, void *data)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCSetCallback
	ENDIF


; *  FBCSetHeapReservation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void FBCSetHeapReservation(UInt32 bytes)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCSetHeapReservation
	ENDIF


;   ***************************************************************************
;   Find out whether a volume is indexed, the date & time of its last
;   completed  update, and its physical size.
;   ***************************************************************************




; *  FBCVolumeIsIndexed()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean FBCVolumeIsIndexed(SInt16 theVRefNum)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCVolumeIsIndexed
	ENDIF


; *  FBCVolumeIsRemote()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern Boolean FBCVolumeIsRemote(SInt16 theVRefNum)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCVolumeIsRemote
	ENDIF


; *  FBCVolumeIndexTimeStamp()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCVolumeIndexTimeStamp(SInt16 theVRefNum, UInt32 *timeStamp)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCVolumeIndexTimeStamp
	ENDIF


; *  FBCVolumeIndexPhysicalSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCVolumeIndexPhysicalSize(SInt16 theVRefNum, UInt32 *size)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCVolumeIndexPhysicalSize
	ENDIF


;   ***************************************************************************
;   Create & configure a search session
;   ***************************************************************************




; *  FBCCreateSearchSession()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCCreateSearchSession(FBCSearchSession *searchSession)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCCreateSearchSession
	ENDIF


; *  FBCAddAllVolumesToSession()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCAddAllVolumesToSession(FBCSearchSession theSession, Boolean includeRemote)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCAddAllVolumesToSession
	ENDIF


; *  FBCSetSessionVolumes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCSetSessionVolumes(FBCSearchSession theSession, const SInt16 vRefNums[], UInt16 numVolumes)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCSetSessionVolumes
	ENDIF


; *  FBCAddVolumeToSession()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCAddVolumeToSession(FBCSearchSession theSession, SInt16 vRefNum)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCAddVolumeToSession
	ENDIF


; *  FBCRemoveVolumeFromSession()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCRemoveVolumeFromSession(FBCSearchSession theSession, SInt16 vRefNum)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCRemoveVolumeFromSession
	ENDIF


; *  FBCGetSessionVolumeCount()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCGetSessionVolumeCount(FBCSearchSession theSession, UInt16 *count)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCGetSessionVolumeCount
	ENDIF


; *  FBCGetSessionVolumes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCGetSessionVolumes(FBCSearchSession theSession, SInt16 vRefNums[], UInt16 *numVolumes)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCGetSessionVolumes
	ENDIF


; *  FBCCloneSearchSession()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCCloneSearchSession(FBCSearchSession original, FBCSearchSession *clone)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCCloneSearchSession
	ENDIF


;   ***************************************************************************
;   Execute a search
;   ***************************************************************************




; *  FBCDoQuerySearch()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCDoQuerySearch(FBCSearchSession theSession, char *queryText, const FSSpec targetDirs[], UInt32 numTargets, UInt32 maxHits, UInt32 maxHitWords)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCDoQuerySearch
	ENDIF


; *  FBCDoCFStringSearch()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCDoCFStringSearch(FBCSearchSession theSession, CFStringRef queryString, const FSSpec targetDirs[], UInt32 numTargets, UInt32 maxHits, UInt32 maxHitWords)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCDoCFStringSearch
	ENDIF


; *  FBCDoExampleSearch()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCDoExampleSearch(FBCSearchSession theSession, const UInt32 *exampleHitNums, UInt32 numExamples, const FSSpec targetDirs[], UInt32 numTargets, UInt32 maxHits, UInt32 maxHitWords)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCDoExampleSearch
	ENDIF


; *  FBCBlindExampleSearch()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCBlindExampleSearch(FSSpec examples[], UInt32 numExamples, const FSSpec targetDirs[], UInt32 numTargets, UInt32 maxHits, UInt32 maxHitWords, Boolean allIndexes, Boolean includeRemote, FBCSearchSession *theSession)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCBlindExampleSearch
	ENDIF



;   ***************************************************************************
;   Get information about hits [wrapper for THitItem C++ API]
;   ***************************************************************************




; *  FBCGetHitCount()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCGetHitCount(FBCSearchSession theSession, UInt32 *count)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCGetHitCount
	ENDIF


; *  FBCGetHitDocument()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCGetHitDocument(FBCSearchSession theSession, UInt32 hitNumber, FSSpec *theDocument)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCGetHitDocument
	ENDIF


; *  FBCGetHitDocumentRef()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCGetHitDocumentRef(FBCSearchSession theSession, UInt32 hitNumber, FSRef *theDocument)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCGetHitDocumentRef
	ENDIF


; *  FBCGetHitScore()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCGetHitScore(FBCSearchSession theSession, UInt32 hitNumber, float *score)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCGetHitScore
	ENDIF


; *  FBCGetMatchedWords()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCGetMatchedWords(FBCSearchSession theSession, UInt32 hitNumber, UInt32 *wordCount, FBCWordList *list)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCGetMatchedWords
	ENDIF


; *  FBCGetTopicWords()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCGetTopicWords(FBCSearchSession theSession, UInt32 hitNumber, UInt32 *wordCount, FBCWordList *list)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCGetTopicWords
	ENDIF



;   ***************************************************************************
;   Summarize a buffer of text
;   ***************************************************************************




; *  FBCSummarize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCSummarize(void *inBuf, UInt32 inLength, void *outBuf, UInt32 *outLength, UInt32 *numSentences)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCSummarize
	ENDIF


;   ***************************************************************************
;   Deallocate hit lists, word arrays, and search sessions
;   ***************************************************************************




; *  FBCReleaseSessionHits()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCReleaseSessionHits(FBCSearchSession theSession)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCReleaseSessionHits
	ENDIF


; *  FBCDestroyWordList()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCDestroyWordList(FBCWordList theList, UInt32 wordCount)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCDestroyWordList
	ENDIF


; *  FBCDestroySearchSession()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCDestroySearchSession(FBCSearchSession theSession)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCDestroySearchSession
	ENDIF


;   ***************************************************************************
;   Index one or more files and/or folders
;   ***************************************************************************




; *  FBCIndexItems()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FindByContent 9.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCIndexItems(FSSpecArrayPtr theItems, UInt32 itemCount)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCIndexItems
	ENDIF


; *  FBCIndexItemsInLanguages()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCIndexItemsInLanguages(FSSpecArrayPtr theItems, UInt32 itemCount, UInt32 languageHighBits, UInt32 languageLowBits)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCIndexItemsInLanguages
	ENDIF


;   ***************************************************************************
;   (OS X only) Given a folder, find the folder that contains the index file
;   of the given index
;   ***************************************************************************




; *  FBCFindIndexFileFolderForFolder()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCFindIndexFileFolderForFolder(FSRef *inFolder, FSRef *outFolder)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCFindIndexFileFolderForFolder
	ENDIF


;   ***************************************************************************
;   (OS X only) Given a folder, delete the index file that indexes it
;   ***************************************************************************




; *  FBCDeleteIndexFileForFolder()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSErr FBCDeleteIndexFileForFolder(const FSRef *folder)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FBCDeleteIndexFileForFolder
	ENDIF

	ENDIF ; __FINDBYCONTENT__ 


;
;    File:       Folders.a
;
;    Contains:   Folder Manager Interfaces.
;
;    Version:    Technology: Mac OS 8
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 1995-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__FOLDERS__') = 'UNDEFINED' THEN
__FOLDERS__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__MIXEDMODE__') = 'UNDEFINED' THEN
	include 'MixedMode.a'
	ENDIF
	IF &TYPE('__FILES__') = 'UNDEFINED' THEN
	include 'Files.a'
	ENDIF


kOnSystemDisk					EQU		-32768				; previously was 0x8000 but that is an unsigned value whereas vRefNum is signed
kOnAppropriateDisk				EQU		-32767				; Generally, the same as kOnSystemDisk, but it's clearer that this isn't always the 'boot' disk.
															; Folder Domains - Carbon only.  The constants above can continue to be used, but the folder/volume returned will
															; be from one of the domains below.
kSystemDomain					EQU		-32766				; Read-only system hierarchy.
kLocalDomain					EQU		-32765				; All users of a single machine have access to these resources.
kNetworkDomain					EQU		-32764				; All users configured to use a common network server has access to these resources.
kUserDomain						EQU		-32763				; Read/write. Resources that are private to the user.
kClassicDomain					EQU		-32762				; Domain referring to the currently configured Classic System Folder

kCreateFolder					EQU		1
kDontCreateFolder				EQU		0

kSystemFolderType				EQU		'macs'				; the system folder 
kDesktopFolderType				EQU		'desk'				; the desktop folder; objects in this folder show on the desk top. 
kSystemDesktopFolderType		EQU		'sdsk'				; the desktop folder at the root of the hard drive, never the redirected user desktop folder 
kTrashFolderType				EQU		'trsh'				; the trash folder; objects in this folder show up in the trash 
kSystemTrashFolderType			EQU		'strs'				; the trash folder at the root of the drive, never the redirected user trash folder 
kWhereToEmptyTrashFolderType	EQU		'empt'				; the "empty trash" folder; Finder starts empty from here down 
kPrintMonitorDocsFolderType		EQU		'prnt'				; Print Monitor documents 
kStartupFolderType				EQU		'strt'				; Finder objects (applications, documents, DAs, aliases, to...) to open at startup go here 
kShutdownFolderType				EQU		'shdf'				; Finder objects (applications, documents, DAs, aliases, to...) to open at shutdown go here 
kAppleMenuFolderType			EQU		'amnu'				; Finder objects to put into the Apple menu go here 
kControlPanelFolderType			EQU		'ctrl'				; Control Panels go here (may contain INITs) 
kSystemControlPanelFolderType	EQU		'sctl'				; System control panels folder - never the redirected one, always "Control Panels" inside the System Folder 
kExtensionFolderType			EQU		'extn'				; System extensions go here 
kFontsFolderType				EQU		'font'				; Fonts go here 
kPreferencesFolderType			EQU		'pref'				; preferences for applications go here 
kSystemPreferencesFolderType	EQU		'sprf'				; System-type Preferences go here - this is always the system's preferences folder, never a logged in user's 
kTemporaryFolderType			EQU		'temp'				; temporary files go here (deleted periodically, but don't rely on it.) 

; *  FindFolder()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr FindFolder(short vRefNum, OSType folderType, Boolean createFolder, short *foundVRefNum, long *foundDirID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FindFolder
			moveq           	#0,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FindFolder
	ENDIF


; *  FindFolderExtended()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr FindFolderExtended(short vol, OSType foldType, Boolean createFolder, UInt32 flags, void *data, short *vRefNum, long *dirID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FindFolderExtended
			move.w              #$0B2C,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FindFolderExtended
	ENDIF


; *  ReleaseFolder()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FoldersLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr ReleaseFolder(short vRefNum, OSType folderType)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ReleaseFolder
			moveq           	#11,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ReleaseFolder
	ENDIF


	IF ¬ TARGET_OS_MAC THEN
;  Since non-mac targets don't know about VRef's or DirID's, the Ex version returns
;   the found folder path.
; 

	IF CALL_NOT_IN_CARBON THEN

; *  FindFolderEx()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSErr FindFolderEx(short vRefNum, OSType folderType, Boolean createFolder, short *foundVRefNum, long *foundDirID, char *foundFolder)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FindFolderEx
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON
	ENDIF

; *  FSFindFolder()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.1 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr FSFindFolder(short vRefNum, OSType folderType, Boolean createFolder, FSRef *foundRef)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FSFindFolder
			moveq           	#52,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FSFindFolder
	ENDIF



; *  FSFindFolderExtended()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.1 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr FSFindFolderExtended(short vol, OSType foldType, Boolean createFolder, UInt32 flags, void *data, FSRef *foundRef)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FSFindFolderExtended
			moveq           	#53,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FSFindFolderExtended
	ENDIF

; *****************************************
;  Extensible Folder Manager declarations 
; *****************************************

; ***************************
;  Folder Manager constants 
; ***************************


kExtensionDisabledFolderType	EQU		'extD'
kControlPanelDisabledFolderType	EQU		'ctrD'
kSystemExtensionDisabledFolderType EQU	'macD'
kStartupItemsDisabledFolderType	EQU		'strD'
kShutdownItemsDisabledFolderType EQU	'shdD'
kApplicationsFolderType			EQU		'apps'
kDocumentsFolderType			EQU		'docs'

															; new constants 
kVolumeRootFolderType			EQU		'root'				; root folder of a volume 
kChewableItemsFolderType		EQU		'flnt'				; items deleted at boot 
kApplicationSupportFolderType	EQU		'asup'				; third-party items and folders 
kTextEncodingsFolderType		EQU		'ƒtex'				; encoding tables 
kStationeryFolderType			EQU		'odst'				; stationery 
kOpenDocFolderType				EQU		'odod'				; OpenDoc root 
kOpenDocShellPlugInsFolderType	EQU		'odsp'				; OpenDoc Shell Plug-Ins in OpenDoc folder 
kEditorsFolderType				EQU		'oded'				; OpenDoc editors in MacOS Folder 
kOpenDocEditorsFolderType		EQU		'ƒodf'				; OpenDoc subfolder of Editors folder 
kOpenDocLibrariesFolderType		EQU		'odlb'				; OpenDoc libraries folder 
kGenEditorsFolderType			EQU		'ƒedi'				; CKH general editors folder at root level of Sys folder 
kHelpFolderType					EQU		'ƒhlp'				; CKH help folder currently at root of system folder 
kInternetPlugInFolderType		EQU		'ƒnet'				; CKH internet plug ins for browsers and stuff 
kModemScriptsFolderType			EQU		'ƒmod'				; CKH modem scripts, get 'em OUT of the Extensions folder 
kPrinterDescriptionFolderType	EQU		'ppdf'				; CKH new folder at root of System folder for printer descs. 
kPrinterDriverFolderType		EQU		'ƒprd'				; CKH new folder at root of System folder for printer drivers 
kScriptingAdditionsFolderType	EQU		'ƒscr'				; CKH at root of system folder 
kSharedLibrariesFolderType		EQU		'ƒlib'				; CKH for general shared libs. 
kVoicesFolderType				EQU		'fvoc'				; CKH macintalk can live here 
kControlStripModulesFolderType	EQU		'sdev'				; CKH for control strip modules 
kAssistantsFolderType			EQU		'astƒ'				; SJF for Assistants (MacOS Setup Assistant, etc) 
kUtilitiesFolderType			EQU		'utiƒ'				; SJF for Utilities folder 
kAppleExtrasFolderType			EQU		'aexƒ'				; SJF for Apple Extras folder 
kContextualMenuItemsFolderType	EQU		'cmnu'				; SJF for Contextual Menu items 
kMacOSReadMesFolderType			EQU		'morƒ'				; SJF for MacOS ReadMes folder 
kALMModulesFolderType			EQU		'walk'				; EAS for Location Manager Module files except type 'thng' (within kExtensionFolderType) 
kALMPreferencesFolderType		EQU		'trip'				; EAS for Location Manager Preferences (within kPreferencesFolderType; contains kALMLocationsFolderType) 
kALMLocationsFolderType			EQU		'fall'				; EAS for Location Manager Locations (within kALMPreferencesFolderType) 
kColorSyncProfilesFolderType	EQU		'prof'				; for ColorSync™ Profiles 
kThemesFolderType				EQU		'thme'				; for Theme data files 
kFavoritesFolderType			EQU		'favs'				; Favorties folder for Navigation Services 
kInternetFolderType				EQU		'intƒ'				; Internet folder (root level of startup volume) 
kAppearanceFolderType			EQU		'appr'				; Appearance folder (root of system folder) 
kSoundSetsFolderType			EQU		'snds'				; Sound Sets folder (in Appearance folder) 
kDesktopPicturesFolderType		EQU		'dtpƒ'				; Desktop Pictures folder (in Appearance folder) 
kInternetSearchSitesFolderType	EQU		'issf'				; Internet Search Sites folder 
kFindSupportFolderType			EQU		'fnds'				; Find support folder 
kFindByContentFolderType		EQU		'fbcf'				; Find by content folder 
kInstallerLogsFolderType		EQU		'ilgf'				; Installer Logs folder 
kScriptsFolderType				EQU		'scrƒ'				; Scripts folder 
kFolderActionsFolderType		EQU		'fasf'				; Folder Actions Scripts folder 
kLauncherItemsFolderType		EQU		'laun'				; Launcher Items folder 
kRecentApplicationsFolderType	EQU		'rapp'				; Recent Applications folder 
kRecentDocumentsFolderType		EQU		'rdoc'				; Recent Documents folder 
kRecentServersFolderType		EQU		'rsvr'				; Recent Servers folder 
kSpeakableItemsFolderType		EQU		'spki'				; Speakable Items folder 
kKeychainFolderType				EQU		'kchn'				; Keychain folder 
kQuickTimeExtensionsFolderType	EQU		'qtex'				; QuickTime Extensions Folder (in Extensions folder) 
kDisplayExtensionsFolderType	EQU		'dspl'				; Display Extensions Folder (in Extensions folder) 
kMultiprocessingFolderType		EQU		'mpxf'				; Multiprocessing Folder (in Extensions folder) 
kPrintingPlugInsFolderType		EQU		'pplg'				; Printing Plug-Ins Folder (in Extensions folder) 

;  New Folder Types to accommodate the Mac OS X Folder Manager 
;  These folder types are not applicable on Mac OS 9.          

kDomainTopLevelFolderType		EQU		'dtop'				; The top-level of a Folder domain, e.g. "/System"
kDomainLibraryFolderType		EQU		'dlib'				; the Library subfolder of a particular domain
kColorSyncFolderType			EQU		'sync'				; Contains ColorSync-related folders
kColorSyncCMMFolderType			EQU		'ccmm'				; ColorSync CMMs
kColorSyncScriptingFolderType	EQU		'cscr'				; ColorSync Scripting support
kPrintersFolderType				EQU		'impr'				; Contains Printing-related folders
kSpeechFolderType				EQU		'spch'				; Contains Speech-related folders
kCarbonLibraryFolderType		EQU		'carb'				; Contains Carbon-specific file
kDocumentationFolderType		EQU		'info'				; Contains Documentation files (not user documents)
kDeveloperDocsFolderType		EQU		'ddoc'				; Contains Developer Documentation files and folders
kDeveloperHelpFolderType		EQU		'devh'				; Contains Developer Help related files
kISSDownloadsFolderType			EQU		'issd'				; Contains Internet Search Sites downloaded from the Internet
kUserSpecificTmpFolderType		EQU		'utmp'				; Contains temporary items created on behalf of the current user
kCachedDataFolderType			EQU		'cach'				; Contains various cache files for different clients
kFrameworksFolderType			EQU		'fram'				; Contains MacOS X Framework folders     
kPrivateFrameworksFolderType	EQU		'pfrm'				; Contains MacOS X Private Framework folders     
kClassicDesktopFolderType		EQU		'sdsk'				; MacOS 9 compatible desktop folder - same as 
															; kSystemDesktopFolderType but with a more appropriate
															; name for Mac OS X code.
kDeveloperFolderType			EQU		'devf'				; Contains MacOS X Developer Resources
kSystemSoundsFolderType			EQU		'ssnd'				; Contains Mac OS X System Sound Files
kComponentsFolderType			EQU		'cmpd'				; Contains Mac OS X components
kQuickTimeComponentsFolderType	EQU		'wcmp'				; Contains QuickTime components for Mac OS X
kCoreServicesFolderType			EQU		'csrv'				; Refers to the "CoreServices" folder on Mac OS X
kPictureDocumentsFolderType		EQU		'pdoc'				; Refers to the "Pictures" folder in a users home directory
kMovieDocumentsFolderType		EQU		'mdoc'				; Refers to the "Movies" folder in a users home directory
kMusicDocumentsFolderType		EQU		'µdoc'				; Refers to the "Music" folder in a users home directory
kInternetSitesFolderType		EQU		'site'				; Refers to the "Sites" folder in a users home directory
kPublicFolderType				EQU		'pubb'				; Refers to the "Public" folder in a users home directory
kAudioSupportFolderType			EQU		'adio'				; Refers to the Audio support folder for Mac OS X
kAudioSoundsFolderType			EQU		'asnd'				; Refers to the Sounds subfolder of Audio Support
kAudioSoundBanksFolderType		EQU		'bank'				; Refers to the Banks subfolder of the Sounds Folder
kAudioAlertSoundsFolderType		EQU		'alrt'				; Refers to the Alert Sounds subfolder of the Sound Folder
kAudioPlugInsFolderType			EQU		'aplg'				; Refers to the Plug-ins subfolder of the Audio Folder   
kAudioComponentsFolderType		EQU		'acmp'				; Refers to the Components subfolder of the Audio Plug-ins Folder    
kKernelExtensionsFolderType		EQU		'kext'				; Refers to the Kernel Extensions Folder on Mac OS X
kDirectoryServicesFolderType	EQU		'dsrv'				; Refers to the Directory Services folder on Mac OS X
kDirectoryServicesPlugInsFolderType EQU	'dplg'				; Refers to the Directory Services Plug-Ins folder on Mac OS X 

kLocalesFolderType				EQU		'ƒloc'				; PKE for Locales folder 
kFindByContentPluginsFolderType	EQU		'fbcp'				; Find By Content Plug-ins 

kUsersFolderType				EQU		'usrs'				; "Users" folder, contains one folder for each user. 
kCurrentUserFolderType			EQU		'cusr'				; The folder for the currently logged on user. 
kCurrentUserRemoteFolderLocation EQU	'rusf'				; The remote folder for the currently logged on user 
kCurrentUserRemoteFolderType	EQU		'rusr'				; The remote folder location for the currently logged on user 
kSharedUserDataFolderType		EQU		'sdat'				; A Shared "Documents" folder, readable & writeable by all users 
kVolumeSettingsFolderType		EQU		'vsfd'				; Volume specific user information goes here 

kAppleshareAutomountServerAliasesFolderType EQU 'srvƒ'		; Appleshare puts volumes to automount inside this folder. 
kPreMacOS91ApplicationsFolderType EQU	'åpps'				; The "Applications" folder, pre Mac OS 9.1 
kPreMacOS91InstallerLogsFolderType EQU	'îlgf'				; The "Installer Logs" folder, pre Mac OS 9.1 
kPreMacOS91AssistantsFolderType	EQU		'åstƒ'				; The "Assistants" folder, pre Mac OS 9.1 
kPreMacOS91UtilitiesFolderType	EQU		'ütiƒ'				; The "Utilities" folder, pre Mac OS 9.1 
kPreMacOS91AppleExtrasFolderType EQU	'åexƒ'				; The "Apple Extras" folder, pre Mac OS 9.1 
kPreMacOS91MacOSReadMesFolderType EQU	'µorƒ'				; The "Mac OS ReadMes" folder, pre Mac OS 9.1 
kPreMacOS91InternetFolderType	EQU		'întƒ'				; The "Internet" folder, pre Mac OS 9.1 
kPreMacOS91AutomountedServersFolderType EQU 'ßrvƒ'			; The "Servers" folder, pre Mac OS 9.1 
kPreMacOS91StationeryFolderType	EQU		'ødst'				; The "Stationery" folder, pre Mac OS 9.1 
;  FolderDescFlags values 

kCreateFolderAtBoot				EQU		$00000002
kCreateFolderAtBootBit			EQU		1
kFolderCreatedInvisible			EQU		$00000004
kFolderCreatedInvisibleBit		EQU		2
kFolderCreatedNameLocked		EQU		$00000008
kFolderCreatedNameLockedBit		EQU		3
kFolderCreatedAdminPrivs		EQU		$00000010
kFolderCreatedAdminPrivsBit		EQU		4

kFolderInUserFolder				EQU		$00000020
kFolderInUserFolderBit			EQU		5
kFolderTrackedByAlias			EQU		$00000040
kFolderTrackedByAliasBit		EQU		6
kFolderInRemoteUserFolderIfAvailable EQU $00000080
kFolderInRemoteUserFolderIfAvailableBit EQU 7
kFolderNeverMatchedInIdentifyFolder EQU	$00000100
kFolderNeverMatchedInIdentifyFolderBit EQU 8
kFolderMustStayOnSameVolume		EQU		$00000200
kFolderMustStayOnSameVolumeBit	EQU		9
kFolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledMask EQU $00000400
kFolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledBit EQU 10
kFolderInLocalOrRemoteUserFolder EQU	$000000A0
; typedef UInt32 						FolderDescFlags

;  FolderClass values 

kRelativeFolder					EQU		'relf'
kSpecialFolder					EQU		'spcf'
; typedef OSType 						FolderClass

;  special folder locations 

kBlessedFolder					EQU		'blsf'
kRootFolder						EQU		'rotf'

kCurrentUserFolderLocation		EQU		'cusf'				;    the magic 'Current User' folder location
; typedef OSType 						FolderType

; typedef OSType 						FolderLocation


FolderDesc				RECORD 0
descSize				 ds.l	1				; offset: $0 (0)
foldType				 ds.l	1				; offset: $4 (4)
flags					 ds.l	1				; offset: $8 (8)
foldClass				 ds.l	1				; offset: $C (12)
foldLocation			 ds.l	1				; offset: $10 (16)
badgeSignature			 ds.l	1				; offset: $14 (20)
badgeType				 ds.l	1				; offset: $18 (24)
reserved				 ds.l	1				; offset: $1C (28)
name					 ds		StrFileName		; offset: $20 (32)		;  Str63 on MacOS
sizeof					 EQU *					; size:   $60 (96)
						ENDR
; typedef struct FolderDesc *			FolderDescPtr


; typedef UInt32 						RoutingFlags

FolderRouting			RECORD 0
descSize				 ds.l	1				; offset: $0 (0)
fileType				 ds.l	1				; offset: $4 (4)
routeFromFolder			 ds.l	1				; offset: $8 (8)
routeToFolder			 ds.l	1				; offset: $C (12)
flags					 ds.l	1				; offset: $10 (16)
sizeof					 EQU *					; size:   $14 (20)
						ENDR
; typedef struct FolderRouting *		FolderRoutingPtr

;  routing constants 
;   These are bits in the .flags field of the FindFolderUserRedirectionGlobals struct

															;    Set this bit to 1 in the .flags field of a FindFolderUserRedirectionGlobals
															;    structure if the userName in the struct should be used as the current
															;    "User" name
kFindFolderRedirectionFlagUseDistinctUserFoldersBit EQU 0	;    Set this bit to 1 and the currentUserFolderVRefNum and currentUserFolderDirID
															;    fields of the user record will get used instead of finding the user folder
															;    with the userName field.
kFindFolderRedirectionFlagUseGivenVRefAndDirIDAsUserFolderBit EQU 1 ;    Set this bit to 1 and the remoteUserFolderVRefNum and remoteUserFolderDirID
															;    fields of the user record will get used instead of finding the user folder
															;    with the userName field.
kFindFolderRedirectionFlagsUseGivenVRefNumAndDirIDAsRemoteUserFolderBit EQU 2
FindFolderUserRedirectionGlobals RECORD 0
version					 ds.l	1				; offset: $0 (0)
flags					 ds.l	1				; offset: $4 (4)
userName				 ds		Str31			; offset: $8 (8)
userNameScript			 ds.w	1				; offset: $28 (40)
currentUserFolderVRefNum  ds.w	1				; offset: $2A (42)
currentUserFolderDirID	 ds.l	1				; offset: $2C (44)
remoteUserFolderVRefNum	 ds.w	1				; offset: $30 (48)
remoteUserFolderDirID	 ds.l	1				; offset: $32 (50)
sizeof					 EQU *					; size:   $36 (54)
						ENDR
; typedef struct FindFolderUserRedirectionGlobals * FindFolderUserRedirectionGlobalsPtr


kFolderManagerUserRedirectionGlobalsCurrentVersion EQU 1

;    These are passed into FindFolderExtended(), FindFolderInternalExtended(), and
;    FindFolderNewInstallerEntryExtended() in the flags field. 



kFindFolderExtendedFlagsDoNotFollowAliasesBit EQU 0
kFindFolderExtendedFlagsDoNotUseUserFolderBit EQU 1
kFindFolderExtendedFlagsUseOtherUserRecord EQU $01000000

; *  NewFolderManagerNotificationUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeFolderManagerNotificationUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeFolderManagerNotificationUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 


kFolderManagerNotificationMessageUserLogIn EQU 'log+'		;    Sent by system & third party software after a user logs in.  arg should point to a valid FindFolderUserRedirectionGlobals structure or nil for the owner
kFolderManagerNotificationMessagePreUserLogIn EQU 'logj'	;    Sent by system & third party software before a user logs in.  arg should point to a valid FindFolderUserRedirectionGlobals structure or nil for the owner
kFolderManagerNotificationMessageUserLogOut EQU 'log-'		;    Sent by system & third party software before a user logs out.  arg should point to a valid FindFolderUserRedirectionGlobals structure or nil for the owner
kFolderManagerNotificationMessagePostUserLogOut EQU 'logp'	;    Sent by system & third party software after a user logs out.  arg should point to a valid FindFolderUserRedirectionGlobals structure or nil for the owner
kFolderManagerNotificationDiscardCachedData EQU 'dche'		;    Sent by system & third party software when the entire Folder Manager cache should be flushed
kFolderManagerNotificationMessageLoginStartup EQU 'stup'	;    Sent by 'Login' application the first time it starts up after each boot

;   These get used in the options parameter of FolderManagerRegisterNotificationProc()

kDoNotRemoveWhenCurrentApplicationQuitsBit EQU 0
kDoNotRemoveWheCurrentApplicationQuitsBit EQU 0				;    Going away soon, use kDoNotRemoveWheCurrentApplicationQuitsBit
;   These get used in the options parameter of FolderManagerCallNotificationProcs()

kStopIfAnyNotificationProcReturnsErrorBit EQU 31
; **************************
;  Folder Manager routines 
; **************************
;  Folder Manager administration routines 

; *  AddFolderDescriptor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FoldersLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AddFolderDescriptor(FolderType foldType, FolderDescFlags flags, FolderClass foldClass, FolderLocation foldLocation, OSType badgeSignature, OSType badgeType, ConstStrFileNameParam name, Boolean replaceFlag)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AddFolderDescriptor
			moveq           	#32,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddFolderDescriptor
	ENDIF


; *  GetFolderDescriptor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FoldersLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetFolderDescriptor(FolderType foldType, Size descSize, FolderDesc *foldDesc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetFolderDescriptor
			moveq           	#35,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetFolderDescriptor
	ENDIF


; *  GetFolderTypes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FoldersLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetFolderTypes(UInt32 requestedTypeCount, UInt32 *totalTypeCount, FolderType *theTypes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetFolderTypes
			moveq           	#36,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetFolderTypes
	ENDIF


; *  RemoveFolderDescriptor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FoldersLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr RemoveFolderDescriptor(FolderType foldType)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_RemoveFolderDescriptor
			moveq           	#33,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RemoveFolderDescriptor
	ENDIF

;  legacy routines 

; *  GetFolderName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FoldersLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetFolderName(short vRefNum, OSType foldType, short *foundVRefNum, StrFileName name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetFolderName
			moveq           	#14,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetFolderName
	ENDIF

;  routing routines 

; *  AddFolderRouting()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FoldersLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr AddFolderRouting(OSType fileType, FolderType routeFromFolder, FolderType routeToFolder, RoutingFlags flags, Boolean replaceFlag)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_AddFolderRouting
			move.w              #$0926,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddFolderRouting
	ENDIF


; *  RemoveFolderRouting()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FoldersLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr RemoveFolderRouting(OSType fileType, FolderType routeFromFolder)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_RemoveFolderRouting
			move.w              #$0427,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RemoveFolderRouting
	ENDIF


; *  FindFolderRouting()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FoldersLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr FindFolderRouting(OSType fileType, FolderType routeFromFolder, FolderType *routeToFolder, RoutingFlags *flags)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FindFolderRouting
			move.w              #$0822,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FindFolderRouting
	ENDIF


; *  GetFolderRoutings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FoldersLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetFolderRoutings(UInt32 requestedRoutingCount, UInt32 *totalRoutingCount, Size routingSize, FolderRouting *theRoutings)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetFolderRoutings
			move.w              #$081E,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetFolderRoutings
	ENDIF


; *  InvalidateFolderDescriptorCache()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FoldersLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr InvalidateFolderDescriptorCache(short vRefNum, long dirID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_InvalidateFolderDescriptorCache
			move.w              #$0325,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InvalidateFolderDescriptorCache
	ENDIF


; *  IdentifyFolder()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FoldersLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr IdentifyFolder(short vRefNum, long dirID, FolderType *foldType)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_IdentifyFolder
			move.w              #$051F,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IdentifyFolder
	ENDIF



; *  FolderManagerRegisterNotificationProc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr FolderManagerRegisterNotificationProc(FolderManagerNotificationUPP notificationProc, void *refCon, UInt32 options)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FolderManagerRegisterNotificationProc
			move.w              #$062F,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FolderManagerRegisterNotificationProc
	ENDIF


; *  FolderManagerUnregisterNotificationProc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr FolderManagerUnregisterNotificationProc(FolderManagerNotificationUPP notificationProc, void *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FolderManagerUnregisterNotificationProc
			move.w              #$0430,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FolderManagerUnregisterNotificationProc
	ENDIF


; *  FolderManagerRegisterCallNotificationProcs()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus FolderManagerRegisterCallNotificationProcs(OSType message, void *arg, UInt32 options)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FolderManagerRegisterCallNotificationProcs
			move.w              #$0631,D0
			dc.w            	$A823
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FolderManagerRegisterCallNotificationProcs
	ENDIF

; ******************************
;  MultiUser (At Ease) globals 
; ******************************

;   This structure has been through some evolution since the early days of At Ease 1.0.  The structure
;   has been expanded (and developers should assume that it will continue this way into the future).  Older
;   fields have been obsoleted as the features have changed in newer versions of the code.



;  Some fields in here are really only valid for the network version of Macintosh Manager

MultiUserGestalt		RECORD 0
;     Version 1 fields.
giVersion				 ds.w	1				; offset: $0 (0)		;  structure version: 0 = invalid, 6 = OS 9
giReserved0				 ds.w	1				; offset: $2 (2)		;  [OBSOLETE with v3] giIsActive: if true then At Ease is currently running
giReserved1				 ds.w	1				; offset: $4 (4)		;  [OBSOLETE] if true then auto create alias
giReserved2				 ds.w	1				; offset: $6 (6)		;  [OBSOLETE with v6]  if true then request floppy on new saves
giReserved3				 ds.w	1				; offset: $8 (8)		;  [OBSOLETE] if true then hypercard stacks are shown on Applications panel
giReserved4				 ds		FSSpec			; offset: $A (10)		;  [OBSOLETE with v6] location of At Ease Items folder
;     Version 2 fields.
giDocsVRefNum			 ds.w	1				; offset: $50 (80)		;  vrefnum of user's documents location (only valid if not on floppy)
giDocsDirID				 ds.l	1				; offset: $52 (82)		;  directory id of user's documents folder (only valid if not on floppy)
giForceSaves			 ds.w	1				; offset: $56 (86)		;  true if user is forced to save to their documents folder
giForceOpens			 ds.w	1				; offset: $58 (88)		;  true if user is forced to open from their documents folder
giSetupName				 ds		Str31			; offset: $5A (90)		;  name of current setup
giUserName				 ds		Str31			; offset: $7A (122)		;  name of current user
giFrontAppName			 ds		Str31			; offset: $9A (154)		;  name of the frontmost application
giReserved5				 ds.w	1				; offset: $BA (186)		;  [OBSOLETE with v6] true if user has Go To Finder menu item
giIsOn					 ds.w	1				; offset: $BC (188)		;  true if Multiple Users/Macintosh Manager is on right now
;     Version 3 fields.
;   There were no additional fields for version 3.x
;     Version 4 fields.
giUserLoggedInType		 ds.w	1				; offset: $BE (190)		;  0 = normal user, 1 = workgroup admin, 2 = global admin
giUserEncryptPwd		 ds.b	16				; offset: $C0 (192)		;  encrypted user password (our digest form)
giUserEnvironment		 ds.w	1				; offset: $D0 (208)		;  0 = panels, 1 = normal Finder, 2 = limited/restricted Finder
giReserved6				 ds.l	1				; offset: $D2 (210)		;  [OBSOLETE]
giReserved7				 ds.l	1				; offset: $D6 (214)		;  [OBSOLETE]
giDisableScrnShots		 ds.b	1				; offset: $DA (218)		;  true if screen shots are not allowed
;     Version 5 fields.
giSupportsAsyncFSCalls	 ds.b	1				; offset: $DB (219)		;  Finder uses this to tell if our patches support async trap patches
giPrefsVRefNum			 ds.w	1				; offset: $DC (220)		;  vrefnum of preferences
giPrefsDirID			 ds.l	1				; offset: $DE (222)		;  dirID of the At Ease Items folder on preferences volume
giUserLogInTime			 ds.l	1				; offset: $E2 (226)		;  time in seconds we've been logged in (0 or 1 mean not logged in)
giUsingPrintQuotas		 ds.b	1				; offset: $E6 (230)		;  true if logged in user is using printer quotas
giUsingDiskQuotas		 ds.b	1				; offset: $E7 (231)		;  true if logged in user has disk quotas active
;  Version 6 fields - As of Mac OS 9's "Multiple Users 1.0"
giInSystemAccess		 ds.b	1				; offset: $E8 (232)		;  true if system is in System Access (i.e., owner logged in)
giUserFolderEnabled		 ds.b	1				; offset: $E9 (233)		;  true if FindFolder is redirecting folders (uses giUserName for user)
giReserved8				 ds.w	1				; offset: $EA (234)
giReserved9				 ds.l	1				; offset: $EC (236)
giInLoginScreen			 ds.b	1				; offset: $F0 (240)		;  true if no user has logged in (including owner)
;  May have more fields added in future, so never check for sizeof(GestaltRec)
						 ORG 242
sizeof					 EQU *					; size:   $F2 (242)
						ENDR
; typedef struct MultiUserGestalt *		MultiUserGestaltPtr

; typedef MultiUserGestaltPtr *			MultiUserGestaltHandle



	ENDIF ; __FOLDERS__ 


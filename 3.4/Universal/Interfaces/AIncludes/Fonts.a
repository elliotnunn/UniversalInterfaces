;
;    File:       Fonts.a
;
;    Contains:   Public interface to the Font Manager.
;
;    Version:    Technology: Mac OS
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 1985-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__FONTS__') = 'UNDEFINED' THEN
__FONTS__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__ATSTYPES__') = 'UNDEFINED' THEN
	include 'ATSTypes.a'
	ENDIF
	IF &TYPE('__FILES__') = 'UNDEFINED' THEN
	include 'Files.a'
	ENDIF
	IF &TYPE('__MACERRORS__') = 'UNDEFINED' THEN
	include 'MacErrors.a'
	ENDIF
	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN
	include 'Quickdraw.a'
	ENDIF
	IF &TYPE('__TEXTCOMMON__') = 'UNDEFINED' THEN
	include 'TextCommon.a'
	ENDIF


systemFont						EQU		0
applFont						EQU		1
;  kPlatformDefaultGuiFontID is used in QuickTime 3.0. 
	IF TARGET_OS_MAC THEN

kPlatformDefaultGuiFontID		EQU		1
	ELSE

kPlatformDefaultGuiFontID		EQU		-1
	ENDIF	; TARGET_OS_MAC

commandMark						EQU		17
checkMark						EQU		18
diamondMark						EQU		19
appleMark						EQU		20

propFont						EQU		36864
prpFntH							EQU		36865
prpFntW							EQU		36866
prpFntHW						EQU		36867
fixedFont						EQU		45056
fxdFntH							EQU		45057
fxdFntW							EQU		45058
fxdFntHW						EQU		45059
fontWid							EQU		44208
FMInput					RECORD 0
family					 ds.w	1				; offset: $0 (0)
size					 ds.w	1				; offset: $2 (2)
face					 ds.b	1				; offset: $4 (4)
needBits				 ds.b	1				; offset: $5 (5)
device					 ds.w	1				; offset: $6 (6)
numer					 ds		Point			; offset: $8 (8)
denom					 ds		Point			; offset: $C (12)
sizeof					 EQU *					; size:   $10 (16)
						ENDR
FMOutput				RECORD 0
errNum					 ds.w	1				; offset: $0 (0)
fontHandle				 ds.l	1				; offset: $2 (2)
boldPixels				 ds.b	1				; offset: $6 (6)
italicPixels			 ds.b	1				; offset: $7 (7)
ulOffset				 ds.b	1				; offset: $8 (8)
ulShadow				 ds.b	1				; offset: $9 (9)
ulThick					 ds.b	1				; offset: $A (10)
shadowPixels			 ds.b	1				; offset: $B (11)
extra					 ds.b	1				; offset: $C (12)
ascent					 ds.b	1				; offset: $D (13)
descent					 ds.b	1				; offset: $E (14)
widMax					 ds.b	1				; offset: $F (15)
leading					 ds.b	1				; offset: $10 (16)
curStyle				 ds.b	1				; offset: $11 (17)
numer					 ds		Point			; offset: $12 (18)
denom					 ds		Point			; offset: $16 (22)
sizeof					 EQU *					; size:   $1A (26)
						ENDR
; typedef struct FMOutput *				FMOutputPtr

; typedef FMOutputPtr 					FMOutPtr

FMetricRec				RECORD 0
ascent					 ds.l	1				; offset: $0 (0)		; base line to top
descent					 ds.l	1				; offset: $4 (4)		; base line to bottom
leading					 ds.l	1				; offset: $8 (8)		; leading between lines
widMax					 ds.l	1				; offset: $C (12)		; maximum character width
wTabHandle				 ds.l	1				; offset: $10 (16)		; handle to font width table
sizeof					 EQU *					; size:   $14 (20)
						ENDR
; typedef struct FMetricRec *			FMetricRecPtr

; typedef FMetricRecPtr *				FMetricRecHandle

	IF CALL_NOT_IN_CARBON THEN

; *  InitFonts()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void InitFonts(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InitFonts:	OPWORD	$A8FE
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InitFonts
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON

; *  GetFontName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GetFontName(short familyID, Str255 name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetFontName:	OPWORD	$A8FF
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetFontName
	ENDIF


; *  GetFNum()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GetFNum(ConstStr255Param name, short *familyID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetFNum:	OPWORD	$A900
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetFNum
	ENDIF


; *  RealFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean RealFont(short fontNum, short size)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_RealFont:	OPWORD	$A902
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RealFont
	ENDIF

	IF CALL_NOT_IN_CARBON THEN

; *  SetFontLock()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void SetFontLock(Boolean lockFlag)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetFontLock:	OPWORD	$A903
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetFontLock
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON

; *  FMSwapFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal FMOutPtr FMSwapFont(const FMInput *inRec)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FMSwapFont:	OPWORD	$A901
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMSwapFont
	ENDIF


; *  SetFScaleDisable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetFScaleDisable(Boolean fscaleDisable)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetFScaleDisable:	OPWORD	$A834
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetFScaleDisable
	ENDIF


; *  FontMetrics()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FontMetrics(FMetricRecPtr theMetrics)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FontMetrics:	OPWORD	$A835
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FontMetrics
	ENDIF


; *  SetFractEnable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetFractEnable(Boolean fractEnable)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetFractEnable:	OPWORD	$A814
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetFractEnable
	ENDIF


; *  GetDefFontSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short GetDefFontSize(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetDefFontSize
			dc.w            	$3EB8
			dc.w            	$0BA8
			dc.w            	$6604
			dc.w            	$3EBC
			dc.w            	$000C
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDefFontSize
	ENDIF


; *  IsOutline()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsOutline(Point numer, Point denom)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_IsOutline
			moveq           	#0,D0
			dc.w            	$A854
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsOutline
	ENDIF


; *  SetOutlinePreferred()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetOutlinePreferred(Boolean outlinePreferred)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetOutlinePreferred
			moveq           	#1,D0
			dc.w            	$A854
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetOutlinePreferred
	ENDIF


; *  GetOutlinePreferred()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean GetOutlinePreferred(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetOutlinePreferred
			moveq           	#9,D0
			dc.w            	$A854
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetOutlinePreferred
	ENDIF


; *  OutlineMetrics()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr OutlineMetrics(short byteCount, const void *textPtr, Point numer, Point denom, short *yMax, short *yMin, FixedPtr awArray, FixedPtr lsbArray, RectPtr boundsArray)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_OutlineMetrics
			moveq           	#8,D0
			dc.w            	$A854
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OutlineMetrics
	ENDIF


; *  SetPreserveGlyph()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPreserveGlyph(Boolean preserveGlyph)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetPreserveGlyph
			moveq           	#10,D0
			dc.w            	$A854
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPreserveGlyph
	ENDIF


; *  GetPreserveGlyph()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean GetPreserveGlyph(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetPreserveGlyph
			moveq           	#11,D0
			dc.w            	$A854
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPreserveGlyph
	ENDIF

	IF CALL_NOT_IN_CARBON THEN

; *  FlushFonts()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSErr FlushFonts(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FlushFonts
			moveq           	#12,D0
			dc.w            	$A854
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FlushFonts
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON

; *  GetSysFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short GetSysFont(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetSysFont           &dest=(sp)
			move.w            $0BA6,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetSysFont
	ENDIF


; *  GetAppFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short GetAppFont(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetAppFont           &dest=(sp)
			move.w            $0984,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetAppFont
	ENDIF

; --------------------------------------------------------------------------------------
;   Extended font data functions (available only with Mac OS 8.5 or later)              
; --------------------------------------------------------------------------------------

; *  SetAntiAliasedTextEnabled()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 8.6 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus SetAntiAliasedTextEnabled(Boolean iEnable, SInt16 iMinFontSize)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetAntiAliasedTextEnabled
			moveq           	#17,D0
			dc.w            	$A854
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetAntiAliasedTextEnabled
	ENDIF


; *  IsAntiAliasedTextEnabled()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 8.6 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsAntiAliasedTextEnabled(SInt16 *oMinFontSize)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_IsAntiAliasedTextEnabled
			moveq           	#18,D0
			dc.w            	$A854
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsAntiAliasedTextEnabled
	ENDIF


; *  QDTextBounds()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 8.6 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void QDTextBounds(short byteCount, const void *textAddr, Rect *bounds)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_QDTextBounds
			moveq           	#19,D0
			dc.w            	$A854
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QDTextBounds
	ENDIF


; *  FetchFontInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 8.6 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr FetchFontInfo(SInt16 fontID, SInt16 fontSize, SInt16 fontStyle, FontInfo *info)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_FetchFontInfo
			moveq           	#20,D0
			dc.w            	$A854
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FetchFontInfo
	ENDIF

; --------------------------------------------------------------------------------------
;   Font access and data management functions (available only with Mac OS 9.0 or later) 
; --------------------------------------------------------------------------------------
;  Enumeration 

; *  FMCreateFontFamilyIterator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMCreateFontFamilyIterator(const FMFilter *iFilter, void *iRefCon, OptionBits iOptions, FMFontFamilyIterator *ioIterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMCreateFontFamilyIterator
	ENDIF


; *  FMDisposeFontFamilyIterator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMDisposeFontFamilyIterator(FMFontFamilyIterator *ioIterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMDisposeFontFamilyIterator
	ENDIF


; *  FMResetFontFamilyIterator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMResetFontFamilyIterator(const FMFilter *iFilter, void *iRefCon, OptionBits iOptions, FMFontFamilyIterator *ioIterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMResetFontFamilyIterator
	ENDIF


; *  FMGetNextFontFamily()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetNextFontFamily(FMFontFamilyIterator *ioIterator, FMFontFamily *oFontFamily)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetNextFontFamily
	ENDIF


; *  FMCreateFontIterator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMCreateFontIterator(const FMFilter *iFilter, void *iRefCon, OptionBits iOptions, FMFontIterator *ioIterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMCreateFontIterator
	ENDIF


; *  FMDisposeFontIterator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMDisposeFontIterator(FMFontIterator *ioIterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMDisposeFontIterator
	ENDIF


; *  FMResetFontIterator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMResetFontIterator(const FMFilter *iFilter, void *iRefCon, OptionBits iOptions, FMFontIterator *ioIterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMResetFontIterator
	ENDIF


; *  FMGetNextFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetNextFont(FMFontIterator *ioIterator, FMFont *oFont)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetNextFont
	ENDIF

;  Font families 

; *  FMCreateFontFamilyInstanceIterator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMCreateFontFamilyInstanceIterator(FMFontFamily iFontFamily, FMFontFamilyInstanceIterator *ioIterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMCreateFontFamilyInstanceIterator
	ENDIF


; *  FMDisposeFontFamilyInstanceIterator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMDisposeFontFamilyInstanceIterator(FMFontFamilyInstanceIterator *ioIterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMDisposeFontFamilyInstanceIterator
	ENDIF


; *  FMResetFontFamilyInstanceIterator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMResetFontFamilyInstanceIterator(FMFontFamily iFontFamily, FMFontFamilyInstanceIterator *ioIterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMResetFontFamilyInstanceIterator
	ENDIF


; *  FMGetNextFontFamilyInstance()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetNextFontFamilyInstance(FMFontFamilyInstanceIterator *ioIterator, FMFont *oFont, FMFontStyle *oStyle, FMFontSize *oSize)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetNextFontFamilyInstance
	ENDIF


; *  FMGetFontFamilyFromName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern FMFontFamily FMGetFontFamilyFromName(ConstStr255Param iName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetFontFamilyFromName
	ENDIF


; *  FMGetFontFamilyName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetFontFamilyName(FMFontFamily iFontFamily, Str255 oName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetFontFamilyName
	ENDIF


; *  FMGetFontFamilyTextEncoding()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetFontFamilyTextEncoding(FMFontFamily iFontFamily, TextEncoding *oTextEncoding)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetFontFamilyTextEncoding
	ENDIF


; *  FMGetFontFamilyGeneration()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetFontFamilyGeneration(FMFontFamily iFontFamily, FMGeneration *oGeneration)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetFontFamilyGeneration
	ENDIF

;  Fonts 

; *  FMGetFontFormat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetFontFormat(FMFont iFont, FourCharCode *oFormat)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetFontFormat
	ENDIF


; *  FMGetFontTableDirectory()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetFontTableDirectory(FMFont iFont, ByteCount iLength, void *iBuffer, ByteCount *oActualLength)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetFontTableDirectory
	ENDIF


; *  FMGetFontTable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetFontTable(FMFont iFont, FourCharCode iTag, ByteOffset iOffset, ByteCount iLength, void *iBuffer, ByteCount *oActualLength)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetFontTable
	ENDIF


; *  FMGetFontGeneration()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetFontGeneration(FMFont iFont, FMGeneration *oGeneration)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetFontGeneration
	ENDIF


; *  FMGetFontContainer()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetFontContainer(FMFont iFont, FSSpec *oFontContainer)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetFontContainer
	ENDIF

;  Conversion 

; *  FMGetFontFromFontFamilyInstance()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetFontFromFontFamilyInstance(FMFontFamily iFontFamily, FMFontStyle iStyle, FMFont *oFont, FMFontStyle *oIntrinsicStyle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetFontFromFontFamilyInstance
	ENDIF


; *  FMGetFontFamilyInstanceFromFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMGetFontFamilyInstanceFromFont(FMFont iFont, FMFontFamily *oFontFamily, FMFontStyle *oStyle)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetFontFamilyInstanceFromFont
	ENDIF

;  Activation 

; *  FMActivateFonts()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMActivateFonts(const FSSpec *iFontContainer, const FMFilter *iFilter, void *iRefCon, OptionBits iOptions)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMActivateFonts
	ENDIF


; *  FMDeactivateFonts()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus FMDeactivateFonts(const FSSpec *iFontContainer, const FMFilter *iFilter, void *iRefCon, OptionBits iOptions)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMDeactivateFonts
	ENDIF


; *  FMGetGeneration()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in FontManager 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern FMGeneration FMGetGeneration(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FMGetGeneration
	ENDIF

; typedef FMFontFamily 					FontFamilyID

; typedef FMFontSize 					FontPointSize

; --------------------------------------------------------------------------------------
;  Deprecated constant and type definitions                                             
; --------------------------------------------------------------------------------------
;  The font identifier constants are deprecated; use GetFNum or FMGetFontFamilyFromName
;   to find a font family from a standard QuickDraw name.
;


kFontIDNewYork					EQU		2
kFontIDGeneva					EQU		3
kFontIDMonaco					EQU		4
kFontIDVenice					EQU		5
kFontIDLondon					EQU		6
kFontIDAthens					EQU		7
kFontIDSanFrancisco				EQU		8
kFontIDToronto					EQU		9
kFontIDCairo					EQU		11
kFontIDLosAngeles				EQU		12
kFontIDTimes					EQU		20
kFontIDHelvetica				EQU		21
kFontIDCourier					EQU		22
kFontIDSymbol					EQU		23
kFontIDMobile					EQU		24
;  The following data structures referenced by the low memory global variables of the
;   Font Manager are deprecated on Mac OS X and CarbonLib 1.1. The low memory global
;   variables are not shared between processes and may result in inconsistencies
;   compared to previous releases of the system software. Changes made to the
;   information contained in the low memory global variables, including any
;   indirectly referenced width tables, font family records, and font records, are
;   not reflected in the global state of the Font Manager and may only be accessed
;   through the font access and data management functions of the Font Manager or ATS.
;

WidEntry				RECORD 0
widStyle				 ds.w	1				; offset: $0 (0)		; style entry applies to
sizeof					 EQU *					; size:   $2 (2)
						ENDR
WidTable				RECORD 0
numWidths				 ds.w	1				; offset: $0 (0)		; number of entries - 1
sizeof					 EQU *					; size:   $2 (2)
						ENDR
AsscEntry				RECORD 0
fontSize				 ds.w	1				; offset: $0 (0)
fontStyle				 ds.w	1				; offset: $2 (2)
fontID					 ds.w	1				; offset: $4 (4)		; font resource ID
sizeof					 EQU *					; size:   $6 (6)
						ENDR
FontAssoc				RECORD 0
numAssoc				 ds.w	1				; offset: $0 (0)		; number of entries - 1
sizeof					 EQU *					; size:   $2 (2)
						ENDR
StyleTable				RECORD 0
fontClass				 ds.w	1				; offset: $0 (0)
offset					 ds.l	1				; offset: $2 (2)
reserved				 ds.l	1				; offset: $6 (6)
indexes					 ds.b	48				; offset: $A (10)
sizeof					 EQU *					; size:   $3A (58)
						ENDR
NameTable				RECORD 0
stringCount				 ds.w	1				; offset: $0 (0)
baseFontName			 ds		Str255			; offset: $2 (2)
sizeof					 EQU *					; size:   $102 (258)
						ENDR
KernPair				RECORD 0
kernFirst				 ds.b	1				; offset: $0 (0)		; 1st character of kerned pair
kernSecond				 ds.b	1				; offset: $1 (1)		; 2nd character of kerned pair
kernWidth				 ds.w	1				; offset: $2 (2)		; kerning in 1pt fixed format
sizeof					 EQU *					; size:   $4 (4)
						ENDR
KernEntry				RECORD 0
kernStyle				 ds.w	1				; offset: $0 (0)		; style the entry applies to
kernLength				 ds.w	1				; offset: $2 (2)		; length of this entry
sizeof					 EQU *					; size:   $4 (4)
						ENDR
KernTable				RECORD 0
numKerns				 ds.w	1				; offset: $0 (0)		; number of kerning entries
sizeof					 EQU *					; size:   $2 (2)
						ENDR
WidthTable				RECORD 0
tabData					 ds.l	256				; offset: $0 (0)		; character widths
tabFont					 ds.l	1				; offset: $400 (1024)	; font record used to build table
sExtra					 ds.l	1				; offset: $404 (1028)	; space extra used for table
style					 ds.l	1				; offset: $408 (1032)	; extra due to style
fID						 ds.w	1				; offset: $40C (1036)	; font family ID
fSize					 ds.w	1				; offset: $40E (1038)	; font size request
face					 ds.w	1				; offset: $410 (1040)	; style (face) request
device					 ds.w	1				; offset: $412 (1042)	; device requested
inNumer					 ds		Point			; offset: $414 (1044)	; scale factors requested
inDenom					 ds		Point			; offset: $418 (1048)	; scale factors requested
aFID					 ds.w	1				; offset: $41C (1052)	; actual font family ID for table
fHand					 ds.l	1				; offset: $41E (1054)	; family record used to build up table
usedFam					 ds.b	1				; offset: $422 (1058)	; used fixed point family widths
aFace					 ds.b	1				; offset: $423 (1059)	; actual face produced
vOutput					 ds.w	1				; offset: $424 (1060)	; vertical scale output value
hOutput					 ds.w	1				; offset: $426 (1062)	; horizontal scale output value
vFactor					 ds.w	1				; offset: $428 (1064)	; vertical scale output value
hFactor					 ds.w	1				; offset: $42A (1066)	; horizontal scale output value
aSize					 ds.w	1				; offset: $42C (1068)	; actual size of actual font used
tabSize					 ds.w	1				; offset: $42E (1070)	; total size of table
sizeof					 EQU *					; size:   $430 (1072)
						ENDR
; typedef struct WidthTable *			WidthTablePtr

; typedef WidthTablePtr *				WidthTableHdl

FamRec					RECORD 0
ffFlags					 ds.w	1				; offset: $0 (0)		; flags for family
ffFamID					 ds.w	1				; offset: $2 (2)		; family ID number
ffFirstChar				 ds.w	1				; offset: $4 (4)		; ASCII code of 1st character
ffLastChar				 ds.w	1				; offset: $6 (6)		; ASCII code of last character
ffAscent				 ds.w	1				; offset: $8 (8)		; maximum ascent for 1pt font
ffDescent				 ds.w	1				; offset: $A (10)		; maximum descent for 1pt font
ffLeading				 ds.w	1				; offset: $C (12)		; maximum leading for 1pt font
ffWidMax				 ds.w	1				; offset: $E (14)		; maximum widMax for 1pt font
ffWTabOff				 ds.l	1				; offset: $10 (16)		; offset to width table
ffKernOff				 ds.l	1				; offset: $14 (20)		; offset to kerning table
ffStylOff				 ds.l	1				; offset: $18 (24)		; offset to style mapping table
ffProperty				 ds.w	9				; offset: $1C (28)		; style property info
ffIntl					 ds.w	2				; offset: $2E (46)		; for international use
ffVersion				 ds.w	1				; offset: $32 (50)		; version number
sizeof					 EQU *					; size:   $34 (52)
						ENDR
FontRec					RECORD 0
fontType				 ds.w	1				; offset: $0 (0)		; font type
firstChar				 ds.w	1				; offset: $2 (2)		; ASCII code of first character
lastChar				 ds.w	1				; offset: $4 (4)		; ASCII code of last character
widMax					 ds.w	1				; offset: $6 (6)		; maximum character width
kernMax					 ds.w	1				; offset: $8 (8)		; negative of maximum character kern
nDescent				 ds.w	1				; offset: $A (10)		; negative of descent
fRectWidth				 ds.w	1				; offset: $C (12)		; width of font rectangle
fRectHeight				 ds.w	1				; offset: $E (14)		; height of font rectangle
owTLoc					 ds.w	1				; offset: $10 (16)		; offset to offset/width table
ascent					 ds.w	1				; offset: $12 (18)		; ascent
descent					 ds.w	1				; offset: $14 (20)		; descent
leading					 ds.w	1				; offset: $16 (22)		; leading
rowWords				 ds.w	1				; offset: $18 (24)		; row width of bit image / 2 
sizeof					 EQU *					; size:   $1A (26)
						ENDR
; typedef struct FontRec *				FontRecPtr

; typedef FontRecPtr *					FontRecHdl

; --------------------------------------------------------------------------------------
	IF OLDROUTINENAMES THEN

newYork							EQU		2
geneva							EQU		3
monaco							EQU		4
venice							EQU		5
london							EQU		6
athens							EQU		7
sanFran							EQU		8
toronto							EQU		9
cairo							EQU		11
losAngeles						EQU		12
times							EQU		20
helvetica						EQU		21
courier							EQU		22
symbol							EQU		23
mobile							EQU		24
	ENDIF	; OLDROUTINENAMES
; --------------------------------------------------------------------------------------
	ENDIF ; __FONTS__ 


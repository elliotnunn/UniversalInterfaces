;
;    File:       GXFonts.a
;
;    Contains:   QuickDraw GX font routine interfaces.
;
;    Version:    Technology: Quickdraw GX 1.1
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 1994-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__GXFONTS__') = 'UNDEFINED' THEN
__GXFONTS__ SET 1

	IF &TYPE('__CONDITIONALMACROS__') = 'UNDEFINED' THEN
	include 'ConditionalMacros.a'
	ENDIF
	IF &TYPE('__GXMATH__') = 'UNDEFINED' THEN
	include 'GXMath.a'
	ENDIF
	IF &TYPE('__GXTYPES__') = 'UNDEFINED' THEN
	include 'GXTypes.a'
	ENDIF
	IF &TYPE('__SCALERSTREAMTYPES__') = 'UNDEFINED' THEN
	include 'ScalerStreamTypes.a'
	ENDIF

	IF CALL_NOT_IN_CARBON THEN

; *  GXNewFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFont GXNewFont(gxFontStorageTag storage, gxFontStorageReference reference, gxFontAttribute attributes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXNewFont
			move.w              #$0201,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXNewFont
	ENDIF


; *  GXGetFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFontStorageTag GXGetFont(gxFont fontID, gxFontStorageReference *reference, gxFontAttribute *attributes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetFont
			move.w              #$0202,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetFont
	ENDIF


; *  GXFindFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFont GXFindFont(gxFontStorageTag storage, gxFontStorageReference reference, gxFontAttribute *attributes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXFindFont
			move.w              #$0203,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXFindFont
	ENDIF


; *  GXSetFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern void GXSetFont(gxFont fontID, gxFontStorageTag storage, gxFontStorageReference reference, gxFontAttribute attributes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXSetFont
			move.w              #$0204,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXSetFont
	ENDIF


; *  GXDisposeFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern void GXDisposeFont(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXDisposeFont
			move.w              #$0205,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXDisposeFont
	ENDIF


; *  GXChangedFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern void GXChangedFont(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXChangedFont
			move.w              #$0206,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXChangedFont
	ENDIF


; *  GXGetFontFormat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFontFormatTag GXGetFontFormat(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetFontFormat
			move.w              #$0207,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetFontFormat
	ENDIF


; *  GXGetDefaultFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFont GXGetDefaultFont(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetDefaultFont
			move.w              #$0208,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetDefaultFont
	ENDIF


; *  GXSetDefaultFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFont GXSetDefaultFont(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXSetDefaultFont
			move.w              #$0209,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXSetDefaultFont
	ENDIF


; *  GXFindFonts()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXFindFonts(gxFont familyID, gxFontName name, gxFontPlatform platform, gxFontScript script, gxFontLanguage language, long length, const unsigned char text[], long index, long count, gxFont fonts[])
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXFindFonts
			move.w              #$020A,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXFindFonts
	ENDIF


; *  GXCountFontGlyphs()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXCountFontGlyphs(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXCountFontGlyphs
			move.w              #$020B,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXCountFontGlyphs
	ENDIF


; *  GXCountFontTables()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXCountFontTables(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXCountFontTables
			move.w              #$020C,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXCountFontTables
	ENDIF


; *  GXGetFontTable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXGetFontTable(gxFont fontID, long index, void *tableData, gxFontTableTag *tableTag)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetFontTable
			move.w              #$020D,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetFontTable
	ENDIF


; *  GXFindFontTable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXFindFontTable(gxFont fontID, gxFontTableTag tableTag, void *tableData, long *index)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXFindFontTable
			move.w              #$020E,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXFindFontTable
	ENDIF


; *  GXGetFontTableParts()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXGetFontTableParts(gxFont fontID, long index, long offset, long length, void *tableData, gxFontTableTag *tableTag)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetFontTableParts
			move.w              #$020F,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetFontTableParts
	ENDIF


; *  GXFindFontTableParts()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXFindFontTableParts(gxFont fontID, gxFontTableTag tableTag, long offset, long length, void *tableData, long *index)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXFindFontTableParts
			move.w              #$0210,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXFindFontTableParts
	ENDIF


; *  GXSetFontTable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXSetFontTable(gxFont fontID, long index, gxFontTableTag tableTag, long length, const void *tableData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXSetFontTable
			move.w              #$0211,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXSetFontTable
	ENDIF


; *  GXSetFontTableParts()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXSetFontTableParts(gxFont fontID, long index, gxFontTableTag tableTag, long offset, long oldLength, long newLength, const void *tableData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXSetFontTableParts
			move.w              #$0212,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXSetFontTableParts
	ENDIF


; *  GXDeleteFontTable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXDeleteFontTable(gxFont fontID, long index, gxFontTableTag tableTag)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXDeleteFontTable
			move.w              #$0213,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXDeleteFontTable
	ENDIF


; *  GXCountFontNames()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXCountFontNames(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXCountFontNames
			move.w              #$0214,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXCountFontNames
	ENDIF


; *  GXGetFontName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXGetFontName(gxFont fontID, long index, gxFontName *name, gxFontPlatform *platform, gxFontScript *script, gxFontLanguage *language, unsigned char text[])
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetFontName
			move.w              #$0215,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetFontName
	ENDIF


; *  GXFindFontName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXFindFontName(gxFont fontID, gxFontName name, gxFontPlatform platform, gxFontScript script, gxFontLanguage language, unsigned char text[], long *index)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXFindFontName
			move.w              #$0216,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXFindFontName
	ENDIF


; *  GXSetFontName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXSetFontName(gxFont fontID, gxFontName name, gxFontPlatform platform, gxFontScript script, gxFontLanguage language, long length, const unsigned char text[])
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXSetFontName
			move.w              #$0217,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXSetFontName
	ENDIF


; *  GXDeleteFontName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXDeleteFontName(gxFont fontID, long index, gxFontName name, gxFontPlatform platform, gxFontScript script, gxFontLanguage language)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXDeleteFontName
			move.w              #$0218,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXDeleteFontName
	ENDIF


; *  GXNewFontNameID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFontName GXNewFontNameID(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXNewFontNameID
			move.w              #$0219,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXNewFontNameID
	ENDIF


; *  GXCountFontEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXCountFontEncodings(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXCountFontEncodings
			move.w              #$021A,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXCountFontEncodings
	ENDIF


; *  GXGetFontEncoding()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFontPlatform GXGetFontEncoding(gxFont fontID, long index, gxFontScript *script, gxFontLanguage *language)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetFontEncoding
			move.w              #$021B,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetFontEncoding
	ENDIF


; *  GXFindFontEncoding()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXFindFontEncoding(gxFont fontID, gxFontPlatform platform, gxFontScript script, gxFontLanguage language)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXFindFontEncoding
			move.w              #$021C,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXFindFontEncoding
	ENDIF


; *  GXApplyFontEncoding()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXApplyFontEncoding(gxFont fontID, long index, long *length, const unsigned char text[], long count, unsigned short glyphs[], char was16Bit[])
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXApplyFontEncoding
			move.w              #$021D,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXApplyFontEncoding
	ENDIF


; *  GXCountFontVariations()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXCountFontVariations(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXCountFontVariations
			move.w              #$021E,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXCountFontVariations
	ENDIF


; *  GXFindFontVariation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXFindFontVariation(gxFont fontID, gxFontVariationTag variationTag, Fixed *minValue, Fixed *defaultValue, Fixed *maxValue, gxFontName *name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXFindFontVariation
			move.w              #$021F,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXFindFontVariation
	ENDIF


; *  GXGetFontVariation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFontVariationTag GXGetFontVariation(gxFont fontID, long index, Fixed *minValue, Fixed *defaultValue, Fixed *maxValue, gxFontName *name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetFontVariation
			move.w              #$0220,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetFontVariation
	ENDIF


; *  GXCountFontInstances()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXCountFontInstances(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXCountFontInstances
			move.w              #$0221,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXCountFontInstances
	ENDIF


; *  GXGetFontInstance()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFontName GXGetFontInstance(gxFont fontID, long index, gxFontVariation variation[])
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetFontInstance
			move.w              #$0222,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetFontInstance
	ENDIF


; *  GXSetFontInstance()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXSetFontInstance(gxFont fontID, long index, gxFontName name, const gxFontVariation variation[])
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXSetFontInstance
			move.w              #$0223,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXSetFontInstance
	ENDIF


; *  GXDeleteFontInstance()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXDeleteFontInstance(gxFont fontID, long index, gxFontName name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXDeleteFontInstance
			move.w              #$0224,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXDeleteFontInstance
	ENDIF


; *  GXCountFontDescriptors()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXCountFontDescriptors(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXCountFontDescriptors
			move.w              #$0225,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXCountFontDescriptors
	ENDIF


; *  GXGetFontDescriptor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFontDescriptorTag GXGetFontDescriptor(gxFont fontID, long index, Fixed *descriptorValue)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetFontDescriptor
			move.w              #$0226,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetFontDescriptor
	ENDIF


; *  GXFindFontDescriptor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXFindFontDescriptor(gxFont fontID, gxFontDescriptorTag descriptorTag, Fixed *descriptorValue)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXFindFontDescriptor
			move.w              #$0227,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXFindFontDescriptor
	ENDIF


; *  GXSetFontDescriptor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXSetFontDescriptor(gxFont fontID, long index, gxFontDescriptorTag descriptorTag, Fixed descriptorValue)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXSetFontDescriptor
			move.w              #$0228,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXSetFontDescriptor
	ENDIF


; *  GXDeleteFontDescriptor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXDeleteFontDescriptor(gxFont fontID, long index, gxFontDescriptorTag descriptorTag)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXDeleteFontDescriptor
			move.w              #$0229,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXDeleteFontDescriptor
	ENDIF


; *  GXCountFontFeatures()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXCountFontFeatures(gxFont fontID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXCountFontFeatures
			move.w              #$022A,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXCountFontFeatures
	ENDIF


; *  GXGetFontFeature()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFontName GXGetFontFeature(gxFont fontID, long index, gxFontFeatureFlag *flags, long *settingCount, gxFontFeatureSetting settings[], gxFontFeature *feature)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetFontFeature
			move.w              #$022B,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetFontFeature
	ENDIF


; *  GXFindFontFeature()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern gxFontName GXFindFontFeature(gxFont fontID, gxFontFeature feature, gxFontFeatureFlag *flags, long *settingCount, gxFontFeatureSetting settings[], long *index)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXFindFontFeature
			move.w              #$022C,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXFindFontFeature
	ENDIF


; *  GXGetFontDefaultFeatures()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern long GXGetFontDefaultFeatures(gxFont fontID, gxRunFeature features[])
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXGetFontDefaultFeatures
			move.w              #$0274,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXGetFontDefaultFeatures
	ENDIF


; *  GXFlattenFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern void GXFlattenFont(gxFont source, scalerStream *stream, gxSpoolBlock *block)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GXFlattenFont
			move.w              #$022D,D0
			dc.w            	$A832
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GXFlattenFont
	ENDIF


	ENDIF	; CALL_NOT_IN_CARBON
	ENDIF ; __GXFONTS__ 


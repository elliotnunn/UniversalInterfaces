;
;    File:       InternetConfig.a
;
;    Contains:   Internet Config interfaces
;
;    Version:    Technology: based on IC 2.5 alpha
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 1999-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
; **********************************************************************************************

	IF &TYPE('__INTERNETCONFIG__') = 'UNDEFINED' THEN
__INTERNETCONFIG__ SET 1

	IF &TYPE('__ALIASES__') = 'UNDEFINED' THEN
	include 'Aliases.a'
	ENDIF
	IF &TYPE('__COMPONENTS__') = 'UNDEFINED' THEN
	include 'Components.a'
	ENDIF
	IF &TYPE('__AEDATAMODEL__') = 'UNDEFINED' THEN
	include 'AEDataModel.a'
	ENDIF

; ************************************************************************************************
;  IC error codes
; ***********************************************************************************************



icPrefNotFoundErr				EQU		-666				; preference not found (duh!)  
icPermErr						EQU		-667				; cannot set preference  
icPrefDataErr					EQU		-668				; problem with preference data  
icInternalErr					EQU		-669				; hmm, this is not good  
icTruncatedErr					EQU		-670				; more data was present than was returned  
icNoMoreWritersErr				EQU		-671				; you cannot begin a write session because someone else is already doing it  
icNothingToOverrideErr			EQU		-672				; no component for the override component to capture  
icNoURLErr						EQU		-673				; no URL found  
icConfigNotFoundErr				EQU		-674				; no configuration was found  
icConfigInappropriateErr		EQU		-675				; incorrect manufacturer code  
icProfileNotFoundErr			EQU		-676				; profile not found  
icTooManyProfilesErr			EQU		-677				; too many profiles in database  
; ************************************************************************************************
;  IC versions (not necessarily, but historically, from a component)
; ***********************************************************************************************



kICComponentInterfaceVersion0	EQU		$00000000			; IC >= 1.0  
kICComponentInterfaceVersion1	EQU		$00010000			; IC >= 1.1  
kICComponentInterfaceVersion2	EQU		$00020000			; IC >= 1.2  
kICComponentInterfaceVersion3	EQU		$00030000			; IC >= 2.0  
kICComponentInterfaceVersion4	EQU		$00040000			; IC >= 2.5  
kICComponentInterfaceVersion	EQU		$00040000			; current version number is 4  
; ************************************************************************************************
;  opaque type for preference reference
; ***********************************************************************************************





; ************************************************************************************************
;  a record that specifies a folder, an array of such records, and a pointer to such an array
; ***********************************************************************************************

ICDirSpec				RECORD 0
vRefNum					 ds.w	1				; offset: $0 (0)
dirID					 ds.l	1				; offset: $2 (2)
sizeof					 EQU *					; size:   $6 (6)
						ENDR
ICDirSpecArray			RECORD 0
elements				 ds.b	4 * ICDirSpec.sizeof
sizeof					 EQU *					; size:   $18 (24)
						ENDR


; typedef ICDirSpecArray *				ICDirSpecArrayPtr


; ************************************************************************************************
;  preference attributes type, bit number constants, and mask constants
; ***********************************************************************************************

; typedef UInt32 						ICAttr



kICAttrLockedBit				EQU		0
kICAttrVolatileBit				EQU		1

kICAttrNoChange					EQU		$FFFFFFFF			; pass this to ICSetPref to tell it not to change the attributes  
kICAttrLockedMask				EQU		$00000001
kICAttrVolatileMask				EQU		$00000002
; ************************************************************************************************
;  permissions for use with ICBegin
; ***********************************************************************************************


; typedef UInt8 						ICPerm



icNoPerm						EQU		0
icReadOnlyPerm					EQU		1
icReadWritePerm					EQU		2
; ************************************************************************************************
;  a reference to an instance's current configuration
; ***********************************************************************************************


	IF CALL_NOT_IN_CARBON THEN
ICConfigRef				RECORD 0
manufacturer			 ds.l	1				; offset: $0 (0)
;  other private data follows  
sizeof					 EQU *					; size:   $4 (4)
						ENDR
; typedef struct ICConfigRef *			ICConfigRefPtr

; typedef ICConfigRefPtr *				ICConfigRefHandle


	ENDIF	; CALL_NOT_IN_CARBON
; ************************************************************************************************
;  profile IDs
; ***********************************************************************************************

; typedef long 							ICProfileID

; typedef ICProfileID *					ICProfileIDPtr



kICNilProfileID					EQU		0
; ************************************************************************************************
;  other constants
; ***********************************************************************************************



kICNoUserInteractionBit			EQU		0

kICNoUserInteractionMask		EQU		$00000001

kICFileType						EQU		'ICAp'
kICCreator						EQU		'ICAp'
; ************************************************************************************************
;  Apple event constants
; ***********************************************************************************************



kInternetEventClass				EQU		'GURL'
kAEGetURL						EQU		'GURL'
kAEFetchURL						EQU		'FURL'
keyAEAttaching					EQU		'Atch'
;  AERegistry.i defines a compatible keyAEDestination 


kICEditPreferenceEventClass		EQU		'ICAp'
kICEditPreferenceEvent			EQU		'ICAp'
keyICEditPreferenceDestination	EQU		'dest'
; ************************************************************************************************
;  constants for use with ICGetVersion
; ***********************************************************************************************



kICComponentVersion				EQU		0					; Return a component version, comparable to kICComponentInterfaceVersion  
kICNumVersion					EQU		1					; Return a NumVersion structure  
; ************************************************************************************************
;  types and constants for use with kICDocumentFont, et. al.
; ***********************************************************************************************

ICFontRecord			RECORD 0
size					 ds.w	1				; offset: $0 (0)
face					 ds.b	1				; offset: $2 (2)
pad						 ds.b	1				; offset: $3 (3)
font					 ds		Str255			; offset: $4 (4)
sizeof					 EQU *					; size:   $104 (260)
						ENDR
; typedef struct ICFontRecord *			ICFontRecordPtr

; typedef ICFontRecordPtr *				ICFontRecordHandle


; ************************************************************************************************
;  types and constants for use with kICCharacterSet, et. al.
; ***********************************************************************************************

ICCharTable				RECORD 0
netToMac				 ds.b	256				; offset: $0 (0)
macToNet				 ds.b	256				; offset: $100 (256)
sizeof					 EQU *					; size:   $200 (512)
						ENDR
; typedef struct ICCharTable *			ICCharTablePtr

; typedef ICCharTablePtr *				ICCharTableHandle


; ************************************************************************************************
;  types and constants for use with kICHelper, et. al.
; ***********************************************************************************************

ICAppSpec				RECORD 0
fCreator				 ds.l	1				; offset: $0 (0)
name					 ds		Str63			; offset: $4 (4)
sizeof					 EQU *					; size:   $44 (68)
						ENDR
; typedef struct ICAppSpec *			ICAppSpecPtr

; typedef ICAppSpecPtr *				ICAppSpecHandle

ICAppSpecList			RECORD 0
numberOfItems			 ds.w	1				; offset: $0 (0)
appSpecs				 ds		ICAppSpec		; offset: $2 (2) <-- really an array of length one
sizeof					 EQU *					; size:   $46 (70)
						ENDR
; typedef struct ICAppSpecList *		ICAppSpecListPtr

; typedef ICAppSpecListPtr *			ICAppSpecListHandle


; ************************************************************************************************
;  types and constants for use with kICDownloadFolder, et. al.
; ***********************************************************************************************


	IF ¬ OLDROUTINENAMES THEN
ICFileSpec				RECORD 0
volName					 ds		Str31			; offset: $0 (0)
volCreationDate			 ds.l	1				; offset: $20 (32)
fss						 ds		FSSpec			; offset: $24 (36)
alias					 ds		AliasRecord		; offset: $6A (106)
;  plus extra data, aliasSize 0 means no alias manager present when
;  ICFileSpecification was created
sizeof					 EQU *					; size:   $70 (112)
						ENDR
; typedef struct ICFileSpec *			ICFileSpecPtr

; typedef ICFileSpecPtr *				ICFileSpecHandle

	ELSE
ICFileSpec				RECORD 0
vol_name				 ds		Str31			; offset: $0 (0)
vol_creation_date		 ds.l	1				; offset: $20 (32)
fss						 ds		FSSpec			; offset: $24 (36)
alias					 ds		AliasRecord		; offset: $6A (106)
sizeof					 EQU *					; size:   $70 (112)
						ENDR
; typedef struct ICFileSpec *			ICFileSpecPtr

; typedef ICFileSpecPtr *				ICFileSpecHandle

	ENDIF

kICFileSpecHeaderSize			EQU		106
; ************************************************************************************************
;  types and constants for use with ICMapFilename, et. al.
; ***********************************************************************************************

; typedef long 							ICMapEntryFlags

; typedef short 						ICFixedLength


	IF ¬ OLDROUTINENAMES THEN
ICMapEntry				RECORD 0
totalLength				 ds.w	1				; offset: $0 (0)
fixedLength				 ds.w	1				; offset: $2 (2)
version					 ds.w	1				; offset: $4 (4)
fileType				 ds.l	1				; offset: $6 (6)
fileCreator				 ds.l	1				; offset: $A (10)
postCreator				 ds.l	1				; offset: $E (14)
flags					 ds.l	1				; offset: $12 (18)
;  variable part starts here
extension				 ds		Str255			; offset: $16 (22)
creatorAppName			 ds		Str255			; offset: $116 (278)
postAppName				 ds		Str255			; offset: $216 (534)
MIMEType				 ds		Str255			; offset: $316 (790)
entryName				 ds		Str255			; offset: $416 (1046)
sizeof					 EQU *					; size:   $516 (1302)
						ENDR
; typedef struct ICMapEntry *			ICMapEntryPtr

; typedef ICMapEntryPtr *				ICMapEntryHandle


	ELSE
ICMapEntry				RECORD 0
total_length			 ds.w	1				; offset: $0 (0)
fixed_length			 ds.w	1				; offset: $2 (2)
version					 ds.w	1				; offset: $4 (4)
file_type				 ds.l	1				; offset: $6 (6)
file_creator			 ds.l	1				; offset: $A (10)
post_creator			 ds.l	1				; offset: $E (14)
flags					 ds.l	1				; offset: $12 (18)
extension				 ds		Str255			; offset: $16 (22)
creator_app_name		 ds		Str255			; offset: $116 (278)
post_app_name			 ds		Str255			; offset: $216 (534)
MIME_type				 ds		Str255			; offset: $316 (790)
entry_name				 ds		Str255			; offset: $416 (1046)
sizeof					 EQU *					; size:   $516 (1302)
						ENDR
; typedef struct ICMapEntry *			ICMapEntryPtr

; typedef ICMapEntryPtr *				ICMapEntryHandle

	ENDIF

kICMapFixedLength				EQU		22					; number in fixedLength field

kICMapBinaryBit					EQU		0					; file should be transfered in binary as opposed to text mode
kICMapResourceForkBit			EQU		1					; the resource fork of the file is significant
kICMapDataForkBit				EQU		2					; the data fork of the file is significant
kICMapPostBit					EQU		3					; post process using post fields
kICMapNotIncomingBit			EQU		4					; ignore this mapping for incoming files
kICMapNotOutgoingBit			EQU		5					; ignore this mapping for outgoing files

kICMapBinaryMask				EQU		$00000001			; file should be transfered in binary as opposed to text mode
kICMapResourceForkMask			EQU		$00000002			; the resource fork of the file is significant
kICMapDataForkMask				EQU		$00000004			; the data fork of the file is significant
kICMapPostMask					EQU		$00000008			; post process using post fields
kICMapNotIncomingMask			EQU		$00000010			; ignore this mapping for incoming files
kICMapNotOutgoingMask			EQU		$00000020			; ignore this mapping for outgoing files
; ************************************************************************************************
;  types and constants for use with kICServices, et. al.
; ***********************************************************************************************

; typedef short 						ICServiceEntryFlags

ICServiceEntry			RECORD 0
name					 ds		Str255			; offset: $0 (0)
port					 ds.w	1				; offset: $100 (256)
flags					 ds.w	1				; offset: $102 (258)
sizeof					 EQU *					; size:   $104 (260)
						ENDR
; typedef struct ICServiceEntry *		ICServiceEntryPtr

; typedef ICServiceEntryPtr *			ICServiceEntryHandle



kICServicesTCPBit				EQU		0
kICServicesUDPBit				EQU		1					; both bits can be set, which means the service is both TCP and UDP, eg daytime

kICServicesTCPMask				EQU		$00000001
kICServicesUDPMask				EQU		$00000002			; both bits can be set, which means the service is both TCP and UDP, eg daytime
ICServices				RECORD 0
count					 ds.w	1				; offset: $0 (0)
services				 ds		ICServiceEntry ; offset: $2 (2) <-- really an array of length one
sizeof					 EQU *					; size:   $106 (262)
						ENDR
; typedef struct ICServices *			ICServicesPtr

; typedef ICServicesPtr *				ICServicesHandle


; ************************************************************************************************
;  default file name, for internal use, overridden by a component resource
; ***********************************************************************************************


	IF CALL_NOT_IN_CARBON THEN
; #define kICDefaultFileName "\pInternet Preferences"
	ENDIF	; CALL_NOT_IN_CARBON
; ************************************************************************************************
;  keys
; ***********************************************************************************************

;  
;    key reserved for use by Internet Config 
;

; #define kICReservedKey "\pkICReservedKey"
; 
;    STR# -- formatted, list of Archie servers  
;

; #define kICArchieAll "\pArchieAll"
; 
;    PString -- formatted, preferred Archie server   
;

; #define kICArchiePreferred "\pArchiePreferred"
; 
;    ICCharTable -- Mac-to-Net and Net-to-Mac character translation   
;

; #define kICCharacterSet "\pCharacterSet"
; 
;    ICFontRecord -- font used for proportional text   
;

; #define kICDocumentFont "\pDocumentFont"
; 
;    ICFileSpec -- where to put newly downloaded files   
;

; #define kICDownloadFolder "\pDownloadFolder"
; 
;    PString -- user@host.domain, email address of user, ie return address   
;

; #define kICEmail "\pEmail"
; 
;    PString -- host.domain, default FTP server   
;

; #define kICFTPHost "\pFTPHost"
; 
;    PString -- second level FTP proxy authorisation   
;

; #define kICFTPProxyAccount "\pFTPProxyAccount"
; 
;    PString -- host.domain   
;

; #define kICFTPProxyHost "\pFTPProxyHost"
; 
;    PString -- scrambled, password for FTPProxyUser   
;

; #define kICFTPProxyPassword "\pFTPProxyPassword"
; 
;    PString -- first level FTP proxy authorisation   
;

; #define kICFTPProxyUser "\pFTPProxyUser"
; 
;    PString -- host.domain, default finger server   
;

; #define kICFingerHost "\pFingerHost"
; 
;    PString -- host.domain, default Gopher server   
;

; #define kICGopherHost "\pGopherHost"
; 
;    PString -- host.domain, see note in Prog Docs   
;

; #define kICGopherProxy "\pGopherProxy"
; 
;    PString -- host.domain   
;

; #define kICHTTPProxyHost "\pHTTPProxyHost"
; 
;    ICAppSpec -- helpers for URL schemes   
;

; #define kICHelper "\pHelper•"
; 
;    PString -- description for URL scheme   
;

; #define kICHelperDesc "\pHelperDesc•"
; 
;    ICAppSpecList -- list of common helpers for URL schemes   
;

; #define kICHelperList "\pHelperList•"
; 
;    PString -- host.domain, Internet Relay Chat server   
;

; #define kICIRCHost "\pIRCHost"
; 
;    STR# -- formatted, list of Info-Mac servers   
;

; #define kICInfoMacAll "\pInfoMacAll"
; 
;    PString -- formatted, preferred Info-Mac server   
;

; #define kICInfoMacPreferred "\pInfoMacPreferred"
; 
;    PString -- string LDAP thing   
;

; #define kICLDAPSearchbase "\pLDAPSearchbase"
; 
;    PString -- host.domain   
;

; #define kICLDAPServer "\pLDAPServer"
; 
;    ICFontRecord -- font used for lists of items (eg news article lists)   
;

; #define kICListFont "\pListFont"
; 
;    PString -- host for MacSearch queries   
;

; #define kICMacSearchHost "\pMacSearchHost"
; 
;    PString -- user@host.domain, account from which to fetch mail   
;

; #define kICMailAccount "\pMailAccount"
; 
;    TEXT -- extra headers for mail messages   
;

; #define kICMailHeaders "\pMailHeaders"
; 
;    PString -- scrambled, password for MailAccount   
;

; #define kICMailPassword "\pMailPassword"
; 
;    ICMapEntries -- file type mapping, see documentation   
;

; #define kICMapping "\pMapping"
; 
;    PString -- host.domain, NNTP server   
;

; #define kICNNTPHost "\pNNTPHost"
; 
;    PString -- host.domain, Network Time Protocol (NTP)   
;

; #define kICNTPHost "\pNTPHost"
; 
;    Boolean   
;

; #define kICNewMailDialog "\pNewMailDialog"
; 
;    Boolean -- how to announce new mail   
;

; #define kICNewMailFlashIcon "\pNewMailFlashIcon"
; 
;    Boolean   
;

; #define kICNewMailPlaySound "\pNewMailPlaySound"
; 
;    PString   
;

; #define kICNewMailSoundName "\pNewMailSoundName"
; 
;    PString -- scrambled, password for NewsAuthUsername   
;

; #define kICNewsAuthPassword "\pNewsAuthPassword"
; 
;    PString -- user name for authorised news servers   
;

; #define kICNewsAuthUsername "\pNewsAuthUsername"
; 
;    TEXT -- extra headers for news messages   
;

; #define kICNewsHeaders "\pNewsHeaders"
; 
;    STR# -- list of domains not to be proxied   
;

; #define kICNoProxyDomains "\pNoProxyDomains"
; 
;    PString -- for X-Organization string   
;

; #define kICOrganization "\pOrganization"
; 
;    PString -- host.domain, default Ph server   
;

; #define kICPhHost "\pPhHost"
; 
;    TEXT -- default response for finger servers   
;

; #define kICPlan "\pPlan"
; 
;    ICFontRecord -- font used to print ScreenFont   
;

; #define kICPrinterFont "\pPrinterFont"
; 
;    PString -- used to quote responses in news and mail   
;

; #define kICQuotingString "\pQuotingString"
; 
;    PString -- real name of user   
;

; #define kICRealName "\pRealName"
; 
;    PString -- RTSP Proxy Host
;

; #define kICRTSPProxyHost "\pRTSPProxyHost"
; 
;    PString -- host.domain, SMTP server   
;

; #define kICSMTPHost "\pSMTPHost"
; 
;    ICFontRecord -- font used for monospaced text (eg news articles)   
;

; #define kICScreenFont "\pScreenFont"
; 
;    ICServices -- TCP and IP port-to-name mapping   
;

; #define kICServices "\pServices"
; 
;    TEXT -- append to news and mail messages   
;

; #define kICSignature "\pSignature"
; 
;    TEXT -- preferred mailing address   
;

; #define kICSnailMailAddress "\pSnailMailAddress"
; 
;    PString -- host.domain, remember that host.domain format allows ":port" and " port"  
;

; #define kICSocksHost "\pSocksHost"
; 
;    PString -- host.domain, default Telnet address   
;

; #define kICTelnetHost "\pTelnetHost"
; 
;    STR# -- formatted, list of UMich servers   
;

; #define kICUMichAll "\pUMichAll"
; 
;    PString -- formatted, preferred UMich server   
;

; #define kICUMichPreferred "\pUMichPreferred"
; 
;    Boolean   
;

; #define kICUseFTPProxy "\pUseFTPProxy"
; 
;    Boolean   
;

; #define kICUseGopherProxy "\pUseGopherProxy"
; 
;    Boolean   
;

; #define kICUseHTTPProxy "\pUseHTTPProxy"
; 
;    Boolean -- use PASV command for FTP transfers   
;

; #define kICUsePassiveFTP "\pUsePassiveFTP"
; 
;    Boolean
;

; #define kICUseRTSPProxy "\pUseRTSPProxy"
; 
;    Boolean   
;

; #define kICUseSocks "\pUseSocks"
; 
;    PString -- no idea   
;

; #define kICWAISGateway "\pWAISGateway"
; 
;    PString -- URL, users default WWW page   
;

; #define kICWWWHomePage "\pWWWHomePage"
; 
;    RGBColor -- background colour for web pages   
;

; #define kICWebBackgroundColour "\pWebBackgroundColour"
; 
;    RGBColor -- colour for read links   
;

; #define kICWebReadColor "\p646F6777•WebReadColor"
; 
;    PString -- URL, users default search page   
;

; #define kICWebSearchPagePrefs "\pWebSearchPagePrefs"
; 
;    RGBColor -- colour for normal text   
;

; #define kICWebTextColor "\pWebTextColor"
; 
;    Boolean -- whether to underline links   
;

; #define kICWebUnderlineLinks "\p646F6777•WebUnderlineLinks"
; 
;    RGBColor -- colour for unread links   
;

; #define kICWebUnreadColor "\p646F6777•WebUnreadColor"
; 
;    PString -- host.domain, default whois server   
;

; #define kICWhoisHost "\pWhoisHost"

; ************************************************************************************************
;
;      FUNCTIONS
;
;      What do the annotations after each API mean?
;      --------------------------------------------
;
;      [r1] Requires IC 1.1 or higher.
;      [r2] Requires IC 1.2 or higher.
;      [r3] Requires IC 2.0 or higher.
;      [r4] Requires IC 2.5 or higher.
;      
;      IMPORTANT:
;
;      In IC 2.5, instances automatically use the default configuration.
;      You no longer need to configure an instance explicitly, except
;      if your code might run with an older version of IC.  So the following
;      notes only apply to IC 2.0 and earlier.
;
;      [c1]  You must have specified a configuration before calling this routine.
;      
;      [c2]  You must have specified the default configuration before calling this
;            routine.
;      
;      [c3]  You do not need to specify a configuration before calling this routine.
;      
;      [b1]  You must be inside a Begin/End pair when calling this routine.
;      
;      [b2]  You must be inside a Begin/End read/write pair when calling this routine.
;      
;      [b3]  You do not need to be inside a Begin/End pair when calling this routine.
;      
;      [b4]  If you are getting or setting multiple preferences, you should make this
;            call inside a Begin/End pair. If you do not make this call inside a Begin/End
;            pair, the call will automatically do it for you.
;      
;      [b5]  It is illegal to call this routine inside a Begin/End pair.
;
; ***********************************************************************************************


;  ***** Starting Up and Shutting Down *****  

; *  ICStart()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICStart(ICInstance *inst, OSType signature)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICStart
	ENDIF

;  Call this at application initialisation. Set signature to a value
;   * which has been regsitered with DTS to allow for future expansion
;   * of the IC system. Returns inst as a connection to the IC system.
;   


; *  ICStop()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICStop(ICInstance inst)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICStop
	ENDIF

;  [b5] 
;   * Call this at application initialisation, after which inst
;   * is no longer valid connection to IC.
;   


; *  ICGetVersion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetVersion(ICInstance inst, long whichVersion, UInt32 *version)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetVersion
			move.l              #$00080032,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetVersion
	ENDIF

;  [r4] [c3] [b3] 
;   * Returns the version of Internet Config.  Pass kICComponentVersion
;   * to get the version as previously returned by GetComponenVerson.
;   * Pass kICNumVersion to get a NumVersion structure.
;   

;  ***** Specifying a Configuration *****  
	IF CALL_NOT_IN_CARBON THEN

; *  ICFindConfigFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICFindConfigFile(ICInstance inst, short count, ICDirSpecArrayPtr folders)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICFindConfigFile
			move.l              #$00060002,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICFindConfigFile
	ENDIF

;  [b5] 
;   * Call to configure this connection to IC.
;   * Set count as the number of valid elements in folders.
;   * Set folders to a pointer to the folders to search.
;   * Setting count to 0 and folders to nil is OK.
;   * Searches the specified folders and then the Preferences folder
;   * in a unspecified manner.
;   


; *  ICFindUserConfigFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICFindUserConfigFile(ICInstance inst, ICDirSpec *where)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICFindUserConfigFile
			move.l              #$0004000E,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICFindUserConfigFile
	ENDIF

;  [r1] [b5] 
;   * Similar to ICFindConfigFile except that it only searches the folder
;   * specified in where.  If the input parameters are valid the routine
;   * will always successful configure the instance, creating an
;   * empty configuration if necessary
;   * For use with double-clickable preference files.
;   


; *  ICGeneralFindConfigFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICGeneralFindConfigFile(ICInstance inst, Boolean searchPrefs, Boolean canCreate, short count, ICDirSpecArrayPtr folders)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGeneralFindConfigFile
			move.l              #$000A001E,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGeneralFindConfigFile
	ENDIF

;  [r2] [b5] 
;   * Call to configure this connection to IC.
;   * This routine acts as a more general replacement for
;   * ICFindConfigFile and ICFindUserConfigFile.
;   * Set search_prefs to true if you want it to search the preferences folder.
;   * Set can_create to true if you want it to be able to create a new config.
;   * Set count as the number of valid elements in folders.
;   * Set folders to a pointer to the folders to search.
;   * Setting count to 0 and folders to nil is OK.
;   * Searches the specified folders and then optionally the Preferences folder
;   * in a unspecified manner.
;   


; *  ICChooseConfig()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICChooseConfig(ICInstance inst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICChooseConfig
			move.l              #$00000021,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICChooseConfig
	ENDIF

;  [r2] [b5] 
;   * Requests the user to choose a configuration, typically using some
;   * sort of modal dialog. If the user cancels the dialog the configuration
;   * state will be unaffected.
;   


; *  ICChooseNewConfig()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICChooseNewConfig(ICInstance inst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICChooseNewConfig
			move.l              #$00000022,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICChooseNewConfig
	ENDIF

;  [r2] [b5] 
;   * Requests the user to create a new configuration, typically using some
;   * sort of modal dialog. If the user cancels the dialog the configuration
;   * state will be unaffected.
;   

	ENDIF	; CALL_NOT_IN_CARBON

; *  ICGetConfigName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetConfigName(ICInstance inst, Boolean longname, Str255 name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetConfigName
			move.l              #$00060023,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetConfigName
	ENDIF

;  [r2] [c1] [b3] 
;   * Returns a string that describes the current configuration at a user
;   * level. Set longname to true if you want a long name, up to 255
;   * characters, or false if you want a short name, typically about 32
;   * characters.
;   * The returned string is for user display only. If you rely on the
;   * exact format of it, you will conflict with any future IC
;   * implementation that doesn't use explicit preference files.
;   

	IF CALL_NOT_IN_CARBON THEN

; *  ICGetConfigReference()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICGetConfigReference(ICInstance inst, ICConfigRefHandle ref)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetConfigReference
			move.l              #$0004001F,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetConfigReference
	ENDIF

;  [r2] [c1] [b3] 
;   * Returns a self-contained reference to the instance's current
;   * configuration.
;   * ref must be a valid non-nil handle and it will be resized to fit the
;   * resulting data.
;   


; *  ICSetConfigReference()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICSetConfigReference(ICInstance inst, ICConfigRefHandle ref, long flags)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICSetConfigReference
			move.l              #$00080020,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICSetConfigReference
	ENDIF

;  [r2] [b5] 
;   * Reconfigures the instance using a configuration reference that was
;   * got using ICGetConfigReference reference. Set the
;   * icNoUserInteraction_bit in flags if you require that this routine
;   * not present a modal dialog. Other flag bits are reserved and should
;   * be set to zero.
;   * ref must not be nil.
;   

;  ***** Private Routines *****
; * 
; * If you are calling these routines, you are most probably doing something
; * wrong.  Please read the documentation for more details.
;  


; *  ICSpecifyConfigFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICSpecifyConfigFile(ICInstance inst, FSSpec *config)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICSpecifyConfigFile
			move.l              #$00040003,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICSpecifyConfigFile
	ENDIF

;  [b5] 
;   * For use only by the IC application.
;   * If you call this routine yourself, you will conflict with any
;   * future IC implementation that doesn't use explicit preference files.
;   


; *  ICRefreshCaches()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICRefreshCaches(ICInstance inst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICRefreshCaches
			move.l              #$0000002F,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICRefreshCaches
	ENDIF

;  [r3] [c1] [b3] 
;   * For use only by the IC application.
;   * If you call this routine yourself, you will conflict with any
;   * future IC implementation that doesn't use explicit preference files.
;   

;  ***** Getting Information *****  
	ENDIF	; CALL_NOT_IN_CARBON

; *  ICGetSeed()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetSeed(ICInstance inst, long *seed)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetSeed
			move.l              #$00040004,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetSeed
	ENDIF

;  [c3] [b3] 
;   * Returns the current seed for the IC prefs database.
;   * This seed changes each time a non-volatile preference is changed.
;   * You can poll this to determine if any cached preferences change.
;   


; *  ICGetPerm()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetPerm(ICInstance inst, ICPerm *perm)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetPerm
			move.l              #$0004000D,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetPerm
	ENDIF

;  [c3] [b3] 
;   * Returns the access permissions currently associated with this instance.
;   * While applications normally know what permissions they have,
;   * this routine is designed for use by override components.
;   

	IF CALL_NOT_IN_CARBON THEN

; *  ICDefaultFileName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICDefaultFileName(ICInstance inst, Str63 name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICDefaultFileName
			move.l              #$0004000B,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICDefaultFileName
	ENDIF

;  [c3] [b3] 
;   * Returns the default file name for IC preference files.
;   * Applications should never need to call this routine.
;   * If you rely on information returned by this routine yourself,
;   * you may conflict with any future IC implementation that doesn't use
;   * explicit preference files.
;   * The component calls this routine to set up the default IC file name.
;   * This allows this operation to be intercepted by a component that has
;   * captured us. It currently gets it from the component resource file.
;   * The glue version is hardwired to "Internet Preferences".
;   


; *  ICGetComponentInstance()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICGetComponentInstance(ICInstance inst, ComponentInstance *componentInst)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetComponentInstance
	ENDIF

;  [c3] [b3] 
;   * Returns noErr and the connection to the IC component,
;   * if we're using the component.
;   * Returns badComponenInstance and nil if we're operating with glue.
;   

;  ***** Reading and Writing Preferences *****  
	ENDIF	; CALL_NOT_IN_CARBON

; *  ICBegin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICBegin(ICInstance inst, ICPerm perm)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICBegin
			move.l              #$00020005,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICBegin
	ENDIF

;  [c1] [b5] 
;   * Starting reading or writing multiple preferences.
;   * A call to this must be balanced by a call to ICEnd.
;   * Do not call WaitNextEvent between these calls.
;   * The perm specifies whether you intend to read or read/write.
;   * Only one writer is allowed per instance.
;   * Note that this may open resource files that are not closed
;   * until you call ICEnd.
;   


; *  ICGetPref()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetPref(ICInstance inst, ConstStr255Param key, ICAttr *attr, void *buf, long *size)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetPref
			move.l              #$00100006,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetPref
	ENDIF

;  [c1] [b4] 
;   * Reads the preference specified by key from the IC database to the
;   * buffer pointed to by buf and size.
;   * key must not be the empty string.
;   * If buf is nil then no data is returned.
;   * size must be non-negative.
;   * attr and size are always set on return. On errors (except icTruncatedErr)
;   * attr is set to ICattr_no_change and size is set to 0.
;   * size is the actual size of the data.
;   * attr is set to the attributes associated with the preference.
;   * If this routine returns icTruncatedErr then the other returned
;   * values are valid except that only the first size bytes have been
;   * return. size is adjusted to reflect the true size of the preference.
;   * Returns icPrefNotFound if there is no preference for the key.
;   


; *  ICSetPref()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICSetPref(ICInstance inst, ConstStr255Param key, ICAttr attr, const void *buf, long size)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICSetPref
			move.l              #$00100007,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICSetPref
	ENDIF

;  [c1] [b4] 
;   * Sets the preference specified by key from the IC database to the
;   * value pointed to by buf and size.
;   * key must not be the empty string.
;   * size must be non-negative. 
;   * If buf is nil then the preference value is not set and size is ignored.
;   * If buf is not nil then the preference value is set to the size
;   * bytes pointed to by buf.
;   * If attr is ICattr_no_change then the preference attributes are not set.
;   * Otherwise the preference attributes are set to attr.
;   * Returns icPermErr if the previous ICBegin was passed icReadOnlyPerm.
;   * Returns icPermErr if current attr is locked, new attr is locked and buf <> nil.
;   


; *  ICFindPrefHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICFindPrefHandle(ICInstance inst, ConstStr255Param key, ICAttr *attr, Handle prefh)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICFindPrefHandle
			move.l              #$000C0024,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICFindPrefHandle
	ENDIF

;  [r2] [c1] [b4] 
;   * This routine effectively replaces ICGetPrefHandle.
;   * Reads the preference specified by key from the IC database into
;   * a handle, prefh.
;   * key must not be the empty string.
;   * attr is set to the attributes associated with the preference.
;   * You must set prefh to a non-nil handle before calling this routine.
;   * If the preference does not exist, icPrefNotFoundErr is returned.
;   


; *  ICGetPrefHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetPrefHandle(ICInstance inst, ConstStr255Param key, ICAttr *attr, Handle *prefh)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetPrefHandle
			move.l              #$000C001A,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetPrefHandle
	ENDIF

;  [r1] [c1] [b4] 
;   * This routine is now obsolete. Use ICFindPrefHandle instead.
;   * Reads the preference specified by key from the IC database into
;   * a newly created handle, prefh.
;   * key must not be the empty string.
;   * attr is set to the attributes associated with the preference.
;   * The incoming value of prefh is ignored.
;   * A new handle is created in the current heap and returned in prefh.
;   * If the routine returns an error, prefh is set to nil.
;   * If the preference does not exist, no error is returned and prefh is set
;   * to an empty handle.
;   


; *  ICSetPrefHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICSetPrefHandle(ICInstance inst, ConstStr255Param key, ICAttr attr, Handle prefh)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICSetPrefHandle
			move.l              #$000C001B,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICSetPrefHandle
	ENDIF

;  [r1] [c1] [b4] 
;   * Sets the preference specified by key from the IC database to the
;   * value contained in prefh.
;   * key must not be the empty string.
;   * If prefh is nil then the preference value is not set.
;   * If buf is not nil then the preference value is set to the data
;   * contained in it.
;   * If attr is ICattr_no_change then the preference attributes are not set.
;   * Otherwise the preference attributes are set to attr.
;   * Returns icPermErr if the previous ICBegin was passed icReadOnlyPerm.
;   * Returns icPermErr if current attr is locked, new attr is locked and prefh <> nil.
;   


; *  ICCountPref()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICCountPref(ICInstance inst, long *count)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCountPref
			move.l              #$00040008,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCountPref
	ENDIF

;  [c1] [b1] 
;   * Counts the total number of preferences.
;   * If the routine returns an error, count is set to 0.
;   


; *  ICGetIndPref()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetIndPref(ICInstance inst, long index, Str255 key)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetIndPref
			move.l              #$00080009,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetIndPref
	ENDIF

;  [c1] [b1] 
;   * Returns the key of the index'th preference.
;   * index must be positive.
;   * Returns icPrefNotFoundErr if index is greater than the total number of preferences.
;   * If the routine returns an error, key is undefined.
;   


; *  ICDeletePref()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICDeletePref(ICInstance inst, ConstStr255Param key)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICDeletePref
			move.l              #$0004000C,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICDeletePref
	ENDIF

;  [c1] [b2] 
;   * Deletes the preference specified by key.
;   * key must not be the empty string.
;   * Returns icPrefNotFound if the preference specified by key is not present.
;   


; *  ICEnd()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICEnd(ICInstance inst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICEnd
			move.l              #$0000000A,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICEnd
	ENDIF

;  [c1] [b1] 
;   * Terminates a preference session, as started by ICBegin.
;   * You must have called ICBegin before calling this routine.
;   


; *  ICGetDefaultPref()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetDefaultPref(ICInstance inst, ConstStr255Param key, Handle prefH)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetDefaultPref
			move.l              #$00080031,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetDefaultPref
	ENDIF

;  [r4] [c3] [b5] 
;   * Returns a default preference value for the specified key.  You
;   * must pass in a valid prefH, which is resized to fit the data.
;   

;  ***** User Interface Stuff *****  

; *  ICEditPreferences()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICEditPreferences(ICInstance inst, ConstStr255Param key)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICEditPreferences
			move.l              #$0004000F,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICEditPreferences
	ENDIF

;  [r1] [c1] [b3] 
;   * Instructs IC to display the user interface associated with editing
;   * preferences and focusing on the preference specified by key.
;   * If key is the empty string then no preference should be focused upon.
;   * You must have specified a configuration before calling this routine.
;   * You do not need to call ICBegin before calling this routine.
;   * In the current implementation this launches the IC application
;   * (or brings it to the front) and displays the window containing
;   * the preference specified by key.
;   * It may have a radically different implementation in future
;   * IC systems.
;   

;  ***** URL Handling *****  

; *  ICLaunchURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICLaunchURL(ICInstance inst, ConstStr255Param hint, const void *data, long len, long *selStart, long *selEnd)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICLaunchURL
			move.l              #$00140011,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICLaunchURL
	ENDIF

;  [r1] [c1] [b3] 
;   * Parses a URL out of the specified text and feeds it off to the
;   * appropriate helper.
;   * hint indicates the default scheme for URLs of the form "name@address".
;   * If hint is the empty string then URLs of that form are not allowed.
;   * data points to the start of the text. It must not be nil.
;   * len indicates the length of the text. It must be non-negative.
;   * selStart and selEnd should be passed in as the current selection of
;   * the text. This selection is given in the same manner as TextEdit,
;   * ie if selStart = selEnd then there is no selection only an insertion
;   * point. Also selStart ≤ selEnd and 0 ≤ selStart ≤ len and 0 ≤ selEnd ≤ len.
;   * selStart and selEnd are returned as the bounds of the URL. If the
;   * routine returns an error then these new boundaries may be
;   * invalid but they will be close.
;   * The URL is parsed out of the text and passed off to the appropriate
;   * helper using the GURL AppleEvent.
;   


; *  ICParseURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICParseURL(ICInstance inst, ConstStr255Param hint, const void *data, long len, long *selStart, long *selEnd, Handle url)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICParseURL
			move.l              #$00180010,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICParseURL
	ENDIF

;  [r1] [c1] [b3] 
;   * Parses a URL out of the specified text and returns it in a canonical form
;   * in a handle.
;   * hint indicates the default scheme for URLs of the form "name@address".
;   * If hint is the empty string then URLs of that form are not allowed.
;   * data points to the start of the text. It must not be nil.
;   * len indicates the length of the text. It must be non-negative.
;   * selStart and selEnd should be passed in as the current selection of
;   * the text. This selection is given in the same manner as TextEdit,
;   * ie if selStart = selEnd then there is no selection only an insertion
;   * point. Also selStart ≤ selEnd and 0 ≤ selStart ≤ len and 0 ≤ selEnd ≤ len.
;   * selStart and selEnd are returned as the bounds of the URL. If the
;   * routine returns an error then these new boundaries may be
;   * invalid but they will be close.
;   * The incoming url handle must not be nil.  The resulting URL is normalised
;   * and copied into the url handle, which is resized to fit.
;   


; *  ICCreateGURLEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICCreateGURLEvent(ICInstance inst, OSType helperCreator, Handle urlH, AppleEvent *theEvent)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCreateGURLEvent
			move.l              #$000C0033,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCreateGURLEvent
	ENDIF

;  [r4] [c1] [b3] 
;   * Creates a GURL Apple event, targetted at the application whose creator
;   * code is helperCreator, with a direct object containing the URL text from urlH.
;   


; *  ICSendGURLEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICSendGURLEvent(ICInstance inst, AppleEvent *theEvent)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICSendGURLEvent
			move.l              #$00040034,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICSendGURLEvent
	ENDIF

;  [r4] [c1] [b3] 
;   * Sends theEvent to the target application.
;   

;  ***** Mappings Routines *****
; * 
; * Routines for interrogating mappings database.
; * 
; * ----- High Level Routines -----
;  


; *  ICMapFilename()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICMapFilename(ICInstance inst, ConstStr255Param filename, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICMapFilename
			move.l              #$00080018,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICMapFilename
	ENDIF

;  [r1] [c1] [b4] 
;   * Takes the name of an incoming file and returns the most appropriate
;   * mappings database entry, based on its extension.
;   * filename must not be the empty string.
;   * Returns icPrefNotFoundErr if no suitable entry is found.
;   


; *  ICMapTypeCreator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICMapTypeCreator(ICInstance inst, OSType fType, OSType fCreator, ConstStr255Param filename, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICMapTypeCreator
			move.l              #$00100019,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICMapTypeCreator
	ENDIF

;  [r1] [c1] [b4] 
;   * Takes the type and creator (and optionally the name) of an outgoing
;   * file and returns the most appropriate mappings database entry.
;   * The filename may be either the name of the outgoing file or
;   * the empty string.
;   * Returns icPrefNotFoundErr if no suitable entry found.
;   

;  ----- Mid Level Routines -----  

; *  ICMapEntriesFilename()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICMapEntriesFilename(ICInstance inst, Handle entries, ConstStr255Param filename, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICMapEntriesFilename
			move.l              #$000C001C,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICMapEntriesFilename
	ENDIF

;  [r1] [c1] [b3] 
;   * Takes the name of an incoming file and returns the most appropriate
;   * mappings database entry, based on its extension.
;   * entries must be a handle to a valid IC mappings database preference.
;   * filename must not be the empty string.
;   * Returns icPrefNotFoundErr if no suitable entry is found.
;   


; *  ICMapEntriesTypeCreator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICMapEntriesTypeCreator(ICInstance inst, Handle entries, OSType fType, OSType fCreator, ConstStr255Param filename, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICMapEntriesTypeCreator
			move.l              #$0014001D,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICMapEntriesTypeCreator
	ENDIF

;  [r1] [c1] [b3] 
;   * Takes the type and creator (and optionally the name) of an outgoing
;   * file and returns the most appropriate mappings database entry.
;   * entries must be a handle to a valid IC mappings database preference.
;   * The filename may be either the name of the outgoing file or
;   * the empty string.
;   * Returns icPrefNotFoundErr if no suitable entry found.
;   

;  ----- Low Level Routines -----  

; *  ICCountMapEntries()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICCountMapEntries(ICInstance inst, Handle entries, long *count)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCountMapEntries
			move.l              #$00080012,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCountMapEntries
	ENDIF

;  [r1] [c1] [b3] 
;   * Counts the number of entries in the mappings database.
;   * entries must be a handle to a valid IC mappings database preference.
;   * count is set to the number of entries.
;   


; *  ICGetIndMapEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetIndMapEntry(ICInstance inst, Handle entries, long index, long *pos, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetIndMapEntry
			move.l              #$00100013,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetIndMapEntry
	ENDIF

;  [r1] [c1] [b3] 
;   * Gets the index'th entry in the mappings database.
;   * entries must be a handle to a valid IC mappings database preference.
;   * index must be in the range from 1 to the number of entries in the database.
;   * The value of pos is ignored on input. pos is set to the position of
;   * the index'th entry in the database and is suitable for passing back
;   * into ICSetMapEntry.
;   * Does not return any user data associated with the entry.
;   


; *  ICGetMapEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetMapEntry(ICInstance inst, Handle entries, long pos, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetMapEntry
			move.l              #$000C0014,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetMapEntry
	ENDIF

;  [r1] [c1] [b3] 
;   * Returns the entry located at position pos in the mappings database.
;   * entries must be a handle to a valid IC mappings database preference.
;   * pos should be 0 to get the first entry. To get the subsequent entries, add
;   * entry.total_size to pos and iterate.
;   * Does not return any user data associated with the entry.
;   


; *  ICSetMapEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICSetMapEntry(ICInstance inst, Handle entries, long pos, const ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICSetMapEntry
			move.l              #$000C0015,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICSetMapEntry
	ENDIF

;  [r1] [c1] [b3] 
;   * Sets the entry located at position pos in the mappings database.
;   * entries must be a handle to a valid IC mappings database preference.
;   * pos should be either a value returned from ICGetIndMapEntry or a value
;   * calculated using ICGetMapEntry.
;   * entry is a var parameter purely for stack space reasons. It is not
;   * modified in any way.
;   * Any user data associated with the entry is unmodified.
;   


; *  ICDeleteMapEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICDeleteMapEntry(ICInstance inst, Handle entries, long pos)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICDeleteMapEntry
			move.l              #$00080016,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICDeleteMapEntry
	ENDIF

;  [r1] [c1] [b3] 
;   * Deletes the mappings database entry at pos.
;   * entries must be a handle to a valid IC mappings database preference.
;   * pos should be either a value returned from ICGetIndMapEntry or a value
;   * calculated using ICGetMapEntry.
;   * Also deletes any user data associated with the entry.
;   


; *  ICAddMapEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICAddMapEntry(ICInstance inst, Handle entries, const ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICAddMapEntry
			move.l              #$00080017,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICAddMapEntry
	ENDIF

;  [r1] [c1] [b3] 
;   * Adds an entry to the mappings database.
;   * entries must be a handle to a valid IC mappings database preference.
;   * The entry is added to the end of the entries database.
;   * No user data is added.
;   

;  ***** Profile Management Routines *****  

; *  ICGetCurrentProfile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetCurrentProfile(ICInstance inst, ICProfileID *currentID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetCurrentProfile
			move.l              #$00040025,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetCurrentProfile
	ENDIF

;  [r3] [c1] [b3] 
;   * Returns the profile ID of the current profile.
;   


; *  ICSetCurrentProfile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICSetCurrentProfile(ICInstance inst, ICProfileID newID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICSetCurrentProfile
			move.l              #$00040026,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICSetCurrentProfile
	ENDIF

;  [r3] [c1] [b3] 
;   * Sets the current profile to the profile specified in newProfile.
;   


; *  ICCountProfiles()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICCountProfiles(ICInstance inst, long *count)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCountProfiles
			move.l              #$00040027,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCountProfiles
	ENDIF

;  [r3] [c1] [b1] 
;   * Returns the total number of profiles.
;   


; *  ICGetIndProfile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetIndProfile(ICInstance inst, long index, ICProfileID *thisID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetIndProfile
			move.l              #$00080028,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetIndProfile
	ENDIF

;  [r3] [c1] [b1] 
;   * Returns the profile ID of the index'th profile.  index must be positive.
;   * Returns icProfileNotFoundErr if index is greater than the total number
;   * of profiles.
;   


; *  ICGetProfileName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICGetProfileName(ICInstance inst, ICProfileID thisID, Str255 name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetProfileName
			move.l              #$00080029,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetProfileName
	ENDIF

;  [r3] [c1] [b3] 
;   * Returns the name of a profile given its ID.  The name may not uniquely
;   * identify the profile.  [That's what the profile ID is for!]  The name
;   * is assumed to be in the system script.
;   


; *  ICSetProfileName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICSetProfileName(ICInstance inst, ICProfileID thisID, ConstStr255Param name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICSetProfileName
			move.l              #$0008002A,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICSetProfileName
	ENDIF

;  [r3] [c1] [b3] 
;   * This routine sets the name of the specified profile.  Profile names
;   * need not be unique.  The name should be in the system script.
;   


; *  ICAddProfile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICAddProfile(ICInstance inst, ICProfileID prototypeID, ICProfileID *newID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICAddProfile
			move.l              #$0008002B,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICAddProfile
	ENDIF

;  [r3] [c1] [b2] 
;   * If prototypeID = kICNilProfileID, this routine
;   * creates a default profile, otherwise it creates a
;   * profile by cloning the prototype profile.  The ID
;   * of the new profile is returned in newID.
;   * The new profile will be give a new, unique, name.
;   * This does not switch to the new profile.
;   


; *  ICDeleteProfile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus ICDeleteProfile(ICInstance inst, ICProfileID thisID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICDeleteProfile
			move.l              #$0004002C,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICDeleteProfile
	ENDIF

;  [r3] [c1] [b2] 
;   * This routine deletes the profile specified by
;   * thisID.  Attempting to delete the current profile
;   * or the last profile will return error.
;   

; ************************************************************************************************
;  NOTHING BELOW THIS DIVIDER IS IN CARBON
; ***********************************************************************************************

;  ***** Interrupt Safe Routines *****  
	IF CALL_NOT_IN_CARBON THEN

; *  ICRequiresInterruptSafe()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICRequiresInterruptSafe(ICInstance inst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICRequiresInterruptSafe
			move.l              #$0000002D,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICRequiresInterruptSafe
	ENDIF

;  [r3] [c2] [b3] 
;   * You must call this routine before calling GetMapEntryInterruptSafe
;   * to give IC chance to cache the mappings data in memory.  The only
;   * way to clear this state is to close the instance.  You can not reconfigure
;   * the instance after calling this routine.
;   


; *  ICGetMappingInterruptSafe()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICGetMappingInterruptSafe(ICInstance inst, Ptr *mappingPref, long *mappingPrefSize)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetMappingInterruptSafe
			move.l              #$0008002E,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetMappingInterruptSafe
	ENDIF

;  [r3] [c2] [b3] 
;   * Returns the "Mapping" preference in an interrupt safe fashion.
;   * The preference returned pointer is valid until the next
;   * non-interrupt safe call to IC.  Typically this API is used
;   * by software that needs to map extensions to type and creator
;   * at interrupt time, eg foreign file systems.
;   


; *  ICGetSeedInterruptSafe()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICGetSeedInterruptSafe(ICInstance inst, long *seed)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICGetSeedInterruptSafe
			move.l              #$00040030,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICGetSeedInterruptSafe
	ENDIF

;  [r3] [c2] [b3] 
;   * An interrupt safe version of ICGetSeed.
;   

;  ***** Starting Up and Shutting Down *****  

; *  ICCStart()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCStart(ComponentInstance *inst, OSType creator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCStart
	ENDIF

;  See comment for ICCStart.  

; *  ICCStop()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCStop(ComponentInstance inst)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCStop
	ENDIF

;  See comment for ICCStop.  

; *  ICCGetVersion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetVersion(ComponentInstance inst, long whichVersion, UInt32 *version)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetVersion
			move.l              #$00080032,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetVersion
	ENDIF

;  See comment for ICCGetVersion.  
;  ***** Specifying a Configuration *****  

; *  ICCFindConfigFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCFindConfigFile(ComponentInstance inst, short count, ICDirSpecArrayPtr folders)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCFindConfigFile
			move.l              #$00060002,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCFindConfigFile
	ENDIF

;  See comment for ICCFindConfigFile.  

; *  ICCFindUserConfigFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCFindUserConfigFile(ComponentInstance inst, ICDirSpec *where)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCFindUserConfigFile
			move.l              #$0004000E,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCFindUserConfigFile
	ENDIF

;  See comment for ICCFindUserConfigFile.  

; *  ICCGeneralFindConfigFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGeneralFindConfigFile(ComponentInstance inst, Boolean searchPrefs, Boolean canCreate, short count, ICDirSpecArrayPtr folders)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGeneralFindConfigFile
			move.l              #$000A001E,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGeneralFindConfigFile
	ENDIF

;  See comment for ICCGeneralFindConfigFile.  

; *  ICCChooseConfig()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCChooseConfig(ComponentInstance inst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCChooseConfig
			move.l              #$00000021,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCChooseConfig
	ENDIF

;  See comment for ICCChooseConfig.  

; *  ICCChooseNewConfig()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCChooseNewConfig(ComponentInstance inst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCChooseNewConfig
			move.l              #$00000022,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCChooseNewConfig
	ENDIF

;  See comment for ICCChooseNewConfig.  

; *  ICCGetConfigName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetConfigName(ComponentInstance inst, Boolean longname, Str255 name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetConfigName
			move.l              #$00060023,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetConfigName
	ENDIF

;  See comment for ICCGetConfigName.  

; *  ICCGetConfigReference()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetConfigReference(ComponentInstance inst, ICConfigRefHandle ref)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetConfigReference
			move.l              #$0004001F,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetConfigReference
	ENDIF

;  See comment for ICCGetConfigReference.  

; *  ICCSetConfigReference()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCSetConfigReference(ComponentInstance inst, ICConfigRefHandle ref, long flags)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCSetConfigReference
			move.l              #$00080020,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCSetConfigReference
	ENDIF

;  See comment for ICCSetConfigReference.  
;  ***** Private Routines *****
; * 
; * If you are calling these routines, you are most probably doing something
; * wrong.  Please read the documentation for more details.
;  


; *  ICCSpecifyConfigFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCSpecifyConfigFile(ComponentInstance inst, FSSpec *config)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCSpecifyConfigFile
			move.l              #$00040003,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCSpecifyConfigFile
	ENDIF

;  See comment for ICCSpecifyConfigFile.  

; *  ICCRefreshCaches()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCRefreshCaches(ComponentInstance inst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCRefreshCaches
			move.l              #$0000002F,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCRefreshCaches
	ENDIF

;  See comment for ICCRefreshCaches.  
;  ***** Getting Information *****  

; *  ICCGetSeed()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetSeed(ComponentInstance inst, long *seed)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetSeed
			move.l              #$00040004,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetSeed
	ENDIF

;  See comment for ICCGetSeed.  

; *  ICCGetPerm()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetPerm(ComponentInstance inst, ICPerm *perm)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetPerm
			move.l              #$0004000D,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetPerm
	ENDIF

;  See comment for ICCGetPerm.  

; *  ICCDefaultFileName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCDefaultFileName(ComponentInstance inst, Str63 name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCDefaultFileName
			move.l              #$0004000B,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCDefaultFileName
	ENDIF

;  See comment for ICCDefaultFileName.  

; *  ICCGetComponentInstance()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetComponentInstance(ComponentInstance inst, ComponentInstance *componentInst)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetComponentInstance
	ENDIF

;  See comment for ICCGetComponentInstance.  
;  ***** Reading and Writing Preferences *****  

; *  ICCBegin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCBegin(ComponentInstance inst, ICPerm perm)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCBegin
			move.l              #$00020005,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCBegin
	ENDIF

;  See comment for ICCBegin.  

; *  ICCGetPref()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetPref(ComponentInstance inst, ConstStr255Param key, ICAttr *attr, Ptr buf, long *size)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetPref
			move.l              #$00100006,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetPref
	ENDIF

;  See comment for ICCGetPref.  

; *  ICCSetPref()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCSetPref(ComponentInstance inst, ConstStr255Param key, ICAttr attr, Ptr buf, long size)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCSetPref
			move.l              #$00100007,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCSetPref
	ENDIF

;  See comment for ICCSetPref.  

; *  ICCFindPrefHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCFindPrefHandle(ComponentInstance inst, ConstStr255Param key, ICAttr *attr, Handle prefh)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCFindPrefHandle
			move.l              #$000C0024,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCFindPrefHandle
	ENDIF

;  See comment for ICCFindPrefHandle.  

; *  ICCGetPrefHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetPrefHandle(ComponentInstance inst, ConstStr255Param key, ICAttr *attr, Handle *prefh)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetPrefHandle
			move.l              #$000C001A,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetPrefHandle
	ENDIF

;  See comment for ICCGetPrefHandle.  

; *  ICCSetPrefHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCSetPrefHandle(ComponentInstance inst, ConstStr255Param key, ICAttr attr, Handle prefh)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCSetPrefHandle
			move.l              #$000C001B,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCSetPrefHandle
	ENDIF

;  See comment for ICCSetPrefHandle.  

; *  ICCCountPref()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCCountPref(ComponentInstance inst, long *count)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCCountPref
			move.l              #$00040008,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCCountPref
	ENDIF

;  See comment for ICCCountPref.  

; *  ICCGetIndPref()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetIndPref(ComponentInstance inst, long index, Str255 key)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetIndPref
			move.l              #$00080009,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetIndPref
	ENDIF

;  See comment for ICCGetIndPref.  

; *  ICCDeletePref()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCDeletePref(ComponentInstance inst, ConstStr255Param key)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCDeletePref
			move.l              #$0004000C,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCDeletePref
	ENDIF

;  See comment for ICCDeletePref.  

; *  ICCEnd()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCEnd(ComponentInstance inst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCEnd
			move.l              #$0000000A,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCEnd
	ENDIF

;  See comment for ICCEnd.  

; *  ICCGetDefaultPref()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetDefaultPref(ComponentInstance inst, ConstStr255Param key, Handle prefH)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetDefaultPref
			move.l              #$00080031,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetDefaultPref
	ENDIF

;  See comment for ICCGetDefaultPref.  
;  ***** User Interface Stuff *****  

; *  ICCEditPreferences()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCEditPreferences(ComponentInstance inst, ConstStr255Param key)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCEditPreferences
			move.l              #$0004000F,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCEditPreferences
	ENDIF

;  See comment for ICCEditPreferences.  
;  ***** URL Handling *****  

; *  ICCLaunchURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCLaunchURL(ComponentInstance inst, ConstStr255Param hint, Ptr data, long len, long *selStart, long *selEnd)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCLaunchURL
			move.l              #$00140011,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCLaunchURL
	ENDIF

;  See comment for ICCLaunchURL.  

; *  ICCParseURL()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCParseURL(ComponentInstance inst, ConstStr255Param hint, Ptr data, long len, long *selStart, long *selEnd, Handle url)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCParseURL
			move.l              #$00180010,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCParseURL
	ENDIF

;  See comment for ICCParseURL.  

; *  ICCCreateGURLEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCCreateGURLEvent(ComponentInstance inst, OSType helperCreator, Handle urlH, AppleEvent *theEvent)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCCreateGURLEvent
			move.l              #$000C0033,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCCreateGURLEvent
	ENDIF

;  See comment for ICCCreateGURLEvent.  

; *  ICCSendGURLEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCSendGURLEvent(ComponentInstance inst, AppleEvent *theEvent)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCSendGURLEvent
			move.l              #$00040034,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCSendGURLEvent
	ENDIF

;  See comment for ICCSendGURLEvent.  
;  ***** Mappings Routines *****
; * 
; * Routines for interrogating mappings database.
; * 
; * ----- High Level Routines -----
;  


; *  ICCMapFilename()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCMapFilename(ComponentInstance inst, ConstStr255Param filename, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCMapFilename
			move.l              #$00080018,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCMapFilename
	ENDIF

;  See comment for ICCMapFilename.  

; *  ICCMapTypeCreator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCMapTypeCreator(ComponentInstance inst, OSType fType, OSType fCreator, ConstStr255Param filename, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCMapTypeCreator
			move.l              #$00100019,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCMapTypeCreator
	ENDIF

;  See comment for ICCMapTypeCreator.  
;  ----- Mid Level Routines -----  

; *  ICCMapEntriesFilename()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCMapEntriesFilename(ComponentInstance inst, Handle entries, ConstStr255Param filename, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCMapEntriesFilename
			move.l              #$000C001C,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCMapEntriesFilename
	ENDIF

;  See comment for ICCMapEntriesFilename.  

; *  ICCMapEntriesTypeCreator()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCMapEntriesTypeCreator(ComponentInstance inst, Handle entries, OSType fType, OSType fCreator, ConstStr255Param filename, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCMapEntriesTypeCreator
			move.l              #$0014001D,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCMapEntriesTypeCreator
	ENDIF

;  See comment for ICCMapEntriesTypeCreator.  
;  ----- Low Level Routines -----  

; *  ICCCountMapEntries()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCCountMapEntries(ComponentInstance inst, Handle entries, long *count)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCCountMapEntries
			move.l              #$00080012,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCCountMapEntries
	ENDIF

;  See comment for ICCCountMapEntries.  

; *  ICCGetIndMapEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetIndMapEntry(ComponentInstance inst, Handle entries, long index, long *pos, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetIndMapEntry
			move.l              #$00100013,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetIndMapEntry
	ENDIF

;  See comment for ICCGetIndMapEntry.  

; *  ICCGetMapEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetMapEntry(ComponentInstance inst, Handle entries, long pos, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetMapEntry
			move.l              #$000C0014,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetMapEntry
	ENDIF

;  See comment for ICCGetMapEntry.  

; *  ICCSetMapEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCSetMapEntry(ComponentInstance inst, Handle entries, long pos, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCSetMapEntry
			move.l              #$000C0015,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCSetMapEntry
	ENDIF

;  See comment for ICCSetMapEntry.  

; *  ICCDeleteMapEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCDeleteMapEntry(ComponentInstance inst, Handle entries, long pos)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCDeleteMapEntry
			move.l              #$00080016,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCDeleteMapEntry
	ENDIF

;  See comment for ICCDeleteMapEntry.  

; *  ICCAddMapEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCAddMapEntry(ComponentInstance inst, Handle entries, ICMapEntry *entry)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCAddMapEntry
			move.l              #$00080017,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCAddMapEntry
	ENDIF

;  See comment for ICCAddMapEntry.  
;  ***** Profile Management Routines *****  

; *  ICCGetCurrentProfile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetCurrentProfile(ComponentInstance inst, ICProfileID *currentID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetCurrentProfile
			move.l              #$00040025,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetCurrentProfile
	ENDIF

;  See comment for ICCGetCurrentProfile.  

; *  ICCSetCurrentProfile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCSetCurrentProfile(ComponentInstance inst, ICProfileID newID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCSetCurrentProfile
			move.l              #$00040026,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCSetCurrentProfile
	ENDIF

;  See comment for ICCSetCurrentProfile.  

; *  ICCCountProfiles()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCCountProfiles(ComponentInstance inst, long *count)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCCountProfiles
			move.l              #$00040027,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCCountProfiles
	ENDIF

;  See comment for ICCCountProfiles.  

; *  ICCGetIndProfile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetIndProfile(ComponentInstance inst, long index, ICProfileID *thisID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetIndProfile
			move.l              #$00080028,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetIndProfile
	ENDIF

;  See comment for ICCGetIndProfile.  

; *  ICCGetProfileName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetProfileName(ComponentInstance inst, ICProfileID thisID, Str255 name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetProfileName
			move.l              #$00080029,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetProfileName
	ENDIF

;  See comment for ICCGetProfileName.  

; *  ICCSetProfileName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCSetProfileName(ComponentInstance inst, ICProfileID thisID, ConstStr255Param name)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCSetProfileName
			move.l              #$0008002A,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCSetProfileName
	ENDIF

;  See comment for ICCSetProfileName.  

; *  ICCAddProfile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCAddProfile(ComponentInstance inst, ICProfileID prototypeID, ICProfileID *newID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCAddProfile
			move.l              #$0008002B,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCAddProfile
	ENDIF

;  See comment for ICCAddProfile.  

; *  ICCDeleteProfile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCDeleteProfile(ComponentInstance inst, ICProfileID thisID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCDeleteProfile
			move.l              #$0004002C,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCDeleteProfile
	ENDIF

;  See comment for ICCDeleteProfile.  
;  ***** Interrupt Safe Routines *****  

; *  ICCRequiresInterruptSafe()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCRequiresInterruptSafe(ComponentInstance inst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCRequiresInterruptSafe
			move.l              #$0000002D,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCRequiresInterruptSafe
	ENDIF

;  See comment for ICCRequiresInterruptSafe.  

; *  ICCGetMappingInterruptSafe()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetMappingInterruptSafe(ComponentInstance inst, Ptr *mappingPref, long *mappingPrefSize)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetMappingInterruptSafe
			move.l              #$0008002E,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetMappingInterruptSafe
	ENDIF

;  See comment for ICCGetMappingInterruptSafe.  

; *  ICCGetSeedInterruptSafe()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InternetConfig 2.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus ICCGetSeedInterruptSafe(ComponentInstance inst, long *seed)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ICCGetSeedInterruptSafe
			move.l              #$00040030,-(sp)
			moveq           	#0,D0
			dc.w            	$A82A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ICCGetSeedInterruptSafe
	ENDIF

;  See comment for ICCGetSeedInterruptSafe.  
	ENDIF	; CALL_NOT_IN_CARBON
	IF CALL_NOT_IN_CARBON THEN

; ************************************************************************************************
;  component selectors
; ***********************************************************************************************



kICCStart						EQU		0
kICCStop						EQU		1
kICCGetVersion					EQU		50
kICCFindConfigFile				EQU		2
kICCFindUserConfigFile			EQU		14
kICCGeneralFindConfigFile		EQU		30
kICCChooseConfig				EQU		33
kICCChooseNewConfig				EQU		34
kICCGetConfigName				EQU		35
kICCGetConfigReference			EQU		31
kICCSetConfigReference			EQU		32
kICCSpecifyConfigFile			EQU		3
kICCRefreshCaches				EQU		47
kICCGetSeed						EQU		4
kICCGetPerm						EQU		13
kICCDefaultFileName				EQU		11
kICCBegin						EQU		5
kICCGetPref						EQU		6
kICCSetPref						EQU		7
kICCFindPrefHandle				EQU		36
kICCGetPrefHandle				EQU		26
kICCSetPrefHandle				EQU		27
kICCCountPref					EQU		8
kICCGetIndPref					EQU		9
kICCDeletePref					EQU		12
kICCEnd							EQU		10
kICCGetDefaultPref				EQU		49
kICCEditPreferences				EQU		15
kICCLaunchURL					EQU		17
kICCParseURL					EQU		16
kICCCreateGURLEvent				EQU		51
kICCSendGURLEvent				EQU		52
kICCMapFilename					EQU		24
kICCMapTypeCreator				EQU		25
kICCMapEntriesFilename			EQU		28
kICCMapEntriesTypeCreator		EQU		29
kICCCountMapEntries				EQU		18
kICCGetIndMapEntry				EQU		19
kICCGetMapEntry					EQU		20
kICCSetMapEntry					EQU		21
kICCDeleteMapEntry				EQU		22
kICCAddMapEntry					EQU		23
kICCGetCurrentProfile			EQU		37
kICCSetCurrentProfile			EQU		38
kICCCountProfiles				EQU		39
kICCGetIndProfile				EQU		40
kICCGetProfileName				EQU		41
kICCSetProfileName				EQU		42
kICCAddProfile					EQU		43
kICCDeleteProfile				EQU		44
kICCRequiresInterruptSafe		EQU		45
kICCGetMappingInterruptSafe		EQU		46
kICCGetSeedInterruptSafe		EQU		48
kICCFirstSelector				EQU		0
kICCLastSelector				EQU		52
; ************************************************************************************************
;  component selector proc infos
; ***********************************************************************************************



kICCStartProcInfo				EQU		1008
kICCStopProcInfo				EQU		240
kICCGetVersionProcInfo			EQU		4080
kICCFindConfigFileProcInfo		EQU		3824
kICCFindUserConfigFileProcInfo	EQU		1008
kICCGeneralFindConfigFileProcInfo EQU	58864
kICCChooseConfigProcInfo		EQU		240
kICCChooseNewConfigProcInfo		EQU		240
kICCGetConfigNameProcInfo		EQU		3568
kICCGetConfigReferenceProcInfo	EQU		1008
kICCSetConfigReferenceProcInfo	EQU		4080
kICCSpecifyConfigFileProcInfo	EQU		1008
kICCRefreshCachesProcInfo		EQU		240
kICCGetSeedProcInfo				EQU		1008
kICCGetPermProcInfo				EQU		1008
kICCDefaultFileNameProcInfo		EQU		1008
kICCGetComponentInstanceProcInfo EQU	1008
kICCBeginProcInfo				EQU		496
kICCGetPrefProcInfo				EQU		65520
kICCSetPrefProcInfo				EQU		65520
kICCFindPrefHandleProcInfo		EQU		16368
kICCGetPrefHandleProcInfo		EQU		16368
kICCSetPrefHandleProcInfo		EQU		16368
kICCCountPrefProcInfo			EQU		1008
kICCGetIndPrefProcInfo			EQU		4080
kICCDeletePrefProcInfo			EQU		1008
kICCEndProcInfo					EQU		240
kICCGetDefaultPrefProcInfo		EQU		4080
kICCEditPreferencesProcInfo		EQU		1008
kICCLaunchURLProcInfo			EQU		262128
kICCParseURLProcInfo			EQU		1048560
kICCCreateGURLEventProcInfo		EQU		16368
kICCSendGURLEventProcInfo		EQU		1008
kICCMapFilenameProcInfo			EQU		4080
kICCMapTypeCreatorProcInfo		EQU		65520
kICCMapEntriesFilenameProcInfo	EQU		16368
kICCMapEntriesTypeCreatorProcInfo EQU	262128
kICCCountMapEntriesProcInfo		EQU		4080
kICCGetIndMapEntryProcInfo		EQU		65520
kICCGetMapEntryProcInfo			EQU		16368
kICCSetMapEntryProcInfo			EQU		16368
kICCDeleteMapEntryProcInfo		EQU		4080
kICCAddMapEntryProcInfo			EQU		4080
kICCGetCurrentProfileProcInfo	EQU		1008
kICCSetCurrentProfileProcInfo	EQU		1008
kICCCountProfilesProcInfo		EQU		1008
kICCGetIndProfileProcInfo		EQU		4080
kICCGetProfileNameProcInfo		EQU		4080
kICCSetProfileNameProcInfo		EQU		4080
kICCAddProfileProcInfo			EQU		4080
kICCDeleteProfileProcInfo		EQU		1008
kICCRequiresInterruptSafeProcInfo EQU	240
kICCGetMappingInterruptSafeProcInfo EQU	4080
kICCGetSeedInterruptSafeProcInfo EQU	1008
; ************************************************************************************************
;  component identifiers
; ***********************************************************************************************



kICComponentType				EQU		'PREF'
kICComponentSubType				EQU		'ICAp'
kICComponentManufacturer		EQU		'JPQE'
; ************************************************************************************************
;  The following type is now obsolete.
;  If you're using it, please switch to ComponentInstance or ICInstance.
; ***********************************************************************************************


	IF OLDROUTINENAMES THEN
; typedef ComponentInstance 			internetConfigurationComponent


	ENDIF	; OLDROUTINENAMES
	ENDIF	; CALL_NOT_IN_CARBON
; ************************************************************************************************
;  old names for stuff declared above
; ***********************************************************************************************


	IF OLDROUTINENAMES THEN

; typedef long 							ICError



ICattr_no_change				EQU		$FFFFFFFF
ICattr_locked_bit				EQU		0
ICattr_locked_mask				EQU		$00000001
ICattr_volatile_bit				EQU		1
ICattr_volatile_mask			EQU		$00000002
icNoUserInteraction_bit			EQU		0
icNoUserInteraction_mask		EQU		$00000001
ICfiletype						EQU		'ICAp'
ICcreator						EQU		'ICAp'
; 
;    ICFileInfo was originally used to define the format of a key.
;    That key was removed, but we forgot to remove ICFileInfo.
;    I hope to remove it entirely, but for the moment it's available
;    if you define OLDROUTINENAMES.
;

ICFileInfo				RECORD 0
fType					 ds.l	1				; offset: $0 (0)
fCreator				 ds.l	1				; offset: $4 (4)
name					 ds		Str63			; offset: $8 (8)
sizeof					 EQU *					; size:   $48 (72)
						ENDR
; typedef struct ICFileInfo *			ICFileInfoPtr

; typedef ICFileInfoPtr *				ICFileInfoHandle



ICfile_spec_header_size			EQU		106

ICmap_binary_bit				EQU		0
ICmap_binary_mask				EQU		$00000001
ICmap_resource_fork_bit			EQU		1
ICmap_resource_fork_mask		EQU		$00000002
ICmap_data_fork_bit				EQU		2
ICmap_data_fork_mask			EQU		$00000004
ICmap_post_bit					EQU		3
ICmap_post_mask					EQU		$00000008
ICmap_not_incoming_bit			EQU		4
ICmap_not_incoming_mask			EQU		$00000010
ICmap_not_outgoing_bit			EQU		5
ICmap_not_outgoing_mask			EQU		$00000020
ICmap_fixed_length				EQU		22

ICservices_tcp_bit				EQU		0
ICservices_tcp_mask				EQU		$00000001
ICservices_udp_bit				EQU		1
ICservices_udp_mask				EQU		$00000002
;     This definitions are a) very long, and b) don't conform
;    to Mac OS standards for naming constants, so I've put
;    them in only if you're using OLDROUTINENAMES.  Please switch
;    to the new names given above.
;


internetConfigurationComponentType EQU	'PREF'				; the component type 
internetConfigurationComponentSubType EQU 'ICAp'			; the component subtype 
internetConfigurationComponentInterfaceVersion0 EQU $00000000 ; IC >= 1.0 
internetConfigurationComponentInterfaceVersion1 EQU $00010000 ; IC >= 1.1 
internetConfigurationComponentInterfaceVersion2 EQU $00020000 ; IC >= 1.2 
internetConfigurationComponentInterfaceVersion3 EQU $00030000 ; IC >= 2.0 
															; current version number is version 3 
internetConfigurationComponentInterfaceVersion EQU $00030000
	ENDIF	; OLDROUTINENAMES
	ENDIF ; __INTERNETCONFIG__ 


;
;    File:       KeychainHI.a
;
;    Contains:   Keychain API's with Human Interfaces
;
;    Version:    Technology: Keychain 3.0
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 2000-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__KEYCHAINHI__') = 'UNDEFINED' THEN
__KEYCHAINHI__ SET 1

	IF &TYPE('__KEYCHAINCORE__') = 'UNDEFINED' THEN
	include 'KeychainCore.a'
	ENDIF
	IF &TYPE('__CFSTRING__') = 'UNDEFINED' THEN
	include 'CFString.a'
	ENDIF
	IF &TYPE('__CFARRAY__') = 'UNDEFINED' THEN
	include 'CFArray.a'
	ENDIF
	IF &TYPE('__CFDATE__') = 'UNDEFINED' THEN
	include 'CFDate.a'
	ENDIF

;  Managing the Human Interface 

; *  KCSetInteractionAllowed()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 2.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCSetInteractionAllowed(Boolean state)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCSetInteractionAllowed
	ENDIF


; *  KCIsInteractionAllowed()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 2.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean KCIsInteractionAllowed(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCIsInteractionAllowed
	ENDIF

;  Locking and unlocking a keychain 

; *  KCUnlock()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCUnlock(KCRef keychain, StringPtr password)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCUnlock
	ENDIF


; *  KCLock()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCLock(KCRef keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCLock
	ENDIF

;  Creating a new keychain 

; *  KCCreateKeychain()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCCreateKeychain(StringPtr password, KCRef *keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCCreateKeychain
	ENDIF


;  Changing a keychain's settings 

; *  KCChangeSettings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 2.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCChangeSettings(KCRef keychain)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCChangeSettings
	ENDIF

;  Managing keychain items 

; *  KCAddItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCAddItem(KCItemRef item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCAddItem
	ENDIF


; *  KCDeleteItem()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCDeleteItem(KCItemRef item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCDeleteItem
	ENDIF


; *  KCGetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCGetData(KCItemRef item, UInt32 maxLength, void *data, UInt32 *actualLength)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCGetData
	ENDIF

;  Storing and retrieving AppleShare passwords 

; *  KCAddAppleSharePassword()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCAddAppleSharePassword(AFPServerSignature *serverSignature, StringPtr serverAddress, StringPtr serverName, StringPtr volumeName, StringPtr accountName, UInt32 passwordLength, const void *passwordData, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCAddAppleSharePassword
	ENDIF


; *  KCFindAppleSharePassword()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCFindAppleSharePassword(AFPServerSignature *serverSignature, StringPtr serverAddress, StringPtr serverName, StringPtr volumeName, StringPtr accountName, UInt32 maxLength, void *passwordData, UInt32 *actualLength, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCFindAppleSharePassword
	ENDIF

;  Storing and retrieving Internet passwords 

; *  KCAddInternetPassword()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCAddInternetPassword(StringPtr serverName, StringPtr securityDomain, StringPtr accountName, UInt16 port, OSType protocol, OSType authType, UInt32 passwordLength, const void *passwordData, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCAddInternetPassword
	ENDIF


; *  KCAddInternetPasswordWithPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 2.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCAddInternetPasswordWithPath(StringPtr serverName, StringPtr securityDomain, StringPtr accountName, StringPtr path, UInt16 port, OSType protocol, OSType authType, UInt32 passwordLength, const void *passwordData, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCAddInternetPasswordWithPath
	ENDIF


; *  KCFindInternetPassword()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCFindInternetPassword(StringPtr serverName, StringPtr securityDomain, StringPtr accountName, UInt16 port, OSType protocol, OSType authType, UInt32 maxLength, void *passwordData, UInt32 *actualLength, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCFindInternetPassword
	ENDIF


; *  KCFindInternetPasswordWithPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 2.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCFindInternetPasswordWithPath(StringPtr serverName, StringPtr securityDomain, StringPtr accountName, StringPtr path, UInt16 port, OSType protocol, OSType authType, UInt32 maxLength, void *passwordData, UInt32 *actualLength, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCFindInternetPasswordWithPath
	ENDIF

;  Storing and retrieving other types of passwords 

; *  KCAddGenericPassword()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCAddGenericPassword(StringPtr serviceName, StringPtr accountName, UInt32 passwordLength, const void *passwordData, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCAddGenericPassword
	ENDIF


; *  KCFindGenericPassword()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus KCFindGenericPassword(StringPtr serviceName, StringPtr accountName, UInt32 maxLength, void *passwordData, UInt32 *actualLength, KCItemRef *item)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCFindGenericPassword
	ENDIF



;  Working with certificates 
	IF CALL_NOT_IN_CARBON THEN

; *  KCFindX509Certificates()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 2.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus KCFindX509Certificates(KCRef keychain, CFStringRef name, CFStringRef emailAddress, KCCertSearchOptions options, CFMutableArrayRef *certificateItems)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCFindX509Certificates
	ENDIF


; *  KCChooseCertificate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in KeychainLib 2.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus KCChooseCertificate(CFArrayRef items, KCItemRef *certificate, CFArrayRef policyOIDs, KCVerifyStopOn stopOn)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KCChooseCertificate
	ENDIF


	ENDIF	; CALL_NOT_IN_CARBON
	ENDIF ; __KEYCHAINHI__ 


;
;    File:       LaunchServices.a
;
;    Contains:   Public interfaces for LaunchServices.framework
;
;    Version:    Technology: Mac OS X
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__LAUNCHSERVICES__') = 'UNDEFINED' THEN
__LAUNCHSERVICES__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__CFSTRING__') = 'UNDEFINED' THEN
	include 'CFString.a'
	ENDIF
	IF &TYPE('__FILES__') = 'UNDEFINED' THEN
	include 'Files.a'
	ENDIF
	IF &TYPE('__CFURL__') = 'UNDEFINED' THEN
	include 'CFURL.a'
	ENDIF
	IF &TYPE('__AEDATAMODEL__') = 'UNDEFINED' THEN
	include 'AEDataModel.a'
	ENDIF


;  ======================================================================================================== 
;  LaunchServices Structures and Enums                                                                      
;  ======================================================================================================== 


kLSUnknownErr					EQU		-10810
kLSNotAnApplicationErr			EQU		-10811
kLSNotInitializedErr			EQU		-10812
kLSDataUnavailableErr			EQU		-10813				; e.g. no kind string
kLSApplicationNotFoundErr		EQU		-10814				; e.g. no application claims the file
kLSUnknownTypeErr				EQU		-10815
kLSDataTooOldErr				EQU		-10816
kLSDataErr						EQU		-10817
kLSLaunchInProgressErr			EQU		-10818				; e.g. opening an alreay opening application
kLSNotRegisteredErr				EQU		-10819
kLSAppDoesNotClaimTypeErr		EQU		-10820
kLSAppDoesNotSupportSchemeWarning EQU	-10821				; not an error, just a warning
kLSServerCommunicationErr		EQU		-10822				; cannot set recent items
; typedef OptionBits 					LSInitializeFlags


kLSInitializeDefaults			EQU		$00000001
; typedef OptionBits 					LSRequestedInfo


kLSRequestExtension				EQU		$00000001			; safe to use from threads
kLSRequestTypeCreator			EQU		$00000002			; safe to use from threads
kLSRequestBasicFlagsOnly		EQU		$00000004			; all but type of application - safe to use from threads
kLSRequestAppTypeFlags			EQU		$00000008			; NOT SAFE to use from threads
kLSRequestAllFlags				EQU		$00000010			; NOT SAFE to use from threads
kLSRequestIconAndKind			EQU		$00000020			; NOT SAFE to use from threads
kLSRequestAllInfo				EQU		$FFFFFFFF			; NOT SAFE to use from threads
; typedef OptionBits 					LSItemInfoFlags


kLSItemInfoIsPlainFile			EQU		$00000001			; none of the following applies
kLSItemInfoIsPackage			EQU		$00000002			; app, doc, or bundle package
kLSItemInfoIsApplication		EQU		$00000004			; single-file or packaged
kLSItemInfoIsContainer			EQU		$00000008			; folder or volume
kLSItemInfoIsAliasFile			EQU		$00000010			; 'real' alias
kLSItemInfoIsSymlink			EQU		$00000020			; UNIX symbolic link only
kLSItemInfoIsInvisible			EQU		$00000040			; does not include '.' files or '.hidden' entries
kLSItemInfoIsNativeApp			EQU		$00000080			; Carbon or Cocoa native app
kLSItemInfoIsClassicApp			EQU		$00000100			; CFM Classic app
kLSItemInfoAppPrefersNative		EQU		$00000200			; Carbon app that prefers to be launched natively
kLSItemInfoAppPrefersClassic	EQU		$00000400			; Carbon app that prefers to be launched in Classic
kLSItemInfoAppIsScriptable		EQU		$00000800			; App can be scripted
kLSItemInfoIsVolume				EQU		$00001000			; item is a volume
; typedef OptionBits 					LSRolesMask


kLSRolesNone					EQU		$00000001
kLSRolesViewer					EQU		$00000002
kLSRolesEditor					EQU		$00000004
kLSRolesAll						EQU		$FFFFFFFF
; typedef UInt32 						LSKindID


kLSUnknownKindID				EQU		0

kLSUnknownType					EQU		0
kLSUnknownCreator				EQU		0
LSItemInfoRecord		RECORD 0
flags					 ds.l	1				; offset: $0 (0)
filetype				 ds.l	1				; offset: $4 (4)
creator					 ds.l	1				; offset: $8 (8)
extension				 ds.l	1				; offset: $C (12)
iconFileName			 ds.l	1				; offset: $10 (16)
kindID					 ds.l	1				; offset: $14 (20)
sizeof					 EQU *					; size:   $18 (24)
						ENDR
; typedef OptionBits 					LSAcceptanceFlags


kLSAcceptDefault				EQU		$00000001
kLSAcceptAllowLoginUI			EQU		$00000002
; typedef OptionBits 					LSLaunchFlags


kLSLaunchDefaults				EQU		$00000001			; default = open, async, use Info.plist, start Classic
kLSLaunchAndPrint				EQU		$00000002			; print items instead of open them
kLSLaunchReserved2				EQU		$00000004
kLSLaunchReserved3				EQU		$00000008
kLSLaunchReserved4				EQU		$00000010
kLSLaunchReserved5				EQU		$00000020
kLSLaunchReserved6				EQU		$00000040
kLSLaunchInhibitBGOnly			EQU		$00000080			; causes launch to fail if target is background-only.
kLSLaunchDontAddToRecents		EQU		$00000100			; do not add app or documents to recents menus.
kLSLaunchDontSwitch				EQU		$00000200			; don't bring new app to the foreground.
kLSLaunchNoParams				EQU		$00000800			; Use Info.plist to determine launch parameters
kLSLaunchAsync					EQU		$00010000			; launch async; obtain results from kCPSNotifyLaunch.
kLSLaunchStartClassic			EQU		$00020000			; start up Classic environment if required for app.
kLSLaunchInClassic				EQU		$00040000			; force app to launch in Classic environment.
kLSLaunchNewInstance			EQU		$00080000			; Instantiate app even if it is already running.
kLSLaunchAndHide				EQU		$00100000			; Send child a "hide" request as soon as it checks in.
kLSLaunchAndHideOthers			EQU		$00200000			; Hide all other apps when child checks in.
LSLaunchFSRefSpec		RECORD 0
appRef					 ds.l	1				; offset: $0 (0)		;  app to use, can be NULL
numDocs					 ds.l	1				; offset: $4 (4)		;  items to open/print, can be NULL
itemRefs				 ds.l	1				; offset: $8 (8)		;  array of FSRefs
passThruParams			 ds.l	1				; offset: $C (12)		;  passed untouched to application as optional parameter
launchFlags				 ds.l	1				; offset: $10 (16)
asyncRefCon				 ds.l	1				; offset: $14 (20)		;  used if you register for app birth/death notification
sizeof					 EQU *					; size:   $18 (24)
						ENDR
LSLaunchURLSpec			RECORD 0
appURL					 ds.l	1				; offset: $0 (0)		;  app to use, can be NULL
itemURLs				 ds.l	1				; offset: $4 (4)		;  items to open/print, can be NULL
passThruParams			 ds.l	1				; offset: $8 (8)		;  passed untouched to application as optional parameter
launchFlags				 ds.l	1				; offset: $C (12)
asyncRefCon				 ds.l	1				; offset: $10 (16)		;  used if you register for app birth/death notification
sizeof					 EQU *					; size:   $14 (20)
						ENDR


;  ======================================================================================================== 
;  LaunchServices Public Entry Points                                                                       
;  ======================================================================================================== 


; *  LSInit()
; *  
; *  Summary:
; *    Initialize LaunchServices for use.
; *  
; *  Discussion:
; *    LSInit is optional but should be called by top level applications
; *    to explicitly incur any startup costs at a known time. Frameworks
; *    and libraries need never call LSInit.
; *  
; *  Parameters:
; *    
; *    inFlags:
; *      Use kLSInitializeDefaults.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSInit(LSInitializeFlags inFlags)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSInit
	ENDIF



; *  LSTerm()
; *  
; *  Summary:
; *    Terminate LaunchServices use.
; *  
; *  Discussion:
; *    LSTerm is optional but should be called by top level applications
; *    to explicitly terminate LaunchServices activity at a known time.
; *    Frameworks and libraries need never call LSTerm.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSTerm(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSTerm
	ENDIF



; *  LSCopyItemInfoForRef()
; *  
; *  Summary:
; *    Return information about an item.
; *  
; *  Discussion:
; *    Returns as much or as little information as requested about
; *    inItemRef. Some information is available in a thread-safe manner,
; *    some is not. All CFStrings must be released after use.
; *  
; *  Parameters:
; *    
; *    inItemRef:
; *      The FSRef of the item about which information is requested.
; *    
; *    inWhichInfo:
; *      Flags indicating which information to return
; *    
; *    outItemInfo:
; *      Information is returned in this structure. Must not be NULL
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSCopyItemInfoForRef(const FSRef *inItemRef, LSRequestedInfo inWhichInfo, LSItemInfoRecord *outItemInfo)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSCopyItemInfoForRef
	ENDIF



; *  LSCopyItemInfoForURL()
; *  
; *  Summary:
; *    Return information about an item.
; *  
; *  Discussion:
; *    Returns as much or as little information as requested about
; *    inURL. Some information is available in a thread-safe manner,
; *    some is not. All CFStrings must be released after use.
; *  
; *  Parameters:
; *    
; *    inURL:
; *      The CFURLRef of the item about which information is requested.
; *    
; *    inWhichInfo:
; *      Flags indicating which information to return
; *    
; *    outItemInfo:
; *      Information is returned in this structure. Must not be NULL
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSCopyItemInfoForURL(CFURLRef inURL, LSRequestedInfo inWhichInfo, LSItemInfoRecord *outItemInfo)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSCopyItemInfoForURL
	ENDIF



; *  LSCopyKindStringForRef()
; *  
; *  Summary:
; *    Get the kind string for an item.
; *  
; *  Discussion:
; *    Returns the kind string as used in the Finder and elsewhere for
; *    inFSRef. The CFStringRef must be released after use.
; *  
; *  Parameters:
; *    
; *    inFSRef:
; *      The item for which the kind string is requested.
; *    
; *    outKindString:
; *      A non-NULL CFStringRef* into which the kind string will be
; *      copied. This CFStringRef must be released after use.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSCopyKindStringForRef(const FSRef *inFSRef, CFStringRef *outKindString)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSCopyKindStringForRef
	ENDIF



; *  LSCopyKindStringForURL()
; *  
; *  Summary:
; *    Get the kind string for an item.
; *  
; *  Discussion:
; *    Returns the kind string as used in the Finder and elsewhere for
; *    inURL. The CFStringRef must be released after use.
; *  
; *  Parameters:
; *    
; *    inURL:
; *      The item for which the kind string is requested.
; *    
; *    outKindString:
; *      A non-NULL CFStringRef* into which the kind string will be
; *      copied. This CFStringRef must be released after use.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSCopyKindStringForURL(CFURLRef inURL, CFStringRef *outKindString)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSCopyKindStringForURL
	ENDIF



; *  LSGetApplicationForItem()
; *  
; *  Summary:
; *    Return the application used to open an item.
; *  
; *  Discussion:
; *    Consults the binding tables to return the application that would
; *    be used to open inItemRef if it were double-clicked in the
; *    Finder. This application will be the user-specified override if
; *    appropriate or the default otherwise. If no application is known
; *    to LaunchServices suitable for opening this item,
; *    kLSApplicationNotFoundErr will be returned.
; *  
; *  Parameters:
; *    
; *    inItemRef:
; *      The FSRef of the item for which the application is requested.
; *    
; *    inRoleMask:
; *      Whether to return the editor or viewer for inItemRef. If you
; *      don't care which, use kLSRolesAll.
; *    
; *    outAppRef:
; *      Filled in with the FSRef of the application if not NULL.
; *    
; *    outAppURL:
; *      Filled in with the CFURLRef of the application if not NULL.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSGetApplicationForItem(const FSRef *inItemRef, LSRolesMask inRoleMask, FSRef *outAppRef, CFURLRef *outAppURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSGetApplicationForItem
	ENDIF



; *  LSGetApplicationForInfo()
; *  
; *  Summary:
; *    Return the application used to open items with particular data.
; *  
; *  Discussion:
; *    Consults the binding tables to return the application that would
; *    be used to open items with type, creator, and/or extension as
; *    provided if they were double-clicked in the Finder. This
; *    application will be the default for items like this if one has
; *    been set. If no application is known to LaunchServices suitable
; *    for opening such items, kLSApplicationNotFoundErr will be
; *    returned. Not all three input parameters can be NULL at the same
; *    time nor can both output parameters be NULL at the same time.
; *  
; *  Parameters:
; *    
; *    inType:
; *      The file type to consider. Can be kLSUnknownType.
; *    
; *    inCreator:
; *      The file creator to consider. Can be kLSUnknownCreator.
; *    
; *    inExtension:
; *      The file name extension to consider. Can be NULL.
; *    
; *    inRoleMask:
; *      Whether to return the editor or viewer for inItemRef. If you
; *      don't care which, use kLSRolesAll.
; *    
; *    outAppRef:
; *      Filled in with the FSRef of the application if not NULL.
; *    
; *    outAppURL:
; *      Filled in with the CFURLRef of the application if not NULL.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSGetApplicationForInfo(OSType inType, OSType inCreator, CFStringRef inExtension, LSRolesMask inRoleMask, FSRef *outAppRef, CFURLRef *outAppURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSGetApplicationForInfo
	ENDIF



; *  LSGetApplicationForURL()
; *  
; *  Summary:
; *    Return the application used to open an item.
; *  
; *  Discussion:
; *    Consults the binding tables to return the application that would
; *    be used to open inURL if it were double-clicked in the Finder.
; *    This application will be the user-specified override if
; *    appropriate or the default otherwise. If no application is known
; *    to LaunchServices suitable for opening this item,
; *    kLSApplicationNotFoundErr will be returned.
; *  
; *  Parameters:
; *    
; *    inURL:
; *      The CFURLRef of the item for which the application is requested.
; *    
; *    inRoleMask:
; *      Whether to return the editor or viewer for inItemRef. If you
; *      don't care which, use kLSRolesAll.
; *    
; *    outAppRef:
; *      Filled in with the FSRef of the application if not NULL.
; *    
; *    outAppURL:
; *      Filled in with the CFURLRef of the application if not NULL.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSGetApplicationForURL(CFURLRef inURL, LSRolesMask inRoleMask, FSRef *outAppRef, CFURLRef *outAppURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSGetApplicationForURL
	ENDIF



; *  LSFindApplicationForInfo()
; *  
; *  Summary:
; *    Locate a specific application.
; *  
; *  Discussion:
; *    Returns the application with the corresponding input information.
; *    The registry of applications is consulted first in order of
; *    bundleID, then creator, then name. All comparisons are case
; *    insensitive and 'ties' are decided first by version, then by
; *    native vs. Classic.
; *  
; *  Parameters:
; *    
; *    inCreator:
; *      The file creator to consider. Can be kLSUnknownCreator.
; *    
; *    inBundleID:
; *      The bundle ID to consider. Can be NULL.
; *    
; *    inName:
; *      The name to consider. Can be NULL. Must include any extensions
; *      that are part of the file system name, e.g. '.app'.
; *    
; *    outAppRef:
; *      Filled in with the FSRef of the application if not NULL.
; *    
; *    outAppURL:
; *      Filled in with the CFURLRef of the application if not NULL.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSFindApplicationForInfo(OSType inCreator, CFStringRef inBundleID, CFStringRef inName, FSRef *outAppRef, CFURLRef *outAppURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSFindApplicationForInfo
	ENDIF



; *  LSCanRefAcceptItem()
; *  
; *  Summary:
; *    Determine whether an item can accept another item.
; *  
; *  Discussion:
; *    Returns in outAcceptsItem whether inTargetRef can accept
; *    inItemFSRef as in a drag and drop operation. If inRoleMask is
; *    other than kLSRolesAll then make sure inTargetRef claims to
; *    fulfill the requested role.
; *  
; *  Parameters:
; *    
; *    inItemFSRef:
; *      FSRef of the item about which acceptance is requested.
; *    
; *    inTargetRef:
; *      FSRef of the potential target.
; *    
; *    inRoleMask:
; *      The role(s) the target must claim in order to consider
; *      acceptance.
; *    
; *    inFlags:
; *      Use kLSAcceptDefault.
; *    
; *    outAcceptsItem:
; *      Filled in with result. Must not be NULL.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSCanRefAcceptItem(const FSRef *inItemFSRef, const FSRef *inTargetRef, LSRolesMask inRoleMask, LSAcceptanceFlags inFlags, Boolean *outAcceptsItem)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSCanRefAcceptItem
	ENDIF



; *  LSCanURLAcceptURL()
; *  
; *  Summary:
; *    Determine whether an item can accept another item.
; *  
; *  Discussion:
; *    Returns in outAcceptsItem whether inTargetURL can accept
; *    inItemURL as in a drag and drop operation. If inRoleMask is other
; *    than kLSRolesAll then make sure inTargetRef claims to fulfill the
; *    requested role.
; *  
; *  Parameters:
; *    
; *    inItemURL:
; *      CFURLRef of the item about which acceptance is requested.
; *    
; *    inTargetURL:
; *      CFURLRef of the potential target.
; *    
; *    inRoleMask:
; *      The role(s) the target must claim in order to consider
; *      acceptance.
; *    
; *    inFlags:
; *      Use kLSAcceptDefault.
; *    
; *    outAcceptsItem:
; *      Filled in with result. Must not be NULL.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSCanURLAcceptURL(CFURLRef inItemURL, CFURLRef inTargetURL, LSRolesMask inRoleMask, LSAcceptanceFlags inFlags, Boolean *outAcceptsItem)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSCanURLAcceptURL
	ENDIF



; *  LSOpenFSRef()
; *  
; *  Summary:
; *    Open an application, document, or folder.
; *  
; *  Discussion:
; *    Opens applications, documents, and folders. Applications are
; *    opened via an 'oapp' or 'rapp' event. Documents are opened in
; *    their user-overridden or default applications as appropriate.
; *    Folders are opened in the Finder. Use the more specific
; *    LSOpenFromRefSpec for more control over launching.
; *  
; *  Parameters:
; *    
; *    inRef:
; *      The FSRef of the item to launch.
; *    
; *    outLaunchedRef:
; *      The FSRef of the item actually launched. For inRefs that are
; *      documents, outLaunchedRef will be the application used to
; *      launch the document. Can be NULL.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSOpenFSRef(const FSRef *inRef, FSRef *outLaunchedRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSOpenFSRef
	ENDIF



; *  LSOpenCFURLRef()
; *  
; *  Summary:
; *    Open an application, document, or folder.
; *  
; *  Discussion:
; *    Opens applications, documents, and folders. Applications are
; *    opened via an 'oapp' or 'rapp' event. Documents are opened in
; *    their user-overridden or default applications as appropriate.
; *    Folders are opened in the Finder. Use the more specific
; *    LSOpenFromURLSpec for more control over launching.
; *  
; *  Parameters:
; *    
; *    inURL:
; *      The CFURLRef of the item to launch.
; *    
; *    outLaunchedURL:
; *      The CFURLRef of the item actually launched. For inURLs that are
; *      documents, outLaunchedURL will be the application used to
; *      launch the document. Can be NULL.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSOpenCFURLRef(CFURLRef inURL, CFURLRef *outLaunchedURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSOpenCFURLRef
	ENDIF



; *  LSOpenFromRefSpec()
; *  
; *  Summary:
; *    Opens an application or one or more documents or folders.
; *  
; *  Discussion:
; *    Opens applications, documents, and folders.
; *  
; *  Parameters:
; *    
; *    inLaunchSpec:
; *      The specification of what to launch and how to launch it.
; *    
; *    outLaunchedRef:
; *      The FSRef of the item actually launched. For inRefs that are
; *      documents, outLaunchedRef will be the application used to
; *      launch the document. Can be NULL.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSOpenFromRefSpec(const LSLaunchFSRefSpec *inLaunchSpec, FSRef *outLaunchedRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSOpenFromRefSpec
	ENDIF



; *  LSOpenFromURLSpec()
; *  
; *  Summary:
; *    Opens an application or one or more documents or folders.
; *  
; *  Discussion:
; *    Opens applications, documents, and folders.
; *  
; *  Parameters:
; *    
; *    inLaunchSpec:
; *      The specification of what to launch and how to launch it.
; *    
; *    outLaunchedURL:
; *      The CFURLRef of the item actually launched. For inURLs that are
; *      documents, outLaunchedURL will be the application used to
; *      launch the document. Can be NULL.
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus LSOpenFromURLSpec(const LSLaunchURLSpec *inLaunchSpec, CFURLRef *outLaunchedURL)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LSOpenFromURLSpec
	ENDIF


	ENDIF ; __LAUNCHSERVICES__ 


;
;    File:       Navigation.a
;
;    Contains:   Navigation Services Interfaces
;
;    Version:    Technology: Navigation 3.0
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1996-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__NAVIGATION__') = 'UNDEFINED' THEN
__NAVIGATION__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__APPLEEVENTS__') = 'UNDEFINED' THEN
	include 'AppleEvents.a'
	ENDIF
	IF &TYPE('__TRANSLATION__') = 'UNDEFINED' THEN
	include 'Translation.a'
	ENDIF
	IF &TYPE('__MACWINDOWS__') = 'UNDEFINED' THEN
	include 'MacWindows.a'
	ENDIF
	IF &TYPE('__CODEFRAGMENTS__') = 'UNDEFINED' THEN
	include 'CodeFragments.a'
	ENDIF
	IF &TYPE('__MACERRORS__') = 'UNDEFINED' THEN
	include 'MacErrors.a'
	ENDIF
	IF &TYPE('__CFARRAY__') = 'UNDEFINED' THEN
	include 'CFArray.a'
	ENDIF
	IF &TYPE('__CFSTRING__') = 'UNDEFINED' THEN
	include 'CFString.a'
	ENDIF


; typedef UInt32						NavAskSaveChangesAction
															; input action codes for NavAskSaveChanges() 
kNavSaveChangesClosingDocument	EQU		1
kNavSaveChangesQuittingApplication EQU	2
kNavSaveChangesOther			EQU		0


; typedef UInt32						NavAskSaveChangesResult
															; result codes for NavAskSaveChanges() 
kNavAskSaveChangesSave			EQU		1
kNavAskSaveChangesCancel		EQU		2
kNavAskSaveChangesDontSave		EQU		3


; typedef UInt32						NavAskDiscardChangesResult
															; result codes for NavAskDiscardChanges() 
kNavAskDiscardChanges			EQU		1
kNavAskDiscardChangesCancel		EQU		2


; typedef SInt16						NavFilterModes
															; which elements are being filtered for objects: 
kNavFilteringBrowserList		EQU		0
kNavFilteringFavorites			EQU		1
kNavFilteringRecents			EQU		2
kNavFilteringShortCutVolumes	EQU		3
kNavFilteringLocationPopup		EQU		4					; for v1.1 or greater 


kNavFileOrFolderVersion			EQU		1
NavFileOrFolderInfo		RECORD 0
version					 ds.w	1				; offset: $0 (0)
isFolder				 ds.b	1				; offset: $2 (2)
visible					 ds.b	1				; offset: $3 (3)
creationDate			 ds.l	1				; offset: $4 (4)
modificationDate		 ds.l	1				; offset: $8 (8)
locked					 ds.b	1				; offset: $C (12)		;  file is locked 
resourceOpen			 ds.b	1				; offset: $D (13)		;  resource fork is opened 
dataOpen				 ds.b	1				; offset: $E (14)		;  data fork is opened 
reserved1				 ds.b	1				; offset: $F (15)
dataSize				 ds.l	1				; offset: $10 (16)		;  size of the data fork 
resourceSize			 ds.l	1				; offset: $14 (20)		;  size of the resource fork 
finderInfo				 ds		FInfo			; offset: $18 (24)		;  more file info: 
finderXInfo				 ds		FXInfo			; offset: $28 (40)
						 ORG 12
shareable				 ds.b	1				; offset: $C (12)
sharePoint				 ds.b	1				; offset: $D (13)
mounted					 ds.b	1				; offset: $E (14)
readable				 ds.b	1				; offset: $F (15)
writeable				 ds.b	1				; offset: $10 (16)
reserved2				 ds.b	1				; offset: $11 (17)
numberOfFiles			 ds.l	1				; offset: $12 (18)
finderDInfo				 ds		DInfo			; offset: $16 (22)
finderDXInfo			 ds		DXInfo			; offset: $26 (38)
folderType				 ds.l	1				; offset: $36 (54)		;  package type, For struct version >= 1 
folderCreator			 ds.l	1				; offset: $3A (58)		;  package creator, For struct version >= 1 
reserved3				 ds.b	206				; offset: $3E (62)
sizeof					 EQU *					; size:   $10C (268)
						ENDR
NavEventDataInfo		RECORD 0
event					 ds.l	1				; offset: $0 (0)		;  for event processing 
						 ORG 0
param					 ds.l	1				; offset: $0 (0)		;  points to event specific data 
sizeof					 EQU *					; size:   $4 (4)
						ENDR
NavEventData			RECORD 0
eventDataParms			 ds		NavEventDataInfo ; offset: $0 (0)		;  the event data 
itemHit					 ds.w	1				; offset: $4 (4)		;  the dialog item number, for v1.1 or greater 
sizeof					 EQU *					; size:   $6 (6)
						ENDR


; *  NavDialogRef
; *  
; *  Summary:
; *    Opaque Navigation Services dialog identifier
; *  
; *  Discussion:
; *    A NavDialogRef is an opaque reference to an instance of a
; *    Navigation Services dialog. A new NavDialogRef is returned from
; *    any of the NavCreateXXXDialog functions and is later disposed
; *    with the NavDialogDispose function. NavDialogRef is the new name
; *    for the NavContext type, and thus when a client's event proc is
; *    called, the value of the NavCBRec.context field is the same as
; *    the NavDialogRef returned from the corresponding
; *    NavCreateXXXDialog. A NavDialogRef is distinct from, and is not
; *    interchangable with, a Dialog Manager DialogRef.
; 



	IF CALL_NOT_IN_CARBON THEN
;  NavContext is the old name for NavDialogRef 
; typedef NavDialogRef 					NavContext

	ENDIF	; CALL_NOT_IN_CARBON


; *  NavUserAction
; *  
; *  Summary:
; *    Indicates which user action dismissed a dialog
; *  
; *  Discussion:
; *    The following values indicate which action was taken by the user
; *    to dismiss a Navigation Services dialog. NavUserAction is used
; *    only with Carbon dialogs (dialogs created with the
; *    NavCreateXXXDialog functions).
; 


; typedef UInt32						NavUserAction
kNavUserActionNone				EQU		0
kNavUserActionCancel			EQU		1
kNavUserActionOpen				EQU		2
kNavUserActionSaveAs			EQU		3
kNavUserActionChoose			EQU		4
kNavUserActionNewFolder			EQU		5
kNavUserActionSaveChanges		EQU		6
kNavUserActionDontSaveChanges	EQU		7
kNavUserActionDiscardChanges	EQU		8


kNavCBRecVersion				EQU		1


; *  NavCBRec
; *  
; *  Summary:
; *    A structure passed to event and preview callbacks
; *  
; *  Discussion:
; *    The NavCBRec structure is passed to the client's event proc or
; *    custom preview proc. It provides information that is specific to
; *    each event type. New for Carbon: the userAction field.
; 

NavCBRec				RECORD 0
version					 ds.w	1				; offset: $0 (0)
context					 ds.l	1				; offset: $2 (2)
window					 ds.l	1				; offset: $6 (6)
customRect				 ds		Rect			; offset: $A (10)
previewRect				 ds		Rect			; offset: $12 (18)
eventData				 ds		NavEventData	; offset: $1A (26)
userAction				 ds.l	1				; offset: $20 (32)
reserved				 ds.b	218				; offset: $24 (36)
sizeof					 EQU *					; size:   $FE (254)
						ENDR
; typedef struct NavCBRec *				NavCBRecPtr



; *  NavEventCallbackMessage
; *  
; *  Summary:
; *    Identifies the message type being sent to the client's event proc
; 


; typedef SInt32						NavEventCallbackMessage
kNavCBEvent						EQU		0
kNavCBCustomize					EQU		1
kNavCBStart						EQU		2
kNavCBTerminate					EQU		3
kNavCBAdjustRect				EQU		4
kNavCBNewLocation				EQU		5
kNavCBShowDesktop				EQU		6
kNavCBSelectEntry				EQU		7
kNavCBPopupMenuSelect			EQU		8
kNavCBAccept					EQU		9
kNavCBCancel					EQU		10
kNavCBAdjustPreview				EQU		11
kNavCBUserAction				EQU		12
kNavCBOpenSelection				EQU		$80000000
; typedef void *						NavCallBackUserData

;  for events and customization: 
;  for preview support: 
;  filtering callback information: 

; *  NewNavEventUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewNavPreviewUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewNavObjectFilterUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeNavEventUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeNavPreviewUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeNavObjectFilterUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeNavEventUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeNavPreviewUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeNavObjectFilterUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; typedef SInt32						NavCustomControlMessage
kNavCtlShowDesktop				EQU		0					;    show desktop,           parms = nil 
kNavCtlSortBy					EQU		1					;    sort key field,       parms->NavSortKeyField 
kNavCtlSortOrder				EQU		2					;    sort order,              parms->NavSortOrder 
kNavCtlScrollHome				EQU		3					;    scroll list home,       parms = nil 
kNavCtlScrollEnd				EQU		4					;    scroll list end,      parms = nil 
kNavCtlPageUp					EQU		5					;    page list up,          parms = nil 
kNavCtlPageDown					EQU		6					;    page list down,          parms = nil 
kNavCtlGetLocation				EQU		7					;    get current location,   parms<-AEDesc* 
kNavCtlSetLocation				EQU		8					;    set current location,   parms->AEDesc* 
kNavCtlGetSelection				EQU		9					;    get current selection,     parms<-AEDescList* 
kNavCtlSetSelection				EQU		10					;    set current selection,     parms->AEDescList* 
kNavCtlShowSelection			EQU		11					;    make selection visible,       parms = nil 
kNavCtlOpenSelection			EQU		12					;    open view of selection,       parms = nil 
kNavCtlEjectVolume				EQU		13					;    eject volume,          parms->vRefNum 
kNavCtlNewFolder				EQU		14					;    create a new folder,     parms->StringPtr 
kNavCtlCancel					EQU		15					;    cancel dialog,          parms = nil 
kNavCtlAccept					EQU		16					;    accept dialog default,     parms = nil 
kNavCtlIsPreviewShowing			EQU		17					;    query preview status,   parms<-Boolean 
kNavCtlAddControl				EQU		18					;  add one control to dialog,    parms->ControlHandle 
kNavCtlAddControlList			EQU		19					;    add control list to dialog,    parms->Handle (DITL rsrc) 
kNavCtlGetFirstControlID		EQU		20					;    get 1st control ID,         parms<-UInt16 
kNavCtlSelectCustomType			EQU		21					;    select a custom menu item  parms->NavMenuItemSpec* 
kNavCtlSelectAllType			EQU		22					;  select an "All" menu item parms->SInt16 
kNavCtlGetEditFileName			EQU		23					;    get save dlog's file name  parms<-StringPtr 
kNavCtlSetEditFileName			EQU		24					;    set save dlog's file name  parms->StringPtr 
kNavCtlSelectEditFileName		EQU		25					;    select save dlog file name parms->ControlEditTextSelectionRec*, v1.1 or greater 
kNavCtlBrowserSelectAll			EQU		26					;  re-scan the browser list  parms = nil, v2.0 or greater 
kNavCtlGotoParent				EQU		27					;  navigate to parent         parms = nil, v2.0 or greater 
kNavCtlSetActionState			EQU		28					;  restrict navigation      parms->NavActionState (flags), v2.0 or greater 
kNavCtlBrowserRedraw			EQU		29					;  rescan browser list      parms = nil, v2.0 or greater 
kNavCtlTerminate				EQU		30					;  terminate/dismiss dialog  parms = nil, v2.0 or greater 

; typedef UInt32						NavActionState
kNavNormalState					EQU		$00000000			; normal/default state 
kNavDontOpenState				EQU		$00000001			; disallow opening files/folders 
kNavDontSaveState				EQU		$00000002			; disallow saving files 
kNavDontChooseState				EQU		$00000004			; disallow choosing objects 
kNavDontNewFolderState			EQU		$00000010			; disallow creating new folders 

; typedef UInt16						NavPopupMenuItem
kNavAllKnownFiles				EQU		0
kNavAllReadableFiles			EQU		1
kNavAllFiles					EQU		2

; typedef UInt16						NavSortKeyField
kNavSortNameField				EQU		0
kNavSortDateField				EQU		1


; typedef UInt16						NavSortOrder
kNavSortAscending				EQU		0
kNavSortDescending				EQU		1


; typedef UInt32						NavDialogOptionFlags
kNavDefaultNavDlogOptions		EQU		$000000E4			; use defaults for all the options 
kNavNoTypePopup					EQU		$00000001			; don't show file type/extension popup on Open/Save 
kNavDontAutoTranslate			EQU		$00000002			; don't automatically translate on Open 
kNavDontAddTranslateItems		EQU		$00000004			; don't add translation choices on Open/Save 
kNavAllFilesInPopup				EQU		$00000010			; "All Files" menu item in the type popup on Open 
kNavAllowStationery				EQU		$00000020			; allow saving of stationery files 
kNavAllowPreviews				EQU		$00000040			; allow preview to show 
kNavAllowMultipleFiles			EQU		$00000080			; allow multiple items to be selected 
kNavAllowInvisibleFiles			EQU		$00000100			; allow invisible items to be shown 
kNavDontResolveAliases			EQU		$00000200			; don't resolve aliases 
kNavSelectDefaultLocation		EQU		$00000400			; make the default location the browser selection 
kNavSelectAllReadableItem		EQU		$00000800			; make the dialog select "All Readable Documents" on open 
kNavSupportPackages				EQU		$00001000			; recognize file system packages, v2.0 or greater 
kNavAllowOpenPackages			EQU		$00002000			; allow opening of packages, v2.0 or greater 
kNavDontAddRecents				EQU		$00004000			; don't add chosen objects to the recents list, v2.0 or greater 
kNavDontUseCustomFrame			EQU		$00008000			; don't draw the custom area bevel frame, v2.0 or greater 
kNavDontConfirmReplacement		EQU		$00010000			; don't show the "Replace File?" alert on save conflict, v3.0 or greater 

; typedef UInt32						NavTranslationOptions
kNavTranslateInPlace			EQU		0					;    translate in place, replacing translation source file (default for Save) 
kNavTranslateCopy				EQU		1					;    translate to a copy of the source file (default for Open) 


kNavMenuItemSpecVersion			EQU		0
NavMenuItemSpec			RECORD 0
version					 ds.w	1				; offset: $0 (0)
menuCreator				 ds.l	1				; offset: $2 (2)
menuType				 ds.l	1				; offset: $6 (6)
menuItemName			 ds		Str255			; offset: $A (10)
reserved				 ds.b	245				; offset: $10A (266)
						 ORG 512
sizeof					 EQU *					; size:   $200 (512)
						ENDR
NavMenuItemSpecArray	RECORD 0
elements				 ds.b	1 * NavMenuItemSpec.sizeof
sizeof					 EQU *					; size:   $200 (512)
						ENDR


; typedef NavMenuItemSpecArray *		NavMenuItemSpecArrayPtr

; typedef NavMenuItemSpecArrayPtr *		NavMenuItemSpecArrayHandle

; typedef NavMenuItemSpecArrayPtr 		NavMenuItemSpecPtr

; typedef NavMenuItemSpecArrayHandle 	NavMenuItemSpecHandle


kNavGenericSignature			EQU		'****'
NavTypeList				RECORD 0
componentSignature		 ds.l	1				; offset: $0 (0)
reserved				 ds.w	1				; offset: $4 (4)
osTypeCount				 ds.w	1				; offset: $6 (6)
osType					 ds.l	1				; offset: $8 (8) <-- really an array of length one
sizeof					 EQU *					; size:   $C (12)
						ENDR
; typedef struct NavTypeList *			NavTypeListPtr

; typedef NavTypeListPtr *				NavTypeListHandle


kNavDialogOptionsVersion		EQU		0
NavDialogOptions		RECORD 0
version					 ds.w	1				; offset: $0 (0)
dialogOptionFlags		 ds.l	1				; offset: $2 (2)		;  option flags for affecting the dialog's behavior 
location				 ds		Point			; offset: $6 (6)		;  top-left location of the dialog, or {-1,-1} for default position 
clientName				 ds		Str255			; offset: $A (10)
windowTitle				 ds		Str255			; offset: $10A (266)
actionButtonLabel		 ds		Str255			; offset: $20A (522)	;  label of the default button (or null string for default) 
cancelButtonLabel		 ds		Str255			; offset: $30A (778)	;  label of the cancel button (or null string for default) 
savedFileName			 ds		Str255			; offset: $40A (1034)	;  default name for text box in NavPutFile (or null string for default) 
message					 ds		Str255			; offset: $50A (1290)	;  custom message prompt (or null string for default) 
preferenceKey			 ds.l	1				; offset: $60A (1546)	;  a key for to managing preferences for using multiple utility dialogs 
popupExtension			 ds.l	1				; offset: $60E (1550)	;  extended popup menu items, an array of NavMenuItemSpecs 
reserved				 ds.b	494				; offset: $612 (1554)
sizeof					 EQU *					; size:   $800 (2048)
						ENDR

kNavReplyRecordVersion			EQU		1


; *  NavReplyRecord
; *  
; *  Summary:
; *    A structure describing the results of a Nav Services dialog
; *  
; *  Discussion:
; *    A reply record is the result of a Nav Services file dialog. Using
; *    the older API, which is always modal, the client passes the
; *    address of a reply record when invoking the dialog. In the Carbon
; *    API, dialogs may also be window modal or modeless, so the client
; *    requests the reply record when the dialog is complete using
; *    NavDialogGetReply. Either way, a reply record should be disposed
; *    of using NavDisposeReply.
; 

NavReplyRecord			RECORD 0
version					 ds.w	1				; offset: $0 (0)
validRecord				 ds.b	1				; offset: $2 (2)
replacing				 ds.b	1				; offset: $3 (3)
isStationery			 ds.b	1				; offset: $4 (4)
translationNeeded		 ds.b	1				; offset: $5 (5)
selection				 ds		AEDescList		; offset: $6 (6)
keyScript				 ds.w	1				; offset: $E (14)
fileTranslation			 ds.l	1				; offset: $10 (16)
reserved1				 ds.l	1				; offset: $14 (20)
saveFileName			 ds.l	1				; offset: $18 (24)
reserved				 ds.b	227				; offset: $1C (28)
						 ORG 256
sizeof					 EQU *					; size:   $100 (256)
						ENDR

; *  NavLoad()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         not available
; 

;
; pascal OSErr NavLoad(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavLoad
	ENDIF


; *  NavUnload()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         not available
; 

;
; pascal OSErr NavUnload(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavUnload
	ENDIF


; *  NavLibraryVersion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal UInt32 NavLibraryVersion(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavLibraryVersion
	ENDIF


; *  NavGetDefaultDialogOptions()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavGetDefaultDialogOptions(NavDialogOptions *dialogOptions)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavGetDefaultDialogOptions
	ENDIF



; *  NavGetFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavGetFile(AEDesc *defaultLocation, NavReplyRecord *reply, NavDialogOptions *dialogOptions, NavEventUPP eventProc, NavPreviewUPP previewProc, NavObjectFilterUPP filterProc, NavTypeListHandle typeList, void *callBackUD)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavGetFile
	ENDIF


; *  NavPutFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavPutFile(AEDesc *defaultLocation, NavReplyRecord *reply, NavDialogOptions *dialogOptions, NavEventUPP eventProc, OSType fileType, OSType fileCreator, void *callBackUD)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavPutFile
	ENDIF


; *  NavAskSaveChanges()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavAskSaveChanges(NavDialogOptions *dialogOptions, NavAskSaveChangesAction action, NavAskSaveChangesResult *reply, NavEventUPP eventProc, void *callBackUD)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavAskSaveChanges
	ENDIF


; *  NavCustomAskSaveChanges()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavCustomAskSaveChanges(NavDialogOptions *dialogOptions, NavAskSaveChangesResult *reply, NavEventUPP eventProc, void *callBackUD)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCustomAskSaveChanges
	ENDIF


; *  NavAskDiscardChanges()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavAskDiscardChanges(NavDialogOptions *dialogOptions, NavAskDiscardChangesResult *reply, NavEventUPP eventProc, void *callBackUD)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavAskDiscardChanges
	ENDIF


; *  NavChooseFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavChooseFile(AEDesc *defaultLocation, NavReplyRecord *reply, NavDialogOptions *dialogOptions, NavEventUPP eventProc, NavPreviewUPP previewProc, NavObjectFilterUPP filterProc, NavTypeListHandle typeList, void *callBackUD)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavChooseFile
	ENDIF


; *  NavChooseFolder()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavChooseFolder(AEDesc *defaultLocation, NavReplyRecord *reply, NavDialogOptions *dialogOptions, NavEventUPP eventProc, NavObjectFilterUPP filterProc, void *callBackUD)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavChooseFolder
	ENDIF


; *  NavChooseVolume()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavChooseVolume(AEDesc *defaultSelection, NavReplyRecord *reply, NavDialogOptions *dialogOptions, NavEventUPP eventProc, NavObjectFilterUPP filterProc, void *callBackUD)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavChooseVolume
	ENDIF


; *  NavChooseObject()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavChooseObject(AEDesc *defaultLocation, NavReplyRecord *reply, NavDialogOptions *dialogOptions, NavEventUPP eventProc, NavObjectFilterUPP filterProc, void *callBackUD)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavChooseObject
	ENDIF


; *  NavNewFolder()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavNewFolder(AEDesc *defaultLocation, NavReplyRecord *reply, NavDialogOptions *dialogOptions, NavEventUPP eventProc, void *callBackUD)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavNewFolder
	ENDIF


; *  NavTranslateFile()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavTranslateFile(NavReplyRecord *reply, NavTranslationOptions howToTranslate)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavTranslateFile
	ENDIF


; *  NavCompleteSave()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavCompleteSave(NavReplyRecord *reply, NavTranslationOptions howToTranslate)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCompleteSave
	ENDIF


; *  NavCustomControl()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavCustomControl(NavDialogRef dialog, NavCustomControlMessage selector, void *parms)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCustomControl
	ENDIF


; *  NavCreatePreview()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 2.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavCreatePreview(AEDesc *theObject, OSType previewDataType, const void *previewData, Size previewDataSize)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCreatePreview
	ENDIF


; *  NavDisposeReply()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr NavDisposeReply(NavReplyRecord *reply)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavDisposeReply
	ENDIF


; *  NavServicesCanRun()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NavigationLib 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         not available
; 

;
; pascal Boolean NavServicesCanRun(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavServicesCanRun
	ENDIF


	IF TARGET_RT_MAC_CFM THEN
; 
;        NavServicesAvailable() is a macro available only in C/C++.
;        To get the same functionality from pascal or assembly, you need
;        to test if NavigationLib functions are not NULL and call NavServicesCanRun()
;        which will test if NavServices is properly installed.  For instance:
;
;            gNavServicesAvailable = FALSE;
;            IF @NavLibraryVersion <> kUnresolvedCFragSymbolAddress THEN
;                gNavServicesAvailable = NavServicesCanRun;
;            END
;
;

	ELSEIF TARGET_RT_MAC_MACHO THEN
;  Navigation is always available on OS X 
	ELSE
;  NavServicesAvailable() is implemented in Navigation.o for classic 68K clients
	IF CALL_NOT_IN_CARBON THEN

; *  NavServicesAvailable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal Boolean NavServicesAvailable(void)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavServicesAvailable
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON
	ENDIF	; 
;  Carbon API 
;  Includes support for Unicode and long file names (where available). 


kNavDialogCreationOptionsVersion EQU	0



; *  NavDialogCreationOptions
; *  
; *  Summary:
; *    Options used to control the appearance and operation of a Nav
; *    Services dialog
; *  
; *  Discussion:
; *    NavDialogCreationOptions is a preferred replacement for
; *    NavDialogOptions. The new structure uses CFStrings in place of
; *    Pascal strings, and adds fields for setting the dialog modality
; *    and the parent window (for sheet dialogs). A
; *    NavDialogCreationOptions structure can be initialized using
; *    NavDialogGetDefaultCreationOptions. Each of the
; *    NavCreateXXXDialog functions accepts a pointer to the client's
; *    NavDialogCreationOptions structure.
; 

NavDialogCreationOptions RECORD 0
version					 ds.w	1				; offset: $0 (0)
optionFlags				 ds.l	1				; offset: $2 (2)
location				 ds		Point			; offset: $6 (6)
clientName				 ds.l	1				; offset: $A (10)
windowTitle				 ds.l	1				; offset: $E (14)
actionButtonLabel		 ds.l	1				; offset: $12 (18)
cancelButtonLabel		 ds.l	1				; offset: $16 (22)
saveFileName			 ds.l	1				; offset: $1A (26)
message					 ds.l	1				; offset: $1E (30)
preferenceKey			 ds.l	1				; offset: $22 (34)
popupExtension			 ds.l	1				; offset: $26 (38)
modality				 ds.l	1				; offset: $2A (42)
parentWindow			 ds.l	1				; offset: $2E (46)
reserved				 ds.b	16				; offset: $32 (50)
sizeof					 EQU *					; size:   $42 (66)
						ENDR

; *  NavGetDefaultDialogCreationOptions()
; *  
; *  Summary:
; *    Initialize the input structure to default values
; *  
; *  Discussion:
; *    Provided as a convenience to obtain the preferred default options
; *    for use in creating any Nav Services dialog.
; *  
; *  Parameters:
; *    
; *    outOptions:
; *      A pointer to the client-allocated options structure to
; *      initialize
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavGetDefaultDialogCreationOptions(NavDialogCreationOptions *outOptions)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavGetDefaultDialogCreationOptions
	ENDIF



; *  NavCreateGetFileDialog()
; *  
; *  Summary:
; *    Create a GetFile dialog
; *  
; *  Discussion:
; *    Use this function to create a dialog designed for opening
; *    document files. This function replaces NavGetFile, allowing new
; *    window modalities, and adding Unicode support. Upon successful
; *    creation, the dialog is not visible. Present and run the dialog
; *    with NavDialogRun. After the dialog is complete, dispose of it
; *    with NavDialogDispose.
; *  
; *  Parameters:
; *    
; *    inOptions:
; *      Options controlling the appearance and behavior of the dialog
; *    
; *    inTypeList:
; *      A creator signature and list of file types to show in the
; *      dialog file browser. If NULL, show all files.
; *    
; *    inEventProc:
; *      The UPP for the client's event callack, or NULL for no event
; *      callback
; *    
; *    inPreviewProc:
; *      The UPP for the client's custom file preview callback, or NULL
; *      for standard previews
; *    
; *    inFilterProc:
; *      The UPP for the client's custom filter callback, or NULL for no
; *      custom file filtering
; *    
; *    inClientData:
; *      A client-defined context value passed to all callback functions
; *    
; *    outDialog:
; *      Upon successful completion, a reference to the created dialog
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavCreateGetFileDialog(const NavDialogCreationOptions *inOptions, NavTypeListHandle inTypeList, NavEventUPP inEventProc, NavPreviewUPP inPreviewProc, NavObjectFilterUPP inFilterProc, void *inClientData, NavDialogRef *outDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCreateGetFileDialog
	ENDIF



; *  NavCreatePutFileDialog()
; *  
; *  Summary:
; *    Create a PutFile dialog
; *  
; *  Discussion:
; *    Use this function to create a dialog designed for setting the
; *    name and location of a document file prior to saving. This
; *    function replaces NavPutFile, allowing new window modalities, and
; *    adding Unicode support. Upon successful creation, the dialog is
; *    not visible. Present and run the dialog with NavDialogRun. After
; *    the dialog is complete, dispose of it with NavDialogDispose.
; *  
; *  Parameters:
; *    
; *    inOptions:
; *      Options controlling the appearance and behavior of the dialog
; *    
; *    inFileType:
; *      The type of the file to be saved. This parameter is used in
; *      conjunction with the inFileCreator parameter to look up the
; *      kind string for the Format popup menu, and to drive the
; *      identification of translation options.
; *    
; *    inFileCreator:
; *      The creator signature of the file to be saved (see inFileType
; *      parameter)
; *    
; *    inEventProc:
; *      The UPP for the client's event callack, or NULL for no event
; *      callback
; *    
; *    inClientData:
; *      A client-defined context value passed to all callback functions
; *    
; *    outDialog:
; *      Upon successful completion, a reference to the created dialog
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavCreatePutFileDialog(const NavDialogCreationOptions *inOptions, OSType inFileType, OSType inFileCreator, NavEventUPP inEventProc, void *inClientData, NavDialogRef *outDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCreatePutFileDialog
	ENDIF



; *  NavCreateAskSaveChangesDialog()
; *  
; *  Summary:
; *    Create an AskSaveChanges dialog
; *  
; *  Discussion:
; *    Use this function to create dialog which asks the user to save,
; *    don't save or cancel closing a document with unsaved changes.
; *    This function replaces NavAskSaveChanges and
; *    NavCustomAskSaveChanges, allowing new window modalities, and
; *    adding Unicode support. Upon successful creation, the dialog is
; *    not visible. Present and run the dialog with NavDialogRun. After
; *    the dialog is complete, dispose of it with NavDialogDispose. To
; *    provide a customized message for the alert, specify an non-NULL
; *    message value in the options structure.
; *  
; *  Parameters:
; *    
; *    inOptions:
; *      Options controlling the appearance and behavior of the dialog
; *    
; *    inAction:
; *      Indicates this usage context for this dialog: closing a
; *      document or quitting an application. This setting affects the
; *      message text displayed to the user.
; *    
; *    inEventProc:
; *      The UPP for the client's event callack, or NULL for no event
; *      callback
; *    
; *    inClientData:
; *      A client-defined context value passed to all callback functions
; *    
; *    outDialog:
; *      Upon successful completion, a reference to the created dialog
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavCreateAskSaveChangesDialog(const NavDialogCreationOptions *inOptions, NavAskSaveChangesAction inAction, NavEventUPP inEventProc, void *inClientData, NavDialogRef *outDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCreateAskSaveChangesDialog
	ENDIF



; *  NavCreateAskDiscardChangesDialog()
; *  
; *  Summary:
; *    Create an AskDiscardChanges dialog
; *  
; *  Discussion:
; *    Use this function to create a dialog which asks the user to
; *    discard changes to a document or cancel. This is most often use
; *    when the user wants to revert a a document to the last saved
; *    revision. This function replaces NavAskDiscardChanges, allowing
; *    new window modalities, and adding Unicode support. Upon
; *    successful creation, the dialog is not visible. Present and run
; *    the dialog with NavDialogRun. After the dialog is complete,
; *    dispose of it with NavDialogDispose.
; *  
; *  Parameters:
; *    
; *    inOptions:
; *      Options controlling the appearance and behavior of the dialog
; *    
; *    inEventProc:
; *      The UPP for the client's event callack, or NULL for no event
; *      callback
; *    
; *    inClientData:
; *      A client-defined context value passed to all callback functions
; *    
; *    outDialog:
; *      Upon successful completion, a reference to the created dialog
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavCreateAskDiscardChangesDialog(const NavDialogCreationOptions *inOptions, NavEventUPP inEventProc, void *inClientData, NavDialogRef *outDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCreateAskDiscardChangesDialog
	ENDIF



; *  NavCreateChooseFileDialog()
; *  
; *  Summary:
; *    Create a ChooseFile dialog
; *  
; *  Discussion:
; *    Use this function to create a dialog designed for selecting one
; *    file as the target of an operation. A ChooseFile dialog is a
; *    simple version a GetFile dialog. This function replaces
; *    NavChooseFile, allowing new window modalities, and adding Unicode
; *    support. Upon successful creation, the dialog is not visible.
; *    Present and run the dialog with NavDialogRun. After the dialog is
; *    complete, dispose of it with NavDialogDispose.
; *  
; *  Parameters:
; *    
; *    inOptions:
; *      Options controlling the appearance and behavior of the dialog
; *    
; *    inTypeList:
; *      A creator signature and list of file types to show in the
; *      dialog file browser. If NULL, show all files.
; *    
; *    inEventProc:
; *      The UPP for the client's event callack, or NULL for no event
; *      callback
; *    
; *    inPreviewProc:
; *      The UPP for the client's custom file preview callback, or NULL
; *      for standard previews
; *    
; *    inFilterProc:
; *      The UPP for the client's custom filter callback, or NULL for no
; *      custom file filtering
; *    
; *    inClientData:
; *      A client-defined context value passed to all callback functions
; *    
; *    outDialog:
; *      Upon successful completion, a reference to the created dialog
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavCreateChooseFileDialog(const NavDialogCreationOptions *inOptions, NavTypeListHandle inTypeList, NavEventUPP inEventProc, NavPreviewUPP inPreviewProc, NavObjectFilterUPP inFilterProc, void *inClientData, NavDialogRef *outDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCreateChooseFileDialog
	ENDIF



; *  NavCreateChooseFolderDialog()
; *  
; *  Summary:
; *    Create a ChooseFolder dialog
; *  
; *  Discussion:
; *    Use this function to create a dialog designed for selecting a
; *    folder as the target of an operation. This function replaces
; *    NavChooseFolder, allowing new window modalities, and adding
; *    Unicode support. Upon successful creation, the dialog is not
; *    visible. Present and run the dialog with NavDialogRun. After the
; *    dialog is complete, dispose of it with NavDialogDispose.
; *  
; *  Parameters:
; *    
; *    inOptions:
; *      Options controlling the appearance and behavior of the dialog
; *    
; *    inEventProc:
; *      The UPP for the client's event callack, or NULL for no event
; *      callback
; *    
; *    inFilterProc:
; *      The UPP for the client's custom filter callback, or NULL for no
; *      custom file filtering
; *    
; *    inClientData:
; *      A client-defined context value passed to all callback functions
; *    
; *    outDialog:
; *      Upon successful completion, a reference to the created dialog
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavCreateChooseFolderDialog(const NavDialogCreationOptions *inOptions, NavEventUPP inEventProc, NavObjectFilterUPP inFilterProc, void *inClientData, NavDialogRef *outDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCreateChooseFolderDialog
	ENDIF



; *  NavCreateChooseVolumeDialog()
; *  
; *  Summary:
; *    Create a ChooseVolume dialog
; *  
; *  Discussion:
; *    Use this function to create a dialog designed for selecting a
; *    volume as the target of an operation. This function replaces
; *    NavChooseVolume, allowing new window modalities, and adding
; *    Unicode support. Upon successful creation, the dialog is not
; *    visible. Present and run the dialog with NavDialogRun. After the
; *    dialog is complete, dispose of it with NavDialogDispose.
; *  
; *  Parameters:
; *    
; *    inOptions:
; *      Options controlling the appearance and behavior of the dialog
; *    
; *    inEventProc:
; *      The UPP for the client's event callack, or NULL for no event
; *      callback
; *    
; *    inFilterProc:
; *      The UPP for the client's custom filter callback, or NULL for no
; *      custom file filtering
; *    
; *    inClientData:
; *      A client-defined context value passed to all callback functions
; *    
; *    outDialog:
; *      Upon successful completion, a reference to the created dialog
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavCreateChooseVolumeDialog(const NavDialogCreationOptions *inOptions, NavEventUPP inEventProc, NavObjectFilterUPP inFilterProc, void *inClientData, NavDialogRef *outDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCreateChooseVolumeDialog
	ENDIF



; *  NavCreateChooseObjectDialog()
; *  
; *  Summary:
; *    Create a ChooseObject dialog
; *  
; *  Discussion:
; *    Use this function to create a dialog designed for selecting a
; *    file, folder, or volume as the target of an operation. This
; *    function replaces NavChooseObject, allowing new window
; *    modalities, and adding Unicode support. Upon successful creation,
; *    the dialog is not visible. Present and run the dialog with
; *    NavDialogRun. After the dialog is complete, dispose of it with
; *    NavDialogDispose.
; *  
; *  Parameters:
; *    
; *    inOptions:
; *      Options controlling the appearance and behavior of the dialog
; *    
; *    inEventProc:
; *      The UPP for the client's event callack, or NULL for no event
; *      callback
; *    
; *    inPreviewProc:
; *      The UPP for the client's custom file preview callback, or NULL
; *      for standard previews
; *    
; *    inFilterProc:
; *      The UPP for the client's custom filter callback, or NULL for no
; *      custom file filtering
; *    
; *    inClientData:
; *      A client-defined context value passed to all callback functions
; *    
; *    outDialog:
; *      Upon successful completion, a reference to the created dialog
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavCreateChooseObjectDialog(const NavDialogCreationOptions *inOptions, NavEventUPP inEventProc, NavPreviewUPP inPreviewProc, NavObjectFilterUPP inFilterProc, void *inClientData, NavDialogRef *outDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCreateChooseObjectDialog
	ENDIF



; *  NavCreateNewFolderDialog()
; *  
; *  Summary:
; *    Create a NewFolder dialog
; *  
; *  Discussion:
; *    Use this function to create a dialog designed for creating a new
; *    folder. Nav Services creates the folder as specified by the user
; *    and returns a reference to the folder in the selection field of
; *    the reply record. This function replaces NavNewFolder, allowing
; *    new window modalities, and adding Unicode support. Upon
; *    successful creation, the dialog is not visible. Present and run
; *    the dialog with NavDialogRun. After the dialog is complete,
; *    dispose of it with NavDialogDispose.
; *  
; *  Parameters:
; *    
; *    inOptions:
; *      Options controlling the appearance and behavior of the dialog
; *    
; *    inEventProc:
; *      The UPP for the client's event callack, or NULL for no event
; *      callback
; *    
; *    inClientData:
; *      A client-defined context value passed to all callback functions
; *    
; *    outDialog:
; *      Upon successful completion, a reference to the created dialog
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavCreateNewFolderDialog(const NavDialogCreationOptions *inOptions, NavEventUPP inEventProc, void *inClientData, NavDialogRef *outDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavCreateNewFolderDialog
	ENDIF



; *  NavDialogRun()
; *  
; *  Summary:
; *    Show and run a Nav Services dialog
; *  
; *  Discussion:
; *    After a dialog is created with a NavCreateXXXDialog function, the
; *    client can modify the dialog target folder or save file name
; *    using NavCustomControl with the appropriate selectors. The dialog
; *    is finally presented to the user by calling NavDialogRun. If the
; *    dialog is system modal or application modal
; *    (kWindowModalitySystemModal, kWindowModalityAppModal),
; *    NavDialogRun does not return until the dialog has been dismissed.
; *    If the dialog is modeless or window modal (kWindowModalityNone,
; *    kWindowModalityWindowModal), NavDialogRun shows the dialog and
; *    returns immediately. In order to know when the dialog has been
; *    dismissed, the client must watch for the kNavCBUserAction event
; *    sent to the client event proc. Note that on Mac OS 9 and earlier,
; *    all dialogs are modal, even if a modeless or window modal dialog
; *    is requested. However, the kNavCBUserAction event is still sent
; *    to the event proc, so it's possible to use a single programming
; *    model on OS 9 and OS X provided the client assumes NavDialogRun
; *    returns immediately after showing the dialog.
; *  
; *  Parameters:
; *    
; *    inDialog:
; *      The dialog to run
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavDialogRun(NavDialogRef inDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavDialogRun
	ENDIF



; *  NavDialogDispose()
; *  
; *  Summary:
; *    Dispose of a Nav Services dialog
; *  
; *  Discussion:
; *    Call this function when completely finished with a Nav Services
; *    dialog. After calling NavDialogDispose, the dialog reference is
; *    no longer valid.
; *  
; *  Parameters:
; *    
; *    inDialog:
; *      The dialog to dispose
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void NavDialogDispose(NavDialogRef inDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavDialogDispose
	ENDIF



; *  NavDialogGetWindow()
; *  
; *  Summary:
; *    Return the window in which a Nav Services dialog appears
; *  
; *  Discussion:
; *    Note that a valid NavDialogRef may not have a window until
; *    NavDialogRun has been called. If no window exists for the dialog,
; *    NavDialogGetWindow returns NULL.
; *  
; *  Parameters:
; *    
; *    inDialog:
; *      Which dialog
; *  
; *  Result:
; *    The window reference
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern WindowRef NavDialogGetWindow(NavDialogRef inDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavDialogGetWindow
	ENDIF



; *  NavDialogGetUserAction()
; *  
; *  Summary:
; *    Return the user action taken to dismiss a Nav Services dialog
; *  
; *  Discussion:
; *    The user action indicates which button was used to dismiss the
; *    dialog. If a dialog has not been dismissed,
; *    NavDialogGetUserAction returns kNavUserActionNone. If the dialog
; *    is terminated using the kNavCtlTerminate NavCustomControl
; *    selector, the final user action is kNavUserActionNone. For file
; *    dialogs, if the final user action is not kNavUserActionCancel,
; *    then there is a valid reply record which can be obtained with
; *    NavDialogGetReply. Although the user action is sent to the client
; *    event proc as a kNavCBUserAction event, this function is provided
; *    as a convenience for clients of modal dialogs who may find it
; *    easier to get the user action immediately after returning from
; *    NavDialogRun.
; *  
; *  Parameters:
; *    
; *    inDialog:
; *      Which dialog
; *  
; *  Result:
; *    The user action
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern NavUserAction NavDialogGetUserAction(NavDialogRef inDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavDialogGetUserAction
	ENDIF



; *  NavDialogGetReply()
; *  
; *  Summary:
; *    Fill in the provided reply record with the results of the
; *    dismissed dialog.
; *  
; *  Discussion:
; *    Call this function when a file dialog receives a user action
; *    other than kNavUserActionCancel. Upon successful completion, the
; *    reply record contains the results of the dialog session. The
; *    reply record should later be disposed of with NavDisposeReply.
; *  
; *  Parameters:
; *    
; *    inDialog:
; *      Which dialog
; *    
; *    outReply:
; *      A pointer to the client-allocated reply record to be filled in
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavDialogGetReply(NavDialogRef inDialog, NavReplyRecord *outReply)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavDialogGetReply
	ENDIF



; *  NavDialogGetSaveFileName()
; *  
; *  Summary:
; *    Return the current value of the file name edit text field in a
; *    PutFile dialog
; *  
; *  Discussion:
; *    This function can be called at any time on a valid PutFile dialog
; *    to obtain the current value of the save file name. This function
; *    is a Unicode-based replacement for the kNavCtlGetEditFileName
; *    NavCustomControl selector.
; *  
; *  Parameters:
; *    
; *    inPutFileDialog:
; *      Which dialog
; *  
; *  Result:
; *    The save file name as a CFStringRef. The string is immutable. The
; *    client should retain the string if the reference is to be held
; *    beyond the life of the dialog (standard CF retain/release
; *    semantics).
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CFStringRef NavDialogGetSaveFileName(NavDialogRef inPutFileDialog)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavDialogGetSaveFileName
	ENDIF



; *  NavDialogSetSaveFileName()
; *  
; *  Summary:
; *    Set the current value of the file name edit text field in a
; *    PutFile dialog
; *  
; *  Discussion:
; *    This function can be called at any time to set the current save
; *    file name. Use it to set an initial name before calling
; *    NavDialogRun or to change the file name dynamically while a
; *    dialog is running. This function is a Unicode-based replacement
; *    for the kNavCtlSetEditFileName NavCustomControl selector.
; *  
; *  Parameters:
; *    
; *    inPutFileDialog:
; *      Which PutFile dialog
; *    
; *    inFileName:
; *      The file name to use
; *  
; *  Result:
; *    A status code
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus NavDialogSetSaveFileName(NavDialogRef inPutFileDialog, CFStringRef inFileName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NavDialogSetSaveFileName
	ENDIF


	ENDIF ; __NAVIGATION__ 


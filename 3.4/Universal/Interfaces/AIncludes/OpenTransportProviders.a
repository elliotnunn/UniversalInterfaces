;
;    File:       OpenTransportProviders.a
;
;    Contains:   This file contains provider-specific definitions for various built-in providers.
;
;    Version:    Technology: 2.5
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1993-2001 by Apple Computer, Inc. and Mentat Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__OPENTRANSPORTPROVIDERS__') = 'UNDEFINED' THEN
__OPENTRANSPORTPROVIDERS__ SET 1

	IF &TYPE('__OPENTRANSPORT__') = 'UNDEFINED' THEN
	include 'OpenTransport.a'
	ENDIF



;  ***** TCP/IP *****

;  Basic types

; typedef UInt16 						InetPort

; typedef UInt32 						InetHost

;   Enums used as address type designations.

AF_INET							EQU		2					; Traditonal

AF_DNS							EQU		42


;    Enum which can be used to bind to all IP interfaces
;    rather than a specific one.




kOTAnyInetAddress				EQU		0					; Wildcard

;   Define the InetSvcRef type.  This type needs special
;   processing because in C++ it's a subclass of TProvider.
;   See the definition of TEndpointRef in "OpenTransport.h"
;   for the logic behind this definition.






kDefaultInternetServicesPath	EQU		-3
;  Shared library prefixes

;  Module Names

;  XTI Options

;  Protocol levels


INET_IP							EQU		$00
INET_TCP						EQU		$06
INET_UDP						EQU		$11
;  TCP Level Options


TCP_NODELAY						EQU		$01
TCP_MAXSEG						EQU		$02
TCP_NOTIFY_THRESHOLD			EQU		$10					;* not a real XTI option 
TCP_ABORT_THRESHOLD				EQU		$11					;* not a real XTI option 
TCP_CONN_NOTIFY_THRESHOLD		EQU		$12					;* not a real XTI option 
TCP_CONN_ABORT_THRESHOLD		EQU		$13					;* not a real XTI option 
TCP_OOBINLINE					EQU		$14					;* not a real XTI option 
TCP_URGENT_PTR_TYPE				EQU		$15					;* not a real XTI option 
TCP_KEEPALIVE					EQU		$0008				; keepalive defined in OpenTransport.h 

T_GARBAGE						EQU		2
;  UDP Level Options


UDP_CHECKSUM					EQU		$0600
UDP_RX_ICMP						EQU		$02
;  IP Level Options

kIP_OPTIONS						EQU		$01
kIP_TOS							EQU		$02
kIP_TTL							EQU		$03
kIP_REUSEADDR					EQU		$04
kIP_DONTROUTE					EQU		$10
kIP_BROADCAST					EQU		$20
kIP_REUSEPORT					EQU		$0200
kIP_HDRINCL						EQU		$1002
kIP_RCVOPTS						EQU		$1005
kIP_RCVDSTADDR					EQU		$1007
kIP_MULTICAST_IF				EQU		$1010				; set/get IP multicast interface 
kIP_MULTICAST_TTL				EQU		$1011				; set/get IP multicast timetolive    
kIP_MULTICAST_LOOP				EQU		$1012				; set/get IP multicast loopback  
kIP_ADD_MEMBERSHIP				EQU		$1013				; add an IP group membership     
kIP_DROP_MEMBERSHIP				EQU		$1014				; drop an IP group membership       
kIP_BROADCAST_IFNAME			EQU		$1015				; Set interface for broadcasts   
kIP_RCVIFADDR					EQU		$1016				; Set interface for broadcasts   

IP_OPTIONS						EQU		$01
IP_TOS							EQU		$02
IP_TTL							EQU		$03
IP_REUSEADDR					EQU		$04
IP_DONTROUTE					EQU		$10
IP_BROADCAST					EQU		$20
IP_REUSEPORT					EQU		$0200
IP_HDRINCL						EQU		$1002
IP_RCVOPTS						EQU		$1005
IP_RCVDSTADDR					EQU		$1007
IP_MULTICAST_IF					EQU		$1010				; set/get IP multicast interface 
IP_MULTICAST_TTL				EQU		$1011				; set/get IP multicast timetolive    
IP_MULTICAST_LOOP				EQU		$1012				; set/get IP multicast loopback  
IP_ADD_MEMBERSHIP				EQU		$1013				; add an IP group membership     
IP_DROP_MEMBERSHIP				EQU		$1014				; drop an IP group membership       
IP_BROADCAST_IFNAME				EQU		$1015				; Set interface for broadcasts   
IP_RCVIFADDR					EQU		$1016				; Set interface for broadcasts   

DVMRP_INIT						EQU		100					; DVMRP-specific setsockopt commands, from ip_mroute.h
DVMRP_DONE						EQU		101
DVMRP_ADD_VIF					EQU		102
DVMRP_DEL_VIF					EQU		103
DVMRP_ADD_LGRP					EQU		104
DVMRP_DEL_LGRP					EQU		105
DVMRP_ADD_MRT					EQU		106
DVMRP_DEL_MRT					EQU		107

;  IP_TOS precdence levels


T_ROUTINE						EQU		0
T_PRIORITY						EQU		1
T_IMMEDIATE						EQU		2
T_FLASH							EQU		3
T_OVERRIDEFLASH					EQU		4
T_CRITIC_ECP					EQU		5
T_INETCONTROL					EQU		6
T_NETCONTROL					EQU		7
;   IP_TOS type of service


T_NOTOS							EQU		$00
T_LDELAY						EQU		$10
T_HITHRPT						EQU		$08
T_HIREL							EQU		$04
;  IP Multicast option structures

TIPAddMulticast			RECORD 0
multicastGroupAddress	 ds.l	1				; offset: $0 (0)
interfaceAddress		 ds.l	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $8 (8)
						ENDR
;  Protocol-specific events

T_DNRSTRINGTOADDRCOMPLETE		EQU		$10000001
T_DNRADDRTONAMECOMPLETE			EQU		$10000002
T_DNRSYSINFOCOMPLETE			EQU		$10000003
T_DNRMAILEXCHANGECOMPLETE		EQU		$10000004
T_DNRQUERYCOMPLETE				EQU		$10000005
;  InetAddress

InetAddress				RECORD 0
fAddressType			 ds.w	1				; offset: $0 (0)		;  always AF_INET
fPort					 ds.w	1				; offset: $2 (2)		;  Port number 
fHost					 ds.l	1				; offset: $4 (4)		;  Host address in net byte order
fUnused					 ds.b	8				; offset: $8 (8)		;  Traditional unused bytes
sizeof					 EQU *					; size:   $10 (16)
						ENDR
;  Domain Name Resolver (DNR) 

kMaxHostAddrs					EQU		10
kMaxSysStringLen				EQU		32
kMaxHostNameLen					EQU		255
InetDomainName			RECORD 0
elements				 ds.b	256
sizeof					 EQU *					; size:   $100 (256)
						ENDR


InetHostInfo			RECORD 0
name					 ds		InetDomainName ; offset: $0 (0)
addrs					 ds.l	10				; offset: $100 (256)
sizeof					 EQU *					; size:   $128 (296)
						ENDR
InetSysInfo				RECORD 0
cpuType					 ds.b	32				; offset: $0 (0)
osType					 ds.b	32				; offset: $20 (32)
sizeof					 EQU *					; size:   $40 (64)
						ENDR
InetMailExchange		RECORD 0
preference				 ds.w	1				; offset: $0 (0)
exchange				 ds		InetDomainName ; offset: $2 (2)
sizeof					 EQU *					; size:   $102 (258)
						ENDR
DNSQueryInfo			RECORD 0
qType					 ds.w	1				; offset: $0 (0)
qClass					 ds.w	1				; offset: $2 (2)
ttl						 ds.l	1				; offset: $4 (4)
name					 ds		InetDomainName ; offset: $8 (8)
responseType			 ds.w	1				; offset: $108 (264)	;  answer, authority, or additional
resourceLen				 ds.w	1				; offset: $10A (266)	;  actual length of array which follows
resourceData			 ds.b	4				; offset: $10C (268)	;  size varies
sizeof					 EQU *					; size:   $110 (272)
						ENDR
;  DNSAddress

;   The DNSAddress format is optional and may be used in connects,
;   datagram sends, and resolve address calls.   The name takes the 
;   format "somewhere.com" or "somewhere.com:portnumber" where
;   the ":portnumber" is optional.   The length of this structure
;   is arbitrarily limited to the overall max length of a domain
;   name (255 chars), although a longer one can be use successfully
;   if you use this as a template for doing so.   However, the domain name 
;   is still limited to 255 characters.



DNSAddress				RECORD 0
fAddressType			 ds.w	1				; offset: $0 (0)		;  always AF_DNS
fName					 ds		InetDomainName ; offset: $2 (2)
sizeof					 EQU *					; size:   $102 (258)
						ENDR
;  InetInterfaceInfo

kDefaultInetInterface			EQU		-1

kInetInterfaceInfoVersion		EQU		3
InetInterfaceInfo		RECORD 0
fAddress				 ds.l	1				; offset: $0 (0)
fNetmask				 ds.l	1				; offset: $4 (4)
fBroadcastAddr			 ds.l	1				; offset: $8 (8)
fDefaultGatewayAddr		 ds.l	1				; offset: $C (12)
fDNSAddr				 ds.l	1				; offset: $10 (16)
fVersion				 ds.w	1				; offset: $14 (20)
fHWAddrLen				 ds.w	1				; offset: $16 (22)
fHWAddr					 ds.l	1				; offset: $18 (24)
fIfMTU					 ds.l	1				; offset: $1C (28)
fReservedPtrs			 ds.l	2				; offset: $20 (32)
fDomainName				 ds		InetDomainName ; offset: $28 (40)
fIPSecondaryCount		 ds.l	1				; offset: $128 (296)
fReserved				 ds.b	252				; offset: $12C (300)
sizeof					 EQU *					; size:   $228 (552)
						ENDR
;  InetDHCPOption

kAllDHCPOptions					EQU		-1
kDHCPLongOption					EQU		126
kDHCPLongOptionReq				EQU		127
InetDHCPOption			RECORD 0
fOptionTag				 ds.b	1				; offset: $0 (0)
fOptionLen				 ds.b	1				; offset: $1 (1)
fOptionValue			 ds.b	1				; offset: $2 (2)
						 ORG 4
sizeof					 EQU *					; size:   $4 (4)
						ENDR
;  TCP/IP Utility Routines


; *  OTInitInetAddress()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void OTInitInetAddress(InetAddress *addr, InetPort port, InetHost host)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInitInetAddress
	ENDIF


; *  OTInitDNSAddress()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OTByteCount OTInitDNSAddress(DNSAddress *addr, char *str)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInitDNSAddress
	ENDIF


; *  OTInetStringToHost()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTInetStringToHost(const char *str, InetHost *host)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInetStringToHost
	ENDIF


; *  OTInetHostToString()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void OTInetHostToString(InetHost host, char *str)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInetHostToString
	ENDIF


; *  OTInetGetInterfaceInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTInetGetInterfaceInfo(InetInterfaceInfo *info, SInt32 val)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInetGetInterfaceInfo
	ENDIF


; *  OTInetGetSecondaryAddresses()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTInetGetSecondaryAddresses(InetHost *addr, UInt32 *count, SInt32 val)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInetGetSecondaryAddresses
	ENDIF

	IF CALL_NOT_IN_CARBON THEN

; *  OTInetGetDHCPConfigInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus OTInetGetDHCPConfigInfo(InetDHCPOption *buf, UInt32 bufSize, SInt32 index, SInt32 opt)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInetGetDHCPConfigInfo
	ENDIF

;  InetServices & DNR Calls

	ENDIF	; CALL_NOT_IN_CARBON
	IF Â¬ OTKERNEL THEN

;   Under Carbon, OTOpenInternetServices routines take a client context pointer.  Applications may pass NULL
;   after calling InitOpenTransport(kInitOTForApplicationMask, ...).  Non-applications must always pass a
;   valid client context.



; *  OTOpenInternetServicesInContext()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal InetSvcRef OTOpenInternetServicesInContext(OTConfigurationRef cfig, OTOpenFlags oflag, OSStatus *err, OTClientContextPtr clientContext)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTOpenInternetServicesInContext
	ENDIF


; *  OTAsyncOpenInternetServicesInContext()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTAsyncOpenInternetServicesInContext(OTConfigurationRef cfig, OTOpenFlags oflag, OTNotifyUPP upp, void *contextPtr, OTClientContextPtr clientContext)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTAsyncOpenInternetServicesInContext
	ENDIF

	IF CALL_NOT_IN_CARBON THEN

; *  OTOpenInternetServices()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal InetSvcRef OTOpenInternetServices(OTConfigurationRef cfig, OTOpenFlags oflag, OSStatus *err)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTOpenInternetServices
	ENDIF


; *  OTAsyncOpenInternetServices()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus OTAsyncOpenInternetServices(OTConfigurationRef cfig, OTOpenFlags oflag, OTNotifyUPP proc, void *contextPtr)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTAsyncOpenInternetServices
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON
	IF OTCARBONAPPLICATION THEN
;  The following macro may be used by applications only.
	ENDIF	; OTCARBONAPPLICATION

; *  OTInetStringToAddress()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTInetStringToAddress(InetSvcRef ref, char *name, InetHostInfo *hinfo)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInetStringToAddress
	ENDIF


; *  OTInetAddressToName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTInetAddressToName(InetSvcRef ref, InetHost addr, InetDomainName name)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInetAddressToName
	ENDIF


; *  OTInetSysInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTInetSysInfo(InetSvcRef ref, char *name, InetSysInfo *sysinfo)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInetSysInfo
	ENDIF


; *  OTInetMailExchange()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTInetMailExchange(InetSvcRef ref, char *name, UInt16 *num, InetMailExchange *mx)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInetMailExchange
	ENDIF


; *  OTInetQuery()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTInetQuery(InetSvcRef ref, char *name, UInt16 qClass, UInt16 qType, char *buf, OTByteCount buflen, void **argv, OTByteCount argvlen, OTFlags flags)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInetQuery
	ENDIF

	ENDIF
;  ***** AppleTalk *****
;  Shared library prefixes

; *******************************************************************************
;** Module definitions
;*******************************************************************************

;  XTI Levels


ATK_DDP							EQU		'DDP '
ATK_AARP						EQU		'AARP'
ATK_ATP							EQU		'ATP '
ATK_ADSP						EQU		'ADSP'
ATK_ASP							EQU		'ASP '
ATK_PAP							EQU		'PAP '
ATK_NBP							EQU		'NBP '
ATK_ZIP							EQU		'ZIP '
;  Module Names


;   Protocol-specific Options
;   NOTE:
;   All Protocols support OPT_CHECKSUM (Value is (unsigned long)T_YES/T_NO)
;   ATP supports OPT_RETRYCNT (# Retries, 0 = try once) and
;                OPT_INTERVAL (# Milliseconds to wait)




DDP_OPT_CHECKSUM				EQU		$0600
DDP_OPT_SRCADDR					EQU		$2101				; DDP UnitDataReq Only - set src address, Value is DDPAddress 
ATP_OPT_REPLYCNT				EQU		$2110				; AppleTalk - ATP Resp Pkt Ct Type, Value is (unsigned long)  pkt count 
ATP_OPT_DATALEN					EQU		$2111				; AppleTalk - ATP Pkt Data Len Type, Value is (unsigned long) length 
ATP_OPT_RELTIMER				EQU		$2112				; AppleTalk - ATP Release Timer Type, Value is (unsigned long) timer, (See Inside AppleTalk, second edition 
ATP_OPT_TRANID					EQU		$2113				; Value is (unsigned long) Boolean, Used to request Transaction ID, Returned with Transaction ID on requests 
PAP_OPT_OPENRETRY				EQU		$2120				; AppleTalk - PAP OpenConn Retry count, Value is (unsigned long) T_YES/T_NO 
;  Protocol-Specific Events


;   If you send the IOCTL: OTIoctl(I_OTGetMiscellaneousEvents, 1),
;   you will receive the T_ATALKxxx events on your endpoint.
;   NOTE: The endpoint does not need to be bound.




kAppleTalkEvent					EQU		$23010000
T_GETMYZONECOMPLETE				EQU		$23010001
T_GETLOCALZONESCOMPLETE			EQU		$23010002
T_GETZONELISTCOMPLETE			EQU		$23010003
T_GETATALKINFOCOMPLETE			EQU		$23010004
T_ATALKROUTERDOWNEVENT			EQU		$23010033			; No routers have been seen for a while.  If the cookie is NULL, all routers are gone.  Otherwise, there is still an ARA router hanging around being used, and only the local cable has been  timed out.
T_ATALKROUTERUPEVENT			EQU		$23010034			; We didn't have a router, but now one has come up. Cookie is NULL for a normal router coming up, non-NULL for an ARA router coming on-line
T_ATALKZONENAMECHANGEDEVENT		EQU		$23010035			; A Zone name change was issued from the router, so our AppleTalk Zone has changed.
T_ATALKCONNECTIVITYCHANGEDEVENT	EQU		$23010036			; An ARA connection was established (cookie != NULL), or was disconnected (cookie == NULL)
T_ATALKINTERNETAVAILABLEEVENT	EQU		$23010037			; A router has appeared, and our address is in the startup range.  Cookie is hi/lo of new cable range.
T_ATALKCABLERANGECHANGEDEVENT	EQU		$23010038			; A router has appeared, and it's incompatible with our current address.  Cookie is hi/lo of new cable range.

kAllATalkRoutersDown			EQU		0					; This indicates that all routers are offline
kLocalATalkRoutersDown			EQU		-1					; This indicates that all local routers went offline, but an ARA router is still active
kARARouterDisconnected			EQU		-2					; This indicates that ARA was disconnected, do it's router went offline, and we have no local routers to fall back onto.

kARARouterOnline				EQU		-1					; We had no local routers, but an ARA router is now online.
kATalkRouterOnline				EQU		0					; We had no routers, but a local router is now online
kLocalATalkRouterOnline			EQU		-2					; We have an ARA router, but now we've seen a local router as well
;  Protocol-specific IOCTLs


ATALK_IOC_FULLSELFSEND			EQU		$542F				; Turn on/off full self-send (it's automatic for non-backward-compatible links)
ADSP_IOC_FORWARDRESET			EQU		$543C				; ADSP Forward Reset
;  Protocol-specific constants

;  ECHO


kECHO_TSDU						EQU		585					; Max. # of data bytes.
;  NBP


kNBPMaxNameLength				EQU		32
kNBPMaxTypeLength				EQU		32
kNBPMaxZoneLength				EQU		32
kNBPSlushLength					EQU		9					; Extra space for @, : and a few escape chars
kNBPMaxEntityLength				EQU		99
kNBPEntityBufferSize			EQU		105
kNBPWildCard					EQU		$3D					; NBP name and type match anything '='
kNBPImbeddedWildCard			EQU		$C5					; NBP name and type match some 'â'
kNBPDefaultZone					EQU		$2A					; NBP default zone '*'
;  ZIP


kZIPMaxZoneLength				EQU		32

kDDPAddressLength				EQU		8					; value to use in netbuf.len field, Maximum length of AppleTalk address
kNBPAddressLength				EQU		105
kAppleTalkAddressLength			EQU		113
; *******************************************************************************
;** CLASS TAppleTalkServices
;*******************************************************************************

	IF Â¬ OTKERNEL THEN

;   Define the ATSvcRef type.  This type needs special
;   processing because in C++ it's a subclass of TProvider.
;   See the definition of TEndpointRef in "OpenTransport.h"
;   for the logic behind this definition.





kDefaultAppleTalkServicesPath	EQU		-3

;   Under Carbon, OpenAppleTalkServices routines take a client context pointer.  Applications may pass NULL
;   after calling InitOpenTransport(kInitOTForApplicationMask, ...).  Non-applications must always pass a
;   valid client context.



; *  OTAsyncOpenAppleTalkServicesInContext()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTAsyncOpenAppleTalkServicesInContext(OTConfigurationRef cfig, OTOpenFlags flags, OTNotifyUPP proc, void *contextPtr, OTClientContextPtr clientContext)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTAsyncOpenAppleTalkServicesInContext
	ENDIF


; *  OTOpenAppleTalkServicesInContext()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal ATSvcRef OTOpenAppleTalkServicesInContext(OTConfigurationRef cfig, OTOpenFlags flags, OSStatus *err, OTClientContextPtr clientContext)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTOpenAppleTalkServicesInContext
	ENDIF

	IF CALL_NOT_IN_CARBON THEN

; *  OTAsyncOpenAppleTalkServices()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus OTAsyncOpenAppleTalkServices(OTConfigurationRef cfig, OTOpenFlags flags, OTNotifyUPP proc, void *contextPtr)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTAsyncOpenAppleTalkServices
	ENDIF


; *  OTOpenAppleTalkServices()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal ATSvcRef OTOpenAppleTalkServices(OTConfigurationRef cfig, OTOpenFlags flags, OSStatus *err)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTOpenAppleTalkServices
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON
	IF OTCARBONAPPLICATION THEN
;  The following macro may be used by applications only.
	ENDIF	; OTCARBONAPPLICATION
;  Get the zone associated with the ATSvcRef

; *  OTATalkGetMyZone()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTATalkGetMyZone(ATSvcRef ref, TNetbuf *zone)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTATalkGetMyZone
	ENDIF


;   Get the list of available zones associated with the local cable
;   of the ATSvcRef



; *  OTATalkGetLocalZones()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTATalkGetLocalZones(ATSvcRef ref, TNetbuf *zones)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTATalkGetLocalZones
	ENDIF

;  Get the list of all zones on the internet specified by the ATSvcRef

; *  OTATalkGetZoneList()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTATalkGetZoneList(ATSvcRef ref, TNetbuf *zones)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTATalkGetZoneList
	ENDIF

;  Stores an AppleTalkInfo structure into the TNetbuf (see later in this file)

; *  OTATalkGetInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus OTATalkGetInfo(ATSvcRef ref, TNetbuf *info)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTATalkGetInfo
	ENDIF

	ENDIF
;  AppleTalk Addressing

;   The NBPEntity structure is used to manipulate NBP names without regard
;   to issues of what kind of "special" characters are in the name.
;   
;   When stored as an address in an NBPAddress or DDPNBPAddress, they are 
;   stored as a character string, which is currently just ASCII, but in the
;   future may be UniChar, or some other internationalizable scripting set.
;   The string following an NBPAddress or DDPNBPAddress is intended to be
;   suitable for showing to users, whereas NBPEntity is not.
;   WARNING: NBPAddress and DDPNBPAddress structures do not "know" the length
;   of the address.  That must have been obtained as part of a Lookup or
;   ResolveAddress call.




AF_ATALK_FAMILY					EQU		$0100
AF_ATALK_DDP					EQU		$0100
AF_ATALK_DDPNBP					EQU		$0101
AF_ATALK_NBP					EQU		$0102
AF_ATALK_MNODE					EQU		$0103
NBPEntity				RECORD 0
fEntity					 ds.b	99				; offset: $0 (0)
						 ORG 100
sizeof					 EQU *					; size:   $64 (100)
						ENDR
DDPAddress				RECORD 0
fAddressType			 ds.w	1				; offset: $0 (0)		;  One of the enums above
fNetwork				 ds.w	1				; offset: $2 (2)
fNodeID					 ds.b	1				; offset: $4 (4)
fSocket					 ds.b	1				; offset: $5 (5)
fDDPType				 ds.b	1				; offset: $6 (6)
fPad					 ds.b	1				; offset: $7 (7)
sizeof					 EQU *					; size:   $8 (8)
						ENDR
NBPAddress				RECORD 0
fAddressType			 ds.w	1				; offset: $0 (0)		;  One of the enums above
fNBPNameBuffer			 ds.b	105				; offset: $2 (2)
						 ORG 108
sizeof					 EQU *					; size:   $6C (108)
						ENDR
DDPNBPAddress			RECORD 0
fAddressType			 ds.w	1				; offset: $0 (0)		;  One of the enums above
fNetwork				 ds.w	1				; offset: $2 (2)
fNodeID					 ds.b	1				; offset: $4 (4)
fSocket					 ds.b	1				; offset: $5 (5)
fDDPType				 ds.b	1				; offset: $6 (6)
fPad					 ds.b	1				; offset: $7 (7)
fNBPNameBuffer			 ds.b	105				; offset: $8 (8)
						 ORG 114
sizeof					 EQU *					; size:   $72 (114)
						ENDR
;  These are some utility routines for dealing with NBP and DDP addresses. 

;  Functions to initialize the various AppleTalk Address types

; *  OTInitDDPAddress()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void OTInitDDPAddress(DDPAddress *addr, UInt16 net, UInt8 node, UInt8 socket, UInt8 ddpType)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInitDDPAddress
	ENDIF


; *  OTInitNBPAddress()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OTByteCount OTInitNBPAddress(NBPAddress *addr, const char *name)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInitNBPAddress
	ENDIF


; *  OTInitDDPNBPAddress()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OTByteCount OTInitDDPNBPAddress(DDPNBPAddress *addr, const char *name, UInt16 net, UInt8 node, UInt8 socket, UInt8 ddpType)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInitDDPNBPAddress
	ENDIF

;  Compare 2 DDP addresses for equality

; *  OTCompareDDPAddresses()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean OTCompareDDPAddresses(const DDPAddress *addr1, const DDPAddress *addr2)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTCompareDDPAddresses
	ENDIF

;  Init an NBPEntity to a NULL name

; *  OTInitNBPEntity()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void OTInitNBPEntity(NBPEntity *entity)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTInitNBPEntity
	ENDIF

;  Get the length an NBPEntity would have when stored as an address

; *  OTGetNBPEntityLengthAsAddress()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OTByteCount OTGetNBPEntityLengthAsAddress(const NBPEntity *entity)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTGetNBPEntityLengthAsAddress
	ENDIF

;  Store an NBPEntity into an address buffer

; *  OTSetAddressFromNBPEntity()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OTByteCount OTSetAddressFromNBPEntity(UInt8 *nameBuf, const NBPEntity *entity)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTSetAddressFromNBPEntity
	ENDIF

;  Create an address buffer from a string (use -1 for len to use strlen)

; *  OTSetAddressFromNBPString()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OTByteCount OTSetAddressFromNBPString(UInt8 *addrBuf, const char *name, SInt32 len)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTSetAddressFromNBPString
	ENDIF


;   Create an NBPEntity from an address buffer. False is returned if
;     the address was truncated.



; *  OTSetNBPEntityFromAddress()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean OTSetNBPEntityFromAddress(NBPEntity *entity, const UInt8 *addrBuf, OTByteCount len)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTSetNBPEntityFromAddress
	ENDIF

;  Routines to set a piece of an NBP entity from a character string

; *  OTSetNBPName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean OTSetNBPName(NBPEntity *entity, const char *name)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTSetNBPName
	ENDIF


; *  OTSetNBPType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean OTSetNBPType(NBPEntity *entity, const char *typeVal)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTSetNBPType
	ENDIF


; *  OTSetNBPZone()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean OTSetNBPZone(NBPEntity *entity, const char *zone)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTSetNBPZone
	ENDIF

;  Routines to extract pieces of an NBP entity

; *  OTExtractNBPName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void OTExtractNBPName(const NBPEntity *entity, char *name)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTExtractNBPName
	ENDIF


; *  OTExtractNBPType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void OTExtractNBPType(const NBPEntity *entity, char *typeVal)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTExtractNBPType
	ENDIF


; *  OTExtractNBPZone()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void OTExtractNBPZone(const NBPEntity *entity, char *zone)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OTExtractNBPZone
	ENDIF

;  AppleTalkInfo as used by the OTGetATalkInfo function

AppleTalkInfo			RECORD 0
fOurAddress				 ds		DDPAddress		; offset: $0 (0)		;  Our DDP address (network # & node)
fRouterAddress			 ds		DDPAddress		; offset: $8 (8)		;  The address of a router on our cable
fCableRange				 ds.w	2				; offset: $10 (16)		;  The current cable range
fFlags					 ds.w	1				; offset: $14 (20)		;  See below
sizeof					 EQU *					; size:   $16 (22)
						ENDR
;  For the fFlags field in AppleTalkInfo

kATalkInfoIsExtended			EQU		$0001				; This is an extended (phase 2) network
kATalkInfoHasRouter				EQU		$0002				; This cable has a router
kATalkInfoOneZone				EQU		$0004				; This cable has only one zone
;  ***** Ethernet *****

;  Interface option flags

;  Ethernet framing options


kOTFramingEthernet				EQU		$01
kOTFramingEthernetIPX			EQU		$02
kOTFraming8023					EQU		$04
kOTFraming8022					EQU		$08

;   These are obsolete and will be going away in OT 1.5.
;   Hmmm, OT 1.5 got cancelled.  The status of these options
;   is uncertain.



;  RawMode options


kOTRawRcvOn						EQU		0
kOTRawRcvOff					EQU		1
kOTRawRcvOnWithTimeStamp		EQU		2

DL_PROMISC_OFF					EQU		0					; OPT_SETPROMISCUOUS value
;  Module definitions

;  Module IDs


kT8022ModuleID					EQU		7100
kEnetModuleID					EQU		7101
kTokenRingModuleID				EQU		7102
kFDDIModuleID					EQU		7103
;  Module Names

;  Address Family


AF_8022							EQU		8200				; Our 802.2 generic address family
;  XTI Levels


LNK_ENET						EQU		'ENET'
LNK_TOKN						EQU		'TOKN'
LNK_FDDI						EQU		'FDDI'
LNK_TPI							EQU		'LTPI'
;  Options


OPT_ADDMCAST					EQU		$1000
OPT_DELMCAST					EQU		$1001
OPT_RCVPACKETTYPE				EQU		$1002
OPT_RCVDESTADDR					EQU		$1003
OPT_SETRAWMODE					EQU		$1004
OPT_SETPROMISCUOUS				EQU		$1005

; typedef UInt32						OTPacketType
kETypeStandard					EQU		0
kETypeMulticast					EQU		1
kETypeBroadcast					EQU		2
kETRawPacketBit					EQU		$80000000
kETTimeStampBit					EQU		$40000000
;  Link related constants


kMulticastLength				EQU		6					; length of an ENET hardware addressaddress
k48BitAddrLength				EQU		6
k8022DLSAPLength				EQU		2					; The protocol type is our DLSAP
k8022SNAPLength					EQU		5
kEnetAddressLength				EQU		8					; length of an address field used by the ENET enpoint
															;    = k48BitAddrLength + sizeof(protocol type)
kSNAPSAP						EQU		$00AA				; Special DLSAPS for ENET
kIPXSAP							EQU		$00FF
kMax8022SAP						EQU		$00FE
k8022GlobalSAP					EQU		$00FF
kMinDIXSAP						EQU		1501
kMaxDIXSAP						EQU		$FFFF
;  Generic Address Structure

T8022Address			RECORD 0
fAddrFamily				 ds.w	1				; offset: $0 (0)
fHWAddr					 ds.b	6				; offset: $2 (2)
fSAP					 ds.w	1				; offset: $8 (8)
fSNAP					 ds.b	5				; offset: $A (10)
						 ORG 16
sizeof					 EQU *					; size:   $10 (16)
						ENDR

k8022BasicAddressLength			EQU		10
k8022SNAPAddressLength			EQU		15
;  Some helpful stuff for dealing with 48 bit addresses

;  Link related constants


kEnetPacketHeaderLength			EQU		14
kEnetTSDU						EQU		1514				; The TSDU for ethernet.
kTokenRingTSDU					EQU		4458				; The TSDU for TokenRing.
kFDDITSDU						EQU		4458				; The TSDU for FDDI. 
k8022SAPLength					EQU		1
k8022BasicHeaderLength			EQU		3					; define the length of the header portion of an 802.2 packet.
															; = SSAP+DSAP+ControlByte
k8022SNAPHeaderLength			EQU		8
; *******************************************************************************
;** Address Types recognized by the Enet DLPI
;*******************************************************************************


; typedef UInt32						EAddrType
keaStandardAddress				EQU		0
keaMulticast					EQU		1
keaBroadcast					EQU		2
keaBadAddress					EQU		3
keaRawPacketBit					EQU		$80000000
keaTimeStampBit					EQU		$40000000
;  Packet Header Structures

EnetPacketHeader		RECORD 0
fDestAddr				 ds.b	6				; offset: $0 (0)
fSourceAddr				 ds.b	6				; offset: $6 (6)
fProto					 ds.w	1				; offset: $C (12)
sizeof					 EQU *					; size:   $E (14)
						ENDR
T8022Header				RECORD 0
fDSAP					 ds.b	1				; offset: $0 (0)
fSSAP					 ds.b	1				; offset: $1 (1)
fCtrl					 ds.b	1				; offset: $2 (2)
						 ORG 4
sizeof					 EQU *					; size:   $4 (4)
						ENDR
T8022SNAPHeader			RECORD 0
fDSAP					 ds.b	1				; offset: $0 (0)
fSSAP					 ds.b	1				; offset: $1 (1)
fCtrl					 ds.b	1				; offset: $2 (2)
fSNAP					 ds.b	5				; offset: $3 (3)
sizeof					 EQU *					; size:   $8 (8)
						ENDR
T8022FullPacketHeader	RECORD 0
fEnetPart				 ds		EnetPacketHeader ; offset: $0 (0)
f8022Part				 ds		T8022SNAPHeader ; offset: $E (14)
sizeof					 EQU *					; size:   $16 (22)
						ENDR
;  Define the lengths of the structures above

kT8022HeaderLength				EQU		3
kT8022SNAPHeaderLength			EQU		8
kT8022FullPacketHeaderLength	EQU		22
;  ***** Serial *****

;  Module Definitions

;  XTI Level


COM_SERIAL						EQU		'SERL'
;  Version Number

;  Module Names


kSerialABModuleID				EQU		7200

kOTSerialFramingAsync			EQU		$01					; Support Async serial mode         
kOTSerialFramingHDLC			EQU		$02					; Support HDLC synchronous serial mode   
kOTSerialFramingSDLC			EQU		$04					; Support SDLC synchronous serial mode   
kOTSerialFramingAsyncPackets	EQU		$08					; Support Async "packet" serial mode 
kOTSerialFramingPPP				EQU		$10					; Port does its own PPP framing - wants unframed packets from PPP 
;  IOCTL Calls for Serial Drivers


I_SetSerialDTR					EQU		$5500				; Set DTR (0 = off, 1 = on)
kOTSerialSetDTROff				EQU		0
kOTSerialSetDTROn				EQU		1
I_SetSerialBreak				EQU		$5501				; Send a break on the line - kOTSerialSetBreakOff = off, kOTSerialSetBreakOn = on,
															; Any other number is the number of milliseconds to leave break on, then
															; auto shutoff
kOTSerialSetBreakOn				EQU		$FFFFFFFF
kOTSerialSetBreakOff			EQU		0
I_SetSerialXOffState			EQU		$5502				; Force XOFF state - 0 = Unconditionally clear XOFF state, 1 = unconditionally set it
kOTSerialForceXOffTrue			EQU		1
kOTSerialForceXOffFalse			EQU		0
I_SetSerialXOn					EQU		$5503				; Send an XON character, 0 = send only if in XOFF state, 1 = send always
kOTSerialSendXOnAlways			EQU		1
kOTSerialSendXOnIfXOffTrue		EQU		0
I_SetSerialXOff					EQU		$5504				; Send an XOFF character, 0 = send only if in XON state, 1 = send always
kOTSerialSendXOffAlways			EQU		1
kOTSerialSendXOffIfXOnTrue		EQU		0
;  Option Management for Serial Drivers


;   These options are all 4-byte values.
;   BaudRate is the baud rate.
;   DataBits is the number of data bits.
;   StopBits is the number of stop bits times 10.
;   Parity is an enum




SERIAL_OPT_BAUDRATE				EQU		$0100				; UInt32 
SERIAL_OPT_DATABITS				EQU		$0101				; UInt32 
SERIAL_OPT_STOPBITS				EQU		$0102				; UInt32 10, 15 or 20 for 1, 1.5 or 2    
SERIAL_OPT_PARITY				EQU		$0103				; UInt32 
SERIAL_OPT_STATUS				EQU		$0104				; UInt32 
															; The "Status" option is a 4-byte value option that is ReadOnly
															; It returns a bitmap of the current serial status
SERIAL_OPT_HANDSHAKE			EQU		$0105				; UInt32 
															; The "Handshake" option defines what kind of handshaking the serial port
															; will do for line flow control.  The value is a 32-bit value defined by
															; the function or macro SerialHandshakeData below.
															; For no handshake, or CTS handshake, the onChar and offChar parameters
															; are ignored.
SERIAL_OPT_RCVTIMEOUT			EQU		$0106				; The "RcvTimeout" option defines how long the receiver should wait before delivering
															; less than the RcvLoWat number of characters.  If RcvLoWat is 0, then the RcvTimeout
															; is how long a gap to wait for before delivering characters.  This parameter is advisory,
															; and serial drivers are free to deliver data whenever they deem it convenient.  For instance,
															; many serial drivers will deliver data whenever 64 bytes have been received, since 64 bytes
															; is the smallest STREAMS buffer size. Keep in mind that timeouts are quantized, so be sure to
															; look at the return value of the option to determine what it was negotiated to.
SERIAL_OPT_ERRORCHARACTER		EQU		$0107				; This option defines how characters with parity errors are handled.
															; A 0 value will disable all replacement.  A single character value in the low
															; byte designates the replacement character.  When characters are received with a 
															; parity error, they are replaced by this specified character.  If a valid incoming
															; character matches the replacement character, then the received character's msb is
															; cleared. For this situation, the alternate character is used, if specified in bits
															; 8 through 15 of the option long, with 0xff being place in bits 16 through 23.
															; Whenever a valid character is received that matches the first replacement character,
															; it is replaced with this alternate character.
SERIAL_OPT_EXTCLOCK				EQU		$0108				; The "ExtClock" requests an external clock.  A 0-value turns off external clocking.
															; Any other value is a requested divisor for the external clock.  Be aware that
															; not all serial implementations support an external clock, and that not all
															; requested divisors will be supported if it does support an external clock.
SERIAL_OPT_BURSTMODE			EQU		$0109				; The "BurstMode" option informs the serial driver that it should continue looping,
															; reading incoming characters, rather than waiting for an interrupt for each character.
															; This option may not be supported by all Serial driver
SERIAL_OPT_DUMMY				EQU		$010A				; placeholder

; typedef UInt32						ParityOptionValues
kOTSerialNoParity				EQU		0
kOTSerialOddParity				EQU		1
kOTSerialEvenParity				EQU		2

kOTSerialSwOverRunErr			EQU		$01
kOTSerialBreakOn				EQU		$08
kOTSerialParityErr				EQU		$10
kOTSerialOverrunErr				EQU		$20
kOTSerialFramingErr				EQU		$40
kOTSerialXOffSent				EQU		$00010000
kOTSerialDTRNegated				EQU		$00020000
kOTSerialCTLHold				EQU		$00040000
kOTSerialXOffHold				EQU		$00080000
kOTSerialOutputBreakOn			EQU		$01000000

kOTSerialXOnOffInputHandshake	EQU		1					; Want XOn/XOff handshake for incoming characters    
kOTSerialXOnOffOutputHandshake	EQU		2					; Want XOn/XOff handshake for outgoing characters    
kOTSerialCTSInputHandshake		EQU		4					; Want CTS handshake for incoming characters     
kOTSerialDTROutputHandshake		EQU		8					; Want DTR handshake for outoing characters   
;  Default attributes for the serial ports


kOTSerialDefaultBaudRate		EQU		19200
kOTSerialDefaultDataBits		EQU		8
kOTSerialDefaultStopBits		EQU		10
kOTSerialDefaultParity			EQU		0
kOTSerialDefaultHandshake		EQU		0
kOTSerialDefaultOnChar			EQU		17
kOTSerialDefaultOffChar			EQU		19
kOTSerialDefaultSndBufSize		EQU		1024
kOTSerialDefaultRcvBufSize		EQU		1024
kOTSerialDefaultSndLoWat		EQU		96
kOTSerialDefaultRcvLoWat		EQU		1
kOTSerialDefaultRcvTimeout		EQU		10
;  ***** ISDN *****

;  Module Definitions

;  XTI Level


COM_ISDN						EQU		'ISDN'
;  Module Names


kISDNModuleID					EQU		7300

;  ISDN framing methods, set using the I_OTSetFramingType IOCTL


kOTISDNFramingTransparentSupported EQU	$0010				; Support Transparent mode    
kOTISDNFramingHDLCSupported		EQU		$0020				; Support HDLC Synchronous mode  
kOTISDNFramingV110Supported		EQU		$0040				; Support V.110 Asynchronous mode    
kOTISDNFramingV14ESupported		EQU		$0080				; Support V.14 Asynchronous mode     
;  Miscellaneous equates

;  Disconnect reason codes (from Q.931)


kOTISDNUnallocatedNumber		EQU		1
kOTISDNNoRouteToSpecifiedTransitNetwork EQU 2
kOTISDNNoRouteToDestination		EQU		3
kOTISDNChannelUnacceptable		EQU		6
kOTISDNNormal					EQU		16
kOTISDNUserBusy					EQU		17
kOTISDNNoUserResponding			EQU		18
kOTISDNNoAnswerFromUser			EQU		19
kOTISDNCallRejected				EQU		21
kOTISDNNumberChanged			EQU		22
kOTISDNNonSelectedUserClearing	EQU		26
kOTISDNDestinationOutOfOrder	EQU		27
kOTISDNInvalidNumberFormat		EQU		28
kOTISDNFacilityRejected			EQU		29
kOTISDNNormalUnspecified		EQU		31
kOTISDNNoCircuitChannelAvailable EQU	34
kOTISDNNetworkOutOfOrder		EQU		41
kOTISDNSwitchingEquipmentCongestion EQU	42
kOTISDNAccessInformationDiscarded EQU	43
kOTISDNRequestedCircuitChannelNotAvailable EQU 44
kOTISDNResourceUnavailableUnspecified EQU 45
kOTISDNQualityOfServiceUnvailable EQU	49
kOTISDNRequestedFacilityNotSubscribed EQU 50
kOTISDNBearerCapabilityNotAuthorized EQU 57
kOTISDNBearerCapabilityNotPresentlyAvailable EQU 58
kOTISDNCallRestricted			EQU		59
kOTISDNServiceOrOptionNotAvilableUnspecified EQU 63
kOTISDNBearerCapabilityNotImplemented EQU 65
kOTISDNRequestedFacilityNotImplemented EQU 69
kOTISDNOnlyRestrictedDigitalBearer EQU	70
kOTISDNServiceOrOptionNotImplementedUnspecified EQU 79
kOTISDNCallIdentityNotUsed		EQU		83
kOTISDNCallIdentityInUse		EQU		84
kOTISDNNoCallSuspended			EQU		85
kOTISDNCallIdentityCleared		EQU		86
kOTISDNIncompatibleDestination	EQU		88
kOTISDNInvalidTransitNetworkSelection EQU 91
kOTISDNInvalidMessageUnspecified EQU	95
kOTISDNMandatoryInformationElementIsMissing EQU 96
kOTISDNMessageTypeNonExistentOrNotImplemented EQU 97
kOTISDNInterworkingUnspecified	EQU		127
;  OTISDNAddress


;   The OTISDNAddress has the following format:
;   "xxxxxx*yy"
;   where 'x' is the phone number and 'y' is the sub address (if available
;   in the network. The characters are coded in ASCII (IA5), and valid
;   characters are: '0'-'9','#','*'.
;   The max length of the each phone number is 21 characters (?) and the max
;   subaddress length is network dependent.
;   When using bonded channels the phone numbers are separated by '&'.
;   The X.25 user data is preceded by '@'.




kAF_ISDN						EQU		$2000

AF_ISDN							EQU		$2000

kOTISDNMaxPhoneSize				EQU		32
kOTISDNMaxSubSize				EQU		4
OTISDNAddress			RECORD 0
fAddressType			 ds.w	1				; offset: $0 (0)
fPhoneLength			 ds.w	1				; offset: $2 (2)
fPhoneNumber			 ds.b	37				; offset: $4 (4)
						 ORG 42
sizeof					 EQU *					; size:   $2A (42)
						ENDR
;  IOCTL Calls for ISDN
;  ISDN shares the same ioctl space as serial.


MIOC_ISDN						EQU		85					; ISDN ioctl() cmds 

I_OTISDNAlerting				EQU		$5564				; Send or receive an ALERTING message
I_OTISDNSuspend					EQU		$5565				; Send a SUSPEND message
															; The parameter is the Call Identity (Maximum 8 octets)
I_OTISDNSuspendAcknowledge		EQU		$5566				; Receive a SUSPEND ACKNOWLEDGE message
I_OTISDNSuspendReject			EQU		$5567				; Receive a SUSPEND REJECT message
I_OTISDNResume					EQU		$5568				; Send a RESUME message
															; The parameter is the Call Identity (Maximum 8 octets)
I_OTISDNResumeAcknowledge		EQU		$5569				; Receive a RESUME ACKNOWLEDGE message
I_OTISDNResumeReject			EQU		$556A				; Receive a RESUME REJECT message
I_OTISDNFaciltity				EQU		$556B				; Send or receive a FACILITY message
;  Connect user data size


kOTISDNMaxUserDataSize			EQU		32
;  Option management calls for ISDN


ISDN_OPT_COMMTYPE				EQU		$0200
ISDN_OPT_FRAMINGTYPE			EQU		$0201
ISDN_OPT_56KADAPTATION			EQU		$0202
;  For ISDN_OPT_COMMTYPE...


kOTISDNTelephoneALaw			EQU		1					; G.711 A-law                
kOTISDNTelephoneMuLaw			EQU		26					; G.711 Âµ-law                
kOTISDNDigital64k				EQU		13					; unrestricted digital (default)     
kOTISDNDigital56k				EQU		37					; user rate 56Kb/s           
kOTISDNVideo64k					EQU		41					; video terminal at 64Kb/s    
kOTISDNVideo56k					EQU		42					; video terminal at 56Kb/s    
;  For ISDN_OPT_FRAMINGTYPE...


kOTISDNFramingTransparent		EQU		$0010				; Transparent mode           
kOTISDNFramingHDLC				EQU		$0020				; HDLC synchronous mode (default)    
kOTISDNFramingV110				EQU		$0040				; V.110 asynchronous mode       
kOTISDNFramingV14E				EQU		$0080				; V.14E asynchronous mode         
;  For ISDN_OPT_56KADAPTATION...


kOTISDNNot56KAdaptation			EQU		0					; not 56K Adaptation (default)     
kOTISDN56KAdaptation			EQU		1					; 56K Adaptation           
;  Default options, you do not need to set these


kOTISDNDefaultCommType			EQU		13
kOTISDNDefaultFramingType		EQU		$0020
kOTISDNDefault56KAdaptation		EQU		0

; *******************************************************************************
;*   Constants for Open Transport-based Remote Access/PPP API
;*******************************************************************************


;  OTCreateConfiguration name for PPP control endpoint


;  XTI Level


COM_PPP							EQU		'PPPC'
;  Options limits


kPPPMaxIDLength					EQU		255
kPPPMaxPasswordLength			EQU		255
kPPPMaxDTEAddressLength			EQU		127
kPPPMaxCallInfoLength			EQU		255

;  Various XTI option value constants


kPPPStateInitial				EQU		1
kPPPStateClosed					EQU		2
kPPPStateClosing				EQU		3
kPPPStateOpening				EQU		4
kPPPStateOpened					EQU		5

kPPPConnectionStatusIdle		EQU		1
kPPPConnectionStatusConnecting	EQU		2
kPPPConnectionStatusConnected	EQU		3
kPPPConnectionStatusDisconnecting EQU	4

kPPPMinMRU						EQU		0
kPPPMaxMRU						EQU		4500

kIPCPTCPHdrCompressionDisabled	EQU		0
kIPCPTCPHdrCompressionEnabled	EQU		1

kPPPCompressionDisabled			EQU		$00000000
kPPPProtoCompression			EQU		$00000001
kPPPAddrCompression				EQU		$00000002

kPPPNoOutAuthentication			EQU		0
kPPPCHAPOrPAPOutAuthentication	EQU		1

kCCReminderTimerDisabled		EQU		0
kCCIPIdleTimerDisabled			EQU		0

kPPPScriptTypeModem				EQU		1
kPPPScriptTypeConnect			EQU		2
kPPPMaxScriptSize				EQU		32000

kE164Address					EQU		1
kPhoneAddress					EQU		1
kCompoundPhoneAddress			EQU		2
kX121Address					EQU		3

kPPPConnectionStatusDialogsFlag	EQU		$00000001
kPPPConnectionRemindersFlag		EQU		$00000002
kPPPConnectionFlashingIconFlag	EQU		$00000004
kPPPOutPasswordDialogsFlag		EQU		$00000008
kPPPAllAlertsDisabledFlag		EQU		$00000000
kPPPAllAlertsEnabledFlag		EQU		$0000000F

kPPPAsyncMapCharsNone			EQU		$00000000
kPPPAsyncMapCharsXOnXOff		EQU		$000A0000
kPPPAsyncMapCharsAll			EQU		$FFFFFFFF

;  Option names


IPCP_OPT_GETREMOTEPROTOADDR		EQU		$00007000
IPCP_OPT_GETLOCALPROTOADDR		EQU		$00007001
IPCP_OPT_TCPHDRCOMPRESSION		EQU		$00007002
LCP_OPT_PPPCOMPRESSION			EQU		$00007003
LCP_OPT_MRU						EQU		$00007004
LCP_OPT_RCACCMAP				EQU		$00007005
LCP_OPT_TXACCMAP				EQU		$00007006
SEC_OPT_OUTAUTHENTICATION		EQU		$00007007
SEC_OPT_ID						EQU		$00007008
SEC_OPT_PASSWORD				EQU		$00007009
CC_OPT_REMINDERTIMER			EQU		$00007010
CC_OPT_IPIDLETIMER				EQU		$00007011
CC_OPT_DTEADDRESSTYPE			EQU		$00007012
CC_OPT_DTEADDRESS				EQU		$00007013
CC_OPT_CALLINFO					EQU		$00007014
CC_OPT_GETMISCINFO				EQU		$00007015
PPP_OPT_GETCURRENTSTATE			EQU		$00007016
LCP_OPT_ECHO					EQU		$00007017			; Available on Mac OS X only 
CC_OPT_SERIALPORTNAME			EQU		$00007200
;  Endpoint events


kPPPEvent						EQU		$230F0000
kPPPConnectCompleteEvent		EQU		$230F0001
kPPPSetScriptCompleteEvent		EQU		$230F0002
kPPPDisconnectCompleteEvent		EQU		$230F0003
kPPPDisconnectEvent				EQU		$230F0004
kPPPIPCPUpEvent					EQU		$230F0005
kPPPIPCPDownEvent				EQU		$230F0006
kPPPLCPUpEvent					EQU		$230F0007
kPPPLCPDownEvent				EQU		$230F0008
kPPPLowerLayerUpEvent			EQU		$230F0009
kPPPLowerLayerDownEvent			EQU		$230F000A
kPPPAuthenticationStartedEvent	EQU		$230F000B
kPPPAuthenticationFinishedEvent	EQU		$230F000C
kPPPDCEInitStartedEvent			EQU		$230F000D
kPPPDCEInitFinishedEvent		EQU		$230F000E
kPPPDCECallStartedEvent			EQU		$230F000F
kPPPDCECallFinishedEvent		EQU		$230F0010

; *******************************************************************************
;*   IOCTL constants for I_OTConnect, I_OTDisconnect and I_OTScript
;*   are defined in OpenTransport.h
;*******************************************************************************


; *******************************************************************************
;*   PPPMRULimits
;*******************************************************************************

PPPMRULimits			RECORD 0
mruSize					 ds.l	1				; offset: $0 (0)		;  proposed or actual
upperMRULimit			 ds.l	1				; offset: $4 (4)
lowerMRULimit			 ds.l	1				; offset: $8 (8)
sizeof					 EQU *					; size:   $C (12)
						ENDR

; *******************************************************************************
;*   CCMiscInfo
;*******************************************************************************

CCMiscInfo				RECORD 0
connectionStatus		 ds.l	1				; offset: $0 (0)
connectionTimeElapsed	 ds.l	1				; offset: $4 (4)
connectionTimeRemaining	 ds.l	1				; offset: $8 (8)
bytesTransmitted		 ds.l	1				; offset: $C (12)
bytesReceived			 ds.l	1				; offset: $10 (16)
reserved				 ds.l	1				; offset: $14 (20)
sizeof					 EQU *					; size:   $18 (24)
						ENDR

; *******************************************************************************
;*   LCPEcho
;*******************************************************************************

;  Set both fields to zero to disable sending of LCP echo requests

LCPEcho					RECORD 0
retryCount				 ds.l	1				; offset: $0 (0)
retryPeriod				 ds.l	1				; offset: $4 (4)		;  in milliseconds
sizeof					 EQU *					; size:   $8 (8)
						ENDR

; *******************************************************************************
;*   Bits used to tell kind of product
;*******************************************************************************


kRAProductClientOnly			EQU		2
kRAProductOnePortServer			EQU		3
kRAProductManyPortServer		EQU		4


	ENDIF ; __OPENTRANSPORTPROVIDERS__ 


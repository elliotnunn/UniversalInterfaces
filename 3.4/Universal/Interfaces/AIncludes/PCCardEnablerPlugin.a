;
;    File:       PCCardEnablerPlugin.a
;
;    Contains:   Interfacer for PCCard Manager 3.0
;
;    Version:    Technology: Mac OS 8.5
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 1997-2001 by Apple Computer, Inc. and SystemSoft Corporation.  All rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__PCCARDENABLERPLUGIN__') = 'UNDEFINED' THEN
__PCCARDENABLERPLUGIN__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__NAMEREGISTRY__') = 'UNDEFINED' THEN
	include 'NameRegistry.a'
	ENDIF
	IF &TYPE('__INTERRUPTS__') = 'UNDEFINED' THEN
	include 'Interrupts.a'
	ENDIF
	IF &TYPE('__PCCARD__') = 'UNDEFINED' THEN
	include 'PCCard.a'
	ENDIF

	IF &TYPE('__CARDSERVICES__') = 'UNDEFINED' THEN
; 
;    NOTE: These prototypes conflict with CardServices.≈
;          You cannot use both PCCardEnablerPlugin.h and CardServices.h
;          
;


;   Copyright:  © 1996 SystemSoft Corporation, all rights reserved. 
; ------------------------------------------------------------------------------------
;    Card Services calls exported by the Family
;------------------------------------------------------------------------------------

;   Card Services for Card Enablers

	IF CALL_NOT_IN_CARBON THEN

; *  CSGetCardServicesInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSGetCardServicesInfo(UInt32 *socketCount, UInt32 *complianceLevel, UInt32 *version)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSGetCardServicesInfo
	ENDIF


;  Function prototypes for tuples calls 


; *  CSGetFirstTuple()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSGetFirstTuple(PCCardSocket socket, UInt32 device, PCCardTupleIterator tupleIterator, Byte desiredTuple, void *tupleData, ByteCount *tupleBufferSize, Byte *foundTuple)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSGetFirstTuple
	ENDIF


; *  CSGetNextTuple()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSGetNextTuple(PCCardTupleIterator tupleIterator, Byte desiredTuple, void *tupleData, ByteCount *tupleBufferSize, Byte *foundTuple)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSGetNextTuple
	ENDIF


;  Function prototypes for window calls


; *  CSRequestWindow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSRequestWindow(PCCardSocket vSocket, UInt32 device, PCCardWindowAttributes windowAttributes, PCCardAccessSpeed windowSpeed, LogicalAddress *windowBase, PCCardWindowSize *windowSize, PCCardWindowOffset *windowOffset, PCCardWindowID *requestedWindow)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSRequestWindow
	ENDIF


; *  CSReleaseWindow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSReleaseWindow(PCCardWindowID windowToRelease)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSReleaseWindow
	ENDIF


; *  CSModifyWindow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSModifyWindow(PCCardWindowID windowToModify, PCCardWindowType windowAttributes, PCCardAccessSpeed memorySpeed, PCCardWindowOffset *windowOffset)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSModifyWindow
	ENDIF


; *  CSGetWindowBaseAddress()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSGetWindowBaseAddress(PCCardWindowID window, LogicalAddress *baseAddress)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSGetWindowBaseAddress
	ENDIF


; *  CSInquireWindow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSInquireWindow(PCCardSocket vSocket, UInt32 device, PCCardWindowID windowID, PCCardWindowAttributes *windowAttributes, PCCardAccessSpeed *windowParam, UInt32 *windowBase, PCCardWindowSize *windowSize, PCCardWindowOffset *windowOffset)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSInquireWindow
	ENDIF

;  Function prototypes for CIS calls


; *  CSValidateCIS()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSValidateCIS(PCCardSocket vSocket, UInt32 device, UInt32 *cisChainCount)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSValidateCIS
	ENDIF


; *  CSGetDeviceCount()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSGetDeviceCount(PCCardSocket vSocket, UInt32 *deviceCount)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSGetDeviceCount
	ENDIF


;  Function prototypes for Status calls


; *  CSGetStatus()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSGetStatus(PCCardSocket vSocket, UInt32 *currentState, UInt32 *changedState, PCCardVoltage *Vcc, PCCardVoltage *Vpp)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSGetStatus
	ENDIF


;  Function prototypes for configuration calls


; *  CSRequestConfiguration()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSRequestConfiguration(PCCardSocket vSocket, UInt32 device, PCCardConfigOptions configOptions, PCCardInterfaceType socketInterface, PCCardCustomInterfaceID customInterface, PCCardVoltage vcc, PCCardVoltage vpp, PCCardIRQ IRQ, PCCardDMA DMA, UInt32 configRegBaseAddress, PCCardConfigPresentMask configRegPresentMask, PCCardFunctionConfigReg *configReg)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSRequestConfiguration
	ENDIF


; *  CSModifyConfiguration()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSModifyConfiguration(PCCardSocket vSocket, UInt32 device, PCCardConfigOptions modifyAttributes, PCCardIRQ IRQ, PCCardDMA DMA, PCCardVoltage Vpp)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSModifyConfiguration
	ENDIF


; *  CSReleaseConfiguration()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSReleaseConfiguration(PCCardSocket vSocket, UInt32 device)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSReleaseConfiguration
	ENDIF


; *  CSSetRingIndicate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSSetRingIndicate(PCCardSocket vSocket, Boolean setRingIndicate)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSSetRingIndicate
	ENDIF


; *  CSResetFunction()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSResetFunction(PCCardSocket vSocket, UInt32 device)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSResetFunction
	ENDIF


; *  CSReadConfigurationRegister()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSReadConfigurationRegister(PCCardSocket vSocket, UInt32 device, PCCardConfigPresentMask whichRegister, UInt32 configRegBaseAddress, UInt8 *registerValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSReadConfigurationRegister
	ENDIF


; *  CSWriteConfigurationRegister()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSWriteConfigurationRegister(PCCardSocket vSocket, UInt32 device, PCCardConfigPresentMask whichRegister, UInt32 configRegBaseAddress, UInt8 registerValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSWriteConfigurationRegister
	ENDIF

;  Function prototypes for Client Support calls

; *  CSRegisterClient()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSRegisterClient(PCCardSocket vSocket, PCCardEventMask eventMask, PCCardEventHandler clientCallBack, void *clientParam, PCCardClientID *newClientID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSRegisterClient
	ENDIF


; *  CSDeRegisterClient()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSDeRegisterClient(PCCardClientID theClientID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSDeRegisterClient
	ENDIF


; *  CSSetEventMask()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSSetEventMask(PCCardClientID theClientID, PCCardEventMask newEventMask)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSSetEventMask
	ENDIF


; *  CSGetEventMask()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSGetEventMask(PCCardClientID theClientID, PCCardEventMask *newEventMask)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSGetEventMask
	ENDIF


; *  CSRegisterTimer()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSRegisterTimer(PCCardClientID registeredClientID, PCCardTimerID *lpNewTimerID, long delay)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSRegisterTimer
	ENDIF


; *  CSDeRegisterTimer()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSDeRegisterTimer(PCCardTimerID timerID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSDeRegisterTimer
	ENDIF

;  Function prototypes for CardBus Config Space access

; *  CSReadCardBusConfigSpace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSReadCardBusConfigSpace(PCCardSocket vSocket, UInt32 device, UInt32 configOffset, Byte *data, UInt32 dataSize)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSReadCardBusConfigSpace
	ENDIF


; *  CSWriteCardBusConfigSpace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CSWriteCardBusConfigSpace(PCCardSocket vSocket, UInt32 device, UInt32 configOffset, Byte *data, UInt32 dataSize)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CSWriteCardBusConfigSpace
	ENDIF

; ------------------------------------------------------------------------------------
;    Card Enabler Types
;------------------------------------------------------------------------------------

	ENDIF	; CALL_NOT_IN_CARBON

kUnknownDeviceType				EQU		'unkn'				; class-code = 0x00 
kSCSIDeviceType					EQU		'scsi'				; class-code = 0x01, sub-class = 0x00 
kBlockDeviceType				EQU		'blok'				; class-code = 0x01, sub-class = 0xXX 
kNetworkDeviceType				EQU		'netw'				; class-code = 0x02 
kDisplayDeviceType				EQU		'dspl'				; class-code = 0x03 
kMultimediaDeviceType			EQU		'mmdv'				; class-code = 0x04 
kMemoryDeviceType				EQU		'mem '				; class-code = 0x05 
kBridgeDeviceType				EQU		'brdg'				; class-code = 0x06 
kCommDeviceType					EQU		'comm'				; class-code = 0x07 
kPeripheralDeviceType			EQU		'sysp'				; class-code = 0x08 
kInputDeviceType				EQU		'inpt'				; class-code = 0x09 
kDockingDeviceType				EQU		'dock'				; class-code = 0x0A 
kProcessorDeviceType			EQU		'proc'				; class-code = 0x0B 
kFirewireBusDeviceType			EQU		'firw'				; class-code = 0x0C, sub-class = 0x00 
kACCESSBusDeviceType			EQU		'accs'				; class-code = 0x0C, sub-class = 0x01 
kSSABusDeviceType				EQU		'ssa '				; class-code = 0x0C, sub-class = 0x02 
kUSBBusDeviceType				EQU		'usb '				; class-code = 0x0C, sub-class = 0x03 
kFibreBusDeviceType				EQU		'fibr'				; class-code = 0x0C, sub-class = 0x04 
kByteDeviceType					EQU		'byte'				; class-code = 0x?? 
kSerialDeviceType				EQU		'ser '				; class-code = 0x?? 
kParallelDeviceType				EQU		'parl'				; class-code = 0x?? 
kAIMSDeviceType					EQU		'aims'				; class-code = 0x?? 
; typedef OSType 						PCDeviceType


kAttributeType					EQU		0
kMemoryType						EQU		1
kIOType							EQU		2
; typedef UInt32 						PCCardMemoryType


kUnknown						EQU		'unkn'
kPCCard16						EQU		'pc16'
kCardBus						EQU		'cdbs'
; typedef OSType 						PCCardArchitectureType


; ------------------------------------------------------------------------------------
;  Plugin Dispatch Table
;------------------------------------------------------------------------------------


kServiceTypePCCardEnabler		EQU		'card'
kPCCardEnablerPluginVersion		EQU		$00000001
kPCCardEnablerPluginCurrentVersion EQU	$00000001
;   Card Enabler Entrypoints
PCCardEnablerPluginHeader RECORD 0
pluginDispatchTableVersion  ds.l 1				; offset: $0 (0)
reserved1				 ds.l	1				; offset: $4 (4)
reserved2				 ds.l	1				; offset: $8 (8)
reserved3				 ds.l	1				; offset: $C (12)
sizeof					 EQU *					; size:   $10 (16)
						ENDR
PCCardEnablerPluginDispatchTable RECORD 0
header					 ds		PCCardEnablerPluginHeader ; offset: $0 (0)
;  General functions
validateHardwareProc	 ds.l	1				; offset: $10 (16)
initializeProc			 ds.l	1				; offset: $14 (20)
cleanUpProc				 ds.l	1				; offset: $18 (24)
setPCCardPowerLevel		 ds.l	1				; offset: $1C (28)
;  Card functions
handleEventProc			 ds.l	1				; offset: $20 (32)
getCardInfoProc			 ds.l	1				; offset: $24 (36)
addCardProperties		 ds.l	1				; offset: $28 (40)
getDeviceCount			 ds.l	1				; offset: $2C (44)
;  Device functions
getDeviceName			 ds.l	1				; offset: $30 (48)
getDeviceCompatibleNames  ds.l	1				; offset: $34 (52)
getDeviceType			 ds.l	1				; offset: $38 (56)
getDeviceTypeName		 ds.l	1				; offset: $3C (60)
addDeviceProperties		 ds.l	1				; offset: $40 (64)
configureDevice			 ds.l	1				; offset: $44 (68)
finalizeDevice			 ds.l	1				; offset: $48 (72)
;  Card Services Overrides...
validateCIS				 ds.l	1				; offset: $4C (76)
getFirstTuple			 ds.l	1				; offset: $50 (80)
getNextTuple			 ds.l	1				; offset: $54 (84)
;  InterruptHandlers...
cardInterruptHandlerFunction  ds.l 1			; offset: $58 (88)
cardInterruptEnableFunction  ds.l 1				; offset: $5C (92)
cardInterruptDisableFunction  ds.l 1			; offset: $60 (96)
sizeof					 EQU *					; size:   $64 (100)
						ENDR
; typedef struct PCCardEnablerPluginDispatchTable * PCCardEnablerPluginDispatchTablePtr

; ------------------------------------------------------------------------------------
;    PC Card Enabler Utility calls exported by the Family
;------------------------------------------------------------------------------------

;   Generic Enabler Entrypoints
	IF CALL_NOT_IN_CARBON THEN

; *  CEInitializeCard()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEInitializeCard(const RegEntryID *cardRef, Boolean replacingOld)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEInitializeCard
	ENDIF


; *  CEFinalizeCard()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEFinalizeCard(const RegEntryID *cardRef, Boolean beingReplaced)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEFinalizeCard
	ENDIF


; *  CEPowerManagement()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEPowerManagement(const RegEntryID *lpParentID, PCCardPowerOptions powerLevel)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEPowerManagement
	ENDIF


; *  CEHandleCardEvent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEHandleCardEvent(const RegEntryID *cardRef, PCCardEvent lTheCardEvent)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEHandleCardEvent
	ENDIF


; *  CEGetCardInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEGetCardInfo(const RegEntryID *cardRef, PCCardDevType *cardType, PCCardSubType *cardSubType, StringPtr cardName, StringPtr vendorName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEGetCardInfo
	ENDIF


; *  CEAddCardProperties()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEAddCardProperties(const RegEntryID *cardRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEAddCardProperties
	ENDIF


; *  CEGetDeviceCount()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEGetDeviceCount(const RegEntryID *cardRef, ItemCount *numberOfDevices)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEGetDeviceCount
	ENDIF

;  device functions

; *  CEGetDeviceName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEGetDeviceName(UInt32 socketNumber, UInt32 deviceNumber, char *deviceName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEGetDeviceName
	ENDIF


; *  CEGetDeviceCompatibleNames()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEGetDeviceCompatibleNames(const RegEntryID *deviceRef, UInt32 socketNumber, UInt32 deviceNumber, char *name)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEGetDeviceCompatibleNames
	ENDIF


; *  CEGetDeviceType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEGetDeviceType(const RegEntryID *deviceRef, UInt32 socketNumber, UInt32 deviceNumber, PCDeviceType *lpDeviceType)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEGetDeviceType
	ENDIF


; *  CEGetDeviceTypeName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEGetDeviceTypeName(const RegEntryID *deviceRef, UInt32 socketNumber, UInt32 deviceNumber, char *name)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEGetDeviceTypeName
	ENDIF


; *  CEAddDeviceProperties()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEAddDeviceProperties(const RegEntryID *deviceRef, UInt32 deviceNumber)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEAddDeviceProperties
	ENDIF


; *  CEConfigureDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEConfigureDevice(const RegEntryID *deviceRef, UInt32 deviceNumber)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEConfigureDevice
	ENDIF


; *  CEFinalizeDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEFinalizeDevice(UInt32 socket, UInt32 device, const RegEntryID *deviceRef)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEFinalizeDevice
	ENDIF


;   RegEntryID <-> socket number mapping functions

; *  CEGetSocketAndDeviceFromRegEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEGetSocketAndDeviceFromRegEntry(const RegEntryID *lpNode, UInt32 *lpSocket, UInt32 *lpDevice)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEGetSocketAndDeviceFromRegEntry
	ENDIF


; *  CEGetPhysicalSocketNumber()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEGetPhysicalSocketNumber(const RegEntryID *socketRef, const RegEntryID *lpDeviceEntry, UInt32 *lpPhysicalSocketNumber)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEGetPhysicalSocketNumber
	ENDIF

;   Hardware Validation Utilities

; *  CECompareCISTPL_VERS_1()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CECompareCISTPL_VERS_1(const RegEntryID *cardRef, Byte majorVersion, Byte minorVersion, const char *manufacturer, const char *productName, const char *info1, const char *info2, Boolean *identical)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CECompareCISTPL_VERS_1
	ENDIF


; *  CECompareCISTPL_MANFID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CECompareCISTPL_MANFID(const RegEntryID *cardRef, UInt16 manufacturerCode, UInt16 manufacturerInfo, Boolean *identical)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CECompareCISTPL_MANFID
	ENDIF


; *  CECompareMemory()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CECompareMemory(const RegEntryID *cardRef, PCCardMemoryType memType, ByteCount offset, ByteCount length, Byte *dataToCompare, Boolean *identical)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CECompareMemory
	ENDIF


; *  CEValidateCIS()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSStatus CEValidateCIS(UInt32 socket, UInt32 device, UInt32 *lpCISChainCount)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEValidateCIS
	ENDIF


; *  CEDefaultInterruptHandler()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in PCCard 3.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern InterruptMemberNumber CEDefaultInterruptHandler(InterruptSetMember ISTmember, void *refCon, UInt32 theIntCount)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CEDefaultInterruptHandler
	ENDIF


; ------------------------------------------------------------------------------------
;    PC Card Customization Resources
;------------------------------------------------------------------------------------

	ENDIF	; CALL_NOT_IN_CARBON

kPCCardCustomInfoResType		EQU		'pccd'
kPCCardCustomInfoVersion		EQU		0
PCCardCustomResource	RECORD 0
version					 ds.l	1				; offset: $0 (0)
customIconID			 ds.w	1				; offset: $4 (4)		;     ICN#, etc. resource ID
customStringsID			 ds.w	1				; offset: $6 (6)		;     STR# resource ID
customTypeStringIndex	 ds.w	1				; offset: $8 (8)
customHelpStringIndex	 ds.w	1				; offset: $A (10)
customAction			 ds.l	1				; offset: $C (12)
customActionParam1		 ds.l	1				; offset: $10 (16)
customActionParam2		 ds.l	1				; offset: $14 (20)
sizeof					 EQU *					; size:   $18 (24)
						ENDR
	ENDIF
	ENDIF ; __PCCARDENABLERPLUGIN__ 


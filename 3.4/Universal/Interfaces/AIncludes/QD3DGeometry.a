;
;    File:       QD3DGeometry.a
;
;    Contains:   Q3Geometry methods
;
;    Version:    Technology: Quickdraw 3D 1.6
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1995-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__QD3DGEOMETRY__') = 'UNDEFINED' THEN
__QD3DGEOMETRY__ SET 1

	IF &TYPE('__QD3D__') = 'UNDEFINED' THEN
	include 'QD3D.a'
	ENDIF

	IF &TYPE('__QD3DSET__') = 'UNDEFINED' THEN
	include 'QD3DSet.a'
	ENDIF

; ******************************************************************************
; **                                                                          **
; **                             Geometry Routines                            **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Geometry_GetType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3ObjectType Q3Geometry_GetType(TQ3GeometryObject geometry)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Geometry_GetType
	ENDIF


; *  Q3Geometry_GetAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Geometry_GetAttributeSet(TQ3GeometryObject geometry, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Geometry_GetAttributeSet
	ENDIF


; *  Q3Geometry_SetAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Geometry_SetAttributeSet(TQ3GeometryObject geometry, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Geometry_SetAttributeSet
	ENDIF


; *  Q3Geometry_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Geometry_Submit(TQ3GeometryObject geometry, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Geometry_Submit
	ENDIF



; ******************************************************************************
; **                                                                          **
; **                         Box Data Structure Definitions                   **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3BoxData				RECORD 0
origin					 ds		TQ3Point3D		; offset: $0 (0)
orientation				 ds		TQ3Vector3D		; offset: $C (12)
majorAxis				 ds		TQ3Vector3D		; offset: $18 (24)
minorAxis				 ds		TQ3Vector3D		; offset: $24 (36)
faceAttributeSet		 ds.l	1				; offset: $30 (48)		;  Ordering : Left, right,    
;            front, back,   
;            top, bottom    
boxAttributeSet			 ds.l	1				; offset: $34 (52)
sizeof					 EQU *					; size:   $38 (56)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                             Box Routines                                 **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Box_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Box_New(const TQ3BoxData *boxData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_New
	ENDIF


; *  Q3Box_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_Submit(const TQ3BoxData *boxData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_Submit
	ENDIF


; *  Q3Box_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_SetData(TQ3GeometryObject box, const TQ3BoxData *boxData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_SetData
	ENDIF


; *  Q3Box_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_GetData(TQ3GeometryObject box, TQ3BoxData *boxData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_GetData
	ENDIF


; *  Q3Box_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_EmptyData(TQ3BoxData *boxData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_EmptyData
	ENDIF


; *  Q3Box_SetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_SetOrigin(TQ3GeometryObject box, const TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_SetOrigin
	ENDIF


; *  Q3Box_SetOrientation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_SetOrientation(TQ3GeometryObject box, const TQ3Vector3D *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_SetOrientation
	ENDIF


; *  Q3Box_SetMajorAxis()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_SetMajorAxis(TQ3GeometryObject box, const TQ3Vector3D *majorAxis)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_SetMajorAxis
	ENDIF


; *  Q3Box_SetMinorAxis()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_SetMinorAxis(TQ3GeometryObject box, const TQ3Vector3D *minorAxis)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_SetMinorAxis
	ENDIF


; *  Q3Box_GetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_GetOrigin(TQ3GeometryObject box, TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_GetOrigin
	ENDIF


; *  Q3Box_GetOrientation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_GetOrientation(TQ3GeometryObject box, TQ3Vector3D *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_GetOrientation
	ENDIF


; *  Q3Box_GetMajorAxis()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_GetMajorAxis(TQ3GeometryObject box, TQ3Vector3D *majorAxis)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_GetMajorAxis
	ENDIF


; *  Q3Box_GetMinorAxis()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_GetMinorAxis(TQ3GeometryObject box, TQ3Vector3D *minorAxis)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_GetMinorAxis
	ENDIF


; *  Q3Box_GetFaceAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_GetFaceAttributeSet(TQ3GeometryObject box, unsigned long faceIndex, TQ3AttributeSet *faceAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_GetFaceAttributeSet
	ENDIF


; *  Q3Box_SetFaceAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Box_SetFaceAttributeSet(TQ3GeometryObject box, unsigned long faceIndex, TQ3AttributeSet faceAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Box_SetFaceAttributeSet
	ENDIF



; ******************************************************************************
; **                                                                          **
; **                     Cone Data Structure Definitions                      **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3ConeData				RECORD 0
origin					 ds		TQ3Point3D		; offset: $0 (0)
orientation				 ds		TQ3Vector3D		; offset: $C (12)
majorRadius				 ds		TQ3Vector3D		; offset: $18 (24)
minorRadius				 ds		TQ3Vector3D		; offset: $24 (36)
uMin					 ds		Float32			; offset: $30 (48)
uMax					 ds		Float32			; offset: $34 (52)
vMin					 ds		Float32			; offset: $38 (56)
vMax					 ds		Float32			; offset: $3C (60)
caps					 ds.l	1				; offset: $40 (64)
interiorAttributeSet	 ds.l	1				; offset: $44 (68)
faceAttributeSet		 ds.l	1				; offset: $48 (72)
bottomAttributeSet		 ds.l	1				; offset: $4C (76)
coneAttributeSet		 ds.l	1				; offset: $50 (80)
sizeof					 EQU *					; size:   $54 (84)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                             Cone Routines                                **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Cone_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Cone_New(const TQ3ConeData *coneData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_New
	ENDIF


; *  Q3Cone_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_Submit(const TQ3ConeData *coneData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_Submit
	ENDIF


; *  Q3Cone_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_SetData(TQ3GeometryObject cone, const TQ3ConeData *coneData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_SetData
	ENDIF


; *  Q3Cone_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_GetData(TQ3GeometryObject cone, TQ3ConeData *coneData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_GetData
	ENDIF


; *  Q3Cone_SetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_SetOrigin(TQ3GeometryObject cone, const TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_SetOrigin
	ENDIF


; *  Q3Cone_SetOrientation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_SetOrientation(TQ3GeometryObject cone, const TQ3Vector3D *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_SetOrientation
	ENDIF


; *  Q3Cone_SetMajorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_SetMajorRadius(TQ3GeometryObject cone, const TQ3Vector3D *majorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_SetMajorRadius
	ENDIF


; *  Q3Cone_SetMinorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_SetMinorRadius(TQ3GeometryObject cone, const TQ3Vector3D *minorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_SetMinorRadius
	ENDIF


; *  Q3Cone_GetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_GetOrigin(TQ3GeometryObject cone, TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_GetOrigin
	ENDIF


; *  Q3Cone_GetOrientation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_GetOrientation(TQ3GeometryObject cone, TQ3Vector3D *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_GetOrientation
	ENDIF


; *  Q3Cone_GetMajorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_GetMajorRadius(TQ3GeometryObject cone, TQ3Vector3D *majorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_GetMajorRadius
	ENDIF


; *  Q3Cone_GetMinorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_GetMinorRadius(TQ3GeometryObject cone, TQ3Vector3D *minorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_GetMinorRadius
	ENDIF


; *  Q3Cone_SetCaps()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_SetCaps(TQ3GeometryObject cone, TQ3EndCap caps)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_SetCaps
	ENDIF


; *  Q3Cone_GetCaps()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_GetCaps(TQ3GeometryObject cone, TQ3EndCap *caps)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_GetCaps
	ENDIF


; *  Q3Cone_SetBottomAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_SetBottomAttributeSet(TQ3GeometryObject cone, TQ3AttributeSet bottomAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_SetBottomAttributeSet
	ENDIF


; *  Q3Cone_GetBottomAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_GetBottomAttributeSet(TQ3GeometryObject cone, TQ3AttributeSet *bottomAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_GetBottomAttributeSet
	ENDIF


; *  Q3Cone_SetFaceAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_SetFaceAttributeSet(TQ3GeometryObject cone, TQ3AttributeSet faceAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_SetFaceAttributeSet
	ENDIF


; *  Q3Cone_GetFaceAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_GetFaceAttributeSet(TQ3GeometryObject cone, TQ3AttributeSet *faceAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_GetFaceAttributeSet
	ENDIF


; *  Q3Cone_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cone_EmptyData(TQ3ConeData *coneData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cone_EmptyData
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     Cylinder Data Structure Definitions                  **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3CylinderData			RECORD 0
origin					 ds		TQ3Point3D		; offset: $0 (0)
orientation				 ds		TQ3Vector3D		; offset: $C (12)
majorRadius				 ds		TQ3Vector3D		; offset: $18 (24)
minorRadius				 ds		TQ3Vector3D		; offset: $24 (36)
uMin					 ds		Float32			; offset: $30 (48)
uMax					 ds		Float32			; offset: $34 (52)
vMin					 ds		Float32			; offset: $38 (56)
vMax					 ds		Float32			; offset: $3C (60)
caps					 ds.l	1				; offset: $40 (64)
interiorAttributeSet	 ds.l	1				; offset: $44 (68)
topAttributeSet			 ds.l	1				; offset: $48 (72)
faceAttributeSet		 ds.l	1				; offset: $4C (76)
bottomAttributeSet		 ds.l	1				; offset: $50 (80)
cylinderAttributeSet	 ds.l	1				; offset: $54 (84)
sizeof					 EQU *					; size:   $58 (88)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                         Cylinder Routines                                **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Cylinder_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Cylinder_New(const TQ3CylinderData *cylinderData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_New
	ENDIF


; *  Q3Cylinder_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_Submit(const TQ3CylinderData *cylinderData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_Submit
	ENDIF


; *  Q3Cylinder_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_SetData(TQ3GeometryObject cylinder, const TQ3CylinderData *cylinderData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_SetData
	ENDIF


; *  Q3Cylinder_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_GetData(TQ3GeometryObject cylinder, TQ3CylinderData *cylinderData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_GetData
	ENDIF


; *  Q3Cylinder_SetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_SetOrigin(TQ3GeometryObject cylinder, const TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_SetOrigin
	ENDIF


; *  Q3Cylinder_SetOrientation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_SetOrientation(TQ3GeometryObject cylinder, const TQ3Vector3D *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_SetOrientation
	ENDIF


; *  Q3Cylinder_SetMajorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_SetMajorRadius(TQ3GeometryObject cylinder, const TQ3Vector3D *majorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_SetMajorRadius
	ENDIF


; *  Q3Cylinder_SetMinorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_SetMinorRadius(TQ3GeometryObject cylinder, const TQ3Vector3D *minorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_SetMinorRadius
	ENDIF


; *  Q3Cylinder_GetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_GetOrigin(TQ3GeometryObject cylinder, TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_GetOrigin
	ENDIF


; *  Q3Cylinder_GetOrientation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_GetOrientation(TQ3GeometryObject cylinder, TQ3Vector3D *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_GetOrientation
	ENDIF


; *  Q3Cylinder_GetMajorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_GetMajorRadius(TQ3GeometryObject cylinder, TQ3Vector3D *majorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_GetMajorRadius
	ENDIF


; *  Q3Cylinder_GetMinorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_GetMinorRadius(TQ3GeometryObject cylinder, TQ3Vector3D *minorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_GetMinorRadius
	ENDIF



; *  Q3Cylinder_SetCaps()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_SetCaps(TQ3GeometryObject cylinder, TQ3EndCap caps)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_SetCaps
	ENDIF


; *  Q3Cylinder_GetCaps()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_GetCaps(TQ3GeometryObject cylinder, TQ3EndCap *caps)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_GetCaps
	ENDIF



; *  Q3Cylinder_SetTopAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_SetTopAttributeSet(TQ3GeometryObject cylinder, TQ3AttributeSet topAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_SetTopAttributeSet
	ENDIF


; *  Q3Cylinder_GetTopAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_GetTopAttributeSet(TQ3GeometryObject cylinder, TQ3AttributeSet *topAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_GetTopAttributeSet
	ENDIF


; *  Q3Cylinder_SetBottomAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_SetBottomAttributeSet(TQ3GeometryObject cylinder, TQ3AttributeSet bottomAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_SetBottomAttributeSet
	ENDIF


; *  Q3Cylinder_GetBottomAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_GetBottomAttributeSet(TQ3GeometryObject cylinder, TQ3AttributeSet *bottomAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_GetBottomAttributeSet
	ENDIF


; *  Q3Cylinder_SetFaceAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_SetFaceAttributeSet(TQ3GeometryObject cylinder, TQ3AttributeSet faceAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_SetFaceAttributeSet
	ENDIF


; *  Q3Cylinder_GetFaceAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_GetFaceAttributeSet(TQ3GeometryObject cylinder, TQ3AttributeSet *faceAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_GetFaceAttributeSet
	ENDIF


; *  Q3Cylinder_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Cylinder_EmptyData(TQ3CylinderData *cylinderData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Cylinder_EmptyData
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     Disk Data Structure Definitions                      **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3DiskData				RECORD 0
origin					 ds		TQ3Point3D		; offset: $0 (0)
majorRadius				 ds		TQ3Vector3D		; offset: $C (12)
minorRadius				 ds		TQ3Vector3D		; offset: $18 (24)
uMin					 ds		Float32			; offset: $24 (36)
uMax					 ds		Float32			; offset: $28 (40)
vMin					 ds		Float32			; offset: $2C (44)
vMax					 ds		Float32			; offset: $30 (48)
diskAttributeSet		 ds.l	1				; offset: $34 (52)
sizeof					 EQU *					; size:   $38 (56)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                             Disk Routines                                **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Disk_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Disk_New(const TQ3DiskData *diskData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Disk_New
	ENDIF


; *  Q3Disk_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Disk_Submit(const TQ3DiskData *diskData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Disk_Submit
	ENDIF


; *  Q3Disk_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Disk_SetData(TQ3GeometryObject disk, const TQ3DiskData *diskData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Disk_SetData
	ENDIF


; *  Q3Disk_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Disk_GetData(TQ3GeometryObject disk, TQ3DiskData *diskData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Disk_GetData
	ENDIF


; *  Q3Disk_SetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Disk_SetOrigin(TQ3GeometryObject disk, const TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Disk_SetOrigin
	ENDIF


; *  Q3Disk_SetMajorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Disk_SetMajorRadius(TQ3GeometryObject disk, const TQ3Vector3D *majorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Disk_SetMajorRadius
	ENDIF


; *  Q3Disk_SetMinorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Disk_SetMinorRadius(TQ3GeometryObject disk, const TQ3Vector3D *minorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Disk_SetMinorRadius
	ENDIF


; *  Q3Disk_GetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Disk_GetOrigin(TQ3GeometryObject disk, TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Disk_GetOrigin
	ENDIF


; *  Q3Disk_GetMajorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Disk_GetMajorRadius(TQ3GeometryObject disk, TQ3Vector3D *majorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Disk_GetMajorRadius
	ENDIF


; *  Q3Disk_GetMinorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Disk_GetMinorRadius(TQ3GeometryObject disk, TQ3Vector3D *minorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Disk_GetMinorRadius
	ENDIF



; *  Q3Disk_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Disk_EmptyData(TQ3DiskData *diskData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Disk_EmptyData
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                  Ellipse Data Structure Definitions                      **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3EllipseData			RECORD 0
origin					 ds		TQ3Point3D		; offset: $0 (0)
majorRadius				 ds		TQ3Vector3D		; offset: $C (12)
minorRadius				 ds		TQ3Vector3D		; offset: $18 (24)
uMin					 ds		Float32			; offset: $24 (36)
uMax					 ds		Float32			; offset: $28 (40)
ellipseAttributeSet		 ds.l	1				; offset: $2C (44)
sizeof					 EQU *					; size:   $30 (48)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                             Ellipse Routines                             **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Ellipse_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Ellipse_New(const TQ3EllipseData *ellipseData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipse_New
	ENDIF


; *  Q3Ellipse_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipse_Submit(const TQ3EllipseData *ellipseData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipse_Submit
	ENDIF


; *  Q3Ellipse_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipse_SetData(TQ3GeometryObject ellipse, const TQ3EllipseData *ellipseData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipse_SetData
	ENDIF


; *  Q3Ellipse_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipse_GetData(TQ3GeometryObject ellipse, TQ3EllipseData *ellipseData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipse_GetData
	ENDIF


; *  Q3Ellipse_SetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipse_SetOrigin(TQ3GeometryObject ellipse, const TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipse_SetOrigin
	ENDIF


; *  Q3Ellipse_SetMajorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipse_SetMajorRadius(TQ3GeometryObject ellipse, const TQ3Vector3D *majorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipse_SetMajorRadius
	ENDIF


; *  Q3Ellipse_SetMinorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipse_SetMinorRadius(TQ3GeometryObject ellipse, const TQ3Vector3D *minorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipse_SetMinorRadius
	ENDIF


; *  Q3Ellipse_GetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipse_GetOrigin(TQ3GeometryObject ellipse, TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipse_GetOrigin
	ENDIF


; *  Q3Ellipse_GetMajorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipse_GetMajorRadius(TQ3GeometryObject ellipse, TQ3Vector3D *majorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipse_GetMajorRadius
	ENDIF


; *  Q3Ellipse_GetMinorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipse_GetMinorRadius(TQ3GeometryObject ellipse, TQ3Vector3D *minorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipse_GetMinorRadius
	ENDIF



; *  Q3Ellipse_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipse_EmptyData(TQ3EllipseData *ellipseData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipse_EmptyData
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                         Ellipsoid Data structures                        **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3EllipsoidData		RECORD 0
origin					 ds		TQ3Point3D		; offset: $0 (0)
orientation				 ds		TQ3Vector3D		; offset: $C (12)
majorRadius				 ds		TQ3Vector3D		; offset: $18 (24)
minorRadius				 ds		TQ3Vector3D		; offset: $24 (36)
uMin					 ds		Float32			; offset: $30 (48)
uMax					 ds		Float32			; offset: $34 (52)
vMin					 ds		Float32			; offset: $38 (56)
vMax					 ds		Float32			; offset: $3C (60)
caps					 ds.l	1				; offset: $40 (64)
interiorAttributeSet	 ds.l	1				; offset: $44 (68)
ellipsoidAttributeSet	 ds.l	1				; offset: $48 (72)
sizeof					 EQU *					; size:   $4C (76)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                         Ellipsoid Routines                               **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Ellipsoid_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Ellipsoid_New(const TQ3EllipsoidData *ellipsoidData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_New
	ENDIF


; *  Q3Ellipsoid_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipsoid_Submit(const TQ3EllipsoidData *ellipsoidData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_Submit
	ENDIF


; *  Q3Ellipsoid_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipsoid_SetData(TQ3GeometryObject ellipsoid, const TQ3EllipsoidData *ellipsoidData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_SetData
	ENDIF


; *  Q3Ellipsoid_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipsoid_GetData(TQ3GeometryObject ellipsoid, TQ3EllipsoidData *ellipsoidData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_GetData
	ENDIF


; *  Q3Ellipsoid_SetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipsoid_SetOrigin(TQ3GeometryObject ellipsoid, const TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_SetOrigin
	ENDIF


; *  Q3Ellipsoid_SetOrientation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipsoid_SetOrientation(TQ3GeometryObject ellipsoid, const TQ3Vector3D *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_SetOrientation
	ENDIF


; *  Q3Ellipsoid_SetMajorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipsoid_SetMajorRadius(TQ3GeometryObject ellipsoid, const TQ3Vector3D *majorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_SetMajorRadius
	ENDIF


; *  Q3Ellipsoid_SetMinorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipsoid_SetMinorRadius(TQ3GeometryObject ellipsoid, const TQ3Vector3D *minorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_SetMinorRadius
	ENDIF


; *  Q3Ellipsoid_GetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipsoid_GetOrigin(TQ3GeometryObject ellipsoid, TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_GetOrigin
	ENDIF


; *  Q3Ellipsoid_GetOrientation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipsoid_GetOrientation(TQ3GeometryObject ellipsoid, TQ3Vector3D *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_GetOrientation
	ENDIF


; *  Q3Ellipsoid_GetMajorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipsoid_GetMajorRadius(TQ3GeometryObject ellipsoid, TQ3Vector3D *majorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_GetMajorRadius
	ENDIF


; *  Q3Ellipsoid_GetMinorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipsoid_GetMinorRadius(TQ3GeometryObject ellipsoid, TQ3Vector3D *minorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_GetMinorRadius
	ENDIF


; *  Q3Ellipsoid_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Ellipsoid_EmptyData(TQ3EllipsoidData *ellipsoidData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Ellipsoid_EmptyData
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                 General Polygon Data Structure Definitions               **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON

; typedef long							TQ3GeneralPolygonShapeHint
kQ3GeneralPolygonShapeHintComplex EQU	0
kQ3GeneralPolygonShapeHintConcave EQU	1
kQ3GeneralPolygonShapeHintConvex EQU	2
TQ3GeneralPolygonContourData RECORD 0
numVertices				 ds.l	1				; offset: $0 (0)
vertices				 ds.l	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $8 (8)
						ENDR
TQ3GeneralPolygonData	RECORD 0
numContours				 ds.l	1				; offset: $0 (0)
contours				 ds.l	1				; offset: $4 (4)
shapeHint				 ds.l	1				; offset: $8 (8)
generalPolygonAttributeSet  ds.l 1				; offset: $C (12)
sizeof					 EQU *					; size:   $10 (16)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                         General polygon Routines                         **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3GeneralPolygon_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3GeneralPolygon_New(const TQ3GeneralPolygonData *generalPolygonData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3GeneralPolygon_New
	ENDIF


; *  Q3GeneralPolygon_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3GeneralPolygon_Submit(const TQ3GeneralPolygonData *generalPolygonData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3GeneralPolygon_Submit
	ENDIF


; *  Q3GeneralPolygon_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3GeneralPolygon_SetData(TQ3GeometryObject generalPolygon, const TQ3GeneralPolygonData *generalPolygonData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3GeneralPolygon_SetData
	ENDIF


; *  Q3GeneralPolygon_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3GeneralPolygon_GetData(TQ3GeometryObject polygon, TQ3GeneralPolygonData *generalPolygonData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3GeneralPolygon_GetData
	ENDIF


; *  Q3GeneralPolygon_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3GeneralPolygon_EmptyData(TQ3GeneralPolygonData *generalPolygonData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3GeneralPolygon_EmptyData
	ENDIF


; *  Q3GeneralPolygon_GetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3GeneralPolygon_GetVertexPosition(TQ3GeometryObject generalPolygon, unsigned long contourIndex, unsigned long pointIndex, TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3GeneralPolygon_GetVertexPosition
	ENDIF


; *  Q3GeneralPolygon_SetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3GeneralPolygon_SetVertexPosition(TQ3GeometryObject generalPolygon, unsigned long contourIndex, unsigned long pointIndex, const TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3GeneralPolygon_SetVertexPosition
	ENDIF


; *  Q3GeneralPolygon_GetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3GeneralPolygon_GetVertexAttributeSet(TQ3GeometryObject generalPolygon, unsigned long contourIndex, unsigned long pointIndex, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3GeneralPolygon_GetVertexAttributeSet
	ENDIF


; *  Q3GeneralPolygon_SetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3GeneralPolygon_SetVertexAttributeSet(TQ3GeometryObject generalPolygon, unsigned long contourIndex, unsigned long pointIndex, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3GeneralPolygon_SetVertexAttributeSet
	ENDIF


; *  Q3GeneralPolygon_SetShapeHint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3GeneralPolygon_SetShapeHint(TQ3GeometryObject generalPolygon, TQ3GeneralPolygonShapeHint shapeHint)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3GeneralPolygon_SetShapeHint
	ENDIF


; *  Q3GeneralPolygon_GetShapeHint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3GeneralPolygon_GetShapeHint(TQ3GeometryObject generalPolygon, TQ3GeneralPolygonShapeHint *shapeHint)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3GeneralPolygon_GetShapeHint
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     Line Data Structure Definitions                      **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3LineData				RECORD 0
vertices				 ds.b	2 * TQ3Vertex3D.sizeof ; offset: $0 (0)
lineAttributeSet		 ds.l	1				; offset: $20 (32)
sizeof					 EQU *					; size:   $24 (36)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                         Line Routines                                    **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Line_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Line_New(const TQ3LineData *lineData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Line_New
	ENDIF


; *  Q3Line_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Line_Submit(const TQ3LineData *lineData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Line_Submit
	ENDIF


; *  Q3Line_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Line_GetData(TQ3GeometryObject line, TQ3LineData *lineData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Line_GetData
	ENDIF


; *  Q3Line_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Line_SetData(TQ3GeometryObject line, const TQ3LineData *lineData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Line_SetData
	ENDIF


; *  Q3Line_GetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Line_GetVertexPosition(TQ3GeometryObject line, unsigned long index, TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Line_GetVertexPosition
	ENDIF


; *  Q3Line_SetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Line_SetVertexPosition(TQ3GeometryObject line, unsigned long index, const TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Line_SetVertexPosition
	ENDIF


; *  Q3Line_GetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Line_GetVertexAttributeSet(TQ3GeometryObject line, unsigned long index, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Line_GetVertexAttributeSet
	ENDIF


; *  Q3Line_SetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Line_SetVertexAttributeSet(TQ3GeometryObject line, unsigned long index, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Line_SetVertexAttributeSet
	ENDIF


; *  Q3Line_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Line_EmptyData(TQ3LineData *lineData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Line_EmptyData
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     Marker Data Structure Definitions                    **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3MarkerData			RECORD 0
location				 ds		TQ3Point3D		; offset: $0 (0)
xOffset					 ds.l	1				; offset: $C (12)
yOffset					 ds.l	1				; offset: $10 (16)
bitmap					 ds		TQ3Bitmap		; offset: $14 (20)
markerAttributeSet		 ds.l	1				; offset: $28 (40)
sizeof					 EQU *					; size:   $2C (44)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                             Marker Routines                              **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Marker_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Marker_New(const TQ3MarkerData *markerData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_New
	ENDIF


; *  Q3Marker_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Marker_Submit(const TQ3MarkerData *markerData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_Submit
	ENDIF


; *  Q3Marker_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Marker_SetData(TQ3GeometryObject geometry, const TQ3MarkerData *markerData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_SetData
	ENDIF


; *  Q3Marker_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Marker_GetData(TQ3GeometryObject geometry, TQ3MarkerData *markerData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_GetData
	ENDIF


; *  Q3Marker_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Marker_EmptyData(TQ3MarkerData *markerData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_EmptyData
	ENDIF


; *  Q3Marker_GetPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Marker_GetPosition(TQ3GeometryObject marker, TQ3Point3D *location)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_GetPosition
	ENDIF


; *  Q3Marker_SetPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Marker_SetPosition(TQ3GeometryObject marker, const TQ3Point3D *location)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_SetPosition
	ENDIF


; *  Q3Marker_GetXOffset()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Marker_GetXOffset(TQ3GeometryObject marker, long *xOffset)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_GetXOffset
	ENDIF


; *  Q3Marker_SetXOffset()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Marker_SetXOffset(TQ3GeometryObject marker, long xOffset)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_SetXOffset
	ENDIF


; *  Q3Marker_GetYOffset()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Marker_GetYOffset(TQ3GeometryObject marker, long *yOffset)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_GetYOffset
	ENDIF


; *  Q3Marker_SetYOffset()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Marker_SetYOffset(TQ3GeometryObject marker, long yOffset)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_SetYOffset
	ENDIF


; *  Q3Marker_GetBitmap()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Marker_GetBitmap(TQ3GeometryObject marker, TQ3Bitmap *bitmap)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_GetBitmap
	ENDIF


; *  Q3Marker_SetBitmap()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Marker_SetBitmap(TQ3GeometryObject marker, const TQ3Bitmap *bitmap)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Marker_SetBitmap
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     Mesh Data Structure Definitions                      **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON










; ******************************************************************************
; **                                                                          **
; **                         Mesh Routines                                    **
; **                                                                          **
; ****************************************************************************

; 
; *  Constructors
; 

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Mesh_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Mesh_New(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_New
	ENDIF


; *  Q3Mesh_VertexNew()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshVertex Q3Mesh_VertexNew(TQ3GeometryObject mesh, const TQ3Vertex3D *vertex)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_VertexNew
	ENDIF


; *  Q3Mesh_FaceNew()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshFace Q3Mesh_FaceNew(TQ3GeometryObject mesh, unsigned long numVertices, const TQ3MeshVertex *vertices, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FaceNew
	ENDIF

; 
; *  Destructors
; 


; *  Q3Mesh_VertexDelete()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_VertexDelete(TQ3GeometryObject mesh, TQ3MeshVertex vertex)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_VertexDelete
	ENDIF


; *  Q3Mesh_FaceDelete()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_FaceDelete(TQ3GeometryObject mesh, TQ3MeshFace face)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FaceDelete
	ENDIF

; 
; * Methods
; 


; *  Q3Mesh_DelayUpdates()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_DelayUpdates(TQ3GeometryObject mesh)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_DelayUpdates
	ENDIF


; *  Q3Mesh_ResumeUpdates()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_ResumeUpdates(TQ3GeometryObject mesh)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_ResumeUpdates
	ENDIF


; *  Q3Mesh_FaceToContour()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshContour Q3Mesh_FaceToContour(TQ3GeometryObject mesh, TQ3MeshFace containerFace, TQ3MeshFace face)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FaceToContour
	ENDIF


; *  Q3Mesh_ContourToFace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshFace Q3Mesh_ContourToFace(TQ3GeometryObject mesh, TQ3MeshContour contour)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_ContourToFace
	ENDIF

; 
; * Mesh
; 


; *  Q3Mesh_GetNumComponents()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetNumComponents(TQ3GeometryObject mesh, unsigned long *numComponents)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetNumComponents
	ENDIF


; *  Q3Mesh_GetNumEdges()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetNumEdges(TQ3GeometryObject mesh, unsigned long *numEdges)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetNumEdges
	ENDIF


; *  Q3Mesh_GetNumVertices()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetNumVertices(TQ3GeometryObject mesh, unsigned long *numVertices)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetNumVertices
	ENDIF


; *  Q3Mesh_GetNumFaces()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetNumFaces(TQ3GeometryObject mesh, unsigned long *numFaces)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetNumFaces
	ENDIF


; *  Q3Mesh_GetNumCorners()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetNumCorners(TQ3GeometryObject mesh, unsigned long *numCorners)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetNumCorners
	ENDIF


; *  Q3Mesh_GetOrientable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetOrientable(TQ3GeometryObject mesh, TQ3Boolean *orientable)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetOrientable
	ENDIF

; 
; * Component
; 


; *  Q3Mesh_GetComponentNumVertices()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetComponentNumVertices(TQ3GeometryObject mesh, TQ3MeshComponent component, unsigned long *numVertices)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetComponentNumVertices
	ENDIF


; *  Q3Mesh_GetComponentNumEdges()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetComponentNumEdges(TQ3GeometryObject mesh, TQ3MeshComponent component, unsigned long *numEdges)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetComponentNumEdges
	ENDIF


; *  Q3Mesh_GetComponentBoundingBox()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetComponentBoundingBox(TQ3GeometryObject mesh, TQ3MeshComponent component, TQ3BoundingBox *boundingBox)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetComponentBoundingBox
	ENDIF


; *  Q3Mesh_GetComponentOrientable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetComponentOrientable(TQ3GeometryObject mesh, TQ3MeshComponent component, TQ3Boolean *orientable)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetComponentOrientable
	ENDIF

; 
; * Vertex
; 


; *  Q3Mesh_GetVertexCoordinates()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetVertexCoordinates(TQ3GeometryObject mesh, TQ3MeshVertex vertex, TQ3Point3D *coordinates)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetVertexCoordinates
	ENDIF


; *  Q3Mesh_GetVertexIndex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetVertexIndex(TQ3GeometryObject mesh, TQ3MeshVertex vertex, unsigned long *index)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetVertexIndex
	ENDIF


; *  Q3Mesh_GetVertexOnBoundary()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetVertexOnBoundary(TQ3GeometryObject mesh, TQ3MeshVertex vertex, TQ3Boolean *onBoundary)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetVertexOnBoundary
	ENDIF


; *  Q3Mesh_GetVertexComponent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetVertexComponent(TQ3GeometryObject mesh, TQ3MeshVertex vertex, TQ3MeshComponent *component)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetVertexComponent
	ENDIF


; *  Q3Mesh_GetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetVertexAttributeSet(TQ3GeometryObject mesh, TQ3MeshVertex vertex, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetVertexAttributeSet
	ENDIF



; *  Q3Mesh_SetVertexCoordinates()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_SetVertexCoordinates(TQ3GeometryObject mesh, TQ3MeshVertex vertex, const TQ3Point3D *coordinates)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_SetVertexCoordinates
	ENDIF


; *  Q3Mesh_SetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_SetVertexAttributeSet(TQ3GeometryObject mesh, TQ3MeshVertex vertex, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_SetVertexAttributeSet
	ENDIF


; 
; * Face
; 


; *  Q3Mesh_GetFaceNumVertices()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetFaceNumVertices(TQ3GeometryObject mesh, TQ3MeshFace face, unsigned long *numVertices)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetFaceNumVertices
	ENDIF


; *  Q3Mesh_GetFacePlaneEquation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetFacePlaneEquation(TQ3GeometryObject mesh, TQ3MeshFace face, TQ3PlaneEquation *planeEquation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetFacePlaneEquation
	ENDIF


; *  Q3Mesh_GetFaceNumContours()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetFaceNumContours(TQ3GeometryObject mesh, TQ3MeshFace face, unsigned long *numContours)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetFaceNumContours
	ENDIF


; *  Q3Mesh_GetFaceIndex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetFaceIndex(TQ3GeometryObject mesh, TQ3MeshFace face, unsigned long *index)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetFaceIndex
	ENDIF


; *  Q3Mesh_GetFaceComponent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetFaceComponent(TQ3GeometryObject mesh, TQ3MeshFace face, TQ3MeshComponent *component)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetFaceComponent
	ENDIF


; *  Q3Mesh_GetFaceAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetFaceAttributeSet(TQ3GeometryObject mesh, TQ3MeshFace face, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetFaceAttributeSet
	ENDIF



; *  Q3Mesh_SetFaceAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_SetFaceAttributeSet(TQ3GeometryObject mesh, TQ3MeshFace face, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_SetFaceAttributeSet
	ENDIF

; 
; * Edge
; 


; *  Q3Mesh_GetEdgeVertices()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetEdgeVertices(TQ3GeometryObject mesh, TQ3MeshEdge edge, TQ3MeshVertex *vertex1, TQ3MeshVertex *vertex2)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetEdgeVertices
	ENDIF


; *  Q3Mesh_GetEdgeFaces()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetEdgeFaces(TQ3GeometryObject mesh, TQ3MeshEdge edge, TQ3MeshFace *face1, TQ3MeshFace *face2)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetEdgeFaces
	ENDIF


; *  Q3Mesh_GetEdgeOnBoundary()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetEdgeOnBoundary(TQ3GeometryObject mesh, TQ3MeshEdge edge, TQ3Boolean *onBoundary)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetEdgeOnBoundary
	ENDIF


; *  Q3Mesh_GetEdgeComponent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetEdgeComponent(TQ3GeometryObject mesh, TQ3MeshEdge edge, TQ3MeshComponent *component)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetEdgeComponent
	ENDIF


; *  Q3Mesh_GetEdgeAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetEdgeAttributeSet(TQ3GeometryObject mesh, TQ3MeshEdge edge, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetEdgeAttributeSet
	ENDIF



; *  Q3Mesh_SetEdgeAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_SetEdgeAttributeSet(TQ3GeometryObject mesh, TQ3MeshEdge edge, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_SetEdgeAttributeSet
	ENDIF

; 
; * Contour
; 


; *  Q3Mesh_GetContourFace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetContourFace(TQ3GeometryObject mesh, TQ3MeshContour contour, TQ3MeshFace *face)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetContourFace
	ENDIF


; *  Q3Mesh_GetContourNumVertices()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetContourNumVertices(TQ3GeometryObject mesh, TQ3MeshContour contour, unsigned long *numVertices)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetContourNumVertices
	ENDIF

; 
; * Corner
; 


; *  Q3Mesh_GetCornerAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_GetCornerAttributeSet(TQ3GeometryObject mesh, TQ3MeshVertex vertex, TQ3MeshFace face, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_GetCornerAttributeSet
	ENDIF


; *  Q3Mesh_SetCornerAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Mesh_SetCornerAttributeSet(TQ3GeometryObject mesh, TQ3MeshVertex vertex, TQ3MeshFace face, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_SetCornerAttributeSet
	ENDIF


; 
; * Public Mesh Iterators
; 

	ENDIF	; CALL_NOT_IN_CARBON
TQ3MeshIterator			RECORD 0
var1					 ds.l	1				; offset: $0 (0)
var2					 ds.l	1				; offset: $4 (4)
var3					 ds.l	1				; offset: $8 (8)
field1					 ds.l	1				; offset: $C (12)
field2					 ds.b	4				; offset: $10 (16)
sizeof					 EQU *					; size:   $14 (20)
						ENDR
	IF CALL_NOT_IN_CARBON THEN

; *  Q3Mesh_FirstMeshComponent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshComponent Q3Mesh_FirstMeshComponent(TQ3GeometryObject mesh, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstMeshComponent
	ENDIF


; *  Q3Mesh_NextMeshComponent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshComponent Q3Mesh_NextMeshComponent(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextMeshComponent
	ENDIF


; *  Q3Mesh_FirstComponentVertex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshVertex Q3Mesh_FirstComponentVertex(TQ3MeshComponent component, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstComponentVertex
	ENDIF


; *  Q3Mesh_NextComponentVertex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshVertex Q3Mesh_NextComponentVertex(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextComponentVertex
	ENDIF


; *  Q3Mesh_FirstComponentEdge()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshEdge Q3Mesh_FirstComponentEdge(TQ3MeshComponent component, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstComponentEdge
	ENDIF


; *  Q3Mesh_NextComponentEdge()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshEdge Q3Mesh_NextComponentEdge(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextComponentEdge
	ENDIF


; *  Q3Mesh_FirstMeshVertex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshVertex Q3Mesh_FirstMeshVertex(TQ3GeometryObject mesh, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstMeshVertex
	ENDIF


; *  Q3Mesh_NextMeshVertex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshVertex Q3Mesh_NextMeshVertex(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextMeshVertex
	ENDIF


; *  Q3Mesh_FirstMeshFace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshFace Q3Mesh_FirstMeshFace(TQ3GeometryObject mesh, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstMeshFace
	ENDIF


; *  Q3Mesh_NextMeshFace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshFace Q3Mesh_NextMeshFace(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextMeshFace
	ENDIF


; *  Q3Mesh_FirstMeshEdge()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshEdge Q3Mesh_FirstMeshEdge(TQ3GeometryObject mesh, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstMeshEdge
	ENDIF


; *  Q3Mesh_NextMeshEdge()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshEdge Q3Mesh_NextMeshEdge(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextMeshEdge
	ENDIF


; *  Q3Mesh_FirstVertexEdge()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshEdge Q3Mesh_FirstVertexEdge(TQ3MeshVertex vertex, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstVertexEdge
	ENDIF


; *  Q3Mesh_NextVertexEdge()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshEdge Q3Mesh_NextVertexEdge(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextVertexEdge
	ENDIF


; *  Q3Mesh_FirstVertexVertex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshVertex Q3Mesh_FirstVertexVertex(TQ3MeshVertex vertex, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstVertexVertex
	ENDIF


; *  Q3Mesh_NextVertexVertex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshVertex Q3Mesh_NextVertexVertex(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextVertexVertex
	ENDIF


; *  Q3Mesh_FirstVertexFace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshFace Q3Mesh_FirstVertexFace(TQ3MeshVertex vertex, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstVertexFace
	ENDIF


; *  Q3Mesh_NextVertexFace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshFace Q3Mesh_NextVertexFace(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextVertexFace
	ENDIF


; *  Q3Mesh_FirstFaceEdge()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshEdge Q3Mesh_FirstFaceEdge(TQ3MeshFace face, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstFaceEdge
	ENDIF


; *  Q3Mesh_NextFaceEdge()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshEdge Q3Mesh_NextFaceEdge(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextFaceEdge
	ENDIF


; *  Q3Mesh_FirstFaceVertex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshVertex Q3Mesh_FirstFaceVertex(TQ3MeshFace face, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstFaceVertex
	ENDIF


; *  Q3Mesh_NextFaceVertex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshVertex Q3Mesh_NextFaceVertex(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextFaceVertex
	ENDIF


; *  Q3Mesh_FirstFaceFace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshFace Q3Mesh_FirstFaceFace(TQ3MeshFace face, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstFaceFace
	ENDIF


; *  Q3Mesh_NextFaceFace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshFace Q3Mesh_NextFaceFace(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextFaceFace
	ENDIF


; *  Q3Mesh_FirstFaceContour()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshContour Q3Mesh_FirstFaceContour(TQ3MeshFace face, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstFaceContour
	ENDIF


; *  Q3Mesh_NextFaceContour()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshContour Q3Mesh_NextFaceContour(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextFaceContour
	ENDIF


; *  Q3Mesh_FirstContourEdge()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshEdge Q3Mesh_FirstContourEdge(TQ3MeshContour contour, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstContourEdge
	ENDIF


; *  Q3Mesh_NextContourEdge()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshEdge Q3Mesh_NextContourEdge(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextContourEdge
	ENDIF


; *  Q3Mesh_FirstContourVertex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshVertex Q3Mesh_FirstContourVertex(TQ3MeshContour contour, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstContourVertex
	ENDIF


; *  Q3Mesh_NextContourVertex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshVertex Q3Mesh_NextContourVertex(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextContourVertex
	ENDIF


; *  Q3Mesh_FirstContourFace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshFace Q3Mesh_FirstContourFace(TQ3MeshContour contour, TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_FirstContourFace
	ENDIF


; *  Q3Mesh_NextContourFace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3MeshFace Q3Mesh_NextContourFace(TQ3MeshIterator *iterator)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Mesh_NextContourFace
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON


; ******************************************************************************
; **                                                                          **
; **                         Maximum order for NURB Curves                    **
; **                                                                          **
; ****************************************************************************


; ******************************************************************************
; **                                                                          **
; **                     NURB Data Structure Definitions                      **
; **                                                                          **
; ****************************************************************************

TQ3NURBCurveData		RECORD 0
order					 ds.l	1				; offset: $0 (0)
numPoints				 ds.l	1				; offset: $4 (4)
controlPoints			 ds.l	1				; offset: $8 (8)
knots					 ds.l	1				; offset: $C (12)
curveAttributeSet		 ds.l	1				; offset: $10 (16)
sizeof					 EQU *					; size:   $14 (20)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                             NURB Curve Routines                          **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3NURBCurve_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3NURBCurve_New(const TQ3NURBCurveData *curveData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBCurve_New
	ENDIF


; *  Q3NURBCurve_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBCurve_Submit(const TQ3NURBCurveData *curveData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBCurve_Submit
	ENDIF


; *  Q3NURBCurve_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBCurve_SetData(TQ3GeometryObject curve, const TQ3NURBCurveData *nurbCurveData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBCurve_SetData
	ENDIF


; *  Q3NURBCurve_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBCurve_GetData(TQ3GeometryObject curve, TQ3NURBCurveData *nurbCurveData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBCurve_GetData
	ENDIF


; *  Q3NURBCurve_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBCurve_EmptyData(TQ3NURBCurveData *nurbCurveData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBCurve_EmptyData
	ENDIF


; *  Q3NURBCurve_SetControlPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBCurve_SetControlPoint(TQ3GeometryObject curve, unsigned long pointIndex, const TQ3RationalPoint4D *point4D)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBCurve_SetControlPoint
	ENDIF


; *  Q3NURBCurve_GetControlPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBCurve_GetControlPoint(TQ3GeometryObject curve, unsigned long pointIndex, TQ3RationalPoint4D *point4D)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBCurve_GetControlPoint
	ENDIF


; *  Q3NURBCurve_SetKnot()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBCurve_SetKnot(TQ3GeometryObject curve, unsigned long knotIndex, float knotValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBCurve_SetKnot
	ENDIF


; *  Q3NURBCurve_GetKnot()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBCurve_GetKnot(TQ3GeometryObject curve, unsigned long knotIndex, float *knotValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBCurve_GetKnot
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON
; ******************************************************************************
; **                                                                          **
; **                         Maximum NURB Patch Order                         **
; **                                                                          **
; ****************************************************************************

; ******************************************************************************
; **                                                                          **
; **                     NURB Patch Data Structure Definitions                **
; **                                                                          **
; ****************************************************************************

TQ3NURBPatchTrimCurveData RECORD 0
order					 ds.l	1				; offset: $0 (0)
numPoints				 ds.l	1				; offset: $4 (4)
controlPoints			 ds.l	1				; offset: $8 (8)
knots					 ds.l	1				; offset: $C (12)
sizeof					 EQU *					; size:   $10 (16)
						ENDR
TQ3NURBPatchTrimLoopData RECORD 0
numTrimCurves			 ds.l	1				; offset: $0 (0)
trimCurves				 ds.l	1				; offset: $4 (4)
sizeof					 EQU *					; size:   $8 (8)
						ENDR
TQ3NURBPatchData		RECORD 0
uOrder					 ds.l	1				; offset: $0 (0)
vOrder					 ds.l	1				; offset: $4 (4)
numRows					 ds.l	1				; offset: $8 (8)
numColumns				 ds.l	1				; offset: $C (12)
controlPoints			 ds.l	1				; offset: $10 (16)
uKnots					 ds.l	1				; offset: $14 (20)
vKnots					 ds.l	1				; offset: $18 (24)
numTrimLoops			 ds.l	1				; offset: $1C (28)
trimLoops				 ds.l	1				; offset: $20 (32)
patchAttributeSet		 ds.l	1				; offset: $24 (36)
sizeof					 EQU *					; size:   $28 (40)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                             NURB Patch Routines                          **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3NURBPatch_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3NURBPatch_New(const TQ3NURBPatchData *nurbPatchData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBPatch_New
	ENDIF


; *  Q3NURBPatch_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBPatch_Submit(const TQ3NURBPatchData *nurbPatchData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBPatch_Submit
	ENDIF


; *  Q3NURBPatch_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBPatch_SetData(TQ3GeometryObject nurbPatch, const TQ3NURBPatchData *nurbPatchData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBPatch_SetData
	ENDIF


; *  Q3NURBPatch_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBPatch_GetData(TQ3GeometryObject nurbPatch, TQ3NURBPatchData *nurbPatchData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBPatch_GetData
	ENDIF


; *  Q3NURBPatch_SetControlPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBPatch_SetControlPoint(TQ3GeometryObject nurbPatch, unsigned long rowIndex, unsigned long columnIndex, const TQ3RationalPoint4D *point4D)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBPatch_SetControlPoint
	ENDIF


; *  Q3NURBPatch_GetControlPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBPatch_GetControlPoint(TQ3GeometryObject nurbPatch, unsigned long rowIndex, unsigned long columnIndex, TQ3RationalPoint4D *point4D)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBPatch_GetControlPoint
	ENDIF


; *  Q3NURBPatch_SetUKnot()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBPatch_SetUKnot(TQ3GeometryObject nurbPatch, unsigned long knotIndex, float knotValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBPatch_SetUKnot
	ENDIF


; *  Q3NURBPatch_SetVKnot()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBPatch_SetVKnot(TQ3GeometryObject nurbPatch, unsigned long knotIndex, float knotValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBPatch_SetVKnot
	ENDIF


; *  Q3NURBPatch_GetUKnot()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBPatch_GetUKnot(TQ3GeometryObject nurbPatch, unsigned long knotIndex, float *knotValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBPatch_GetUKnot
	ENDIF


; *  Q3NURBPatch_GetVKnot()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBPatch_GetVKnot(TQ3GeometryObject nurbPatch, unsigned long knotIndex, float *knotValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBPatch_GetVKnot
	ENDIF


; *  Q3NURBPatch_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3NURBPatch_EmptyData(TQ3NURBPatchData *nurbPatchData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3NURBPatch_EmptyData
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     Pixmap Marker Data Structure Definitions             **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3PixmapMarkerData		RECORD 0
position				 ds		TQ3Point3D		; offset: $0 (0)
xOffset					 ds.l	1				; offset: $C (12)
yOffset					 ds.l	1				; offset: $10 (16)
pixmap					 ds		TQ3StoragePixmap ; offset: $14 (20)
pixmapMarkerAttributeSet  ds.l	1				; offset: $34 (52)
sizeof					 EQU *					; size:   $38 (56)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                             Pixmap Marker Routines                       **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3PixmapMarker_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3PixmapMarker_New(const TQ3PixmapMarkerData *pixmapMarkerData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_New
	ENDIF


; *  Q3PixmapMarker_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PixmapMarker_Submit(const TQ3PixmapMarkerData *pixmapMarkerData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_Submit
	ENDIF


; *  Q3PixmapMarker_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PixmapMarker_SetData(TQ3GeometryObject geometry, const TQ3PixmapMarkerData *pixmapMarkerData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_SetData
	ENDIF


; *  Q3PixmapMarker_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PixmapMarker_GetData(TQ3GeometryObject geometry, TQ3PixmapMarkerData *pixmapMarkerData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_GetData
	ENDIF


; *  Q3PixmapMarker_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PixmapMarker_EmptyData(TQ3PixmapMarkerData *pixmapMarkerData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_EmptyData
	ENDIF


; *  Q3PixmapMarker_GetPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PixmapMarker_GetPosition(TQ3GeometryObject pixmapMarker, TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_GetPosition
	ENDIF


; *  Q3PixmapMarker_SetPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PixmapMarker_SetPosition(TQ3GeometryObject pixmapMarker, const TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_SetPosition
	ENDIF


; *  Q3PixmapMarker_GetXOffset()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PixmapMarker_GetXOffset(TQ3GeometryObject pixmapMarker, long *xOffset)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_GetXOffset
	ENDIF


; *  Q3PixmapMarker_SetXOffset()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PixmapMarker_SetXOffset(TQ3GeometryObject pixmapMarker, long xOffset)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_SetXOffset
	ENDIF


; *  Q3PixmapMarker_GetYOffset()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PixmapMarker_GetYOffset(TQ3GeometryObject pixmapMarker, long *yOffset)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_GetYOffset
	ENDIF


; *  Q3PixmapMarker_SetYOffset()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PixmapMarker_SetYOffset(TQ3GeometryObject pixmapMarker, long yOffset)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_SetYOffset
	ENDIF


; *  Q3PixmapMarker_GetPixmap()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PixmapMarker_GetPixmap(TQ3GeometryObject pixmapMarker, TQ3StoragePixmap *pixmap)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_GetPixmap
	ENDIF


; *  Q3PixmapMarker_SetPixmap()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PixmapMarker_SetPixmap(TQ3GeometryObject pixmapMarker, const TQ3StoragePixmap *pixmap)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PixmapMarker_SetPixmap
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     Point Data Structure Definitions                     **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3PointData			RECORD 0
point					 ds		TQ3Point3D		; offset: $0 (0)
pointAttributeSet		 ds.l	1				; offset: $C (12)
sizeof					 EQU *					; size:   $10 (16)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                             Point Routines                               **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Point_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Point_New(const TQ3PointData *pointData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Point_New
	ENDIF


; *  Q3Point_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Point_Submit(const TQ3PointData *pointData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Point_Submit
	ENDIF


; *  Q3Point_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Point_GetData(TQ3GeometryObject point, TQ3PointData *pointData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Point_GetData
	ENDIF


; *  Q3Point_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Point_SetData(TQ3GeometryObject point, const TQ3PointData *pointData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Point_SetData
	ENDIF


; *  Q3Point_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Point_EmptyData(TQ3PointData *pointData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Point_EmptyData
	ENDIF


; *  Q3Point_SetPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Point_SetPosition(TQ3GeometryObject point, const TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Point_SetPosition
	ENDIF


; *  Q3Point_GetPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Point_GetPosition(TQ3GeometryObject point, TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Point_GetPosition
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     Polygon Data Structure Definitions                   **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3PolygonData			RECORD 0
numVertices				 ds.l	1				; offset: $0 (0)
vertices				 ds.l	1				; offset: $4 (4)
polygonAttributeSet		 ds.l	1				; offset: $8 (8)
sizeof					 EQU *					; size:   $C (12)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                         Polygon Routines                                 **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Polygon_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Polygon_New(const TQ3PolygonData *polygonData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polygon_New
	ENDIF


; *  Q3Polygon_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polygon_Submit(const TQ3PolygonData *polygonData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polygon_Submit
	ENDIF


; *  Q3Polygon_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polygon_SetData(TQ3GeometryObject polygon, const TQ3PolygonData *polygonData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polygon_SetData
	ENDIF


; *  Q3Polygon_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polygon_GetData(TQ3GeometryObject polygon, TQ3PolygonData *polygonData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polygon_GetData
	ENDIF


; *  Q3Polygon_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polygon_EmptyData(TQ3PolygonData *polygonData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polygon_EmptyData
	ENDIF


; *  Q3Polygon_GetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polygon_GetVertexPosition(TQ3GeometryObject polygon, unsigned long index, TQ3Point3D *point)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polygon_GetVertexPosition
	ENDIF


; *  Q3Polygon_SetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polygon_SetVertexPosition(TQ3GeometryObject polygon, unsigned long index, const TQ3Point3D *point)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polygon_SetVertexPosition
	ENDIF


; *  Q3Polygon_GetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polygon_GetVertexAttributeSet(TQ3GeometryObject polygon, unsigned long index, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polygon_GetVertexAttributeSet
	ENDIF


; *  Q3Polygon_SetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polygon_SetVertexAttributeSet(TQ3GeometryObject polygon, unsigned long index, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polygon_SetVertexAttributeSet
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     Polyhedron Data Structure Definitions                **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON

; typedef long							TQ3PolyhedronEdgeMasks
kQ3PolyhedronEdgeNone			EQU		0
kQ3PolyhedronEdge01				EQU		$01
kQ3PolyhedronEdge12				EQU		$02
kQ3PolyhedronEdge20				EQU		$04
kQ3PolyhedronEdgeAll			EQU		$07
; typedef unsigned long 				TQ3PolyhedronEdge

TQ3PolyhedronEdgeData	RECORD 0
vertexIndices			 ds.l	2				; offset: $0 (0)
triangleIndices			 ds.l	2				; offset: $8 (8)
edgeAttributeSet		 ds.l	1				; offset: $10 (16)
sizeof					 EQU *					; size:   $14 (20)
						ENDR
TQ3PolyhedronTriangleData RECORD 0
vertexIndices			 ds.l	3				; offset: $0 (0)
edgeFlag				 ds.l	1				; offset: $C (12)
triangleAttributeSet	 ds.l	1				; offset: $10 (16)
sizeof					 EQU *					; size:   $14 (20)
						ENDR
TQ3PolyhedronData		RECORD 0
numVertices				 ds.l	1				; offset: $0 (0)
vertices				 ds.l	1				; offset: $4 (4)
numEdges				 ds.l	1				; offset: $8 (8)
edges					 ds.l	1				; offset: $C (12)
numTriangles			 ds.l	1				; offset: $10 (16)
triangles				 ds.l	1				; offset: $14 (20)
polyhedronAttributeSet	 ds.l	1				; offset: $18 (24)
sizeof					 EQU *					; size:   $1C (28)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                             Polyhedron Routines                          **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Polyhedron_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Polyhedron_New(const TQ3PolyhedronData *polyhedronData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_New
	ENDIF


; *  Q3Polyhedron_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polyhedron_Submit(const TQ3PolyhedronData *polyhedronData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_Submit
	ENDIF


; *  Q3Polyhedron_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polyhedron_SetData(TQ3GeometryObject polyhedron, const TQ3PolyhedronData *polyhedronData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_SetData
	ENDIF


; *  Q3Polyhedron_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polyhedron_GetData(TQ3GeometryObject polyhedron, TQ3PolyhedronData *polyhedronData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_GetData
	ENDIF


; *  Q3Polyhedron_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polyhedron_EmptyData(TQ3PolyhedronData *polyhedronData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_EmptyData
	ENDIF


; *  Q3Polyhedron_SetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polyhedron_SetVertexPosition(TQ3GeometryObject polyhedron, unsigned long index, const TQ3Point3D *point)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_SetVertexPosition
	ENDIF


; *  Q3Polyhedron_GetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polyhedron_GetVertexPosition(TQ3GeometryObject polyhedron, unsigned long index, TQ3Point3D *point)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_GetVertexPosition
	ENDIF


; *  Q3Polyhedron_SetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polyhedron_SetVertexAttributeSet(TQ3GeometryObject polyhedron, unsigned long index, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_SetVertexAttributeSet
	ENDIF


; *  Q3Polyhedron_GetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polyhedron_GetVertexAttributeSet(TQ3GeometryObject polyhedron, unsigned long index, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_GetVertexAttributeSet
	ENDIF


; *  Q3Polyhedron_GetTriangleData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polyhedron_GetTriangleData(TQ3GeometryObject polyhedron, unsigned long triangleIndex, TQ3PolyhedronTriangleData *triangleData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_GetTriangleData
	ENDIF


; *  Q3Polyhedron_SetTriangleData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polyhedron_SetTriangleData(TQ3GeometryObject polyhedron, unsigned long triangleIndex, const TQ3PolyhedronTriangleData *triangleData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_SetTriangleData
	ENDIF


; *  Q3Polyhedron_GetEdgeData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polyhedron_GetEdgeData(TQ3GeometryObject polyhedron, unsigned long edgeIndex, TQ3PolyhedronEdgeData *edgeData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_GetEdgeData
	ENDIF


; *  Q3Polyhedron_SetEdgeData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Polyhedron_SetEdgeData(TQ3GeometryObject polyhedron, unsigned long edgeIndex, const TQ3PolyhedronEdgeData *edgeData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Polyhedron_SetEdgeData
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     PolyLine Data Structure Definitions                  **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3PolyLineData			RECORD 0
numVertices				 ds.l	1				; offset: $0 (0)
vertices				 ds.l	1				; offset: $4 (4)
segmentAttributeSet		 ds.l	1				; offset: $8 (8)
polyLineAttributeSet	 ds.l	1				; offset: $C (12)
sizeof					 EQU *					; size:   $10 (16)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                         PolyLine Routines                                **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3PolyLine_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3PolyLine_New(const TQ3PolyLineData *polylineData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PolyLine_New
	ENDIF


; *  Q3PolyLine_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PolyLine_Submit(const TQ3PolyLineData *polyLineData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PolyLine_Submit
	ENDIF


; *  Q3PolyLine_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PolyLine_SetData(TQ3GeometryObject polyLine, const TQ3PolyLineData *polyLineData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PolyLine_SetData
	ENDIF


; *  Q3PolyLine_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PolyLine_GetData(TQ3GeometryObject polyLine, TQ3PolyLineData *polyLineData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PolyLine_GetData
	ENDIF


; *  Q3PolyLine_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PolyLine_EmptyData(TQ3PolyLineData *polyLineData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PolyLine_EmptyData
	ENDIF


; *  Q3PolyLine_GetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PolyLine_GetVertexPosition(TQ3GeometryObject polyLine, unsigned long index, TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PolyLine_GetVertexPosition
	ENDIF


; *  Q3PolyLine_SetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PolyLine_SetVertexPosition(TQ3GeometryObject polyLine, unsigned long index, const TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PolyLine_SetVertexPosition
	ENDIF


; *  Q3PolyLine_GetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PolyLine_GetVertexAttributeSet(TQ3GeometryObject polyLine, unsigned long index, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PolyLine_GetVertexAttributeSet
	ENDIF


; *  Q3PolyLine_SetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PolyLine_SetVertexAttributeSet(TQ3GeometryObject polyLine, unsigned long index, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PolyLine_SetVertexAttributeSet
	ENDIF


; *  Q3PolyLine_GetSegmentAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PolyLine_GetSegmentAttributeSet(TQ3GeometryObject polyLine, unsigned long index, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PolyLine_GetSegmentAttributeSet
	ENDIF


; *  Q3PolyLine_SetSegmentAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3PolyLine_SetSegmentAttributeSet(TQ3GeometryObject polyLine, unsigned long index, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3PolyLine_SetSegmentAttributeSet
	ENDIF





; ******************************************************************************
; **                                                                          **
; **                     Torus Data Structure Definitions                     **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3TorusData			RECORD 0
origin					 ds		TQ3Point3D		; offset: $0 (0)
orientation				 ds		TQ3Vector3D		; offset: $C (12)
majorRadius				 ds		TQ3Vector3D		; offset: $18 (24)
minorRadius				 ds		TQ3Vector3D		; offset: $24 (36)
ratio					 ds		Float32			; offset: $30 (48)
uMin					 ds		Float32			; offset: $34 (52)
uMax					 ds		Float32			; offset: $38 (56)
vMin					 ds		Float32			; offset: $3C (60)
vMax					 ds		Float32			; offset: $40 (64)
caps					 ds.l	1				; offset: $44 (68)
interiorAttributeSet	 ds.l	1				; offset: $48 (72)
torusAttributeSet		 ds.l	1				; offset: $4C (76)
sizeof					 EQU *					; size:   $50 (80)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                             Torus Routines                               **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Torus_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Torus_New(const TQ3TorusData *torusData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_New
	ENDIF


; *  Q3Torus_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_Submit(const TQ3TorusData *torusData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_Submit
	ENDIF


; *  Q3Torus_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_SetData(TQ3GeometryObject torus, const TQ3TorusData *torusData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_SetData
	ENDIF


; *  Q3Torus_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_GetData(TQ3GeometryObject torus, TQ3TorusData *torusData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_GetData
	ENDIF


; *  Q3Torus_SetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_SetOrigin(TQ3GeometryObject torus, const TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_SetOrigin
	ENDIF


; *  Q3Torus_SetOrientation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_SetOrientation(TQ3GeometryObject torus, const TQ3Vector3D *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_SetOrientation
	ENDIF


; *  Q3Torus_SetMajorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_SetMajorRadius(TQ3GeometryObject torus, const TQ3Vector3D *majorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_SetMajorRadius
	ENDIF


; *  Q3Torus_SetMinorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_SetMinorRadius(TQ3GeometryObject torus, const TQ3Vector3D *minorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_SetMinorRadius
	ENDIF


; *  Q3Torus_SetRatio()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_SetRatio(TQ3GeometryObject torus, float ratio)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_SetRatio
	ENDIF


; *  Q3Torus_GetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_GetOrigin(TQ3GeometryObject torus, TQ3Point3D *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_GetOrigin
	ENDIF


; *  Q3Torus_GetOrientation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_GetOrientation(TQ3GeometryObject torus, TQ3Vector3D *orientation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_GetOrientation
	ENDIF


; *  Q3Torus_GetMajorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_GetMajorRadius(TQ3GeometryObject torus, TQ3Vector3D *majorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_GetMajorRadius
	ENDIF


; *  Q3Torus_GetMinorRadius()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_GetMinorRadius(TQ3GeometryObject torus, TQ3Vector3D *minorRadius)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_GetMinorRadius
	ENDIF


; *  Q3Torus_GetRatio()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_GetRatio(TQ3GeometryObject torus, float *ratio)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_GetRatio
	ENDIF


; *  Q3Torus_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Torus_EmptyData(TQ3TorusData *torusData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Torus_EmptyData
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     Triangle Data Structure Definitions                  **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3TriangleData			RECORD 0
vertices				 ds.b	3 * TQ3Vertex3D.sizeof ; offset: $0 (0)
triangleAttributeSet	 ds.l	1				; offset: $30 (48)
sizeof					 EQU *					; size:   $34 (52)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                         Triangle Routines                                **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3Triangle_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3Triangle_New(const TQ3TriangleData *triangleData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Triangle_New
	ENDIF


; *  Q3Triangle_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Triangle_Submit(const TQ3TriangleData *triangleData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Triangle_Submit
	ENDIF


; *  Q3Triangle_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Triangle_SetData(TQ3GeometryObject triangle, const TQ3TriangleData *triangleData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Triangle_SetData
	ENDIF


; *  Q3Triangle_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Triangle_GetData(TQ3GeometryObject triangle, TQ3TriangleData *triangleData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Triangle_GetData
	ENDIF


; *  Q3Triangle_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Triangle_EmptyData(TQ3TriangleData *triangleData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Triangle_EmptyData
	ENDIF


; *  Q3Triangle_GetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Triangle_GetVertexPosition(TQ3GeometryObject triangle, unsigned long index, TQ3Point3D *point)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Triangle_GetVertexPosition
	ENDIF


; *  Q3Triangle_SetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Triangle_SetVertexPosition(TQ3GeometryObject triangle, unsigned long index, const TQ3Point3D *point)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Triangle_SetVertexPosition
	ENDIF


; *  Q3Triangle_GetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Triangle_GetVertexAttributeSet(TQ3GeometryObject triangle, unsigned long index, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Triangle_GetVertexAttributeSet
	ENDIF


; *  Q3Triangle_SetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Triangle_SetVertexAttributeSet(TQ3GeometryObject triangle, unsigned long index, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Triangle_SetVertexAttributeSet
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     TriGrid Data Structure Definitions                   **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3TriGridData			RECORD 0
numRows					 ds.l	1				; offset: $0 (0)
numColumns				 ds.l	1				; offset: $4 (4)
vertices				 ds.l	1				; offset: $8 (8)
facetAttributeSet		 ds.l	1				; offset: $C (12)
triGridAttributeSet		 ds.l	1				; offset: $10 (16)
sizeof					 EQU *					; size:   $14 (20)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                             TriGrid Routines                             **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3TriGrid_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3TriGrid_New(const TQ3TriGridData *triGridData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriGrid_New
	ENDIF


; *  Q3TriGrid_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriGrid_Submit(const TQ3TriGridData *triGridData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriGrid_Submit
	ENDIF


; *  Q3TriGrid_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriGrid_SetData(TQ3GeometryObject triGrid, const TQ3TriGridData *triGridData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriGrid_SetData
	ENDIF


; *  Q3TriGrid_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriGrid_GetData(TQ3GeometryObject triGrid, TQ3TriGridData *triGridData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriGrid_GetData
	ENDIF


; *  Q3TriGrid_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriGrid_EmptyData(TQ3TriGridData *triGridData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriGrid_EmptyData
	ENDIF


; *  Q3TriGrid_GetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriGrid_GetVertexPosition(TQ3GeometryObject triGrid, unsigned long rowIndex, unsigned long columnIndex, TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriGrid_GetVertexPosition
	ENDIF


; *  Q3TriGrid_SetVertexPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriGrid_SetVertexPosition(TQ3GeometryObject triGrid, unsigned long rowIndex, unsigned long columnIndex, const TQ3Point3D *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriGrid_SetVertexPosition
	ENDIF


; *  Q3TriGrid_GetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriGrid_GetVertexAttributeSet(TQ3GeometryObject triGrid, unsigned long rowIndex, unsigned long columnIndex, TQ3AttributeSet *attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriGrid_GetVertexAttributeSet
	ENDIF


; *  Q3TriGrid_SetVertexAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriGrid_SetVertexAttributeSet(TQ3GeometryObject triGrid, unsigned long rowIndex, unsigned long columnIndex, TQ3AttributeSet attributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriGrid_SetVertexAttributeSet
	ENDIF


; *  Q3TriGrid_GetFacetAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriGrid_GetFacetAttributeSet(TQ3GeometryObject triGrid, unsigned long faceIndex, TQ3AttributeSet *facetAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriGrid_GetFacetAttributeSet
	ENDIF


; *  Q3TriGrid_SetFacetAttributeSet()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriGrid_SetFacetAttributeSet(TQ3GeometryObject triGrid, unsigned long faceIndex, TQ3AttributeSet facetAttributeSet)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriGrid_SetFacetAttributeSet
	ENDIF




; ******************************************************************************
; **                                                                          **
; **                     TriMesh Data Structure Definitions                   **
; **                                                                          **
; ****************************************************************************

	ENDIF	; CALL_NOT_IN_CARBON
TQ3TriMeshTriangleData	RECORD 0
pointIndices			 ds.l	3				; offset: $0 (0)
sizeof					 EQU *					; size:   $C (12)
						ENDR
TQ3TriMeshEdgeData		RECORD 0
pointIndices			 ds.l	2				; offset: $0 (0)
triangleIndices			 ds.l	2				; offset: $8 (8)
sizeof					 EQU *					; size:   $10 (16)
						ENDR
TQ3TriMeshAttributeData	RECORD 0
attributeType			 ds.l	1				; offset: $0 (0)		;  The type of attribute       
data					 ds.l	1				; offset: $4 (4)		;  Pointer to the contiguous     
;  attribute data.           
attributeUseArray		 ds.l	1				; offset: $8 (8)		;  This is only used with custom 
;  attributes                
sizeof					 EQU *					; size:   $C (12)
						ENDR
TQ3TriMeshData			RECORD 0
triMeshAttributeSet		 ds.l	1				; offset: $0 (0)
numTriangles			 ds.l	1				; offset: $4 (4)
triangles				 ds.l	1				; offset: $8 (8)
numTriangleAttributeTypes  ds.l	1				; offset: $C (12)
triangleAttributeTypes	 ds.l	1				; offset: $10 (16)
numEdges				 ds.l	1				; offset: $14 (20)
edges					 ds.l	1				; offset: $18 (24)
numEdgeAttributeTypes	 ds.l	1				; offset: $1C (28)
edgeAttributeTypes		 ds.l	1				; offset: $20 (32)
numPoints				 ds.l	1				; offset: $24 (36)
points					 ds.l	1				; offset: $28 (40)
numVertexAttributeTypes	 ds.l	1				; offset: $2C (44)
vertexAttributeTypes	 ds.l	1				; offset: $30 (48)
bBox					 ds		TQ3BoundingBox ; offset: $34 (52)
sizeof					 EQU *					; size:   $50 (80)
						ENDR
; ******************************************************************************
; **                                                                          **
; **                         TriMesh Routines                                 **
; **                                                                          **
; ****************************************************************************

	IF CALL_NOT_IN_CARBON THEN

; *  Q3TriMesh_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GeometryObject Q3TriMesh_New(const TQ3TriMeshData *triMeshData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriMesh_New
	ENDIF


; *  Q3TriMesh_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriMesh_Submit(const TQ3TriMeshData *triMeshData, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriMesh_Submit
	ENDIF


; *  Q3TriMesh_SetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriMesh_SetData(TQ3GeometryObject triMesh, const TQ3TriMeshData *triMeshData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriMesh_SetData
	ENDIF


; *  Q3TriMesh_GetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriMesh_GetData(TQ3GeometryObject triMesh, TQ3TriMeshData *triMeshData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriMesh_GetData
	ENDIF


; *  Q3TriMesh_EmptyData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3TriMesh_EmptyData(TQ3TriMeshData *triMeshData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3TriMesh_EmptyData
	ENDIF




	ENDIF	; CALL_NOT_IN_CARBON
	ENDIF ; __QD3DGEOMETRY__ 


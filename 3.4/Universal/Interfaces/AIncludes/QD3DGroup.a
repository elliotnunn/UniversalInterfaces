;
;    File:       QD3DGroup.a
;
;    Contains:   Q3Group methods
;
;    Version:    Technology: Quickdraw 3D 1.6
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1995-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__QD3DGROUP__') = 'UNDEFINED' THEN
__QD3DGROUP__ SET 1

	IF &TYPE('__QD3D__') = 'UNDEFINED' THEN
	include 'QD3D.a'
	ENDIF

; ******************************************************************************
; **                                                                          **
; **                         Group Typedefs                                   **
; **                                                                          **
; ****************************************************************************

; 
; * These flags affect how a group is traversed
; * They apply to when a group is "drawn", "picked", "bounded", "written"
; 


; typedef long							TQ3DisplayGroupStateMasks
kQ3DisplayGroupStateNone		EQU		0
kQ3DisplayGroupStateMaskIsDrawn	EQU		$01
kQ3DisplayGroupStateMaskIsInline EQU	$02
kQ3DisplayGroupStateMaskUseBoundingBox EQU $04
kQ3DisplayGroupStateMaskUseBoundingSphere EQU $08
kQ3DisplayGroupStateMaskIsPicked EQU	$10
kQ3DisplayGroupStateMaskIsWritten EQU	$20
; typedef unsigned long 				TQ3DisplayGroupState

; ******************************************************************************
; **                                                                          **
; **                 Group Routines (apply to all groups)                     **
; **                                                                          **
; ****************************************************************************

;  May contain any shared object 
	IF CALL_NOT_IN_CARBON THEN

; *  Q3Group_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GroupObject Q3Group_New(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_New
	ENDIF


; *  Q3Group_GetType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3ObjectType Q3Group_GetType(TQ3GroupObject group)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetType
	ENDIF


; *  Q3Group_AddObject()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GroupPosition Q3Group_AddObject(TQ3GroupObject group, TQ3Object object)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_AddObject
	ENDIF


; *  Q3Group_AddObjectBefore()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GroupPosition Q3Group_AddObjectBefore(TQ3GroupObject group, TQ3GroupPosition position, TQ3Object object)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_AddObjectBefore
	ENDIF


; *  Q3Group_AddObjectAfter()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GroupPosition Q3Group_AddObjectAfter(TQ3GroupObject group, TQ3GroupPosition position, TQ3Object object)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_AddObjectAfter
	ENDIF


; *  Q3Group_GetPositionObject()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetPositionObject(TQ3GroupObject group, TQ3GroupPosition position, TQ3Object *object)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetPositionObject
	ENDIF


; *  Q3Group_SetPositionObject()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_SetPositionObject(TQ3GroupObject group, TQ3GroupPosition position, TQ3Object object)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_SetPositionObject
	ENDIF


; *  Q3Group_RemovePosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Object Q3Group_RemovePosition(TQ3GroupObject group, TQ3GroupPosition position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_RemovePosition
	ENDIF


; *  Q3Group_GetFirstPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetFirstPosition(TQ3GroupObject group, TQ3GroupPosition *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetFirstPosition
	ENDIF


; *  Q3Group_GetLastPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetLastPosition(TQ3GroupObject group, TQ3GroupPosition *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetLastPosition
	ENDIF


; *  Q3Group_GetNextPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetNextPosition(TQ3GroupObject group, TQ3GroupPosition *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetNextPosition
	ENDIF


; *  Q3Group_GetPreviousPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetPreviousPosition(TQ3GroupObject group, TQ3GroupPosition *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetPreviousPosition
	ENDIF


; *  Q3Group_CountObjects()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_CountObjects(TQ3GroupObject group, unsigned long *nObjects)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_CountObjects
	ENDIF


; *  Q3Group_EmptyObjects()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_EmptyObjects(TQ3GroupObject group)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_EmptyObjects
	ENDIF

; 
; *  Typed Access
; 


; *  Q3Group_GetFirstPositionOfType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetFirstPositionOfType(TQ3GroupObject group, TQ3ObjectType isType, TQ3GroupPosition *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetFirstPositionOfType
	ENDIF


; *  Q3Group_GetLastPositionOfType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetLastPositionOfType(TQ3GroupObject group, TQ3ObjectType isType, TQ3GroupPosition *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetLastPositionOfType
	ENDIF


; *  Q3Group_GetNextPositionOfType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetNextPositionOfType(TQ3GroupObject group, TQ3ObjectType isType, TQ3GroupPosition *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetNextPositionOfType
	ENDIF


; *  Q3Group_GetPreviousPositionOfType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetPreviousPositionOfType(TQ3GroupObject group, TQ3ObjectType isType, TQ3GroupPosition *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetPreviousPositionOfType
	ENDIF


; *  Q3Group_CountObjectsOfType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_CountObjectsOfType(TQ3GroupObject group, TQ3ObjectType isType, unsigned long *nObjects)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_CountObjectsOfType
	ENDIF


; *  Q3Group_EmptyObjectsOfType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_EmptyObjectsOfType(TQ3GroupObject group, TQ3ObjectType isType)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_EmptyObjectsOfType
	ENDIF

; 
; *  Determine position of objects in a group
; 


; *  Q3Group_GetFirstObjectPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetFirstObjectPosition(TQ3GroupObject group, TQ3Object object, TQ3GroupPosition *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetFirstObjectPosition
	ENDIF


; *  Q3Group_GetLastObjectPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetLastObjectPosition(TQ3GroupObject group, TQ3Object object, TQ3GroupPosition *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetLastObjectPosition
	ENDIF


; *  Q3Group_GetNextObjectPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetNextObjectPosition(TQ3GroupObject group, TQ3Object object, TQ3GroupPosition *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetNextObjectPosition
	ENDIF


; *  Q3Group_GetPreviousObjectPosition()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3Group_GetPreviousObjectPosition(TQ3GroupObject group, TQ3Object object, TQ3GroupPosition *position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3Group_GetPreviousObjectPosition
	ENDIF


; ******************************************************************************
; **                                                                          **
; **                         Group Subclasses                                 **
; **                                                                          **
; ****************************************************************************

;  Must contain only lights 

; *  Q3LightGroup_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GroupObject Q3LightGroup_New(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3LightGroup_New
	ENDIF

;  Must contain only strings 

; *  Q3InfoGroup_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GroupObject Q3InfoGroup_New(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3InfoGroup_New
	ENDIF

; ******************************************************************************
; **                                                                          **
; **                     Display Group Routines                               **
; **                                                                          **
; ****************************************************************************

;  May contain only drawables 

; *  Q3DisplayGroup_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GroupObject Q3DisplayGroup_New(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3DisplayGroup_New
	ENDIF


; *  Q3DisplayGroup_GetType()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3ObjectType Q3DisplayGroup_GetType(TQ3GroupObject group)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3DisplayGroup_GetType
	ENDIF


; *  Q3DisplayGroup_GetState()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3DisplayGroup_GetState(TQ3GroupObject group, TQ3DisplayGroupState *state)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3DisplayGroup_GetState
	ENDIF


; *  Q3DisplayGroup_SetState()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3DisplayGroup_SetState(TQ3GroupObject group, TQ3DisplayGroupState state)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3DisplayGroup_SetState
	ENDIF


; *  Q3DisplayGroup_Submit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3DisplayGroup_Submit(TQ3GroupObject group, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3DisplayGroup_Submit
	ENDIF


; *  Q3DisplayGroup_SetAndUseBoundingBox()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3DisplayGroup_SetAndUseBoundingBox(TQ3GroupObject group, TQ3BoundingBox *bBox)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3DisplayGroup_SetAndUseBoundingBox
	ENDIF


; *  Q3DisplayGroup_GetBoundingBox()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3DisplayGroup_GetBoundingBox(TQ3GroupObject group, TQ3BoundingBox *bBox)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3DisplayGroup_GetBoundingBox
	ENDIF


; *  Q3DisplayGroup_RemoveBoundingBox()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3DisplayGroup_RemoveBoundingBox(TQ3GroupObject group)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3DisplayGroup_RemoveBoundingBox
	ENDIF


; *  Q3DisplayGroup_CalcAndUseBoundingBox()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3Status Q3DisplayGroup_CalcAndUseBoundingBox(TQ3GroupObject group, TQ3ComputeBounds computeBounds, TQ3ViewObject view)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3DisplayGroup_CalcAndUseBoundingBox
	ENDIF


; ******************************************************************************
; **                                                                          **
; **     Ordered Display Group                                                **
; **                                                                          **
; **     Ordered display groups keep objects in order by the type of object:  **
; **                                                                          **
; **     1   kQ3ShapeTypeTransform                                            **
; **     2   kQ3ShapeTypeStyle                                                **
; **     3   kQ3SetTypeAttribute                                              **
; **     4   kQ3ShapeTypeShader                                               **
; **     5   kQ3ShapeTypeCamera                                               **
; **     6   kQ3ShapeTypeLight                                                **
; **     7   kQ3ShapeTypeGeometry                                             **
; **     8   kQ3ShapeTypeGroup                                                **         
; **     9   kQ3ShapeTypeUnknown                                              **
; **                                                                          **
; **     Within a type, you are responsible for keeping things in order.      **
; **                                                                          **
; **     You may access and/or manipulate the group using the above types     **
; **     (fast), or you may use any parent or leaf class types (slower).      **
; **                                                                          **
; **     Additional types will be added as functionality grows.               **
; **                                                                          **
; **     The group calls which access by type are much faster for ordered     ** 
; **     display group for the types above.                                   **
; **                                                                          **
; **     N.B. Lights and Cameras in groups are a no-op when drawn and will    **
; **          post an error with the debug libraries.                         **
; **                                                                          **
; ****************************************************************************


; *  Q3OrderedDisplayGroup_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GroupObject Q3OrderedDisplayGroup_New(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3OrderedDisplayGroup_New
	ENDIF

; ******************************************************************************
; **                                                                          **
; **     IO Proxy Display Group                                               **
; **                                                                          **
; **     IO Proxy display groups are used to place more than one              **
; **     representation of an object in a metafile. For example, if you know  **
; **     another program does not understand NURBPatches but does understand  **
; **     Meshes, you may place a mesh and a NURB Patch in an IO Proxy Group,  **
; **     and the reading program will select the desired representation.      **
; **                                                                          **
; **     Objects in an IO Proxy Display Group are placed in their preferencial**
; **     order, with the FIRST object being the MOST preferred, the LAST      **
; **     object the least preferred.                                          **
; **                                                                          **
; **     The behavior of an IO Proxy Display Group is that when drawn/picked/ **
; **     bounded, the first object in the group that is not "Unknown" is used,**
; **     and the other objects ignored.                                       **
; **                                                                          **
; ****************************************************************************


; *  Q3IOProxyDisplayGroup_New()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern TQ3GroupObject Q3IOProxyDisplayGroup_New(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3IOProxyDisplayGroup_New
	ENDIF

; ******************************************************************************
; **                                                                          **
; **                     Group Extension Definitions                          **
; **                                                                          **
; ****************************************************************************

; 
; *  Searching methods - OPTIONAL
; 

	ENDIF	; CALL_NOT_IN_CARBON

kQ3XMethodType_GroupAcceptObject EQU	'gaco'

kQ3XMethodType_GroupAddObject	EQU		'gado'

kQ3XMethodType_GroupAddObjectBefore EQU	'gaob'

kQ3XMethodType_GroupAddObjectAfter EQU	'gaoa'

kQ3XMethodType_GroupSetPositionObject EQU 'gspo'

kQ3XMethodType_GroupRemovePosition EQU	'grmp'
; 
; *  Searching methods - OPTIONAL - default uses above methods
; 


kQ3XMethodType_GroupGetFirstPositionOfType EQU 'gfrt'

kQ3XMethodType_GroupGetLastPositionOfType EQU 'glst'

kQ3XMethodType_GroupGetNextPositionOfType EQU 'gnxt'

kQ3XMethodType_GroupGetPrevPositionOfType EQU 'gpvt'

kQ3XMethodType_GroupCountObjectsOfType EQU 'gcnt'

kQ3XMethodType_GroupEmptyObjectsOfType EQU 'geot'

kQ3XMethodType_GroupGetFirstObjectPosition EQU 'gfop'

kQ3XMethodType_GroupGetLastObjectPosition EQU 'glop'

kQ3XMethodType_GroupGetNextObjectPosition EQU 'gnop'

kQ3XMethodType_GroupGetPrevObjectPosition EQU 'gpop'
; 
; *  Group Position Methods
; 


kQ3XMethodType_GroupPositionSize EQU	'ggpz'
; typedef unsigned long 				TQ3XMethodTypeGroupPositionSize


kQ3XMethodType_GroupPositionNew	EQU		'ggpn'

kQ3XMethodType_GroupPositionCopy EQU	'ggpc'

kQ3XMethodType_GroupPositionDelete EQU	'ggpd'
; 
; *  View Drawing Helpers
; *  
; *  TQ3XGroupStartIterateMethod
; *
; *      Pass back *object = NULL to NOT call EndIterate iterate
; *      Pass back *object != NULL to draw object
; *       (other side will pass it to EndIterate for deletion!)
; *
; *      *iterator is uninitialized, use for iteration state. Caller should 
; *       ignore it.
; *  
; *  TQ3XGroupEndIterateMethod
; *  
; *      *object is previous object, dispose it or play with it.
; *      Pass back NULL when last iteration has occurred
; *      *iterator is previous value, use for iteration state Caller should 
; *      ignore it.
; 


kQ3XMethodType_GroupStartIterate EQU	'gstd'

kQ3XMethodType_GroupEndIterate	EQU		'gitd'
; 
; *  IO  Helpers
; *  
; *  TQ3XGroupEndReadMethod
; *      Called when a group has been completely read. Group should perform
; *      validation and clean up any reading caches.
; 


kQ3XMethodType_GroupEndRead		EQU		'gerd'
	IF CALL_NOT_IN_CARBON THEN

; *  Q3XGroup_GetPositionPrivate()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern void *Q3XGroup_GetPositionPrivate(TQ3GroupObject group, TQ3GroupPosition position)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Q3XGroup_GetPositionPrivate
	ENDIF



	ENDIF	; CALL_NOT_IN_CARBON
	ENDIF ; __QD3DGROUP__ 


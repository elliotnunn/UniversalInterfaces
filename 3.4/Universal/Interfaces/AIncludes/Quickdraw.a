;
;    File:       Quickdraw.a
;
;    Contains:   Interface to Quickdraw Graphics
;
;    Version:    Technology: 
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 1985-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN
__QUICKDRAW__ SET 1

	IF &TYPE('__COMPONENTS__') = 'UNDEFINED' THEN
	include 'Components.a'
	ENDIF

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__MIXEDMODE__') = 'UNDEFINED' THEN
	include 'MixedMode.a'
	ENDIF
	IF &TYPE('__QUICKDRAWTEXT__') = 'UNDEFINED' THEN
	include 'QuickdrawText.a'
	ENDIF
	IF &TYPE('__CGCONTEXT__') = 'UNDEFINED' THEN
	include 'CGContext.a'
	ENDIF

invalColReq						EQU		-1					;invalid color table request

															; transfer modes 
srcCopy							EQU		0					;the 16 transfer modes
srcOr							EQU		1
srcXor							EQU		2
srcBic							EQU		3
notSrcCopy						EQU		4
notSrcOr						EQU		5
notSrcXor						EQU		6
notSrcBic						EQU		7
patCopy							EQU		8
patOr							EQU		9
patXor							EQU		10
patBic							EQU		11
notPatCopy						EQU		12
notPatOr						EQU		13
notPatXor						EQU		14
notPatBic						EQU		15					; Special Text Transfer Mode 
grayishTextOr					EQU		49
hilitetransfermode				EQU		50
hilite							EQU		50					; Arithmetic transfer modes 
blend							EQU		32
addPin							EQU		33
addOver							EQU		34
subPin							EQU		35
addMax							EQU		37
adMax							EQU		37
subOver							EQU		38
adMin							EQU		39
ditherCopy						EQU		64					; Transparent mode constant 
transparent						EQU		36

italicBit						EQU		1
ulineBit						EQU		2
outlineBit						EQU		3
shadowBit						EQU		4
condenseBit						EQU		5
extendBit						EQU		6

															; QuickDraw color separation constants 
normalBit						EQU		0					;normal screen mapping
inverseBit						EQU		1					;inverse screen mapping
redBit							EQU		4					;RGB additive mapping
greenBit						EQU		3
blueBit							EQU		2
cyanBit							EQU		8					;CMYBk subtractive mapping
magentaBit						EQU		7
yellowBit						EQU		6
blackBit						EQU		5

blackColor						EQU		33					;colors expressed in these mappings
whiteColor						EQU		30
redColor						EQU		205
greenColor						EQU		341
blueColor						EQU		409
cyanColor						EQU		273
magentaColor					EQU		137
yellowColor						EQU		69

picLParen						EQU		0					;standard picture comments
picRParen						EQU		1
clutType						EQU		0					;0 if lookup table
fixedType						EQU		1					;1 if fixed table
directType						EQU		2					;2 if direct values
gdDevType						EQU		0					;0 = monochrome 1 = color

interlacedDevice				EQU		2					; 1 if single pixel lines look bad 
roundedDevice					EQU		5					; 1 if device has been “rounded” into the GrayRgn 
hasAuxMenuBar					EQU		6					; 1 if device has an aux menu bar on it 
burstDevice						EQU		7
ext32Device						EQU		8
ramInit							EQU		10					;1 if initialized from 'scrn' resource
mainScreen						EQU		11					; 1 if main screen 
allInit							EQU		12					; 1 if all devices initialized 
screenDevice					EQU		13					;1 if screen device [not used]
noDriver						EQU		14					; 1 if no driver for this GDevice 
screenActive					EQU		15					;1 if in use
hiliteBit						EQU		7					;flag bit in LMGet/SetHiliteMode
pHiliteBit						EQU		0					;flag bit in LMGet/SetHiliteMode when used with BitClr
defQDColors						EQU		127					;resource ID of clut for default QDColors
															; pixel type 
RGBDirect						EQU		16					; 16 & 32 bits/pixel pixelType value 
															; pmVersion values 
baseAddr32						EQU		4					;pixmap base address is 32-bit address


sysPatListID					EQU		0
iBeamCursor						EQU		1
crossCursor						EQU		2
plusCursor						EQU		3
watchCursor						EQU		4

kQDGrafVerbFrame				EQU		0
kQDGrafVerbPaint				EQU		1
kQDGrafVerbErase				EQU		2
kQDGrafVerbInvert				EQU		3
kQDGrafVerbFill					EQU		4
	IF OLDROUTINENAMES THEN

frame							EQU		0
paint							EQU		1
erase							EQU		2
invert							EQU		3
fill							EQU		4
	ENDIF	; OLDROUTINENAMES
; typedef SInt8 						GrafVerb


chunky							EQU		0
chunkyPlanar					EQU		1
planar							EQU		2
; typedef SInt8 						PixelType

Bits16					RECORD 0
elements				 ds.w	16
sizeof					 EQU *					; size:   $20 (32)
						ENDR



; ***************   IMPORTANT NOTE REGARDING Pattern  **************************************
;   Patterns were originally defined as:
;   
;        C:          typedef unsigned char Pattern[8];
;        Pascal:     Pattern = PACKED ARRAY [0..7] OF 0..255;
;        
;   The old array definition of Pattern would cause 68000 based CPU's to crash in certain circum-
;   stances. The new struct definition is safe, but may require source code changes to compile.
;    
;********************************************************************************************

Pattern					RECORD 0
pat						 ds.b	8				; offset: $0 (0)
sizeof					 EQU *					; size:   $8 (8)
						ENDR
; typedef struct Pattern *				PatPtr

; typedef PatPtr *						PatHandle

; typedef SignedByte 					QDByte

; typedef QDByte *						QDPtr

; typedef QDPtr *						QDHandle

; typedef short 						QDErr


singleDevicesBit				EQU		0
dontMatchSeedsBit				EQU		1
allDevicesBit					EQU		2

singleDevices					EQU		$01
dontMatchSeeds					EQU		$02
allDevices						EQU		$04
; typedef unsigned long 				DeviceLoopFlags

; 
;    PrinterStatusOpcode.  For communication with downloading and printing services.
;

; typedef SInt32 						PrinterStatusOpcode


kPrinterFontStatus				EQU		0
kPrinterScalingStatus			EQU		1
PrinterFontStatus		RECORD 0
oResult					 ds.l	1				; offset: $0 (0)
iFondID					 ds.w	1				; offset: $4 (4)
iStyle					 ds.b	1				; offset: $6 (6)
						 ORG 8
sizeof					 EQU *					; size:   $8 (8)
						ENDR
PrinterScalingStatus	RECORD 0
oScalingFactors			 ds		Point			; offset: $0 (0)
sizeof					 EQU *					; size:   $4 (4)
						ENDR
BitMap					RECORD 0
baseAddr				 ds.l	1				; offset: $0 (0)
rowBytes				 ds.w	1				; offset: $4 (4)
bounds					 ds		Rect			; offset: $6 (6)
sizeof					 EQU *					; size:   $E (14)
						ENDR
; typedef struct BitMap *				BitMapPtr

; typedef BitMapPtr *					BitMapHandle

Cursor					RECORD 0
data					 ds		Bits16			; offset: $0 (0)
mask					 ds		Bits16			; offset: $20 (32)
hotSpot					 ds		Point			; offset: $40 (64)
sizeof					 EQU *					; size:   $44 (68)
						ENDR
; typedef struct Cursor *				CursPtr

; typedef CursPtr *						CursHandle

PenState				RECORD 0
pnLoc					 ds		Point			; offset: $0 (0)
pnSize					 ds		Point			; offset: $4 (4)
pnMode					 ds.w	1				; offset: $8 (8)
pnPat					 ds		Pattern			; offset: $A (10)
sizeof					 EQU *					; size:   $12 (18)
						ENDR
	IF ¬ OPAQUE_TOOLBOX_STRUCTS THEN
MacRegion				RECORD 0
rgnSize					 ds.w	1				; offset: $0 (0)		; size in bytes
rgnBBox					 ds		Rect			; offset: $2 (2)		; enclosing rectangle
sizeof					 EQU *					; size:   $A (10)
						ENDR
Region					RECORD 0
rgnSize					 ds.w	1				; offset: $0 (0)		; size in bytes
rgnBBox					 ds		Rect			; offset: $2 (2)		; enclosing rectangle
sizeof					 EQU *					; size:   $A (10)
						ENDR
; typedef struct MacRegion *			RgnPtr

; typedef RgnPtr *						RgnHandle

	ELSE


	ENDIF
Picture					RECORD 0
picSize					 ds.w	1				; offset: $0 (0)
picFrame				 ds		Rect			; offset: $2 (2)
sizeof					 EQU *					; size:   $A (10)
						ENDR
; typedef struct Picture *				PicPtr

; typedef PicPtr *						PicHandle

MacPolygon				RECORD 0
polySize				 ds.w	1				; offset: $0 (0)
polyBBox				 ds		Rect			; offset: $2 (2)
polyPoints				 ds		Point			; offset: $A (10) <-- really an array of length one
sizeof					 EQU *					; size:   $E (14)
						ENDR
Polygon					RECORD 0
polySize				 ds.w	1				; offset: $0 (0)
polyBBox				 ds		Rect			; offset: $2 (2)
polyPoints				 ds		Point			; offset: $A (10) <-- really an array of length one
sizeof					 EQU *					; size:   $E (14)
						ENDR
; typedef struct MacPolygon *			PolyPtr

; typedef PolyPtr *						PolyHandle

QDProcs					RECORD 0
textProc				 ds.l	1				; offset: $0 (0)
lineProc				 ds.l	1				; offset: $4 (4)
rectProc				 ds.l	1				; offset: $8 (8)
rRectProc				 ds.l	1				; offset: $C (12)
ovalProc				 ds.l	1				; offset: $10 (16)
arcProc					 ds.l	1				; offset: $14 (20)
polyProc				 ds.l	1				; offset: $18 (24)
rgnProc					 ds.l	1				; offset: $1C (28)
bitsProc				 ds.l	1				; offset: $20 (32)
commentProc				 ds.l	1				; offset: $24 (36)
txMeasProc				 ds.l	1				; offset: $28 (40)
getPicProc				 ds.l	1				; offset: $2C (44)
putPicProc				 ds.l	1				; offset: $30 (48)
sizeof					 EQU *					; size:   $34 (52)
						ENDR
; typedef struct QDProcs *				QDProcsPtr


; *  NewQDTextUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDLineUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDRectUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDRRectUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDOvalUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDArcUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDPolyUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDRgnUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDBitsUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDCommentUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDTxMeasUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDGetPicUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDPutPicUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDOpcodeUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDStdGlyphsUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewQDJShieldCursorUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDTextUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDLineUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDRectUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDRRectUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDOvalUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDArcUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDPolyUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDRgnUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDBitsUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDCommentUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDTxMeasUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDGetPicUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDPutPicUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDOpcodeUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDStdGlyphsUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeQDJShieldCursorUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDTextUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDLineUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDRectUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDRRectUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDOvalUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDArcUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDPolyUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDRgnUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDBitsUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDCommentUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDTxMeasUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDGetPicUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDPutPicUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDOpcodeUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDStdGlyphsUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeQDJShieldCursorUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

	IF ¬ OPAQUE_TOOLBOX_STRUCTS THEN
GrafPort				RECORD 0
device					 ds.w	1				; offset: $0 (0)		;  not available in Carbon
portBits				 ds		BitMap			; offset: $2 (2)		;  in Carbon use GetPortBitMapForCopyBits or IsPortColor
portRect				 ds		Rect			; offset: $10 (16)		;  in Carbon use Get/SetPortBounds
visRgn					 ds.l	1				; offset: $18 (24)		;  in Carbon use Get/SetPortVisibleRegion
clipRgn					 ds.l	1				; offset: $1C (28)		;  in Carbon use Get/SetPortClipRegion
bkPat					 ds		Pattern			; offset: $20 (32)		;  not available in Carbon all GrafPorts are CGrafPorts
fillPat					 ds		Pattern			; offset: $28 (40)		;  not available in Carbon all GrafPorts are CGrafPorts
pnLoc					 ds		Point			; offset: $30 (48)		;  in Carbon use GetPortPenLocation or MoveTo
pnSize					 ds		Point			; offset: $34 (52)		;  in Carbon use Get/SetPortPenSize
pnMode					 ds.w	1				; offset: $38 (56)		;  in Carbon use Get/SetPortPenMode
pnPat					 ds		Pattern			; offset: $3A (58)		;  not available in Carbon all GrafPorts are CGrafPorts
pnVis					 ds.w	1				; offset: $42 (66)		;  in Carbon use GetPortPenVisibility or Show/HidePen
txFont					 ds.w	1				; offset: $44 (68)		;  in Carbon use GetPortTextFont or TextFont
txFace					 ds.w	1				; offset: $46 (70)		;  in Carbon use GetPortTextFace or TextFace
; StyleField occupies 16-bits, but only first 8-bits are used
txMode					 ds.w	1				; offset: $48 (72)		;  in Carbon use GetPortTextMode or TextMode
txSize					 ds.w	1				; offset: $4A (74)		;  in Carbon use GetPortTextSize or TextSize
spExtra					 ds.l	1				; offset: $4C (76)		;  in Carbon use GetPortSpExtra or SpaceExtra
fgColor					 ds.l	1				; offset: $50 (80)		;  not available in Carbon 
bkColor					 ds.l	1				; offset: $54 (84)		;  not available in Carbon
colrBit					 ds.w	1				; offset: $58 (88)		;  not available in Carbon
patStretch				 ds.w	1				; offset: $5A (90)		;  not available in Carbon
picSave					 ds.l	1				; offset: $5C (92)		;  in Carbon use IsPortPictureBeingDefined
rgnSave					 ds.l	1				; offset: $60 (96)		;  not available in Carbon
polySave				 ds.l	1				; offset: $64 (100)		;  not available in Carbon
grafProcs				 ds.l	1				; offset: $68 (104)		;  not available in Carbon all GrafPorts are CGrafPorts
sizeof					 EQU *					; size:   $6C (108)
						ENDR
; typedef struct GrafPort *				GrafPtr

; 
; *  This set of definitions "belongs" in Windows.
; *  But, there is a circularity in the headers where Windows includes Controls and
; *  Controls includes Windows. To break the circle, the information
; *  needed by Controls is moved from Windows to Quickdraw.
; 

; typedef GrafPtr 						WindowPtr

; typedef WindowPtr 					DialogPtr

	ELSE






	ENDIF
; typedef WindowPtr 					WindowRef

;  DragConstraint constants to pass to DragGray,DragTheRgn, or ConstrainedDragRgn
; typedef UInt16 						DragConstraint


kNoConstraint					EQU		0
kVerticalConstraint				EQU		1
kHorizontalConstraint			EQU		2

; 
; *  Here ends the list of things that "belong" in Windows.
; 



RGBColor				RECORD 0
red						 ds.w	1				; offset: $0 (0)		; magnitude of red component
green					 ds.w	1				; offset: $2 (2)		; magnitude of green component
blue					 ds.w	1				; offset: $4 (4)		; magnitude of blue component
sizeof					 EQU *					; size:   $6 (6)
						ENDR
; typedef struct RGBColor *				RGBColorPtr

; typedef RGBColorPtr *					RGBColorHdl


; *  NewDragGrayRgnUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewColorSearchUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  NewColorComplementUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeDragGrayRgnUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeColorSearchUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeColorComplementUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeDragGrayRgnUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeColorSearchUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeColorComplementUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

ColorSpec				RECORD 0
value					 ds.w	1				; offset: $0 (0)		; index or other value
rgb						 ds		RGBColor		; offset: $2 (2)		; true color
sizeof					 EQU *					; size:   $8 (8)
						ENDR
; typedef struct ColorSpec *			ColorSpecPtr

CSpecArray				RECORD 0
elements				 ds.b	1 * ColorSpec.sizeof
sizeof					 EQU *					; size:   $8 (8)
						ENDR


ColorTable				RECORD 0
ctSeed					 ds.l	1				; offset: $0 (0)		; unique identifier for table
ctFlags					 ds.w	1				; offset: $4 (4)		; high bit: 0 = PixMap; 1 = device
ctSize					 ds.w	1				; offset: $6 (6)		; number of entries in CTTable
ctTable					 ds		CSpecArray		; offset: $8 (8)		; array [0..0] of ColorSpec
sizeof					 EQU *					; size:   $10 (16)
						ENDR
; typedef struct ColorTable *			CTabPtr

; typedef CTabPtr *						CTabHandle

xColorSpec				RECORD 0
value					 ds.w	1				; offset: $0 (0)		; index or other value
rgb						 ds		RGBColor		; offset: $2 (2)		; true color
xalpha					 ds.w	1				; offset: $8 (8)
sizeof					 EQU *					; size:   $A (10)
						ENDR
; typedef struct xColorSpec *			xColorSpecPtr

xCSpecArray				RECORD 0
elements				 ds.b	1 * xColorSpec.sizeof
sizeof					 EQU *					; size:   $A (10)
						ENDR


MatchRec				RECORD 0
red						 ds.w	1				; offset: $0 (0)
green					 ds.w	1				; offset: $2 (2)
blue					 ds.w	1				; offset: $4 (4)
matchData				 ds.l	1				; offset: $6 (6)
sizeof					 EQU *					; size:   $A (10)
						ENDR
; 
;    QuickTime 3.0 makes PixMap data structure available on non-Mac OS's.
;    In order to implement PixMap in these alternate environments, the PixMap
;    had to be extended. The pmReserved field was changed to pmExt which is
;    a Handle to extra info.  The planeBytes field was changed to pixelFormat.
;    
;    In OS X, Quickdraw also uses the new PixMap data structure.
;

	IF &TYPE('OLDPIXMAPSTRUCT') = 'UNDEFINED' THEN
	IF TARGET_OS_MAC ** TARGET_API_MAC_OS8 THEN
	OLDPIXMAPSTRUCT: SET 1
	ELSE
	OLDPIXMAPSTRUCT: SET 0
	ENDIF
	ENDIF
;  pixel formats

k1MonochromePixelFormat			EQU		$00000001			; 1 bit indexed
k2IndexedPixelFormat			EQU		$00000002			; 2 bit indexed
k4IndexedPixelFormat			EQU		$00000004			; 4 bit indexed
k8IndexedPixelFormat			EQU		$00000008			; 8 bit indexed
k16BE555PixelFormat				EQU		$00000010			; 16 bit BE rgb 555 (Mac)
k24RGBPixelFormat				EQU		$00000018			; 24 bit rgb 
k32ARGBPixelFormat				EQU		$00000020			; 32 bit argb    (Mac)
k1IndexedGrayPixelFormat		EQU		$00000021			; 1 bit indexed gray
k2IndexedGrayPixelFormat		EQU		$00000022			; 2 bit indexed gray
k4IndexedGrayPixelFormat		EQU		$00000024			; 4 bit indexed gray
k8IndexedGrayPixelFormat		EQU		$00000028			; 8 bit indexed gray

;  values for PixMap.pixelFormat

k16LE555PixelFormat				EQU		'L555'				; 16 bit LE rgb 555 (PC)
k16LE5551PixelFormat			EQU		'5551'				; 16 bit LE rgb 5551
k16BE565PixelFormat				EQU		'B565'				; 16 bit BE rgb 565
k16LE565PixelFormat				EQU		'L565'				; 16 bit LE rgb 565
k24BGRPixelFormat				EQU		'24BG'				; 24 bit bgr 
k32BGRAPixelFormat				EQU		'BGRA'				; 32 bit bgra    (Matrox)
k32ABGRPixelFormat				EQU		'ABGR'				; 32 bit abgr    
k32RGBAPixelFormat				EQU		'RGBA'				; 32 bit rgba    
kYUVSPixelFormat				EQU		'yuvs'				; YUV 4:2:2 byte ordering 16-unsigned = 'YUY2'
kYUVUPixelFormat				EQU		'yuvu'				; YUV 4:2:2 byte ordering 16-signed
kYVU9PixelFormat				EQU		'YVU9'				; YVU9 Planar    9
kYUV411PixelFormat				EQU		'Y411'				; YUV 4:1:1 Interleaved  16
kYVYU422PixelFormat				EQU		'YVYU'				; YVYU 4:2:2 byte ordering   16
kUYVY422PixelFormat				EQU		'UYVY'				; UYVY 4:2:2 byte ordering   16
kYUV211PixelFormat				EQU		'Y211'				; YUV 2:1:1 Packed   8
k2vuyPixelFormat				EQU		'2vuy'				; UYVY 4:2:2 byte ordering   16

PixMap					RECORD 0
baseAddr				 ds.l	1				; offset: $0 (0)		; pointer to pixels
rowBytes				 ds.w	1				; offset: $4 (4)		; offset to next line
bounds					 ds		Rect			; offset: $6 (6)		; encloses bitmap
pmVersion				 ds.w	1				; offset: $E (14)		; pixMap version number
packType				 ds.w	1				; offset: $10 (16)		; defines packing format
packSize				 ds.l	1				; offset: $12 (18)		; length of pixel data
hRes					 ds.l	1				; offset: $16 (22)		; horiz. resolution (ppi)
vRes					 ds.l	1				; offset: $1A (26)		; vert. resolution (ppi)
pixelType				 ds.w	1				; offset: $1E (30)		; defines pixel type
pixelSize				 ds.w	1				; offset: $20 (32)		; # bits in pixel
cmpCount				 ds.w	1				; offset: $22 (34)		; # components in pixel
cmpSize					 ds.w	1				; offset: $24 (36)		; # bits per component
planeBytes				 ds.l	1				; offset: $26 (38)		; offset to next plane
pmTable					 ds.l	1				; offset: $2A (42)		; color map for this pixMap
pmReserved				 ds.l	1				; offset: $2E (46)
sizeof					 EQU *					; size:   $32 (50)
						ENDR
; typedef struct PixMap *				PixMapPtr

; typedef PixMapPtr *					PixMapHandle

PixPat					RECORD 0
patType					 ds.w	1				; offset: $0 (0)		; type of pattern
patMap					 ds.l	1				; offset: $2 (2)		; the pattern's pixMap
patData					 ds.l	1				; offset: $6 (6)		; pixmap's data
patXData				 ds.l	1				; offset: $A (10)		; expanded Pattern data
patXValid				 ds.w	1				; offset: $E (14)		; flags whether expanded Pattern valid
patXMap					 ds.l	1				; offset: $10 (16)		; Handle to expanded Pattern data
pat1Data				 ds		Pattern			; offset: $14 (20)		; old-Style pattern/RGB color
sizeof					 EQU *					; size:   $1C (28)
						ENDR
; typedef struct PixPat *				PixPatPtr

; typedef PixPatPtr *					PixPatHandle

CCrsr					RECORD 0
crsrType				 ds.w	1				; offset: $0 (0)		; type of cursor
crsrMap					 ds.l	1				; offset: $2 (2)		; the cursor's pixmap
crsrData				 ds.l	1				; offset: $6 (6)		; cursor's data
crsrXData				 ds.l	1				; offset: $A (10)		; expanded cursor data
crsrXValid				 ds.w	1				; offset: $E (14)		; depth of expanded data (0 if none)
crsrXHandle				 ds.l	1				; offset: $10 (16)		; future use
crsr1Data				 ds		Bits16			; offset: $14 (20)		; one-bit cursor
crsrMask				 ds		Bits16			; offset: $34 (52)		; cursor's mask
crsrHotSpot				 ds		Point			; offset: $54 (84)		; cursor's hotspot
crsrXTable				 ds.l	1				; offset: $58 (88)		; private
crsrID					 ds.l	1				; offset: $5C (92)		; private
sizeof					 EQU *					; size:   $60 (96)
						ENDR
; typedef struct CCrsr *				CCrsrPtr

; typedef CCrsrPtr *					CCrsrHandle

GammaTbl				RECORD 0
gVersion				 ds.w	1				; offset: $0 (0)		; gamma version number
gType					 ds.w	1				; offset: $2 (2)		; gamma data type
gFormulaSize			 ds.w	1				; offset: $4 (4)		; Formula data size
gChanCnt				 ds.w	1				; offset: $6 (6)		; number of channels of data
gDataCnt				 ds.w	1				; offset: $8 (8)		; number of values/channel
gDataWidth				 ds.w	1				; offset: $A (10)		; bits/corrected value (data packed to next larger byte size)
gFormulaData			 ds.w	1				; offset: $C (12) <-- really an array of length one ; data for formulas followed by gamma values
sizeof					 EQU *					; size:   $E (14)
						ENDR
; typedef struct GammaTbl *				GammaTblPtr

; typedef GammaTblPtr *					GammaTblHandle

ITab					RECORD 0
iTabSeed				 ds.l	1				; offset: $0 (0)		; copy of CTSeed from source CTable
iTabRes					 ds.w	1				; offset: $4 (4)		; bits/channel resolution of iTable
iTTable					 ds.b	1				; offset: $6 (6) <-- really an array of length one ; byte colortable index values
						 ORG 8
sizeof					 EQU *					; size:   $8 (8)
						ENDR
; typedef struct ITab *					ITabPtr

; typedef ITabPtr *						ITabHandle

SProcRec				RECORD 0
nxtSrch					 ds.l	1				; offset: $0 (0)		; SProcHndl Handle to next SProcRec
srchProc				 ds.l	1				; offset: $4 (4)		; search procedure proc ptr
sizeof					 EQU *					; size:   $8 (8)
						ENDR
; typedef struct SProcRec *				SProcPtr

; typedef SProcPtr *					SProcHndl

CProcRec				RECORD 0
nxtComp					 ds.l	1				; offset: $0 (0)		; CProcHndl Handle to next CProcRec
compProc				 ds.l	1				; offset: $4 (4)		; complement procedure proc ptr
sizeof					 EQU *					; size:   $8 (8)
						ENDR
; typedef struct CProcRec *				CProcPtr

; typedef CProcPtr *					CProcHndl

; 
;    QuickTime 3.0 makes GDevice data structure available on non-Mac OS's.
;    In order to implement GDevice in these alternate environments, the GDevice
;    had to be extended. The gdReserved field was changed to gdExt which is
;    a Handle to extra info.  
;

	IF &TYPE('OLDGDEVICESTRUCT') = 'UNDEFINED' THEN
	IF TARGET_OS_MAC ** TARGET_API_MAC_OS8 THEN
	OLDGDEVICESTRUCT: SET 1
	ELSE
	OLDGDEVICESTRUCT: SET 0
	ENDIF
	ENDIF


; typedef GDevice *						GDPtr

; typedef GDPtr *						GDHandle

GDevice					RECORD 0
gdRefNum				 ds.w	1				; offset: $0 (0)		; driver's unit number
gdID					 ds.w	1				; offset: $2 (2)		; client ID for search procs
gdType					 ds.w	1				; offset: $4 (4)		; fixed/CLUT/direct
gdITable				 ds.l	1				; offset: $6 (6)		; Handle to inverse lookup table
gdResPref				 ds.w	1				; offset: $A (10)		; preferred resolution of GDITable
gdSearchProc			 ds.l	1				; offset: $C (12)		; search proc list head
gdCompProc				 ds.l	1				; offset: $10 (16)		; complement proc list
gdFlags					 ds.w	1				; offset: $14 (20)		; grafDevice flags word
gdPMap					 ds.l	1				; offset: $16 (22)		; describing pixMap
gdRefCon				 ds.l	1				; offset: $1A (26)		; reference value
gdNextGD				 ds.l	1				; offset: $1E (30)		; GDHandle Handle of next gDevice
gdRect					 ds		Rect			; offset: $22 (34)		;  device's bounds in global coordinates
gdMode					 ds.l	1				; offset: $2A (42)		; device's current mode
gdCCBytes				 ds.w	1				; offset: $2E (46)		; depth of expanded cursor data
gdCCDepth				 ds.w	1				; offset: $30 (48)		; depth of expanded cursor data
gdCCXData				 ds.l	1				; offset: $32 (50)		; Handle to cursor's expanded data
gdCCXMask				 ds.l	1				; offset: $36 (54)		; Handle to cursor's expanded mask
gdReserved				 ds.l	1				; offset: $3A (58)		; future use. MUST BE 0
sizeof					 EQU *					; size:   $3E (62)
						ENDR
GrafVars				RECORD 0
rgbOpColor				 ds		RGBColor		; offset: $0 (0)		; color for addPin  subPin and average
rgbHiliteColor			 ds		RGBColor		; offset: $6 (6)		; color for hiliting
pmFgColor				 ds.l	1				; offset: $C (12)		; palette Handle for foreground color
pmFgIndex				 ds.w	1				; offset: $10 (16)		; index value for foreground
pmBkColor				 ds.l	1				; offset: $12 (18)		; palette Handle for background color
pmBkIndex				 ds.w	1				; offset: $16 (22)		; index value for background
pmFlags					 ds.w	1				; offset: $18 (24)		; flags for Palette Manager
sizeof					 EQU *					; size:   $1A (26)
						ENDR
; typedef struct GrafVars *				GVarPtr

; typedef GVarPtr *						GVarHandle


	IF ¬ OPAQUE_TOOLBOX_STRUCTS THEN


; typedef CGrafPort *					CGrafPtr

	ELSE
; typedef GrafPtr 						CGrafPtr

	ENDIF

CQDProcs				RECORD 0
textProc				 ds.l	1				; offset: $0 (0)
lineProc				 ds.l	1				; offset: $4 (4)
rectProc				 ds.l	1				; offset: $8 (8)
rRectProc				 ds.l	1				; offset: $C (12)
ovalProc				 ds.l	1				; offset: $10 (16)
arcProc					 ds.l	1				; offset: $14 (20)
polyProc				 ds.l	1				; offset: $18 (24)
rgnProc					 ds.l	1				; offset: $1C (28)
bitsProc				 ds.l	1				; offset: $20 (32)
commentProc				 ds.l	1				; offset: $24 (36)
txMeasProc				 ds.l	1				; offset: $28 (40)
getPicProc				 ds.l	1				; offset: $2C (44)
putPicProc				 ds.l	1				; offset: $30 (48)
opcodeProc				 ds.l	1				; offset: $34 (52)
newProc1				 ds.l	1				; offset: $38 (56)		;  this is the StdPix bottleneck -- see ImageCompression.h 
glyphsProc				 ds.l	1				; offset: $3C (60)		;  was newProc2; now used in Unicode text drawing 
printerStatusProc		 ds.l	1				; offset: $40 (64)		;  was newProc3;  now used to communicate status between Printing code and System imaging code 
newProc4				 ds.l	1				; offset: $44 (68)
newProc5				 ds.l	1				; offset: $48 (72)
newProc6				 ds.l	1				; offset: $4C (76)
sizeof					 EQU *					; size:   $50 (80)
						ENDR
; typedef struct CQDProcs *				CQDProcsPtr

	IF ¬ OPAQUE_TOOLBOX_STRUCTS THEN
CGrafPort				RECORD 0
device					 ds.w	1				; offset: $0 (0)		;  not available in Carbon
portPixMap				 ds.l	1				; offset: $2 (2)		;  in Carbon use GetPortPixMap
portVersion				 ds.w	1				; offset: $6 (6)		;  in Carbon use IsPortColor
grafVars				 ds.l	1				; offset: $8 (8)		;  not available in Carbon
chExtra					 ds.w	1				; offset: $C (12)		;  in Carbon use GetPortChExtra
pnLocHFrac				 ds.w	1				; offset: $E (14)		;  in Carbon use Get/SetPortFracHPenLocation
portRect				 ds		Rect			; offset: $10 (16)		;  in Carbon use Get/SetPortBounds
visRgn					 ds.l	1				; offset: $18 (24)		;  in Carbon use Get/SetPortVisibleRegion
clipRgn					 ds.l	1				; offset: $1C (28)		;  in Carbon use Get/SetPortClipRegion
bkPixPat				 ds.l	1				; offset: $20 (32)		;  in Carbon use GetPortBackPixPat or BackPixPat
rgbFgColor				 ds		RGBColor		; offset: $24 (36)		;  in Carbon use GetPortForeColor or RGBForeColor
rgbBkColor				 ds		RGBColor		; offset: $2A (42)		;  in Carbon use GetPortBackColor or RGBBackColor
pnLoc					 ds		Point			; offset: $30 (48)		;  in Carbon use GetPortPenLocation or MoveTo
pnSize					 ds		Point			; offset: $34 (52)		;  in Carbon use Get/SetPortPenSize
pnMode					 ds.w	1				; offset: $38 (56)		;  in Carbon use Get/SetPortPenMode
pnPixPat				 ds.l	1				; offset: $3A (58)		;  in Carbon use Get/SetPortPenPixPat
fillPixPat				 ds.l	1				; offset: $3E (62)		;  in Carbon use GetPortFillPixPat
pnVis					 ds.w	1				; offset: $42 (66)		;  in Carbon use GetPortPenVisibility or Show/HidePen
txFont					 ds.w	1				; offset: $44 (68)		;  in Carbon use GetPortTextFont or TextFont
txFace					 ds.w	1				; offset: $46 (70)		;  in Carbon use GetPortTextFace or TextFace
; StyleField occupies 16-bits, but only first 8-bits are used
txMode					 ds.w	1				; offset: $48 (72)		;  in Carbon use GetPortTextMode or TextMode
txSize					 ds.w	1				; offset: $4A (74)		;  in Carbon use GetPortTextSize or TextSize
spExtra					 ds.l	1				; offset: $4C (76)		;  in Carbon use GetPortSpExtra or SpaceExtra
fgColor					 ds.l	1				; offset: $50 (80)		;  not available in Carbon
bkColor					 ds.l	1				; offset: $54 (84)		;  not available in Carbon
colrBit					 ds.w	1				; offset: $58 (88)		;  not available in Carbon
patStretch				 ds.w	1				; offset: $5A (90)		;  not available in Carbon
picSave					 ds.l	1				; offset: $5C (92)		;  in Carbon use IsPortPictureBeingDefined
rgnSave					 ds.l	1				; offset: $60 (96)		;  in Carbon use IsPortRegionBeingDefined
polySave				 ds.l	1				; offset: $64 (100)		;  in Carbon use IsPortPolyBeingDefined
grafProcs				 ds.l	1				; offset: $68 (104)		;  in Carbon use Get/SetPortGrafProcs
sizeof					 EQU *					; size:   $6C (108)
						ENDR
	ENDIF
	IF OPAQUE_TOOLBOX_STRUCTS THEN
; typedef WindowPtr 					CWindowPtr

	ELSE
; typedef CGrafPtr 						CWindowPtr

	ENDIF	; OPAQUE_TOOLBOX_STRUCTS
ReqListRec				RECORD 0
reqLSize				 ds.w	1				; offset: $0 (0)		; request list size
reqLData				 ds.w	1				; offset: $2 (2) <-- really an array of length one ; request list data
sizeof					 EQU *					; size:   $4 (4)
						ENDR
OpenCPicParams			RECORD 0
srcRect					 ds		Rect			; offset: $0 (0)
hRes					 ds.l	1				; offset: $8 (8)
vRes					 ds.l	1				; offset: $C (12)
version					 ds.w	1				; offset: $10 (16)
reserved1				 ds.w	1				; offset: $12 (18)
reserved2				 ds.l	1				; offset: $14 (20)
sizeof					 EQU *					; size:   $18 (24)
						ENDR

kCursorImageMajorVersion		EQU		$0001
kCursorImageMinorVersion		EQU		$0000
CursorImageRec			RECORD 0
majorVersion			 ds.w	1				; offset: $0 (0)
minorVersion			 ds.w	1				; offset: $2 (2)
cursorPixMap			 ds.l	1				; offset: $4 (4)
cursorBitMask			 ds.l	1				; offset: $8 (8)
sizeof					 EQU *					; size:   $C (12)
						ENDR
; typedef struct CursorImageRec *		CursorImagePtr

	IF CALL_NOT_IN_CARBON THEN

; *  NewQDPrinterStatusUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

	ENDIF	; CALL_NOT_IN_CARBON

; *  NewDeviceLoopDrawingUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

	IF CALL_NOT_IN_CARBON THEN

; *  DisposeQDPrinterStatusUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

	ENDIF	; CALL_NOT_IN_CARBON

; *  DisposeDeviceLoopDrawingUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

	IF CALL_NOT_IN_CARBON THEN

; *  InvokeQDPrinterStatusUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

	ENDIF	; CALL_NOT_IN_CARBON

; *  InvokeDeviceLoopDrawingUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

	IF ¬ OPAQUE_TOOLBOX_STRUCTS ++ ¬ TARGET_API_MAC_CARBON THEN
QDGlobals				RECORD 0
privates				 ds.b	76				; offset: $0 (0)
randSeed				 ds.l	1				; offset: $4C (76)		;  in Carbon use GetQDGlobalsRandomSeed
screenBits				 ds		BitMap			; offset: $50 (80)		;  in Carbon use GetQDGlobalsScreenBits
arrow					 ds		Cursor			; offset: $5E (94)		;  in Carbon use GetQDGlobalsArrow
dkGray					 ds		Pattern			; offset: $A2 (162)		;  in Carbon use GetQDGlobalsDarkGray
ltGray					 ds		Pattern			; offset: $AA (170)		;  in Carbon use GetQDGlobalsLightGray
gray					 ds		Pattern			; offset: $B2 (178)		;  in Carbon use GetQDGlobalsGray
black					 ds		Pattern			; offset: $BA (186)		;  in Carbon use GetQDGlobalsBlack
white					 ds		Pattern			; offset: $C2 (194)		;  in Carbon use GetQDGlobalsWhite
thePort					 ds.l	1				; offset: $CA (202)		;  in Carbon use GetQDGlobalsThePort
sizeof					 EQU *					; size:   $CE (206)
						ENDR
; typedef struct QDGlobals *			QDGlobalsPtr

; typedef QDGlobalsPtr *				QDGlobalsHdl

	ENDIF

;   Often code written in assembly language is compiled outside of an
;   application environment.  In such cases, the Quickdraw globals
;   cannot be access normally (e.g. qd.black).  This kind of code (e.g.
;   INIT's) usually leaches off the currently install Quickdraw globals
;   by knowing that 0(a5) points to qd.thePort, as set by InitGraf().
;   
;   The record CurrentQDGlobals is defined for use in such circumstances.
;   It is biased so that thePort is at offset 0.  Below is an example
;   of using CurrentQDGlobals vs. the old assembly style:
;   
;   ; Get address of Quickdraw global's black into A0
;   
;       Old non-app way:
;               MOVE.L  0(A5),A0
;               LEA     black(A0),A0    ; black was EQU'ed to -16 in QuickEqu.a 
;   
;       New non-app way:
;               MOVE.L  0(A5),A0
;               LEA     CurrentQDGlobals.black(A0),A0
;   
;       New app way:
;               LEA     qd.black,A0     ; elsewhere: qd  DS QDGlobals

CurrentQDGlobals        RECORD  {thePort},INCREMENT
privates                 ds.b   76      ; offset: $FF36 (-202)
randSeed                 ds.l   1       ; offset: $FF82 (-126)
screenBits               ds     BitMap  ; offset: $FF86 (-122)
arrow                    ds     Cursor  ; offset: $FF94 (-108)
dkGray                   ds     Pattern ; offset: $FFD8 (-40)
ltGray                   ds     Pattern ; offset: $FFE0 (-32)
gray                     ds     Pattern ; offset: $FFE8 (-24)
black                    ds     Pattern ; offset: $FFF0 (-16)
white                    ds     Pattern ; offset: $FFF8 (-8)
thePort                  ds.l   1       ; offset: $0000 (0)
sizeof                   EQU    *-CurrentQDGlobals      ; size:   $CE   (206)
                        ENDR


GrafGlobals     EQU         0                       ; A5 offset to globptr

	IF CALL_NOT_IN_CARBON THEN

; *  InitGraf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void InitGraf(void *globalPtr)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InitGraf:	OPWORD	$A86E
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InitGraf
	ENDIF


; *  OpenPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void OpenPort(GrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_OpenPort:	OPWORD	$A86F
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OpenPort
	ENDIF


; *  InitPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void InitPort(GrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InitPort:	OPWORD	$A86D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InitPort
	ENDIF


; *  ClosePort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void ClosePort(GrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ClosePort:	OPWORD	$A87D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ClosePort
	ENDIF


;   These are Carbon only routines. They do nothing at all on
;   Mac OS 8, but work flawlessly on Mac OS X.


	ENDIF	; CALL_NOT_IN_CARBON

; *  LockPortBits()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr LockPortBits(GrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LockPortBits
	ENDIF


; *  UnlockPortBits()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr UnlockPortBits(GrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UnlockPortBits
	ENDIF

;  Break a region up into rectangles.


kQDParseRegionFromTop			EQU		$01
kQDParseRegionFromBottom		EQU		$02
kQDParseRegionFromLeft			EQU		$04
kQDParseRegionFromRight			EQU		$08
kQDParseRegionFromTopLeft		EQU		$05
kQDParseRegionFromBottomRight	EQU		$0A
; typedef SInt32 						QDRegionParseDirection


kQDRegionToRectsMsgInit			EQU		1
kQDRegionToRectsMsgParse		EQU		2
kQDRegionToRectsMsgTerminate	EQU		3

; *  NewRegionToRectsUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  DisposeRegionToRectsUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  InvokeRegionToRectsUPP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   available as macro/inline
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 


; *  QDRegionToRects()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus QDRegionToRects(RgnHandle rgn, QDRegionParseDirection dir, RegionToRectsUPP proc, void *userData)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QDRegionToRects
	ENDIF

	IF ¬ TARGET_OS_MAC THEN
	IF CALL_NOT_IN_CARBON THEN

; *  UpdatePort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSErr UpdatePort(GrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UpdatePort
	ENDIF


; *  GetPortNativeWindow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void *GetPortNativeWindow(GrafPtr macPort)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortNativeWindow
	ENDIF


; *  GetNativeWindowPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal GrafPtr GetNativeWindowPort(void *nativeWindow)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetNativeWindowPort
	ENDIF


; *  MacRegionToNativeRegion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void *MacRegionToNativeRegion(RgnHandle macRegion)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION MacRegionToNativeRegion
	ENDIF


; *  NativeRegionToMacRegion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal RgnHandle NativeRegionToMacRegion(void *nativeRegion)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NativeRegionToMacRegion
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON
	ENDIF
	IF TARGET_OS_WIN32 THEN
	IF CALL_NOT_IN_CARBON THEN

; *  GetPortHWND()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void *GetPortHWND(GrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortHWND
	ENDIF


; *  GetHWNDPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal GrafPtr GetHWNDPort(void *theHWND)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetHWNDPort
	ENDIF


; *  GetPortHDC()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void *GetPortHDC(GrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortHDC
	ENDIF


; *  GetPortHBITMAP()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void *GetPortHBITMAP(GrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortHBITMAP
	ENDIF


; *  GetPortHPALETTE()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void *GetPortHPALETTE(GrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortHPALETTE
	ENDIF


; *  GetPortHFONT()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void *GetPortHFONT(GrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortHFONT
	ENDIF


; *  GetDIBFromPICT()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void *GetDIBFromPICT(PicHandle hPict)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDIBFromPICT
	ENDIF


; *  GetPICTFromDIB()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal PicHandle GetPICTFromDIB(void *h)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPICTFromDIB
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON
	ENDIF	; TARGET_OS_WIN32

; *  [Mac]SetPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPort(GrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetPort:	OPWORD	$A873
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPort
	ENDIF


; *  GetPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GetPort(GrafPtr *port)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetPort:	OPWORD	$A874
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPort
	ENDIF


; *  GrafDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GrafDevice(short device)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GrafDevice:	OPWORD	$A872
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GrafDevice
	ENDIF


; *  SetPortBits()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortBits(const BitMap *bm)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetPortBits:	OPWORD	$A875
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortBits
	ENDIF


; *  PortSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PortSize(short width, short height)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PortSize:	OPWORD	$A876
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PortSize
	ENDIF


; *  MovePortTo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void MovePortTo(short leftGlobal, short topGlobal)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_MovePortTo:	OPWORD	$A877
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION MovePortTo
	ENDIF


; *  SetOrigin()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetOrigin(short h, short v)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetOrigin:	OPWORD	$A878
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetOrigin
	ENDIF


; *  SetClip()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetClip(RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetClip:	OPWORD	$A879
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetClip
	ENDIF


; *  GetClip()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GetClip(RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetClip:	OPWORD	$A87A
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetClip
	ENDIF


; *  ClipRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ClipRect(const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ClipRect:	OPWORD	$A87B
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ClipRect
	ENDIF


; *  BackPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void BackPat(const Pattern *pat)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_BackPat:	OPWORD	$A87C
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BackPat
	ENDIF


; *  InitCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void InitCursor(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InitCursor:	OPWORD	$A850
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InitCursor
	ENDIF


; *  [Mac]SetCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetCursor(const Cursor *crsr)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetCursor:	OPWORD	$A851
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetCursor
	ENDIF


; *  HideCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void HideCursor(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_HideCursor:	OPWORD	$A852
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HideCursor
	ENDIF


; *  [Mac]ShowCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ShowCursor(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ShowCursor:	OPWORD	$A853
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ShowCursor
	ENDIF


; *  ObscureCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ObscureCursor(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ObscureCursor:	OPWORD	$A856
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ObscureCursor
	ENDIF


; *  HidePen()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void HidePen(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_HidePen:	OPWORD	$A896
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HidePen
	ENDIF


; *  ShowPen()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ShowPen(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ShowPen:	OPWORD	$A897
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ShowPen
	ENDIF


; *  GetPen()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GetPen(Point *pt)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetPen:	OPWORD	$A89A
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPen
	ENDIF


; *  GetPenState()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GetPenState(PenState *pnState)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetPenState:	OPWORD	$A898
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPenState
	ENDIF


; *  SetPenState()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPenState(const PenState *pnState)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetPenState:	OPWORD	$A899
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPenState
	ENDIF


; *  PenSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PenSize(short width, short height)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PenSize:	OPWORD	$A89B
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PenSize
	ENDIF


; *  PenMode()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PenMode(short mode)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PenMode:	OPWORD	$A89C
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PenMode
	ENDIF


; *  PenPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PenPat(const Pattern *pat)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PenPat:	OPWORD	$A89D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PenPat
	ENDIF


; *  PenNormal()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PenNormal(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PenNormal:	OPWORD	$A89E
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PenNormal
	ENDIF


; *  MoveTo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void MoveTo(short h, short v)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_MoveTo:	OPWORD	$A893
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION MoveTo
	ENDIF


; *  Move()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void Move(short dh, short dv)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_Move:	OPWORD	$A894
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Move
	ENDIF


; *  [Mac]LineTo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LineTo(short h, short v)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_LineTo:	OPWORD	$A891
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LineTo
	ENDIF


; *  Line()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void Line(short dh, short dv)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_Line:	OPWORD	$A892
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Line
	ENDIF


; *  ForeColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ForeColor(long color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ForeColor:	OPWORD	$A862
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ForeColor
	ENDIF


; *  BackColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void BackColor(long color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_BackColor:	OPWORD	$A863
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BackColor
	ENDIF


; *  ColorBit()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ColorBit(short whichBit)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ColorBit:	OPWORD	$A864
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ColorBit
	ENDIF


; *  [Mac]SetRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetRect(Rect *r, short left, short top, short right, short bottom)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetRect:	OPWORD	$A8A7
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetRect
	ENDIF


; *  [Mac]OffsetRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void OffsetRect(Rect *r, short dh, short dv)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_OffsetRect:	OPWORD	$A8A8
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OffsetRect
	ENDIF


; *  [Mac]InsetRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void InsetRect(Rect *r, short dh, short dv)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InsetRect:	OPWORD	$A8A9
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InsetRect
	ENDIF


; *  SectRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean SectRect(const Rect *src1, const Rect *src2, Rect *dstRect)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SectRect:	OPWORD	$A8AA
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SectRect
	ENDIF


; *  [Mac]UnionRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void UnionRect(const Rect *src1, const Rect *src2, Rect *dstRect)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_UnionRect:	OPWORD	$A8AB
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UnionRect
	ENDIF


; *  [Mac]EqualRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean EqualRect(const Rect *rect1, const Rect *rect2)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_EqualRect:	OPWORD	$A8A6
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EqualRect
	ENDIF


; *  EmptyRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean EmptyRect(const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_EmptyRect:	OPWORD	$A8AE
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EmptyRect
	ENDIF


; *  [Mac]FrameRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FrameRect(const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FrameRect:	OPWORD	$A8A1
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FrameRect
	ENDIF


; *  PaintRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PaintRect(const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PaintRect:	OPWORD	$A8A2
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PaintRect
	ENDIF


; *  EraseRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void EraseRect(const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_EraseRect:	OPWORD	$A8A3
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EraseRect
	ENDIF


; *  [Mac]InvertRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void InvertRect(const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InvertRect:	OPWORD	$A8A4
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InvertRect
	ENDIF


; *  [Mac]FillRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FillRect(const Rect *r, const Pattern *pat)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FillRect:	OPWORD	$A8A5
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FillRect
	ENDIF


; *  FrameOval()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FrameOval(const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FrameOval:	OPWORD	$A8B7
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FrameOval
	ENDIF


; *  PaintOval()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PaintOval(const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PaintOval:	OPWORD	$A8B8
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PaintOval
	ENDIF


; *  EraseOval()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void EraseOval(const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_EraseOval:	OPWORD	$A8B9
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EraseOval
	ENDIF


; *  InvertOval()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void InvertOval(const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InvertOval:	OPWORD	$A8BA
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InvertOval
	ENDIF


; *  FillOval()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FillOval(const Rect *r, const Pattern *pat)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FillOval:	OPWORD	$A8BB
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FillOval
	ENDIF


; *  FrameRoundRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FrameRoundRect(const Rect *r, short ovalWidth, short ovalHeight)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FrameRoundRect:	OPWORD	$A8B0
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FrameRoundRect
	ENDIF


; *  PaintRoundRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PaintRoundRect(const Rect *r, short ovalWidth, short ovalHeight)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PaintRoundRect:	OPWORD	$A8B1
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PaintRoundRect
	ENDIF


; *  EraseRoundRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void EraseRoundRect(const Rect *r, short ovalWidth, short ovalHeight)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_EraseRoundRect:	OPWORD	$A8B2
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EraseRoundRect
	ENDIF


; *  InvertRoundRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void InvertRoundRect(const Rect *r, short ovalWidth, short ovalHeight)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InvertRoundRect:	OPWORD	$A8B3
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InvertRoundRect
	ENDIF


; *  FillRoundRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FillRoundRect(const Rect *r, short ovalWidth, short ovalHeight, const Pattern *pat)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FillRoundRect:	OPWORD	$A8B4
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FillRoundRect
	ENDIF


; *  FrameArc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FrameArc(const Rect *r, short startAngle, short arcAngle)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FrameArc:	OPWORD	$A8BE
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FrameArc
	ENDIF


; *  PaintArc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PaintArc(const Rect *r, short startAngle, short arcAngle)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PaintArc:	OPWORD	$A8BF
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PaintArc
	ENDIF


; *  EraseArc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void EraseArc(const Rect *r, short startAngle, short arcAngle)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_EraseArc:	OPWORD	$A8C0
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EraseArc
	ENDIF


; *  InvertArc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void InvertArc(const Rect *r, short startAngle, short arcAngle)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InvertArc:	OPWORD	$A8C1
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InvertArc
	ENDIF


; *  FillArc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FillArc(const Rect *r, short startAngle, short arcAngle, const Pattern *pat)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FillArc:	OPWORD	$A8C2
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FillArc
	ENDIF


; *  NewRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal RgnHandle NewRgn(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_NewRgn:	OPWORD	$A8D8
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NewRgn
	ENDIF


; *  OpenRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void OpenRgn(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_OpenRgn:	OPWORD	$A8DA
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OpenRgn
	ENDIF


; *  CloseRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void CloseRgn(RgnHandle dstRgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CloseRgn:	OPWORD	$A8DB
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CloseRgn
	ENDIF


; *  BitMapToRegion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr BitMapToRegion(RgnHandle region, const BitMap *bMap)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_BitMapToRegion:	OPWORD	$A8D7
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BitMapToRegion
	ENDIF


; *  HandleToRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void HandleToRgn(Handle oldRegion, RgnHandle region)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HandleToRgn
	ENDIF


; *  RgnToHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in after version 10.0
; 

;
; pascal void RgnToHandle(RgnHandle region, Handle flattenedRgnDataHdl)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RgnToHandle
	ENDIF


; *  DisposeRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DisposeRgn(RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DisposeRgn:	OPWORD	$A8D9
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DisposeRgn
	ENDIF


; *  [Mac]CopyRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void CopyRgn(RgnHandle srcRgn, RgnHandle dstRgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CopyRgn:	OPWORD	$A8DC
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CopyRgn
	ENDIF


; *  SetEmptyRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetEmptyRgn(RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetEmptyRgn:	OPWORD	$A8DD
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetEmptyRgn
	ENDIF


; *  [Mac]SetRectRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetRectRgn(RgnHandle rgn, short left, short top, short right, short bottom)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetRectRgn:	OPWORD	$A8DE
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetRectRgn
	ENDIF


; *  RectRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void RectRgn(RgnHandle rgn, const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_RectRgn:	OPWORD	$A8DF
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RectRgn
	ENDIF


; *  [Mac]OffsetRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void OffsetRgn(RgnHandle rgn, short dh, short dv)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_OffsetRgn:	OPWORD	$A8E0
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OffsetRgn
	ENDIF


; *  InsetRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void InsetRgn(RgnHandle rgn, short dh, short dv)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InsetRgn:	OPWORD	$A8E1
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InsetRgn
	ENDIF


; *  SectRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SectRgn(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SectRgn:	OPWORD	$A8E4
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SectRgn
	ENDIF


; *  [Mac]UnionRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void UnionRgn(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_UnionRgn:	OPWORD	$A8E5
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UnionRgn
	ENDIF


; *  DiffRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DiffRgn(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DiffRgn:	OPWORD	$A8E6
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DiffRgn
	ENDIF


; *  [Mac]XorRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void XorRgn(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_XorRgn:	OPWORD	$A8E7
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION XorRgn
	ENDIF


; *  RectInRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean RectInRgn(const Rect *r, RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_RectInRgn:	OPWORD	$A8E9
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RectInRgn
	ENDIF


; *  [Mac]EqualRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean EqualRgn(RgnHandle rgnA, RgnHandle rgnB)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_EqualRgn:	OPWORD	$A8E3
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EqualRgn
	ENDIF


; *  EmptyRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean EmptyRgn(RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_EmptyRgn:	OPWORD	$A8E2
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EmptyRgn
	ENDIF


; *  [Mac]FrameRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FrameRgn(RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FrameRgn:	OPWORD	$A8D2
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FrameRgn
	ENDIF


; *  [Mac]PaintRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PaintRgn(RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PaintRgn:	OPWORD	$A8D3
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PaintRgn
	ENDIF


; *  EraseRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void EraseRgn(RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_EraseRgn:	OPWORD	$A8D4
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EraseRgn
	ENDIF


; *  [Mac]InvertRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void InvertRgn(RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InvertRgn:	OPWORD	$A8D5
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InvertRgn
	ENDIF


; *  [Mac]FillRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FillRgn(RgnHandle rgn, const Pattern *pat)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FillRgn:	OPWORD	$A8D6
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FillRgn
	ENDIF


; *  ScrollRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ScrollRect(const Rect *r, short dh, short dv, RgnHandle updateRgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ScrollRect:	OPWORD	$A8EF
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ScrollRect
	ENDIF


; *  CopyBits()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void CopyBits(const BitMap *srcBits, const BitMap *dstBits, const Rect *srcRect, const Rect *dstRect, short mode, RgnHandle maskRgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CopyBits:	OPWORD	$A8EC
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CopyBits
	ENDIF


; *  SeedFill()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SeedFill(const void *srcPtr, void *dstPtr, short srcRow, short dstRow, short height, short words, short seedH, short seedV)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SeedFill:	OPWORD	$A839
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SeedFill
	ENDIF


; *  CalcMask()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void CalcMask(const void *srcPtr, void *dstPtr, short srcRow, short dstRow, short height, short words)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CalcMask:	OPWORD	$A838
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CalcMask
	ENDIF


; *  CopyMask()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void CopyMask(const BitMap *srcBits, const BitMap *maskBits, const BitMap *dstBits, const Rect *srcRect, const Rect *maskRect, const Rect *dstRect)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CopyMask:	OPWORD	$A817
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CopyMask
	ENDIF


; *  OpenPicture()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal PicHandle OpenPicture(const Rect *picFrame)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_OpenPicture:	OPWORD	$A8F3
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OpenPicture
	ENDIF


; *  PicComment()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PicComment(short kind, short dataSize, Handle dataHandle)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PicComment:	OPWORD	$A8F2
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PicComment
	ENDIF


; *  ClosePicture()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ClosePicture(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ClosePicture:	OPWORD	$A8F4
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ClosePicture
	ENDIF


; *  DrawPicture()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DrawPicture(PicHandle myPicture, const Rect *dstRect)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DrawPicture:	OPWORD	$A8F6
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DrawPicture
	ENDIF


; *  KillPicture()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void KillPicture(PicHandle myPicture)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_KillPicture:	OPWORD	$A8F5
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KillPicture
	ENDIF


; *  OpenPoly()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal PolyHandle OpenPoly(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_OpenPoly:	OPWORD	$A8CB
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OpenPoly
	ENDIF


; *  ClosePoly()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ClosePoly(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ClosePoly:	OPWORD	$A8CC
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ClosePoly
	ENDIF


; *  KillPoly()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void KillPoly(PolyHandle poly)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_KillPoly:	OPWORD	$A8CD
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION KillPoly
	ENDIF


; *  OffsetPoly()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void OffsetPoly(PolyHandle poly, short dh, short dv)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_OffsetPoly:	OPWORD	$A8CE
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OffsetPoly
	ENDIF


; *  FramePoly()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FramePoly(PolyHandle poly)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FramePoly:	OPWORD	$A8C6
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FramePoly
	ENDIF


; *  PaintPoly()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PaintPoly(PolyHandle poly)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PaintPoly:	OPWORD	$A8C7
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PaintPoly
	ENDIF


; *  ErasePoly()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ErasePoly(PolyHandle poly)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ErasePoly:	OPWORD	$A8C8
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ErasePoly
	ENDIF


; *  InvertPoly()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void InvertPoly(PolyHandle poly)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InvertPoly:	OPWORD	$A8C9
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InvertPoly
	ENDIF


; *  FillPoly()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FillPoly(PolyHandle poly, const Pattern *pat)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FillPoly:	OPWORD	$A8CA
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FillPoly
	ENDIF


; *  SetPt()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPt(Point *pt, short h, short v)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetPt:	OPWORD	$A880
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPt
	ENDIF


; *  LocalToGlobal()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LocalToGlobal(Point *pt)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_LocalToGlobal:	OPWORD	$A870
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LocalToGlobal
	ENDIF


; *  GlobalToLocal()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GlobalToLocal(Point *pt)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GlobalToLocal:	OPWORD	$A871
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GlobalToLocal
	ENDIF


; *  Random()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short Random(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_Random:	OPWORD	$A861
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Random
	ENDIF


; *  StuffHex()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StuffHex(void *thingPtr, ConstStr255Param s)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StuffHex:	OPWORD	$A866
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StuffHex
	ENDIF


; *  [Mac]GetPixel()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean GetPixel(short h, short v)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetPixel:	OPWORD	$A865
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPixel
	ENDIF


; *  ScalePt()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ScalePt(Point *pt, const Rect *srcRect, const Rect *dstRect)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ScalePt:	OPWORD	$A8F8
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ScalePt
	ENDIF


; *  MapPt()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void MapPt(Point *pt, const Rect *srcRect, const Rect *dstRect)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_MapPt:	OPWORD	$A8F9
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION MapPt
	ENDIF


; *  MapRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void MapRect(Rect *r, const Rect *srcRect, const Rect *dstRect)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_MapRect:	OPWORD	$A8FA
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION MapRect
	ENDIF


; *  MapRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void MapRgn(RgnHandle rgn, const Rect *srcRect, const Rect *dstRect)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_MapRgn:	OPWORD	$A8FB
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION MapRgn
	ENDIF


; *  MapPoly()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void MapPoly(PolyHandle poly, const Rect *srcRect, const Rect *dstRect)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_MapPoly:	OPWORD	$A8FC
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION MapPoly
	ENDIF


; *  SetStdProcs()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetStdProcs(QDProcs *procs)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetStdProcs:	OPWORD	$A8EA
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetStdProcs
	ENDIF


; *  StdRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StdRect(GrafVerb verb, const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StdRect:	OPWORD	$A8A0
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StdRect
	ENDIF


; *  StdRRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StdRRect(GrafVerb verb, const Rect *r, short ovalWidth, short ovalHeight)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StdRRect:	OPWORD	$A8AF
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StdRRect
	ENDIF


; *  StdOval()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StdOval(GrafVerb verb, const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StdOval:	OPWORD	$A8B6
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StdOval
	ENDIF


; *  StdArc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StdArc(GrafVerb verb, const Rect *r, short startAngle, short arcAngle)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StdArc:	OPWORD	$A8BD
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StdArc
	ENDIF


; *  StdPoly()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StdPoly(GrafVerb verb, PolyHandle poly)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StdPoly:	OPWORD	$A8C5
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StdPoly
	ENDIF


; *  StdRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StdRgn(GrafVerb verb, RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StdRgn:	OPWORD	$A8D1
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StdRgn
	ENDIF


; *  StdBits()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StdBits(const BitMap *srcBits, const Rect *srcRect, const Rect *dstRect, short mode, RgnHandle maskRgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StdBits:	OPWORD	$A8EB
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StdBits
	ENDIF


; *  StdComment()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StdComment(short kind, short dataSize, Handle dataHandle)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StdComment:	OPWORD	$A8F1
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StdComment
	ENDIF


; *  StdGetPic()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StdGetPic(void *dataPtr, short byteCount)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StdGetPic:	OPWORD	$A8EE
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StdGetPic
	ENDIF


; *  StdPutPic()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StdPutPic(const void *dataPtr, short byteCount)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StdPutPic:	OPWORD	$A8F0
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StdPutPic
	ENDIF


; *  StdOpcode()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StdOpcode(const Rect *fromRect, const Rect *toRect, UInt16 opcode, SInt16 version)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StdOpcode:	OPWORD	$ABF8
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StdOpcode
	ENDIF


; *  AddPt()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void AddPt(Point src, Point *dst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_AddPt:	OPWORD	$A87E
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddPt
	ENDIF


; *  EqualPt()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean EqualPt(Point pt1, Point pt2)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_EqualPt:	OPWORD	$A881
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION EqualPt
	ENDIF


; *  [Mac]PtInRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean PtInRect(Point pt, const Rect *r)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PtInRect:	OPWORD	$A8AD
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PtInRect
	ENDIF


; *  Pt2Rect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void Pt2Rect(Point pt1, Point pt2, Rect *dstRect)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_Pt2Rect:	OPWORD	$A8AC
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Pt2Rect
	ENDIF


; *  PtToAngle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PtToAngle(const Rect *r, Point pt, short *angle)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PtToAngle:	OPWORD	$A8C3
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PtToAngle
	ENDIF


; *  SubPt()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SubPt(Point src, Point *dst)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SubPt:	OPWORD	$A87F
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SubPt
	ENDIF


; *  PtInRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean PtInRgn(Point pt, RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PtInRgn:	OPWORD	$A8E8
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PtInRgn
	ENDIF


; *  StdLine()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void StdLine(Point newPt)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_StdLine:	OPWORD	$A890
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION StdLine
	ENDIF

	IF CALL_NOT_IN_CARBON THEN

; *  OpenCPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void OpenCPort(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_OpenCPort:	OPWORD	$AA00
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OpenCPort
	ENDIF


; *  InitCPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void InitCPort(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InitCPort:	OPWORD	$AA01
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InitCPort
	ENDIF


; *  CloseCPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal void CloseCPort(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CloseCPort:	OPWORD	$AA02
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CloseCPort
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON

; *  NewPixMap()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal PixMapHandle NewPixMap(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_NewPixMap:	OPWORD	$AA03
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NewPixMap
	ENDIF


; *  DisposePixMap()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DisposePixMap(PixMapHandle pm)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DisposePixMap:	OPWORD	$AA04
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DisposePixMap
	ENDIF


; *  CopyPixMap()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void CopyPixMap(PixMapHandle srcPM, PixMapHandle dstPM)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CopyPixMap:	OPWORD	$AA05
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CopyPixMap
	ENDIF


; *  NewPixPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal PixPatHandle NewPixPat(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_NewPixPat:	OPWORD	$AA07
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NewPixPat
	ENDIF


; *  DisposePixPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DisposePixPat(PixPatHandle pp)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DisposePixPat:	OPWORD	$AA08
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DisposePixPat
	ENDIF


; *  CopyPixPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void CopyPixPat(PixPatHandle srcPP, PixPatHandle dstPP)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CopyPixPat:	OPWORD	$AA09
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CopyPixPat
	ENDIF


; *  PenPixPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PenPixPat(PixPatHandle pp)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PenPixPat:	OPWORD	$AA0A
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PenPixPat
	ENDIF


; *  BackPixPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void BackPixPat(PixPatHandle pp)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_BackPixPat:	OPWORD	$AA0B
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION BackPixPat
	ENDIF


; *  GetPixPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal PixPatHandle GetPixPat(short patID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetPixPat:	OPWORD	$AA0C
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPixPat
	ENDIF


; *  MakeRGBPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void MakeRGBPat(PixPatHandle pp, const RGBColor *myColor)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_MakeRGBPat:	OPWORD	$AA0D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION MakeRGBPat
	ENDIF


; *  FillCRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FillCRect(const Rect *r, PixPatHandle pp)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FillCRect:	OPWORD	$AA0E
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FillCRect
	ENDIF


; *  FillCOval()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FillCOval(const Rect *r, PixPatHandle pp)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FillCOval:	OPWORD	$AA0F
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FillCOval
	ENDIF


; *  FillCRoundRect()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FillCRoundRect(const Rect *r, short ovalWidth, short ovalHeight, PixPatHandle pp)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FillCRoundRect:	OPWORD	$AA10
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FillCRoundRect
	ENDIF


; *  FillCArc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FillCArc(const Rect *r, short startAngle, short arcAngle, PixPatHandle pp)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FillCArc:	OPWORD	$AA11
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FillCArc
	ENDIF


; *  FillCRgn()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FillCRgn(RgnHandle rgn, PixPatHandle pp)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FillCRgn:	OPWORD	$AA12
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FillCRgn
	ENDIF


; *  FillCPoly()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void FillCPoly(PolyHandle poly, PixPatHandle pp)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_FillCPoly:	OPWORD	$AA13
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION FillCPoly
	ENDIF


; *  RGBForeColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void RGBForeColor(const RGBColor *color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_RGBForeColor:	OPWORD	$AA14
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RGBForeColor
	ENDIF


; *  RGBBackColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void RGBBackColor(const RGBColor *color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_RGBBackColor:	OPWORD	$AA15
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RGBBackColor
	ENDIF


; *  SetCPixel()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetCPixel(short h, short v, const RGBColor *cPix)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetCPixel:	OPWORD	$AA16
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetCPixel
	ENDIF


; *  SetPortPix()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortPix(PixMapHandle pm)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetPortPix:	OPWORD	$AA06
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortPix
	ENDIF


; *  GetCPixel()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GetCPixel(short h, short v, RGBColor *cPix)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetCPixel:	OPWORD	$AA17
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCPixel
	ENDIF


; *  GetForeColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GetForeColor(RGBColor *color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetForeColor:	OPWORD	$AA19
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetForeColor
	ENDIF


; *  GetBackColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GetBackColor(RGBColor *color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetBackColor:	OPWORD	$AA1A
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetBackColor
	ENDIF


; *  SeedCFill()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SeedCFill(const BitMap *srcBits, const BitMap *dstBits, const Rect *srcRect, const Rect *dstRect, short seedH, short seedV, ColorSearchUPP matchProc, long matchData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SeedCFill:	OPWORD	$AA50
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SeedCFill
	ENDIF


; *  CalcCMask()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void CalcCMask(const BitMap *srcBits, const BitMap *dstBits, const Rect *srcRect, const Rect *dstRect, const RGBColor *seedRGB, ColorSearchUPP matchProc, long matchData)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CalcCMask:	OPWORD	$AA4F
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CalcCMask
	ENDIF


; *  OpenCPicture()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal PicHandle OpenCPicture(const OpenCPicParams *newHeader)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_OpenCPicture:	OPWORD	$AA20
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OpenCPicture
	ENDIF


; *  OpColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void OpColor(const RGBColor *color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_OpColor:	OPWORD	$AA21
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OpColor
	ENDIF


; *  HiliteColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void HiliteColor(const RGBColor *color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_HiliteColor:	OPWORD	$AA22
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION HiliteColor
	ENDIF


; *  DisposeCTable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DisposeCTable(CTabHandle cTable)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DisposeCTable:	OPWORD	$AA24
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DisposeCTable
	ENDIF


; *  GetCTable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal CTabHandle GetCTable(short ctID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetCTable:	OPWORD	$AA18
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCTable
	ENDIF


; *  GetCCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal CCrsrHandle GetCCursor(short crsrID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetCCursor:	OPWORD	$AA1B
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCCursor
	ENDIF


; *  SetCCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetCCursor(CCrsrHandle cCrsr)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetCCursor:	OPWORD	$AA1C
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetCCursor
	ENDIF


; *  AllocCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void AllocCursor(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_AllocCursor:	OPWORD	$AA1D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AllocCursor
	ENDIF


; *  DisposeCCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DisposeCCursor(CCrsrHandle cCrsr)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DisposeCCursor:	OPWORD	$AA26
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DisposeCCursor
	ENDIF

;  GetCIcon(), PlotCIcon(), and DisposeCIcon() moved to Icons.h


; *  SetStdCProcs()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetStdCProcs(CQDProcs *procs)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetStdCProcs:	OPWORD	$AA4E
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetStdCProcs
	ENDIF


; *  GetMaxDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal GDHandle GetMaxDevice(const Rect *globalRect)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetMaxDevice:	OPWORD	$AA27
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetMaxDevice
	ENDIF


; *  GetCTSeed()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal long GetCTSeed(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetCTSeed:	OPWORD	$AA28
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCTSeed
	ENDIF


; *  GetDeviceList()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal GDHandle GetDeviceList(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetDeviceList:	OPWORD	$AA29
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetDeviceList
	ENDIF


; *  GetMainDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal GDHandle GetMainDevice(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetMainDevice:	OPWORD	$AA2A
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetMainDevice
	ENDIF


; *  GetNextDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal GDHandle GetNextDevice(GDHandle curDevice)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetNextDevice:	OPWORD	$AA2B
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetNextDevice
	ENDIF


; *  TestDeviceAttribute()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean TestDeviceAttribute(GDHandle gdh, short attribute)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_TestDeviceAttribute:	OPWORD	$AA2C
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TestDeviceAttribute
	ENDIF


; *  SetDeviceAttribute()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetDeviceAttribute(GDHandle gdh, short attribute, Boolean value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetDeviceAttribute:	OPWORD	$AA2D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetDeviceAttribute
	ENDIF


; *  InitGDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void InitGDevice(short qdRefNum, long mode, GDHandle gdh)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InitGDevice:	OPWORD	$AA2E
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InitGDevice
	ENDIF


; *  NewGDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal GDHandle NewGDevice(short refNum, long mode)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_NewGDevice:	OPWORD	$AA2F
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION NewGDevice
	ENDIF


; *  DisposeGDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DisposeGDevice(GDHandle gdh)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DisposeGDevice:	OPWORD	$AA30
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DisposeGDevice
	ENDIF


; *  SetGDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetGDevice(GDHandle gd)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetGDevice:	OPWORD	$AA31
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetGDevice
	ENDIF


; *  GetGDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal GDHandle GetGDevice(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetGDevice:	OPWORD	$AA32
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetGDevice
	ENDIF


; *  Color2Index()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal long Color2Index(const RGBColor *myColor)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_Color2Index:	OPWORD	$AA33
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Color2Index
	ENDIF


; *  Index2Color()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void Index2Color(long index, RGBColor *aColor)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_Index2Color:	OPWORD	$AA34
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION Index2Color
	ENDIF


; *  InvertColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void InvertColor(RGBColor *myColor)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_InvertColor:	OPWORD	$AA35
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION InvertColor
	ENDIF


; *  RealColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean RealColor(const RGBColor *color)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_RealColor:	OPWORD	$AA36
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RealColor
	ENDIF


; *  GetSubTable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GetSubTable(CTabHandle myColors, short iTabRes, CTabHandle targetTbl)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetSubTable:	OPWORD	$AA37
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetSubTable
	ENDIF


; *  MakeITable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void MakeITable(CTabHandle cTabH, ITabHandle iTabH, short res)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_MakeITable:	OPWORD	$AA39
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION MakeITable
	ENDIF


; *  AddSearch()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void AddSearch(ColorSearchUPP searchProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_AddSearch:	OPWORD	$AA3A
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddSearch
	ENDIF


; *  AddComp()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void AddComp(ColorComplementUPP compProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_AddComp:	OPWORD	$AA3B
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AddComp
	ENDIF


; *  DelSearch()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DelSearch(ColorSearchUPP searchProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DelSearch:	OPWORD	$AA4C
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DelSearch
	ENDIF


; *  DelComp()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DelComp(ColorComplementUPP compProc)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DelComp:	OPWORD	$AA4D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DelComp
	ENDIF


; *  SetClientID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetClientID(short id)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetClientID:	OPWORD	$AA3C
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetClientID
	ENDIF


; *  ProtectEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ProtectEntry(short index, Boolean protect)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ProtectEntry:	OPWORD	$AA3D
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ProtectEntry
	ENDIF


; *  ReserveEntry()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ReserveEntry(short index, Boolean reserve)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ReserveEntry:	OPWORD	$AA3E
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ReserveEntry
	ENDIF


; *  SetEntries()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetEntries(short start, short count, CSpecArray aTable)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SetEntries:	OPWORD	$AA3F
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetEntries
	ENDIF


; *  SaveEntries()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SaveEntries(CTabHandle srcTable, CTabHandle resultTable, ReqListRec *selection)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SaveEntries:	OPWORD	$AA49
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SaveEntries
	ENDIF


; *  RestoreEntries()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void RestoreEntries(CTabHandle srcTable, CTabHandle dstTable, ReqListRec *selection)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_RestoreEntries:	OPWORD	$AA4A
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION RestoreEntries
	ENDIF


; *  QDError()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short QDError(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_QDError:	OPWORD	$AA40
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QDError
	ENDIF


; *  CopyDeepMask()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void CopyDeepMask(const BitMap *srcBits, const BitMap *maskBits, const BitMap *dstBits, const Rect *srcRect, const Rect *maskRect, const Rect *dstRect, short mode, RgnHandle maskRgn)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_CopyDeepMask:	OPWORD	$AA51
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CopyDeepMask
	ENDIF


; *  DeviceLoop()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DeviceLoop(RgnHandle drawingRgn, DeviceLoopDrawingUPP drawingProc, long userData, DeviceLoopFlags flags)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DeviceLoop:	OPWORD	$ABCA
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DeviceLoop
	ENDIF




; *  GetMaskTable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Ptr GetMaskTable(void )
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		; returns:
		;	Ptr             <= A0
		_GetMaskTable:	OPWORD	$A836
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetMaskTable
	ENDIF



; *  GetPattern()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal PatHandle GetPattern(short patternID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetPattern:	OPWORD	$A9B8
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPattern
	ENDIF


; *  [Mac]GetCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal CursHandle GetCursor(short cursorID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetCursor:	OPWORD	$A9B9
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetCursor
	ENDIF


; *  GetPicture()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal PicHandle GetPicture(short pictureID)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_GetPicture:	OPWORD	$A9BC
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPicture
	ENDIF


; *  DeltaPoint()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal long DeltaPoint(Point ptA, Point ptB)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_DeltaPoint:	OPWORD	$A94F
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DeltaPoint
	ENDIF


; *  ShieldCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ShieldCursor(const Rect *shieldRect, Point offsetPt)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_ShieldCursor:	OPWORD	$A855
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ShieldCursor
	ENDIF


; *  ScreenRes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void ScreenRes(short *scrnHRes, short *scrnVRes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_ScreenRes
			move.l              (sp)+,A1
			move.w              $0102,(A1)
			move.l              (sp)+,A1
			move.w              $0104,(A1)
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ScreenRes
	ENDIF


; *  GetIndPattern()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void GetIndPattern(Pattern *thePat, short patternListID, short index)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetIndPattern
	ENDIF

	IF OLDROUTINENAMES THEN
	ENDIF	; OLDROUTINENAMES
; 
;    From ToolUtils.i
;


; *  PackBits()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void PackBits(Ptr *srcPtr, Ptr *dstPtr, short srcBytes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_PackBits:	OPWORD	$A8CF
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION PackBits
	ENDIF


; *  UnpackBits()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void UnpackBits(Ptr *srcPtr, Ptr *dstPtr, short dstBytes)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_UnpackBits:	OPWORD	$A8D0
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION UnpackBits
	ENDIF


; *  SlopeFromAngle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Fixed SlopeFromAngle(short angle)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_SlopeFromAngle:	OPWORD	$A8BC
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SlopeFromAngle
	ENDIF


; *  AngleFromSlope()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short AngleFromSlope(Fixed slope)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		_AngleFromSlope:	OPWORD	$A8C4
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION AngleFromSlope
	ENDIF

;  New transfer modes 

colorXorXFer					EQU		52
noiseXFer						EQU		53
customXFer						EQU		54
;  Custom XFer flags 

kXFer1PixelAtATime				EQU		$00000001			; 1 pixel passed to custom XFer proc
kXFerConvertPixelToRGB32		EQU		$00000002			; All color depths converted to 32 bit RGB
CustomXFerRec			RECORD 0
version					 ds.l	1				; offset: $0 (0)
srcPixels				 ds.l	1				; offset: $4 (4)
destPixels				 ds.l	1				; offset: $8 (8)
resultPixels			 ds.l	1				; offset: $C (12)
refCon					 ds.l	1				; offset: $10 (16)
pixelSize				 ds.l	1				; offset: $14 (20)
pixelCount				 ds.l	1				; offset: $18 (24)
firstPixelHV			 ds		Point			; offset: $1C (28)
destBounds				 ds		Rect			; offset: $20 (32)
sizeof					 EQU *					; size:   $28 (40)
						ENDR
; typedef struct CustomXFerRec *		CustomXFerRecPtr


; *  GetPortCustomXFerProc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr GetPortCustomXFerProc(CGrafPtr port, CustomXFerProcPtr *proc, UInt32 *flags, UInt32 *refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_GetPortCustomXFerProc
			move.l              #$00100019,D0
			dc.w            	$AB1D
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortCustomXFerProc
	ENDIF


; *  SetPortCustomXFerProc()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetPortCustomXFerProc(CGrafPtr port, CustomXFerProcPtr proc, UInt32 flags, UInt32 refCon)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetPortCustomXFerProc
			move.l              #$0010001A,D0
			dc.w            	$AB1D
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortCustomXFerProc
	ENDIF



kCursorComponentsVersion		EQU		$00010001

kCursorComponentType			EQU		'curs'
;  Cursor Component capabilities flags 

cursorDoesAnimate				EQU		$00000001
cursorDoesHardware				EQU		$00000002
cursorDoesUnreadableScreenBits	EQU		$00000004
;  Cursor Component output mode flags 

kRenderCursorInHardware			EQU		$00000001
kRenderCursorInSoftware			EQU		$00000002
;  Cursor Component Info 
CursorInfo				RECORD 0
version					 ds.l	1				; offset: $0 (0)		;  use kCursorComponentsVersion 
capabilities			 ds.l	1				; offset: $4 (4)
animateDuration			 ds.l	1				; offset: $8 (8)		;  approximate time between animate tickles 
bounds					 ds		Rect			; offset: $C (12)
hotspot					 ds		Point			; offset: $14 (20)
reserved				 ds.l	1				; offset: $18 (24)		;  must set to zero 
sizeof					 EQU *					; size:   $1C (28)
						ENDR
;  Cursor Component Selectors 

kCursorComponentInit			EQU		$0001
kCursorComponentGetInfo			EQU		$0002
kCursorComponentSetOutputMode	EQU		$0003
kCursorComponentSetData			EQU		$0004
kCursorComponentReconfigure		EQU		$0005
kCursorComponentDraw			EQU		$0006
kCursorComponentErase			EQU		$0007
kCursorComponentMove			EQU		$0008
kCursorComponentAnimate			EQU		$0009
kCursorComponentLastReserved	EQU		$0050

; *  OpenCursorComponent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr OpenCursorComponent(Component c, ComponentInstance *ci)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_OpenCursorComponent
			move.l              #$0008000B,D0
			dc.w            	$ABE0
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION OpenCursorComponent
	ENDIF


; *  CloseCursorComponent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr CloseCursorComponent(ComponentInstance ci)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CloseCursorComponent
			move.l              #$0004000C,D0
			dc.w            	$ABE0
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CloseCursorComponent
	ENDIF


; *  SetCursorComponent()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr SetCursorComponent(ComponentInstance ci)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_SetCursorComponent
			move.l              #$0004000D,D0
			dc.w            	$ABE0
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetCursorComponent
	ENDIF


; *  CursorComponentChanged()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr CursorComponentChanged(ComponentInstance ci)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CursorComponentChanged
			move.l              #$0004000E,D0
			dc.w            	$ABE0
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CursorComponentChanged
	ENDIF


; *  CursorComponentSetData()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 9.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSErr CursorComponentSetData(ComponentInstance ci, long data)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_CursorComponentSetData
			move.l              #$0008000F,D0
			dc.w            	$ABE0
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CursorComponentSetData
	ENDIF

;  Quickdraw-specific ColorSync matching 
;  Available in CarbonLib... 

; *  IsValidPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsValidPort(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsValidPort
	ENDIF


	IF ACCESSOR_CALLS_ARE_FUNCTIONS THEN
;  GrafPort 
;  Getters 

; *  GetPortPixMap()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal PixMapHandle GetPortPixMap(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortPixMap
	ENDIF


; *  GetPortBitMapForCopyBits()
; *  
; *  Discussion:
; *    GetPortBitMapForCopyBits is provided for the specific purpose of
; *    using the return value as a parameter to CopyBits. The return
; *    value can be used as the srcBits or dstBits parameter to CopyBits
; *    regardless of whether the port is color. If the port parameter is
; *    a color port, however, the returned BitMapPtr does not actually
; *    point to a BitMap; it points to the PixMapHandle and other fields
; *    in the CGrafPort structure. You should not dereference the
; *    BitMapPtr or otherwise depend on its contents unless you've
; *    confirmed that this port is a non-color port.
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0.2 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal const BitMap *GetPortBitMapForCopyBits(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortBitMapForCopyBits
	ENDIF


; *  GetPortBounds()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Rect *GetPortBounds(CGrafPtr port, Rect *rect)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortBounds
	ENDIF


; *  GetPortForeColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal RGBColor *GetPortForeColor(CGrafPtr port, RGBColor *foreColor)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortForeColor
	ENDIF


; *  GetPortBackColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal RGBColor *GetPortBackColor(CGrafPtr port, RGBColor *backColor)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortBackColor
	ENDIF


; *  GetPortOpColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal RGBColor *GetPortOpColor(CGrafPtr port, RGBColor *opColor)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortOpColor
	ENDIF


; *  GetPortHiliteColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal RGBColor *GetPortHiliteColor(CGrafPtr port, RGBColor *hiliteColor)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortHiliteColor
	ENDIF


; *  GetPortGrafProcs()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal CQDProcsPtr GetPortGrafProcs(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortGrafProcs
	ENDIF


; *  GetPortTextFont()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short GetPortTextFont(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortTextFont
	ENDIF


; *  GetPortTextFace()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Style GetPortTextFace(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortTextFace
	ENDIF


; *  GetPortTextMode()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short GetPortTextMode(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortTextMode
	ENDIF


; *  GetPortTextSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short GetPortTextSize(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortTextSize
	ENDIF


; *  GetPortChExtra()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short GetPortChExtra(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortChExtra
	ENDIF


; *  GetPortFracHPenLocation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short GetPortFracHPenLocation(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortFracHPenLocation
	ENDIF


; *  GetPortSpExtra()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Fixed GetPortSpExtra(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortSpExtra
	ENDIF


; *  GetPortPenVisibility()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short GetPortPenVisibility(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortPenVisibility
	ENDIF


; *  GetPortVisibleRegion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal RgnHandle GetPortVisibleRegion(CGrafPtr port, RgnHandle visRgn)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortVisibleRegion
	ENDIF


; *  GetPortClipRegion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal RgnHandle GetPortClipRegion(CGrafPtr port, RgnHandle clipRgn)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortClipRegion
	ENDIF


; *  GetPortBackPixPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal PixPatHandle GetPortBackPixPat(CGrafPtr port, PixPatHandle backPattern)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortBackPixPat
	ENDIF


; *  GetPortPenPixPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal PixPatHandle GetPortPenPixPat(CGrafPtr port, PixPatHandle penPattern)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortPenPixPat
	ENDIF


; *  GetPortFillPixPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal PixPatHandle GetPortFillPixPat(CGrafPtr port, PixPatHandle fillPattern)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortFillPixPat
	ENDIF


; *  GetPortPenSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Point *GetPortPenSize(CGrafPtr port, Point *penSize)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortPenSize
	ENDIF


; *  GetPortPenMode()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 GetPortPenMode(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortPenMode
	ENDIF


; *  GetPortPenLocation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Point *GetPortPenLocation(CGrafPtr port, Point *penLocation)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPortPenLocation
	ENDIF


; *  IsPortRegionBeingDefined()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsPortRegionBeingDefined(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsPortRegionBeingDefined
	ENDIF


; *  IsPortPictureBeingDefined()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsPortPictureBeingDefined(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsPortPictureBeingDefined
	ENDIF


; *  IsPortPolyBeingDefined()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.3 and later
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsPortPolyBeingDefined(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsPortPolyBeingDefined
	ENDIF


; *  IsPortOffscreen()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsPortOffscreen(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsPortOffscreen
	ENDIF


; *  IsPortColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0.2 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsPortColor(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsPortColor
	ENDIF

;  Setters 

; *  SetPortBounds()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortBounds(CGrafPtr port, const Rect *rect)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortBounds
	ENDIF


; *  SetPortOpColor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortOpColor(CGrafPtr port, const RGBColor *opColor)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortOpColor
	ENDIF


; *  SetPortGrafProcs()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortGrafProcs(CGrafPtr port, CQDProcs *procs)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortGrafProcs
	ENDIF


; *  SetPortVisibleRegion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortVisibleRegion(CGrafPtr port, RgnHandle visRgn)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortVisibleRegion
	ENDIF


; *  SetPortClipRegion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortClipRegion(CGrafPtr port, RgnHandle clipRgn)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortClipRegion
	ENDIF


; *  SetPortPenPixPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortPenPixPat(CGrafPtr port, PixPatHandle penPattern)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortPenPixPat
	ENDIF


; *  SetPortFillPixPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.2 and later
; *    CarbonLib:        in CarbonLib 1.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortFillPixPat(CGrafPtr port, PixPatHandle penPattern)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortFillPixPat
	ENDIF


; *  SetPortBackPixPat()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortBackPixPat(CGrafPtr port, PixPatHandle backPattern)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortBackPixPat
	ENDIF


; *  SetPortPenSize()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortPenSize(CGrafPtr port, Point penSize)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortPenSize
	ENDIF


; *  SetPortPenMode()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortPenMode(CGrafPtr port, SInt32 penMode)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortPenMode
	ENDIF


; *  SetPortFracHPenLocation()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetPortFracHPenLocation(CGrafPtr port, short pnLocHFrac)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetPortFracHPenLocation
	ENDIF

;  PixMap 

; *  GetPixBounds()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Rect *GetPixBounds(PixMapHandle pixMap, Rect *bounds)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPixBounds
	ENDIF


; *  GetPixDepth()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal short GetPixDepth(PixMapHandle pixMap)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetPixDepth
	ENDIF

;  QDGlobals 
;  Getters 

; *  GetQDGlobalsRandomSeed()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal long GetQDGlobalsRandomSeed(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetQDGlobalsRandomSeed
	ENDIF


; *  GetQDGlobalsScreenBits()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal BitMap *GetQDGlobalsScreenBits(BitMap *screenBits)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetQDGlobalsScreenBits
	ENDIF


; *  GetQDGlobalsArrow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Cursor *GetQDGlobalsArrow(Cursor *arrow)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetQDGlobalsArrow
	ENDIF


; *  GetQDGlobalsDarkGray()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Pattern *GetQDGlobalsDarkGray(Pattern *dkGray)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetQDGlobalsDarkGray
	ENDIF


; *  GetQDGlobalsLightGray()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Pattern *GetQDGlobalsLightGray(Pattern *ltGray)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetQDGlobalsLightGray
	ENDIF


; *  GetQDGlobalsGray()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Pattern *GetQDGlobalsGray(Pattern *gray)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetQDGlobalsGray
	ENDIF


; *  GetQDGlobalsBlack()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Pattern *GetQDGlobalsBlack(Pattern *black)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetQDGlobalsBlack
	ENDIF


; *  GetQDGlobalsWhite()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Pattern *GetQDGlobalsWhite(Pattern *white)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetQDGlobalsWhite
	ENDIF


; *  GetQDGlobalsThePort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal CGrafPtr GetQDGlobalsThePort(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetQDGlobalsThePort
	ENDIF

;  Setters 

; *  SetQDGlobalsRandomSeed()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetQDGlobalsRandomSeed(long randomSeed)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetQDGlobalsRandomSeed
	ENDIF


; *  SetQDGlobalsArrow()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetQDGlobalsArrow(const Cursor *arrow)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetQDGlobalsArrow
	ENDIF

;  Regions 

; *  GetRegionBounds()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Rect *GetRegionBounds(RgnHandle region, Rect *bounds)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION GetRegionBounds
	ENDIF


; *  IsRegionRectangular()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean IsRegionRectangular(RgnHandle region)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION IsRegionRectangular
	ENDIF

;  Utilities 
;  To prevent upward dependencies, GetWindowFromPort() is defined in Window Manager interface: 
;       pascal WindowRef        GetWindowFromPort(CGrafPtr port); 
;  NewPtr/OpenCPort doesn't work with opaque structures 

; *  CreateNewPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal CGrafPtr CreateNewPort(void )
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateNewPort
	ENDIF


; *  DisposePort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void DisposePort(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION DisposePort
	ENDIF



; *  SetQDError()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in CarbonAccessors.o 1.0.2 and later
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void SetQDError(OSErr err)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SetQDError
	ENDIF

	ENDIF	; ACCESSOR_CALLS_ARE_FUNCTIONS

;   Routines available on Mac OS X to flush buffered window ports...
;   These calls do nothing on Mac OS 8/9. QDIsPortBuffered will always return false there.




; *  QDIsPortBuffered()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean QDIsPortBuffered(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QDIsPortBuffered
	ENDIF


; *  QDIsPortBufferDirty()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean QDIsPortBufferDirty(CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QDIsPortBufferDirty
	ENDIF


; *  QDFlushPortBuffer()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.0.2 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void QDFlushPortBuffer(CGrafPtr port, RgnHandle region)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QDFlushPortBuffer
	ENDIF


; *  QDGetDirtyRegion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus QDGetDirtyRegion(CGrafPtr port, RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QDGetDirtyRegion
	ENDIF


; *  QDSetDirtyRegion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        in CarbonLib 1.1 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus QDSetDirtyRegion(CGrafPtr port, RgnHandle rgn)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QDSetDirtyRegion
	ENDIF



; *  CreateCGContextForPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus CreateCGContextForPort(CGrafPtr inPort, CGContextRef *outContext)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateCGContextForPort
	ENDIF


; *  ClipCGContextToRegion()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus ClipCGContextToRegion(CGContextRef gc, const Rect *portRect, RgnHandle region)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION ClipCGContextToRegion
	ENDIF


; *  SyncCGContextOriginWithPort()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern OSStatus SyncCGContextOriginWithPort(CGContextRef inContext, CGrafPtr port)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION SyncCGContextOriginWithPort
	ENDIF


;   Developers need a way to go from a CGDirectDisplay environment to Quickdraw.
;   The following is equivalent to CreateNewPort(), but instead of taking the
;   portPixMap from the current GDevice, it uses the GDevice corresponding to
;   the CGSDisplayID passed in. If the CGSDisplayID is invalid, the mainDevice
;   is used instead.



; *  CreateNewPortForCGDisplayID()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern CGrafPtr CreateNewPortForCGDisplayID(UInt32 inCGDisplayID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION CreateNewPortForCGDisplayID
	ENDIF


;   In Mac OS X, developers should be able to turn the WaitCursor (spinning wheel)
;   on and off. QDDisplayWaitCursor() keeps track of nested calls.
;   Passing FALSE will resume automatic wait cursor operation.
;   Call this function only from an application in the foreground.



; *  QDDisplayWaitCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available in CarbonLib 1.x, is availble on Mac OS X version 10.0 or later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void QDDisplayWaitCursor(Boolean forceWaitCursor)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QDDisplayWaitCursor
	ENDIF


; *  QDSetPatternOrigin()
; *  
; *  Summary:
; *    Sets the pattern origin for the current port.
; *  
; *  Discussion:
; *    When a QuickDraw drawing operation uses a pattern (either a
; *    black&white pattern or a PixPat), the pattern's image is aligned
; *    with port origin, modified by the pattern origin of the port. For
; *    example, if the background pattern is a 10x10 image, and a
; *    rectangle with coordinates (3, 3, 10, 10) is filled with that
; *    pattern, then only the bottom right 7x7 portion of the pattern
; *    image will be drawn into the rectangle. When drawing a pattern,
; *    QuickDraw always starts with the port origin and then adjusts it
; *    by the pattern origin to determine the actual origin point of
; *    pattern drawing. QDSetPatternOrigin can be used to set the
; *    pattern origin relative to the port origin. It is often used in
; *    conjuction with SetOrigin to maintain the pattern alignment at
; *    (0,0) in a window's content area, regardless of the port origin;
; *    for example, after changing the port's origin to (10,10), an
; *    application might change the port's pattern origin to (-10, -10)
; *    so that patterns are still aligned with the window's content area.
; *  
; *  Parameters:
; *    
; *    origin:
; *      The new pattern origin of the port.
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NQD 8.5 and later
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void QDSetPatternOrigin(Point origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QDSetPatternOrigin
	ENDIF


; *  QDGetPatternOrigin()
; *  
; *  Summary:
; *    Returns the pattern origin of the current port.
; *  
; *  Parameters:
; *    
; *    origin:
; *      On exit, contains the current port's pattern origin.
; *  
; *  Availability:
; *    Non-Carbon CFM:   in NQD 8.5 and later
; *    CarbonLib:        in CarbonLib 1.3 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern void QDGetPatternOrigin(Point *origin)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION QDGetPatternOrigin
	ENDIF


;  
;    LowMem accessor functions previously in LowMem.h
;


; *  LMGetScrVRes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt16 LMGetScrVRes(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetScrVRes         &dest=(sp)
			move.w            $0102,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetScrVRes
	ENDIF


; *  LMSetScrVRes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetScrVRes(SInt16 value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetScrVRes         &src=(sp)+
			move.w            &src,$0102
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetScrVRes
	ENDIF


; *  LMGetScrHRes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt16 LMGetScrHRes(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetScrHRes         &dest=(sp)
			move.w            $0104,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetScrHRes
	ENDIF


; *  LMSetScrHRes()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetScrHRes(SInt16 value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetScrHRes         &src=(sp)+
			move.w            &src,$0104
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetScrHRes
	ENDIF


; *  LMGetMainDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal GDHandle LMGetMainDevice(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetMainDevice      &dest=(sp)
			move.l            $08A4,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetMainDevice
	ENDIF


; *  LMSetMainDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetMainDevice(GDHandle value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetMainDevice      &src=(sp)+
			move.l            &src,$08A4
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetMainDevice
	ENDIF


; *  LMGetDeviceList()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal GDHandle LMGetDeviceList(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetDeviceList      &dest=(sp)
			move.l            $08A8,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetDeviceList
	ENDIF


; *  LMSetDeviceList()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetDeviceList(GDHandle value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetDeviceList      &src=(sp)+
			move.l            &src,$08A8
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetDeviceList
	ENDIF


; *  LMGetQDColors()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Handle LMGetQDColors(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetQDColors        &dest=(sp)
			move.l            $08B0,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetQDColors
	ENDIF


; *  LMSetQDColors()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetQDColors(Handle value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetQDColors        &src=(sp)+
			move.l            &src,$08B0
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetQDColors
	ENDIF


; *  LMGetWidthListHand()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Handle LMGetWidthListHand(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetWidthListHand   &dest=(sp)
			move.l            $08E4,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetWidthListHand
	ENDIF


; *  LMSetWidthListHand()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetWidthListHand(Handle value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetWidthListHand   &src=(sp)+
			move.l            &src,$08E4
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetWidthListHand
	ENDIF


; *  LMGetHiliteMode()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal UInt8 LMGetHiliteMode(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetHiliteMode      &dest=(sp)
			move.b            $0938,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetHiliteMode
	ENDIF


; *  LMSetHiliteMode()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetHiliteMode(UInt8 value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetHiliteMode      &src=(sp)+
			move.b            &src,$0938
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetHiliteMode
	ENDIF


; *  LMGetWidthPtr()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Ptr LMGetWidthPtr(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetWidthPtr        &dest=(sp)
			move.l            $0B10,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetWidthPtr
	ENDIF


; *  LMSetWidthPtr()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetWidthPtr(Ptr value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetWidthPtr        &src=(sp)+
			move.l            &src,$0B10
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetWidthPtr
	ENDIF


; *  LMGetWidthTabHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Handle LMGetWidthTabHandle(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetWidthTabHandle  &dest=(sp)
			move.l            $0B2A,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetWidthTabHandle
	ENDIF


; *  LMSetWidthTabHandle()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetWidthTabHandle(Handle value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetWidthTabHandle  &src=(sp)+
			move.l            &src,$0B2A
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetWidthTabHandle
	ENDIF


; *  LMGetLastSPExtra()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal SInt32 LMGetLastSPExtra(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetLastSPExtra     &dest=(sp)
			move.l            $0B4C,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetLastSPExtra
	ENDIF


; *  LMSetLastSPExtra()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetLastSPExtra(SInt32 value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetLastSPExtra     &src=(sp)+
			move.l            &src,$0B4C
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetLastSPExtra
	ENDIF


; *  LMGetLastFOND()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Handle LMGetLastFOND(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetLastFOND        &dest=(sp)
			move.l            $0BC2,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetLastFOND
	ENDIF


; *  LMSetLastFOND()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetLastFOND(Handle value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetLastFOND        &src=(sp)+
			move.l            &src,$0BC2
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetLastFOND
	ENDIF


; *  LMGetFractEnable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal UInt8 LMGetFractEnable(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetFractEnable     &dest=(sp)
			move.b            $0BF4,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetFractEnable
	ENDIF


; *  LMSetFractEnable()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetFractEnable(UInt8 value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetFractEnable     &src=(sp)+
			move.b            &src,$0BF4
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetFractEnable
	ENDIF


; *  LMGetTheGDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal GDHandle LMGetTheGDevice(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetTheGDevice      &dest=(sp)
			move.l            $0CC8,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetTheGDevice
	ENDIF


; *  LMSetTheGDevice()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetTheGDevice(GDHandle value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetTheGDevice      &src=(sp)+
			move.l            &src,$0CC8
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetTheGDevice
	ENDIF


	IF TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
	ELSE

; *  LMGetHiliteRGB()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMGetHiliteRGB(RGBColor *hiliteRGBValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetHiliteRGB
	ENDIF


; *  LMSetHiliteRGB()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetHiliteRGB(const RGBColor *hiliteRGBValue)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetHiliteRGB
	ENDIF

	ENDIF

; *  LMGetCursorNew()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal Boolean LMGetCursorNew(void)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMGetCursorNew       &dest=(sp)
			move.b            $08CE,&dest
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMGetCursorNew
	ENDIF


; *  LMSetCursorNew()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in InterfaceLib 8.5 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal void LMSetCursorNew(Boolean value)
;
	IF TARGET_OS_MAC ** TARGET_CPU_68K ** ¬ TARGET_RT_MAC_CFM THEN
		Macro
		_LMSetCursorNew       &src=(sp)+
			move.b            &src,$08CE
		EndM
	ELSEIF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION LMSetCursorNew
	ENDIF

















	ENDIF ; __QUICKDRAW__ 


;
;    File:       TextEncodingConverter.a
;
;    Contains:   Text Encoding Conversion Interfaces.
;
;    Version:    Technology: Mac OS 9.0
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1994-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__TEXTENCODINGCONVERTER__') = 'UNDEFINED' THEN
__TEXTENCODINGCONVERTER__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__TEXTCOMMON__') = 'UNDEFINED' THEN
	include 'TextCommon.a'
	ENDIF

; typedef OSType 						TECPluginSignature

; typedef UInt32 						TECPluginVersion

;  plugin signatures 

kTECSignature					EQU		'encv'
kTECUnicodePluginSignature		EQU		'puni'
kTECJapanesePluginSignature		EQU		'pjpn'
kTECChinesePluginSignature		EQU		'pzho'
kTECKoreanPluginSignature		EQU		'pkor'

;  converter object reference 




; typedef OSType 						TECPluginSig

TECConversionInfo		RECORD 0
sourceEncoding			 ds.l	1				; offset: $0 (0)
destinationEncoding		 ds.l	1				; offset: $4 (4)
reserved1				 ds.w	1				; offset: $8 (8)
reserved2				 ds.w	1				; offset: $A (10)
sizeof					 EQU *					; size:   $C (12)
						ENDR
;  return number of encodings types supported by user's configuraton of the encoding converter 

; *  TECCountAvailableTextEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECCountAvailableTextEncodings(ItemCount *numberEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECCountAvailableTextEncodings
	ENDIF

;  fill in an array of type TextEncoding passed in by the user with types of encodings the current configuration of the encoder can handle. 

; *  TECGetAvailableTextEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECGetAvailableTextEncodings(TextEncoding availableEncodings[], ItemCount maxAvailableEncodings, ItemCount *actualAvailableEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECGetAvailableTextEncodings
	ENDIF

;  return number of from-to encoding conversion pairs supported  

; *  TECCountDirectTextEncodingConversions()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECCountDirectTextEncodingConversions(ItemCount *numberOfEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECCountDirectTextEncodingConversions
	ENDIF

;  fill in an array of type TextEncodingPair passed in by the user with types of encoding pairs the current configuration of the encoder can handle. 

; *  TECGetDirectTextEncodingConversions()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECGetDirectTextEncodingConversions(TECConversionInfo availableConversions[], ItemCount maxAvailableConversions, ItemCount *actualAvailableConversions)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECGetDirectTextEncodingConversions
	ENDIF

;  return number of encodings a given encoding can be converter into 

; *  TECCountDestinationTextEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECCountDestinationTextEncodings(TextEncoding inputEncoding, ItemCount *numberOfEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECCountDestinationTextEncodings
	ENDIF

;  fill in an array of type TextEncodingPair passed in by the user with types of encodings pairs the current configuration of the encoder can handle. 

; *  TECGetDestinationTextEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECGetDestinationTextEncodings(TextEncoding inputEncoding, TextEncoding destinationEncodings[], ItemCount maxDestinationEncodings, ItemCount *actualDestinationEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECGetDestinationTextEncodings
	ENDIF

;  get info about a text encoding 

; *  TECGetTextEncodingInternetName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECGetTextEncodingInternetName(TextEncoding textEncoding, Str255 encodingName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECGetTextEncodingInternetName
	ENDIF


; *  TECGetTextEncodingFromInternetName()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECGetTextEncodingFromInternetName(TextEncoding *textEncoding, ConstStr255Param encodingName)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECGetTextEncodingFromInternetName
	ENDIF

;  create/dispose converters 

; *  TECCreateConverter()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECCreateConverter(TECObjectRef *newEncodingConverter, TextEncoding inputEncoding, TextEncoding outputEncoding)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECCreateConverter
	ENDIF


; *  TECCreateConverterFromPath()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECCreateConverterFromPath(TECObjectRef *newEncodingConverter, const TextEncoding inPath[], ItemCount inEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECCreateConverterFromPath
	ENDIF


; *  TECDisposeConverter()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECDisposeConverter(TECObjectRef newEncodingConverter)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECDisposeConverter
	ENDIF

;  convert text encodings 

; *  TECClearConverterContextInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECClearConverterContextInfo(TECObjectRef encodingConverter)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECClearConverterContextInfo
	ENDIF


; *  TECConvertText()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECConvertText(TECObjectRef encodingConverter, ConstTextPtr inputBuffer, ByteCount inputBufferLength, ByteCount *actualInputLength, TextPtr outputBuffer, ByteCount outputBufferLength, ByteCount *actualOutputLength)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECConvertText
	ENDIF


; *  TECFlushText()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECFlushText(TECObjectRef encodingConverter, TextPtr outputBuffer, ByteCount outputBufferLength, ByteCount *actualOutputLength)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECFlushText
	ENDIF

;  one-to-many routines 

; *  TECCountSubTextEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECCountSubTextEncodings(TextEncoding inputEncoding, ItemCount *numberOfEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECCountSubTextEncodings
	ENDIF


; *  TECGetSubTextEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECGetSubTextEncodings(TextEncoding inputEncoding, TextEncoding subEncodings[], ItemCount maxSubEncodings, ItemCount *actualSubEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECGetSubTextEncodings
	ENDIF


; *  TECGetEncodingList()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.1 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECGetEncodingList(TECObjectRef encodingConverter, ItemCount *numEncodings, Handle *encodingList)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECGetEncodingList
	ENDIF


; *  TECCreateOneToManyConverter()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECCreateOneToManyConverter(TECObjectRef *newEncodingConverter, TextEncoding inputEncoding, ItemCount numOutputEncodings, const TextEncoding outputEncodings[])
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECCreateOneToManyConverter
	ENDIF


; *  TECConvertTextToMultipleEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECConvertTextToMultipleEncodings(TECObjectRef encodingConverter, ConstTextPtr inputBuffer, ByteCount inputBufferLength, ByteCount *actualInputLength, TextPtr outputBuffer, ByteCount outputBufferLength, ByteCount *actualOutputLength, TextEncodingRun outEncodingsBuffer[], ItemCount maxOutEncodingRuns, ItemCount *actualOutEncodingRuns)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECConvertTextToMultipleEncodings
	ENDIF


; *  TECFlushMultipleEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECFlushMultipleEncodings(TECObjectRef encodingConverter, TextPtr outputBuffer, ByteCount outputBufferLength, ByteCount *actualOutputLength, TextEncodingRun outEncodingsBuffer[], ItemCount maxOutEncodingRuns, ItemCount *actualOutEncodingRuns)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECFlushMultipleEncodings
	ENDIF

;  international internet info 

; *  TECCountWebTextEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECCountWebTextEncodings(RegionCode locale, ItemCount *numberEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECCountWebTextEncodings
	ENDIF


; *  TECGetWebTextEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECGetWebTextEncodings(RegionCode locale, TextEncoding availableEncodings[], ItemCount maxAvailableEncodings, ItemCount *actualAvailableEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECGetWebTextEncodings
	ENDIF


; *  TECCountMailTextEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECCountMailTextEncodings(RegionCode locale, ItemCount *numberEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECCountMailTextEncodings
	ENDIF


; *  TECGetMailTextEncodings()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECGetMailTextEncodings(RegionCode locale, TextEncoding availableEncodings[], ItemCount maxAvailableEncodings, ItemCount *actualAvailableEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECGetMailTextEncodings
	ENDIF

;  examine text encodings 

; *  TECCountAvailableSniffers()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECCountAvailableSniffers(ItemCount *numberOfEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECCountAvailableSniffers
	ENDIF


; *  TECGetAvailableSniffers()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECGetAvailableSniffers(TextEncoding availableSniffers[], ItemCount maxAvailableSniffers, ItemCount *actualAvailableSniffers)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECGetAvailableSniffers
	ENDIF


; *  TECCreateSniffer()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECCreateSniffer(TECSnifferObjectRef *encodingSniffer, TextEncoding testEncodings[], ItemCount numTextEncodings)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECCreateSniffer
	ENDIF


; *  TECSniffTextEncoding()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECSniffTextEncoding(TECSnifferObjectRef encodingSniffer, TextPtr inputBuffer, ByteCount inputBufferLength, TextEncoding testEncodings[], ItemCount numTextEncodings, ItemCount numErrsArray[], ItemCount maxErrs, ItemCount numFeaturesArray[], ItemCount maxFeatures)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECSniffTextEncoding
	ENDIF


; *  TECDisposeSniffer()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECDisposeSniffer(TECSnifferObjectRef encodingSniffer)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECDisposeSniffer
	ENDIF


; *  TECClearSnifferContextInfo()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.2 and later
; *    CarbonLib:        in CarbonLib 1.0 and later
; *    Mac OS X:         in version 10.0 or later
; 

;
; pascal OSStatus TECClearSnifferContextInfo(TECSnifferObjectRef encodingSniffer)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECClearSnifferContextInfo
	ENDIF

	IF CALL_NOT_IN_CARBON THEN

; *  TECSetBasicOptions()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in TextEncodingConverter 1.5 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; pascal OSStatus TECSetBasicOptions(TECObjectRef encodingConverter, OptionBits controlFlags)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION TECSetBasicOptions
	ENDIF

	ENDIF	; CALL_NOT_IN_CARBON

	ENDIF ; __TEXTENCODINGCONVERTER__ 


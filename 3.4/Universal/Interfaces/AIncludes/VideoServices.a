;
;    File:       VideoServices.a
;
;    Contains:   Video Services Library Interfaces.
;
;    Version:    Technology: PowerSurge 1.0.2
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  Â© 1994-2001 by Apple Computer, Inc., all rights reserved
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__VIDEOSERVICES__') = 'UNDEFINED' THEN
__VIDEOSERVICES__ SET 1

	IF &TYPE('__MACTYPES__') = 'UNDEFINED' THEN
	include 'MacTypes.a'
	ENDIF
	IF &TYPE('__NAMEREGISTRY__') = 'UNDEFINED' THEN
	include 'NameRegistry.a'
	ENDIF
	IF &TYPE('__QUICKDRAW__') = 'UNDEFINED' THEN
	include 'Quickdraw.a'
	ENDIF


kTransparentEncoding			EQU		0
kInvertingEncoding				EQU		1

kTransparentEncodingShift		EQU		$00
kTransparentEncodedPixel		EQU		$01
kInvertingEncodingShift			EQU		$02
kInvertingEncodedPixel			EQU		$04




kHardwareCursorDescriptorMajorVersion EQU $0001
kHardwareCursorDescriptorMinorVersion EQU $0000
; typedef UInt32 *						UInt32Ptr

HardwareCursorDescriptorRec RECORD 0
majorVersion			 ds.w	1				; offset: $0 (0)
minorVersion			 ds.w	1				; offset: $2 (2)
height					 ds.l	1				; offset: $4 (4)
width					 ds.l	1				; offset: $8 (8)
bitDepth				 ds.l	1				; offset: $C (12)
maskBitDepth			 ds.l	1				; offset: $10 (16)
numColors				 ds.l	1				; offset: $14 (20)
colorEncodings			 ds.l	1				; offset: $18 (24)
flags					 ds.l	1				; offset: $1C (28)
supportedSpecialEncodings  ds.l	1				; offset: $20 (32)
specialEncodings		 ds.l	16				; offset: $24 (36)
sizeof					 EQU *					; size:   $64 (100)
						ENDR
; typedef struct HardwareCursorDescriptorRec * HardwareCursorDescriptorPtr


kHardwareCursorInfoMajorVersion	EQU		$0001
kHardwareCursorInfoMinorVersion	EQU		$0000
HardwareCursorInfoRec	RECORD 0
majorVersion			 ds.w	1				; offset: $0 (0)		;  Test tool should check for kHardwareCursorInfoMajorVersion1
minorVersion			 ds.w	1				; offset: $2 (2)		;  Test tool should check for kHardwareCursorInfoMinorVersion1
cursorHeight			 ds.l	1				; offset: $4 (4)
cursorWidth				 ds.l	1				; offset: $8 (8)
colorMap				 ds.l	1				; offset: $C (12)		;  nil or big enough for hardware's max colors
hardwareCursor			 ds.l	1				; offset: $10 (16)
reserved				 ds.l	6				; offset: $14 (20)		;  Test tool should check for 0s
sizeof					 EQU *					; size:   $2C (44)
						ENDR
; typedef struct HardwareCursorInfoRec * HardwareCursorInfoPtr



kVBLInterruptServiceType		EQU		'vbl '
kHBLInterruptServiceType		EQU		'hbl '
kFrameInterruptServiceType		EQU		'fram'
kConnectInterruptServiceType	EQU		'dci '				; Renamed -- Use kFBCheckInterruptServiceType
kFBConnectInterruptServiceType	EQU		'dci '				; Demand to check configuration (Hardware unchanged)
kFBChangedInterruptServiceType	EQU		'chng'				; Demand to rebuild (Hardware has reinitialized on dependent change)
kFBOfflineInterruptServiceType	EQU		'remv'				; Demand to remove framebuffer (Hardware not available on dependent change -- but must not buserror)
kFBOnlineInterruptServiceType	EQU		'add '				; Notice that hardware is available (after being removed)

kMaxDisplayConfigDataSize		EQU		64					; Max data size for VSLSetDisplayConfiguration
; typedef ResType 						InterruptServiceType

; typedef UInt32 						InterruptServiceIDType

; typedef InterruptServiceIDType *		InterruptServiceIDPtr

	IF CALL_NOT_IN_CARBON THEN

; *  VSLNewInterruptService()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in VideoServicesLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSErr VSLNewInterruptService(RegEntryID *serviceDevice, InterruptServiceType serviceType, InterruptServiceIDPtr serviceID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION VSLNewInterruptService
	ENDIF


; *  VSLWaitOnInterruptService()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in VideoServicesLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSErr VSLWaitOnInterruptService(InterruptServiceIDType serviceID, Duration timeout)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION VSLWaitOnInterruptService
	ENDIF


; *  VSLDisposeInterruptService()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in VideoServicesLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSErr VSLDisposeInterruptService(InterruptServiceIDType serviceID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION VSLDisposeInterruptService
	ENDIF


; *  VSLDoInterruptService()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in VideoServicesLib 1.0 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSErr VSLDoInterruptService(InterruptServiceIDType serviceID)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION VSLDoInterruptService
	ENDIF


; *  VSLPrepareCursorForHardwareCursor()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in VideoServicesLib 1.1 and later
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern Boolean VSLPrepareCursorForHardwareCursor(void *cursorRef, HardwareCursorDescriptorPtr hardwareDescriptor, HardwareCursorInfoPtr hwCursorInfo)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION VSLPrepareCursorForHardwareCursor
	ENDIF


; *  VSLSetDisplayConfiguration()
; *  
; *  Availability:
; *    Non-Carbon CFM:   not available
; *    CarbonLib:        not available
; *    Mac OS X:         not available
; 

;
; extern OSErr VSLSetDisplayConfiguration(RegEntryID *device, RegPropertyName *propertyName, void *configData, long configDataSize)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION VSLSetDisplayConfiguration
	ENDIF


	ENDIF	; CALL_NOT_IN_CARBON
	ENDIF ; __VIDEOSERVICES__ 


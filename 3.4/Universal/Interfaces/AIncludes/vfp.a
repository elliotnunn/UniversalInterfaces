;
;    File:       vfp.a
;
;    Contains:   MathLib style functions for vectors
;
;    Version:    Technology: 1.0
;                Release:    Universal Interfaces 3.4
;
;    Copyright:  © 1999-2001 by Apple Computer, Inc., all rights reserved.
;
;    Bugs?:      For bug reports, consult the following page on
;                the World Wide Web:
;
;                    http://developer.apple.com/bugreporter/
;
;
	IF &TYPE('__VFP__') = 'UNDEFINED' THEN
__VFP__ SET 1

	IF &TYPE('__CONDITIONALMACROS__') = 'UNDEFINED' THEN
	include 'ConditionalMacros.a'
	ENDIF
; 
;———————————————————————————————————————————————————————————————————————————————
;                                                                                
;    A collection of numerical functions designed to facilitate a wide         
;    range of numerical programming for the Altivec Programming model.       
;                                                                                
;———————————————————————————————————————————————————————————————————————————————
;

	IF &TYPE('__VEC__') <> 'UNDEFINED' THEN
; 
;————————————————————————[ Computational Functions]—————————————————————————————
;                                                                                
;    vdivf        C = A ÷ B                                                          
;    vsqrtf       B = √A                                                         
;    vrsqrtf      B = 1/√A                                                       
;                                                                                
;———————————————————————————————————————————————————————————————————————————————
;


; *  vdivf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vdivf(vector float A, vector float B)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vdivf
	ENDIF


; *  vsqrtf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vsqrtf(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vsqrtf
	ENDIF


; *  vrsqrtf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vrsqrtf(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vrsqrtf
	ENDIF



; 
;——————————————————————————[ Exponential Functions]—————————————————————————————
;                                                                                
;    vexpf       B = Exp(A)                                                      
;    vexpm1f     ExpM1(x) = Exp(x) - 1.  But, for small enough arguments,        
;                ExpM1(x) is expected to be more accurate than Exp(x) - 1.       
;    vlogf       B = Log(A)                                                      
;    vlog1pf     Log1P = Log(1 + x). But, for small enough arguments,            
;                Log1P is expected to be more accurate than Log(1 + x).          
;    vlogbf      Extracts the exponent of its argument, as a signed integral     
;                value. A subnormal argument is treated as though it were first  
;                normalized. Thus:                                               
;                1   <=   x * 2^(-logb(x))   <   2                           
;    vscalbf     Computes x * 2^n efficently.  This is not normally done by      
;                computing 2^n explicitly.                                       
;                                                                                
;———————————————————————————————————————————————————————————————————————————————
;


; *  vexpf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vexpf(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vexpf
	ENDIF


; *  vexpm1f()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vexpm1f(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vexpm1f
	ENDIF


; *  vlogf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vlogf(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vlogf
	ENDIF


; *  vlog1pf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vlog1pf(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vlog1pf
	ENDIF


; *  vlogbf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vlogbf(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vlogbf
	ENDIF


; *  vscalbf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vscalbf(vector float X, vector signed int n)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vscalbf
	ENDIF



; 
;———————————————————————————[ Auxiliary Functions]——————————————————————————————
;                                                                                
;    vfabf           Absolute value is part of the programming model, however    
;                    completeness it is included in the library.                 
;    vcopysignf      Produces a value with the magnitude of its first argument   
;                    and sign of its second argument.  NOTE: the order of the    
;                    arguments matches the recommendation of the IEEE 754        
;                    floating point standard,  which is opposite from the SANE   
;                    copysign function.                                          
;    vnextafterf     Computes the next representable value after 'x' in the      
;                    direction of 'y'.  if x == y, then y is returned.           
;                                                                                
;———————————————————————————————————————————————————————————————————————————————
;


; *  vfabf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vfabf(vector float v)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vfabf
	ENDIF


; *  vcopysignf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vcopysignf(vector float arg2, vector float arg1)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vcopysignf
	ENDIF


; *  vnextafterf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vnextafterf(vector float x, vector float y)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vnextafterf
	ENDIF



; 
;—————————————————————————————[ Inquiry Functions]——————————————————————————————
;                                                                                
;    vclassifyf      Returns one of the FP_≈ values.                             
;    vsignbitf       Non-zero if and only if the sign of the argument x is       
;                    negative.  This includes, NaNs, infinities and zeros.       
;                                                                                
;———————————————————————————————————————————————————————————————————————————————
;


; *  vclassifyf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector unsigned int vclassifyf(vector float arg)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vclassifyf
	ENDIF


; *  vsignbitf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector unsigned int vsignbitf(vector float arg)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vsignbitf
	ENDIF



; 
;—————————————————————————[ Transcendental Functions]————————————————————————————
;                                                                                
;    vsinf           B = Sin(A).                                                 
;    vcosf           B = Cos(A).                                                 
;    vtanf           B = Tan(A).                                                 
;                                                                                
;———————————————————————————————————————————————————————————————————————————————
;


; *  vsinf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vsinf(vector float arg)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vsinf
	ENDIF


; *  vcosf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vcosf(vector float arg)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vcosf
	ENDIF


; *  vtanf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vtanf(vector float arg)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vtanf
	ENDIF



; 
;—————————————————————————[ Trigonometric Functions]————————————————————————————
;                                                                                
;    vasinf      result is in [-pi/2,pi/2].                                      
;    vacosf      result is in [0,pi].                                            
;    vatanf      result is in [-pi/2,pi/2].                                      
;    vatan2f     Computes the arc tangent of y/x in [-pi,pi] using the sign of   
;                both arguments to determine the quadrant of the computed value. 
;                                                                                
;———————————————————————————————————————————————————————————————————————————————
;


; *  vasinf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vasinf(vector float arg)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vasinf
	ENDIF


; *  vacosf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vacosf(vector float arg)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vacosf
	ENDIF


; *  vatanf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vatanf(vector float arg)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vatanf
	ENDIF


; *  vatan2f()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vatan2f(vector float arg1, vector float arg2)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vatan2f
	ENDIF



; 
;——————————————————————————[ Hyperbolic Functions]——————————————————————————————
;                                                                                
;    vsinhf      Sine Hyperbolic.                                                
;    vcoshf      Cosine Hyperbolic.                                              
;    vtanhf      Tangent Hyperbolic.                                             
;    vasinhf     Arcsine Hyperbolic.
;    vacoshf     Arccosine Hyperbolic.
;    vatanhf     Atctangent Hyperbolic.
;                                                                                
;———————————————————————————————————————————————————————————————————————————————
;


; *  vsinhf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vsinhf(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vsinhf
	ENDIF


; *  vcoshf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vcoshf(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vcoshf
	ENDIF


; *  vtanhf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vtanhf(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vtanhf
	ENDIF


; *  vasinhf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vasinhf(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vasinhf
	ENDIF


; *  vacoshf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vacoshf(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vacoshf
	ENDIF


; *  vatanhf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vatanhf(vector float X)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vatanhf
	ENDIF



; 
;———————————————————————————[ Remainder Functions]——————————————————————————————
;                                                                                
;    vfmodf          B = X mod Y.                                                
;    vremainderf     IEEE 754 floating point standard for remainder.             
;    vremquof        SANE remainder.  It stores into 'quotient' the 7 low-order  
;                    bits of the integer quotient x/y, such that:                
;                    -127 <= quotient <= 127.                                
;                                                                                
;———————————————————————————————————————————————————————————————————————————————
;


; *  vfmodf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vfmodf(vector float X, vector float Y)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vfmodf
	ENDIF


; *  vremainderf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vremainderf(vector float X, vector float Y)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vremainderf
	ENDIF


; *  vremquof()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vremquof(vector float X, vector float Y, vector unsigned int *QUO)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vremquof
	ENDIF



; 
;——————————————————————————————[ Power Functions]——————————————————————————————
;                                                                                
;    vipowf          Returns x raised to the integer power of y.                 
;    vpowf           Returns x raised to the power of y.  Result is more         
;                    accurate than using exp(log(x)*y).                          
;                                                                                
;———————————————————————————————————————————————————————————————————————————————
;


; *  vipowf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vipowf(vector float X, vector signed int Y)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vipowf
	ENDIF


; *  vpowf()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector float vpowf(vector float X, vector float Y)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vpowf
	ENDIF



; 
;———————————————————————————————————————————————————————————————————————————————
;    Useful                                                                      
;———————————————————————————————————————————————————————————————————————————————
;


; *  vtablelookup()
; *  
; *  Availability:
; *    Non-Carbon CFM:   in vecLib 1.0 and later
; *    CarbonLib:        not in Carbon, but vecLib is compatible with Carbon
; *    Mac OS X:         in version 10.0 or later
; 

;
; extern vector unsigned int vtablelookup(vector signed int Index_Vect, unsigned long *Table)
;
	IF TARGET_OS_MAC ** TARGET_RT_MAC_CFM THEN
		IMPORT_CFM_FUNCTION vtablelookup
	ENDIF

	ENDIF
	ENDIF ; __VFP__ 

